{
	"id": "d571612c4282ee601c78d6c68e62dca6",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"SCTERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ISCT.sol\";\nimport \"./interfaces/IERC20Permit.sol\";\nimport \"./lib/ERC20Permit.sol\";\nimport \"./lib/SolidDaoManaged.sol\";\n\n/**\n * @title SCT ERC-20 Token\n * @author Solid World DAO\n * @notice SCT Token\n */\ncontract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {\n\n    constructor(address _authority)\n    ERC20(\"SCT\", \"SCT\", 9)\n    ERC20Permit(\"SCT\")\n    SolidDaoManaged(ISolidDaoManagement(_authority)){}\n\n    function mint(address account_, uint256 amount_) external override onlyVault {\n        _mint(account_, amount_);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address account_, uint256 amount_) external override {\n        _burnFrom(account_, amount_);\n    }\n\n    function _burnFrom(address account_, uint256 amount_) internal {\n        uint256 senderAllowance = allowance(account_, msg.sender);\n        require(senderAllowance - amount_ >= 0, \"ERC20: burn amount exceeds allowance\");\n        senderAllowance -= amount_;\n        _approve(account_, msg.sender, senderAllowance);\n        _burn(account_, amount_);\n    }\n}\n"
			},
			"lib/SolidDaoManaged.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"../interfaces/ISolidDaoManagement.sol\";\n\n/**\n * @title Solid Dao Managed\n * @author Solid World DAO\n * @notice Abstract contratc to implement Solid Dao Management and access control modifiers \n */\nabstract contract SolidDaoManaged {\n\n    /**\n    * @dev Emitted on setAuthority()\n    * @param authority Address of Solid Dao Management smart contract\n    **/\n    event AuthorityUpdated(ISolidDaoManagement indexed authority);\n\n    string UNAUTHORIZED = \"UNAUTHORIZED\";\n\n    ISolidDaoManagement public authority;\n\n    constructor(ISolidDaoManagement _authority) {\n        authority = _authority;\n        emit AuthorityUpdated(_authority);\n    }\n    \n    /**\n    * @notice Function modifier that can be used in other smart contracts\n    * @dev Only governor address can call functions marked by this modifier\n    **/\n    modifier onlyGovernor() {\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\n        _;\n    }\n    \n    /**\n    * @notice Function modifier that can be used in other smart contracts\n    * @dev Only guardian address can call functions marked by this modifier\n    **/\n    modifier onlyGuardian() {\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\n        _;\n    }\n    \n    /**\n    * @notice Function modifier that can be used in other smart contracts\n    * @dev Only policy address can call functions marked by this modifier\n    **/\n    modifier onlyPolicy() {\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\n        _;\n    }\n\n    /**\n    * @notice Function modifier that can be used in other smart contracts\n    * @dev Only vault address can call functions marked by this modifier\n    **/\n    modifier onlyVault() {\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\n        _;\n    }\n\n    /**\n    * @notice Function to set and update Solid Dao Management smart contract address\n    * @dev Emit AuthorityUpdated event\n    * @param _newAuthority Address of the new Solid Dao Management smart contract\n    */ \n    function setAuthority(ISolidDaoManagement _newAuthority) external onlyGovernor {\n        authority = _newAuthority;\n        emit AuthorityUpdated(_newAuthority);\n    }\n}\n"
			},
			"lib/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity 0.8.13;\n\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"../tokens/ERC20.sol\";\nimport \"./EIP712.sol\";\nimport \"./ECDSA.sol\";\nimport \"./Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
			},
			"interfaces/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}"
			},
			"interfaces/ISCT.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport \"./IERC20.sol\";\n\ninterface ISCT is IERC20 {\n  function mint(address account_, uint256 amount_) external;\n\n  function burn(uint256 amount) external;\n\n  function burnFrom(address account_, uint256 amount_) external;\n}\n"
			},
			"interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
			},
			"interfaces/ISolidDaoManagement.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\ninterface ISolidDaoManagement {\n    \n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);    \n\n    event GovernorPulled(address indexed from, address indexed to);\n    event GuardianPulled(address indexed from, address indexed to);\n    event PolicyPulled(address indexed from, address indexed to);\n    event VaultPulled(address indexed from, address indexed to);\n    \n    function governor() external view returns (address);\n    function guardian() external view returns (address);\n    function policy() external view returns (address);\n    function vault() external view returns (address);\n}"
			},
			"lib/Counters.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}"
			},
			"lib/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity 0.8.13;\n\nimport \"./Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}"
			},
			"lib/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity 0.8.13;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}"
			},
			"tokens/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity 0.8.13;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"../lib/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 internal immutable _decimals;\n\n    /**\n     * @dev Sets the values for {name}, {symbol} and {decimals}.\n     */\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
			},
			"lib/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
			},
			"interfaces/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity 0.8.13;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
			},
			"lib/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity 0.8.13;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"SCTERC20.sol": {
				"SCTERC20Token": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_authority",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISolidDaoManagement",
									"name": "authority",
									"type": "address"
								}
							],
							"name": "AuthorityUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "authority",
							"outputs": [
								{
									"internalType": "contract ISolidDaoManagement",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISolidDaoManagement",
									"name": "_newAuthority",
									"type": "address"
								}
							],
							"name": "setAuthority",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Solid World DAO",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"setAuthority(address)": {
								"details": "Emit AuthorityUpdated event",
								"params": {
									"_newAuthority": "Address of the new Solid Dao Management smart contract"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"title": "SCT ERC-20 Token",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/SolidDaoManaged.sol\":494:530  string UNAUTHORIZED = \"UNAUTHORIZED\" */\n  0x01a0\n    /* \"SCTERC20.sol\":316:1223  contract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {... */\n  0x40\n    /* \"lib/SolidDaoManaged.sol\":494:530  string UNAUTHORIZED = \"UNAUTHORIZED\" */\n  mstore\n  0x0c\n    /* \"SCTERC20.sol\":316:1223  contract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {... */\n  0x0160\n    /* \"lib/SolidDaoManaged.sol\":494:530  string UNAUTHORIZED = \"UNAUTHORIZED\" */\n  dup2\n  swap1\n  mstore\n  shl(0xa2, 0x15539055551213d492569151)\n  0x0180\n  swap1\n  dup2\n  mstore\n  tag_1\n  swap2\n  0x07\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_1:\n  pop\n    /* \"SCTERC20.sol\":384:520  constructor(address _authority)... */\n  callvalue\n  dup1\n  iszero\n  tag_3\n  jumpi\n  0x00\n  dup1\n  revert\ntag_3:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_4\n  swap2\n  tag_5\n  jump\t// in\ntag_4:\n    /* \"SCTERC20.sol\":506:516  _authority */\n  dup1\n    /* \"lib/ERC20Permit.sol\":1762:1814  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xea, 0x14d0d5)\n  dup2\n  mstore\n  pop\n    /* \"lib/ERC20Permit.sol\":1801:1805  name */\n  dup1\n    /* \"lib/EIP712.sol\":2455:3057  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n  pop\n    /* \"tokens/ERC20.sol\":1804:1965  constructor(string memory name_, string memory symbol_, uint8 decimals_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xea, 0x14d0d5)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x03\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xea, 0x14d0d5)\n  dup2\n  mstore\n  pop\n    /* \"SCTERC20.sol\":440:441  9 */\n  0x09\n    /* \"tokens/ERC20.sol\":1895:1900  name_ */\n  dup3\n    /* \"tokens/ERC20.sol\":1887:1892  _name */\n  0x03\n    /* \"tokens/ERC20.sol\":1887:1900  _name = name_ */\n  swap1\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  swap1\n  tag_12\n  swap3\n  swap2\n  swap1\n  tag_2\n  jump\t// in\ntag_12:\n  pop\n    /* \"tokens/ERC20.sol\":1910:1927  _symbol = symbol_ */\n  dup2\n  mload\n  tag_13\n  swap1\n    /* \"tokens/ERC20.sol\":1910:1917  _symbol */\n  0x04\n  swap1\n    /* \"tokens/ERC20.sol\":1910:1927  _symbol = symbol_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_2\n  jump\t// in\ntag_13:\n  pop\n    /* \"tokens/ERC20.sol\":1937:1958  _decimals = decimals_ */\n  0xff\n  and\n  0x80\n  mstore\n  pop\n  pop\n    /* \"lib/EIP712.sol\":2541:2563  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"lib/EIP712.sol\":2597:2622  keccak256(bytes(version)) */\n  dup3\n  mload\n  swap2\n  dup4\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"lib/EIP712.sol\":2778:2803  _HASHED_NAME = hashedName */\n  0x0100\n  dup3\n  swap1\n  mstore\n    /* \"lib/EIP712.sol\":2813:2844  _HASHED_VERSION = hashedVersion */\n  0x0120\n  dup2\n  swap1\n  mstore\n    /* \"lib/EIP712.sol\":2873:2886  block.chainid */\n  chainid\n    /* \"lib/EIP712.sol\":2854:2886  _CACHED_CHAIN_ID = block.chainid */\n  0xc0\n  mstore\n    /* \"lib/EIP712.sol\":2651:2768  keccak256(... */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"lib/EIP712.sol\":2923:2981  _buildDomainSeparator(typeHash, hashedName, hashedVersion) */\n  tag_15\n    /* \"lib/EIP712.sol\":2651:2768  keccak256(... */\n  dup2\n    /* \"lib/EIP712.sol\":2541:2563  keccak256(bytes(name)) */\n  dup5\n    /* \"lib/EIP712.sol\":2597:2622  keccak256(bytes(version)) */\n  dup5\n    /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n  0x20\n  dup2\n  add\n    /* \"#utility.yul\":568:593   */\n  dup6\n  swap1\n  mstore\n    /* \"#utility.yul\":609:627   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":602:636   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":652:670   */\n  0x60\n  dup2\n  add\n    /* \"#utility.yul\":645:679   */\n  dup3\n  swap1\n  mstore\n    /* \"lib/EIP712.sol\":3677:3690  block.chainid */\n  chainid\n    /* \"#utility.yul\":695:713   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":688:722   */\n  mstore\n    /* \"lib/EIP712.sol\":3700:3704  this */\n  address\n    /* \"#utility.yul\":738:757   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":731:792   */\n  mstore\n    /* \"lib/EIP712.sol\":3597:3604  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":540:559   */\n  0xc0\n  add\n    /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"lib/EIP712.sol\":3623:3707  keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"lib/EIP712.sol\":3616:3707  return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"lib/EIP712.sol\":3457:3714  function _buildDomainSeparator(... */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\n    /* \"lib/EIP712.sol\":2923:2981  _buildDomainSeparator(typeHash, hashedName, hashedVersion) */\ntag_15:\n    /* \"lib/EIP712.sol\":2896:2981  _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion) */\n  0xa0\n  mstore\n    /* \"lib/EIP712.sol\":3014:3018  this */\n  address\n    /* \"lib/EIP712.sol\":2991:3019  _CACHED_THIS = address(this) */\n  0xe0\n  mstore\n    /* \"lib/EIP712.sol\":3029:3050  _TYPE_HASH = typeHash */\n  0x0140\n  mstore\n  pop\n  pop\n    /* \"lib/SolidDaoManaged.sol\":634:643  authority */\n  0x08\n    /* \"lib/SolidDaoManaged.sol\":634:656  authority = _authority */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n  sub(shl(0xa0, 0x01), 0x01)\n  dup7\n  and\n  swap1\n  dup2\n  or\n  swap1\n  swap2\n  sstore\n    /* \"lib/SolidDaoManaged.sol\":671:699  AuthorityUpdated(_authority) */\n  mload(0x40)\n    /* \"lib/SolidDaoManaged.sol\":634:656  authority = _authority */\n  swap1\n  swap4\n  pop\n    /* \"lib/SolidDaoManaged.sol\":671:699  AuthorityUpdated(_authority) */\n  0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad\n  swap3\n  pop\n  0x00\n  swap2\n  pop\n  log2\n    /* \"lib/SolidDaoManaged.sol\":580:706  constructor(ISolidDaoManagement _authority) {... */\n  pop\n    /* \"SCTERC20.sol\":384:520  constructor(address _authority)... */\n  pop\n    /* \"SCTERC20.sol\":316:1223  contract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {... */\n  jump(tag_35)\ntag_2:\n  dup3\n  dup1\n  sload\n  tag_24\n  swap1\n  tag_25\n  jump\t// in\ntag_24:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_27\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_30)\ntag_27:\n  dup3\n  0x1f\n  lt\n  tag_28\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_30)\ntag_28:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_30\n  jumpi\n  swap2\n  dup3\n  add\ntag_29:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_30\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_29)\ntag_30:\n  pop\n  tag_31\n  swap3\n  swap2\n  pop\n  tag_32\n  jump\t// in\ntag_31:\n  pop\n  swap1\n  jump\t// out\ntag_32:\ntag_33:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_31\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_33)\n    /* \"#utility.yul\":14:304   */\ntag_5:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_37:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_38\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_38:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":803:1183   */\ntag_25:\n    /* \"#utility.yul\":882:883   */\n  0x01\n    /* \"#utility.yul\":878:890   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":925:937   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":946:1007   */\n  tag_41\n  jumpi\n    /* \"#utility.yul\":1000:1004   */\n  0x7f\n    /* \"#utility.yul\":992:998   */\n  dup3\n    /* \"#utility.yul\":988:1005   */\n  and\n    /* \"#utility.yul\":978:1005   */\n  swap2\n  pop\n    /* \"#utility.yul\":946:1007   */\ntag_41:\n    /* \"#utility.yul\":1053:1055   */\n  0x20\n    /* \"#utility.yul\":1045:1051   */\n  dup3\n    /* \"#utility.yul\":1042:1056   */\n  lt\n    /* \"#utility.yul\":1022:1040   */\n  dup2\n    /* \"#utility.yul\":1019:1057   */\n  sub\n    /* \"#utility.yul\":1016:1177   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1099:1109   */\n  0x4e487b71\n    /* \"#utility.yul\":1094:1097   */\n  0xe0\n    /* \"#utility.yul\":1090:1110   */\n  shl\n    /* \"#utility.yul\":1087:1088   */\n  0x00\n    /* \"#utility.yul\":1080:1111   */\n  mstore\n    /* \"#utility.yul\":1134:1138   */\n  0x22\n    /* \"#utility.yul\":1131:1132   */\n  0x04\n    /* \"#utility.yul\":1124:1139   */\n  mstore\n    /* \"#utility.yul\":1162:1166   */\n  0x24\n    /* \"#utility.yul\":1159:1160   */\n  0x00\n    /* \"#utility.yul\":1152:1167   */\n  revert\n    /* \"#utility.yul\":1016:1177   */\ntag_42:\n  pop\n    /* \"#utility.yul\":803:1183   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_35:\n    /* \"SCTERC20.sol\":316:1223  contract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x1d2b7ce2c7309c0ae499257b4d570bbc2aa804a132076a507e13da63d22f2ea8\")\n  0x00\n  assignImmutable(\"0xf44e26cb6192c7a70f026ebae4c4bdf0822fd8ec199501187afd94cd2c3c7097\")\n  0x00\n  assignImmutable(\"0xc5e1f1d4bf9d5972febd47f77b791d34fca2c4f78e047aba365c0f66e5d88c39\")\n  0x00\n  assignImmutable(\"0xd3dad2b3fa6464c5d12f6373a47a6014623e3f162de557e09b0006ceac3fe4f9\")\n  0x00\n  assignImmutable(\"0xa9903e230a4a4f2af602b37c0f984d2b43537f89ce9d4cfbf1232e27c498bd38\")\n  0x00\n  assignImmutable(\"0x02f6903e55725b8fb1e67e68fc4dfbf8e90ced5ec278dfd2021debfe4c69d139\")\n  0x00\n  assignImmutable(\"0xbfa4c3ea5a2d294d938e01522babaca2aa640becce055f0bd2b924f41632ea8d\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"SCTERC20.sol\":316:1223  contract SCTERC20Token is ERC20Permit, ISCT, SolidDaoManaged {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_22\n      jumpi\n      dup1\n      0xa457c2d7\n      gt\n      tag_23\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xbf7e214f\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_21\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x7a9e5e4b\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_16\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x313ce567\n      gt\n      tag_24\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_24:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_25\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      tag_27\n      swap2\n      swap1\n      tag_28\n      jump\t// in\n    tag_27:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":1392:1406   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1385:1407   */\n      iszero\n        /* \"#utility.yul\":1367:1408   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1355:1357   */\n      0x20\n        /* \"#utility.yul\":1340:1358   */\n      add\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_27\n        /* \"#utility.yul\":1227:1414   */\n      jump\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"tokens/ERC20.sol\":3212:3224  _totalSupply */\n      sload(0x02)\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_35:\n      mload(0x40)\n        /* \"#utility.yul\":1565:1590   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1553:1555   */\n      0x20\n        /* \"#utility.yul\":1538:1556   */\n      add\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_27\n        /* \"#utility.yul\":1419:1596   */\n      jump\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n    tag_6:\n      tag_29\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2967:3065  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"#utility.yul\":2234:2238   */\n      0xff\n        /* \"tokens/ERC20.sol\":3049:3058  _decimals */\n      immutable(\"0xbfa4c3ea5a2d294d938e01522babaca2aa640becce055f0bd2b924f41632ea8d\")\n        /* \"#utility.yul\":2222:2239   */\n      and\n        /* \"#utility.yul\":2204:2240   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2192:2194   */\n      0x20\n        /* \"#utility.yul\":2177:2195   */\n      add\n        /* \"tokens/ERC20.sol\":2967:3065  function decimals() public view virtual override returns (uint8) {... */\n      tag_27\n        /* \"#utility.yul\":2062:2246   */\n      jump\n        /* \"lib/ERC20Permit.sol\":2812:2925  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n    tag_8:\n      tag_35\n      tag_49\n      jump\t// in\n        /* \"tokens/ERC20.sol\":5754:5988  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_9:\n      tag_29\n      tag_53\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_53:\n      tag_54\n      jump\t// in\n        /* \"SCTERC20.sol\":526:644  function mint(address account_, uint256 amount_) external override onlyVault {... */\n    tag_10:\n      tag_56\n      tag_57\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_57:\n      tag_58\n      jump\t// in\n    tag_56:\n      stop\n        /* \"SCTERC20.sol\":650:740  function burn(uint256 amount) external override {... */\n    tag_11:\n      tag_56\n      tag_60\n      calldatasize\n      0x04\n      tag_61\n      jump\t// in\n    tag_60:\n      tag_62\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3289:3414  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_12:\n      tag_35\n      tag_64\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_64:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":3389:3407  _balances[account] */\n      and\n        /* \"tokens/ERC20.sol\":3363:3370  uint256 */\n      0x00\n        /* \"tokens/ERC20.sol\":3389:3407  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"tokens/ERC20.sol\":3289:3414  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"SCTERC20.sol\":746:862  function burnFrom(address account_, uint256 amount_) external override {... */\n    tag_13:\n      tag_56\n      tag_69\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_69:\n      tag_70\n      jump\t// in\n        /* \"lib/SolidDaoManaged.sol\":2055:2222  function setAuthority(ISolidDaoManagement _newAuthority) external onlyGovernor {... */\n    tag_14:\n      tag_56\n      tag_72\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_72:\n      tag_74\n      jump\t// in\n        /* \"lib/ERC20Permit.sol\":2562:2688  function nonces(address owner) public view virtual override returns (uint256) {... */\n    tag_15:\n      tag_35\n      tag_76\n      calldatasize\n      0x04\n      tag_65\n      jump\t// in\n    tag_76:\n      tag_77\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2241:2343  function symbol() public view virtual override returns (string memory) {... */\n    tag_16:\n      tag_25\n      tag_80\n      jump\t// in\n        /* \"tokens/ERC20.sol\":6475:6902  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_17:\n      tag_29\n      tag_83\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_83:\n      tag_84\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3610:3799  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_18:\n      tag_29\n      tag_87\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_87:\n      tag_88\n      jump\t// in\n        /* \"lib/SolidDaoManaged.sol\":537:573  ISolidDaoManagement public authority */\n    tag_19:\n      sload(0x08)\n      tag_90\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_90:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3340:3372   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3322:3373   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3310:3312   */\n      0x20\n        /* \"#utility.yul\":3295:3313   */\n      add\n        /* \"lib/SolidDaoManaged.sol\":537:573  ISolidDaoManagement public authority */\n      tag_27\n        /* \"#utility.yul\":3149:3379   */\n      jump\n        /* \"lib/ERC20Permit.sol\":1875:2501  function permit(... */\n    tag_20:\n      tag_56\n      tag_95\n      calldatasize\n      0x04\n      tag_96\n      jump\t// in\n    tag_95:\n      tag_97\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_21:\n      tag_35\n      tag_99\n      calldatasize\n      0x04\n      tag_100\n      jump\t// in\n    tag_99:\n      tag_101\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n    tag_26:\n        /* \"tokens/ERC20.sol\":2084:2097  string memory */\n      0x60\n        /* \"tokens/ERC20.sol\":2116:2121  _name */\n      0x03\n        /* \"tokens/ERC20.sol\":2109:2121  return _name */\n      dup1\n      sload\n      tag_104\n      swap1\n      tag_105\n      jump\t// in\n    tag_104:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_106\n      swap1\n      tag_105\n      jump\t// in\n    tag_106:\n      dup1\n      iszero\n      tag_107\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_108\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_107)\n    tag_108:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_109:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_109\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_107:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_32:\n        /* \"tokens/ERC20.sol\":4397:4401  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":4451:4483  _approve(owner, spender, amount) */\n      tag_113\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":4467:4474  spender */\n      dup6\n        /* \"tokens/ERC20.sol\":4476:4482  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":4451:4459  _approve */\n      tag_114\n        /* \"tokens/ERC20.sol\":4451:4483  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_113:\n      pop\n        /* \"tokens/ERC20.sol\":4500:4504  true */\n      0x01\n      swap4\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n    tag_42:\n        /* \"tokens/ERC20.sol\":5200:5204  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":5256:5294  _spendAllowance(from, spender, amount) */\n      tag_118\n        /* \"tokens/ERC20.sol\":5272:5276  from */\n      dup6\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"tokens/ERC20.sol\":5287:5293  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":5256:5271  _spendAllowance */\n      tag_119\n        /* \"tokens/ERC20.sol\":5256:5294  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_118:\n        /* \"tokens/ERC20.sol\":5304:5331  _transfer(from, to, amount) */\n      tag_120\n        /* \"tokens/ERC20.sol\":5314:5318  from */\n      dup6\n        /* \"tokens/ERC20.sol\":5320:5322  to */\n      dup6\n        /* \"tokens/ERC20.sol\":5324:5330  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":5304:5313  _transfer */\n      tag_121\n        /* \"tokens/ERC20.sol\":5304:5331  _transfer(from, to, amount) */\n      jump\t// in\n    tag_120:\n      pop\n        /* \"tokens/ERC20.sol\":5348:5352  true */\n      0x01\n      swap5\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/ERC20Permit.sol\":2812:2925  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n    tag_49:\n        /* \"lib/ERC20Permit.sol\":2872:2879  bytes32 */\n      0x00\n        /* \"lib/ERC20Permit.sol\":2898:2918  _domainSeparatorV4() */\n      tag_124\n        /* \"lib/ERC20Permit.sol\":2898:2916  _domainSeparatorV4 */\n      tag_125\n        /* \"lib/ERC20Permit.sol\":2898:2918  _domainSeparatorV4() */\n      jump\t// in\n    tag_124:\n        /* \"lib/ERC20Permit.sol\":2891:2918  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"lib/ERC20Permit.sol\":2812:2925  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"tokens/ERC20.sol\":5754:5988  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_54:\n        /* \"tokens/ERC20.sol\":5842:5846  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":5896:5960  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_113\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":5912:5919  spender */\n      dup6\n        /* \"tokens/ERC20.sol\":5949:5959  addedValue */\n      dup6\n        /* \"tokens/ERC20.sol\":5921:5946  allowance(owner, spender) */\n      tag_129\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"tokens/ERC20.sol\":5912:5919  spender */\n      dup4\n        /* \"tokens/ERC20.sol\":5921:5930  allowance */\n      tag_101\n        /* \"tokens/ERC20.sol\":5921:5946  allowance(owner, spender) */\n      jump\t// in\n    tag_129:\n        /* \"tokens/ERC20.sol\":5921:5959  allowance(owner, spender) + addedValue */\n      tag_130\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_130:\n        /* \"tokens/ERC20.sol\":5896:5904  _approve */\n      tag_114\n        /* \"tokens/ERC20.sol\":5896:5960  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"SCTERC20.sol\":526:644  function mint(address account_, uint256 amount_) external override onlyVault {... */\n    tag_58:\n        /* \"lib/SolidDaoManaged.sol\":1777:1786  authority */\n      0x08\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":1777:1792  authority.vault */\n      and\n      0xfbfa77cf\n        /* \"lib/SolidDaoManaged.sol\":1777:1794  authority.vault() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_134\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_134:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_135\n      swap2\n      swap1\n      tag_136\n      jump\t// in\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":1763:1794  msg.sender == authority.vault() */\n      and\n        /* \"lib/SolidDaoManaged.sol\":1763:1773  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":1763:1794  msg.sender == authority.vault() */\n      and\n      eq\n        /* \"lib/SolidDaoManaged.sol\":1796:1808  UNAUTHORIZED */\n      0x07\n        /* \"lib/SolidDaoManaged.sol\":1755:1809  require(msg.sender == authority.vault(), UNAUTHORIZED) */\n      swap1\n      tag_137\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_138:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_137:\n      pop\n        /* \"SCTERC20.sol\":613:637  _mint(account_, amount_) */\n      tag_141\n        /* \"SCTERC20.sol\":619:627  account_ */\n      dup3\n        /* \"SCTERC20.sol\":629:636  amount_ */\n      dup3\n        /* \"SCTERC20.sol\":613:618  _mint */\n      tag_142\n        /* \"SCTERC20.sol\":613:637  _mint(account_, amount_) */\n      jump\t// in\n    tag_141:\n        /* \"SCTERC20.sol\":526:644  function mint(address account_, uint256 amount_) external override onlyVault {... */\n      pop\n      pop\n      jump\t// out\n        /* \"SCTERC20.sol\":650:740  function burn(uint256 amount) external override {... */\n    tag_62:\n        /* \"SCTERC20.sol\":708:733  _burn(msg.sender, amount) */\n      tag_144\n        /* \"SCTERC20.sol\":714:724  msg.sender */\n      caller\n        /* \"SCTERC20.sol\":726:732  amount */\n      dup3\n        /* \"SCTERC20.sol\":708:713  _burn */\n      tag_145\n        /* \"SCTERC20.sol\":708:733  _burn(msg.sender, amount) */\n      jump\t// in\n    tag_144:\n        /* \"SCTERC20.sol\":650:740  function burn(uint256 amount) external override {... */\n      pop\n      jump\t// out\n        /* \"SCTERC20.sol\":746:862  function burnFrom(address account_, uint256 amount_) external override {... */\n    tag_70:\n        /* \"SCTERC20.sol\":827:855  _burnFrom(account_, amount_) */\n      tag_141\n        /* \"SCTERC20.sol\":837:845  account_ */\n      dup3\n        /* \"SCTERC20.sol\":847:854  amount_ */\n      dup3\n        /* \"SCTERC20.sol\":827:836  _burnFrom */\n      tag_149\n        /* \"SCTERC20.sol\":827:855  _burnFrom(account_, amount_) */\n      jump\t// in\n        /* \"lib/SolidDaoManaged.sol\":2055:2222  function setAuthority(ISolidDaoManagement _newAuthority) external onlyGovernor {... */\n    tag_74:\n        /* \"lib/SolidDaoManaged.sol\":938:947  authority */\n      0x08\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":938:956  authority.governor */\n      and\n      0x0c340a24\n        /* \"lib/SolidDaoManaged.sol\":938:958  authority.governor() */\n      mload(0x40)\n      dup2\n      0xffffffff\n      and\n      0xe0\n      shl\n      dup2\n      mstore\n      0x04\n      add\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_152\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_152:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_153\n      swap2\n      swap1\n      tag_136\n      jump\t// in\n    tag_153:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":924:958  msg.sender == authority.governor() */\n      and\n        /* \"lib/SolidDaoManaged.sol\":924:934  msg.sender */\n      caller\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/SolidDaoManaged.sol\":924:958  msg.sender == authority.governor() */\n      and\n      eq\n        /* \"lib/SolidDaoManaged.sol\":960:972  UNAUTHORIZED */\n      0x07\n        /* \"lib/SolidDaoManaged.sol\":916:973  require(msg.sender == authority.governor(), UNAUTHORIZED) */\n      swap1\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_138\n      swap2\n      swap1\n      tag_139\n      jump\t// in\n    tag_154:\n      pop\n        /* \"lib/SolidDaoManaged.sol\":2144:2153  authority */\n      0x08\n        /* \"lib/SolidDaoManaged.sol\":2144:2169  authority = _newAuthority */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"lib/SolidDaoManaged.sol\":2184:2215  AuthorityUpdated(_newAuthority) */\n      mload(0x40)\n      0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad\n      swap1\n      0x00\n      swap1\n      log2\n        /* \"lib/SolidDaoManaged.sol\":2055:2222  function setAuthority(ISolidDaoManagement _newAuthority) external onlyGovernor {... */\n      pop\n      jump\t// out\n        /* \"lib/ERC20Permit.sol\":2562:2688  function nonces(address owner) public view virtual override returns (uint256) {... */\n    tag_77:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/ERC20Permit.sol\":2657:2671  _nonces[owner] */\n      dup2\n      and\n        /* \"lib/ERC20Permit.sol\":2631:2638  uint256 */\n      0x00\n        /* \"lib/ERC20Permit.sol\":2657:2671  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"lib/ERC20Permit.sol\":2657:2664  _nonces */\n      0x05\n        /* \"lib/ERC20Permit.sol\":2657:2671  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"lib/Counters.sol\":918:932  counter._value */\n      sload\n        /* \"lib/ERC20Permit.sol\":2657:2681  _nonces[owner].current() */\n    tag_158:\n        /* \"lib/ERC20Permit.sol\":2650:2681  return _nonces[owner].current() */\n      swap3\n        /* \"lib/ERC20Permit.sol\":2562:2688  function nonces(address owner) public view virtual override returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":2241:2343  function symbol() public view virtual override returns (string memory) {... */\n    tag_80:\n        /* \"tokens/ERC20.sol\":2297:2310  string memory */\n      0x60\n        /* \"tokens/ERC20.sol\":2329:2336  _symbol */\n      0x04\n        /* \"tokens/ERC20.sol\":2322:2336  return _symbol */\n      dup1\n      sload\n      tag_104\n      swap1\n      tag_105\n      jump\t// in\n        /* \"tokens/ERC20.sol\":6475:6902  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_84:\n        /* \"tokens/ERC20.sol\":6568:6572  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":6568:6572  bool */\n      dup2\n        /* \"tokens/ERC20.sol\":6649:6674  allowance(owner, spender) */\n      tag_168\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"tokens/ERC20.sol\":6666:6673  spender */\n      dup7\n        /* \"tokens/ERC20.sol\":6649:6658  allowance */\n      tag_101\n        /* \"tokens/ERC20.sol\":6649:6674  allowance(owner, spender) */\n      jump\t// in\n    tag_168:\n        /* \"tokens/ERC20.sol\":6622:6674  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"tokens/ERC20.sol\":6712:6727  subtractedValue */\n      dup4\n        /* \"tokens/ERC20.sol\":6692:6708  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":6692:6727  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_169\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7036:7038   */\n      0x20\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7018:7039   */\n      mstore\n        /* \"#utility.yul\":7075:7077   */\n      0x25\n        /* \"#utility.yul\":7055:7073   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7048:7078   */\n      mstore\n        /* \"#utility.yul\":7114:7148   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":7094:7112   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7087:7149   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":7165:7183   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7158:7193   */\n      mstore\n        /* \"#utility.yul\":7210:7229   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_138\n        /* \"#utility.yul\":6834:7235   */\n      jump\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_169:\n        /* \"tokens/ERC20.sol\":6803:6863  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_120\n        /* \"tokens/ERC20.sol\":6812:6817  owner */\n      dup3\n        /* \"tokens/ERC20.sol\":6819:6826  spender */\n      dup7\n        /* \"tokens/ERC20.sol\":6847:6862  subtractedValue */\n      dup7\n        /* \"tokens/ERC20.sol\":6828:6844  currentAllowance */\n      dup5\n        /* \"tokens/ERC20.sol\":6828:6862  currentAllowance - subtractedValue */\n      sub\n        /* \"tokens/ERC20.sol\":6803:6811  _approve */\n      tag_114\n        /* \"tokens/ERC20.sol\":6803:6863  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3610:3799  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_88:\n        /* \"tokens/ERC20.sol\":3689:3693  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":3743:3771  _transfer(owner, to, amount) */\n      tag_113\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":3760:3762  to */\n      dup6\n        /* \"tokens/ERC20.sol\":3764:3770  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":3743:3752  _transfer */\n      tag_121\n        /* \"tokens/ERC20.sol\":3743:3771  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"lib/ERC20Permit.sol\":1875:2501  function permit(... */\n    tag_97:\n        /* \"lib/ERC20Permit.sol\":2110:2118  deadline */\n      dup4\n        /* \"lib/ERC20Permit.sol\":2091:2106  block.timestamp */\n      timestamp\n        /* \"lib/ERC20Permit.sol\":2091:2118  block.timestamp <= deadline */\n      gt\n      iszero\n        /* \"lib/ERC20Permit.sol\":2083:2152  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      tag_177\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7442:7444   */\n      0x20\n        /* \"lib/ERC20Permit.sol\":2083:2152  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7424:7445   */\n      mstore\n        /* \"#utility.yul\":7481:7483   */\n      0x1d\n        /* \"#utility.yul\":7461:7479   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7454:7484   */\n      mstore\n        /* \"#utility.yul\":7520:7551   */\n      0x45524332305065726d69743a206578706972656420646561646c696e65000000\n        /* \"#utility.yul\":7500:7518   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7493:7552   */\n      mstore\n        /* \"#utility.yul\":7569:7587   */\n      0x64\n      add\n        /* \"lib/ERC20Permit.sol\":2083:2152  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n      tag_138\n        /* \"#utility.yul\":7240:7593   */\n      jump\n        /* \"lib/ERC20Permit.sol\":2083:2152  require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\") */\n    tag_177:\n        /* \"lib/ERC20Permit.sol\":2163:2181  bytes32 structHash */\n      0x00\n        /* \"lib/ERC20Permit.sol\":1070:1165  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"lib/ERC20Permit.sol\":2223:2228  owner */\n      dup9\n        /* \"lib/ERC20Permit.sol\":2230:2237  spender */\n      dup9\n        /* \"lib/ERC20Permit.sol\":2239:2244  value */\n      dup9\n        /* \"lib/ERC20Permit.sol\":2246:2262  _useNonce(owner) */\n      tag_180\n        /* \"lib/ERC20Permit.sol\":2256:2261  owner */\n      dup13\n        /* \"lib/ERC20Permit.sol\":2246:2255  _useNonce */\n      tag_181\n        /* \"lib/ERC20Permit.sol\":2246:2262  _useNonce(owner) */\n      jump\t// in\n    tag_180:\n        /* \"lib/ERC20Permit.sol\":2194:2273  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":7885:7910   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7984:7999   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":7964:7982   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":7957:8000   */\n      mstore\n        /* \"#utility.yul\":8036:8051   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":8016:8034   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":8009:8052   */\n      mstore\n        /* \"#utility.yul\":8068:8086   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":8061:8095   */\n      mstore\n        /* \"#utility.yul\":8111:8130   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":8104:8139   */\n      mstore\n        /* \"#utility.yul\":8155:8174   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":8148:8183   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":7857:7876   */\n      0xe0\n      add\n        /* \"lib/ERC20Permit.sol\":2194:2273  abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"lib/ERC20Permit.sol\":2184:2274  keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"lib/ERC20Permit.sol\":2163:2274  bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"lib/ERC20Permit.sol\":2285:2297  bytes32 hash */\n      0x00\n        /* \"lib/ERC20Permit.sol\":2300:2328  _hashTypedDataV4(structHash) */\n      tag_184\n        /* \"lib/ERC20Permit.sol\":2317:2327  structHash */\n      dup3\n        /* \"lib/ERC20Permit.sol\":2300:2316  _hashTypedDataV4 */\n      tag_185\n        /* \"lib/ERC20Permit.sol\":2300:2328  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_184:\n        /* \"lib/ERC20Permit.sol\":2285:2328  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"lib/ERC20Permit.sol\":2339:2353  address signer */\n      0x00\n        /* \"lib/ERC20Permit.sol\":2356:2384  ECDSA.recover(hash, v, r, s) */\n      tag_186\n        /* \"lib/ERC20Permit.sol\":2370:2374  hash */\n      dup3\n        /* \"lib/ERC20Permit.sol\":2376:2377  v */\n      dup8\n        /* \"lib/ERC20Permit.sol\":2379:2380  r */\n      dup8\n        /* \"lib/ERC20Permit.sol\":2382:2383  s */\n      dup8\n        /* \"lib/ERC20Permit.sol\":2356:2369  ECDSA.recover */\n      tag_187\n        /* \"lib/ERC20Permit.sol\":2356:2384  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_186:\n        /* \"lib/ERC20Permit.sol\":2339:2384  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"lib/ERC20Permit.sol\":2412:2417  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/ERC20Permit.sol\":2402:2417  signer == owner */\n      and\n        /* \"lib/ERC20Permit.sol\":2402:2408  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/ERC20Permit.sol\":2402:2417  signer == owner */\n      and\n      eq\n        /* \"lib/ERC20Permit.sol\":2394:2452  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      tag_188\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8396:8398   */\n      0x20\n        /* \"lib/ERC20Permit.sol\":2394:2452  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8378:8399   */\n      mstore\n        /* \"#utility.yul\":8435:8437   */\n      0x1e\n        /* \"#utility.yul\":8415:8433   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8408:8438   */\n      mstore\n        /* \"#utility.yul\":8474:8506   */\n      0x45524332305065726d69743a20696e76616c6964207369676e61747572650000\n        /* \"#utility.yul\":8454:8472   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8447:8507   */\n      mstore\n        /* \"#utility.yul\":8524:8542   */\n      0x64\n      add\n        /* \"lib/ERC20Permit.sol\":2394:2452  require(signer == owner, \"ERC20Permit: invalid signature\") */\n      tag_138\n        /* \"#utility.yul\":8194:8548   */\n      jump\n        /* \"lib/ERC20Permit.sol\":2394:2452  require(signer == owner, \"ERC20Permit: invalid signature\") */\n    tag_188:\n        /* \"lib/ERC20Permit.sol\":2463:2494  _approve(owner, spender, value) */\n      tag_191\n        /* \"lib/ERC20Permit.sol\":2472:2477  owner */\n      dup11\n        /* \"lib/ERC20Permit.sol\":2479:2486  spender */\n      dup11\n        /* \"lib/ERC20Permit.sol\":2488:2493  value */\n      dup11\n        /* \"lib/ERC20Permit.sol\":2463:2471  _approve */\n      tag_114\n        /* \"lib/ERC20Permit.sol\":2463:2494  _approve(owner, spender, value) */\n      jump\t// in\n    tag_191:\n        /* \"lib/ERC20Permit.sol\":2073:2501  {... */\n      pop\n      pop\n      pop\n        /* \"lib/ERC20Permit.sol\":1875:2501  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_101:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":3946:3953  uint256 */\n      0x00\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":3972:3983  _allowances */\n      0x01\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"tokens/ERC20.sol\":3972:3999  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"tokens/ERC20.sol\":10000:10370  function _approve(... */\n    tag_114:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10131:10150  owner != address(0) */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_195\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8755:8757   */\n      0x20\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8737:8758   */\n      mstore\n        /* \"#utility.yul\":8794:8796   */\n      0x24\n        /* \"#utility.yul\":8774:8792   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":8767:8797   */\n      mstore\n        /* \"#utility.yul\":8833:8867   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":8813:8831   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8806:8868   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":8884:8902   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":8877:8911   */\n      mstore\n        /* \"#utility.yul\":8928:8947   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_138\n        /* \"#utility.yul\":8553:8953   */\n      jump\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_195:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10209:10230  spender != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_198\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9160:9162   */\n      0x20\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9142:9163   */\n      mstore\n        /* \"#utility.yul\":9199:9201   */\n      0x22\n        /* \"#utility.yul\":9179:9197   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9172:9202   */\n      mstore\n        /* \"#utility.yul\":9238:9272   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":9218:9236   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9211:9273   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":9289:9307   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":9282:9314   */\n      mstore\n        /* \"#utility.yul\":9331:9350   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_138\n        /* \"#utility.yul\":8958:9356   */\n      jump\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_198:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10280:10298  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":10280:10291  _allowances */\n      0x01\n        /* \"tokens/ERC20.sol\":10280:10298  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"tokens/ERC20.sol\":10280:10307  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"tokens/ERC20.sol\":10280:10316  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1565:1590   */\n      dup5\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1538:1556   */\n      add\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n    tag_201:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"tokens/ERC20.sol\":10000:10370  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":10651:11092  function _spendAllowance(... */\n    tag_119:\n        /* \"tokens/ERC20.sol\":10781:10805  uint256 currentAllowance */\n      0x00\n        /* \"tokens/ERC20.sol\":10808:10833  allowance(owner, spender) */\n      tag_203\n        /* \"tokens/ERC20.sol\":10818:10823  owner */\n      dup5\n        /* \"tokens/ERC20.sol\":10825:10832  spender */\n      dup5\n        /* \"tokens/ERC20.sol\":10808:10817  allowance */\n      tag_101\n        /* \"tokens/ERC20.sol\":10808:10833  allowance(owner, spender) */\n      jump\t// in\n    tag_203:\n        /* \"tokens/ERC20.sol\":10781:10833  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"tokens/ERC20.sol\":10847:10863  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":10847:10884  currentAllowance != type(uint256).max */\n      eq\n        /* \"tokens/ERC20.sol\":10843:11086  if (currentAllowance != type(uint256).max) {... */\n      tag_208\n      jumpi\n        /* \"tokens/ERC20.sol\":10928:10934  amount */\n      dup2\n        /* \"tokens/ERC20.sol\":10908:10924  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":10908:10934  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_205\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9563:9565   */\n      0x20\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9545:9566   */\n      mstore\n        /* \"#utility.yul\":9602:9604   */\n      0x1d\n        /* \"#utility.yul\":9582:9600   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9575:9605   */\n      mstore\n        /* \"#utility.yul\":9641:9672   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":9621:9639   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9614:9673   */\n      mstore\n        /* \"#utility.yul\":9690:9708   */\n      0x64\n      add\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_138\n        /* \"#utility.yul\":9361:9714   */\n      jump\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_205:\n        /* \"tokens/ERC20.sol\":11010:11061  _approve(owner, spender, currentAllowance - amount) */\n      tag_208\n        /* \"tokens/ERC20.sol\":11019:11024  owner */\n      dup5\n        /* \"tokens/ERC20.sol\":11026:11033  spender */\n      dup5\n        /* \"tokens/ERC20.sol\":11054:11060  amount */\n      dup5\n        /* \"tokens/ERC20.sol\":11035:11051  currentAllowance */\n      dup5\n        /* \"tokens/ERC20.sol\":11035:11060  currentAllowance - amount */\n      sub\n        /* \"tokens/ERC20.sol\":11010:11018  _approve */\n      tag_114\n        /* \"tokens/ERC20.sol\":11010:11061  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_208:\n        /* \"tokens/ERC20.sol\":10771:11092  {... */\n      pop\n        /* \"tokens/ERC20.sol\":10651:11092  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":7365:8016  function _transfer(... */\n    tag_121:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7491:7509  from != address(0) */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_210\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":9921:9923   */\n      0x20\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":9903:9924   */\n      mstore\n        /* \"#utility.yul\":9960:9962   */\n      0x25\n        /* \"#utility.yul\":9940:9958   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":9933:9963   */\n      mstore\n        /* \"#utility.yul\":9999:10033   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":9979:9997   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":9972:10034   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":10050:10068   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10043:10078   */\n      mstore\n        /* \"#utility.yul\":10095:10114   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_138\n        /* \"#utility.yul\":9719:10120   */\n      jump\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_210:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7569:7585  to != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_213\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10327:10329   */\n      0x20\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10309:10330   */\n      mstore\n        /* \"#utility.yul\":10366:10368   */\n      0x23\n        /* \"#utility.yul\":10346:10364   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10339:10369   */\n      mstore\n        /* \"#utility.yul\":10405:10439   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":10385:10403   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10378:10440   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":10456:10474   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10449:10482   */\n      mstore\n        /* \"#utility.yul\":10499:10518   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_138\n        /* \"#utility.yul\":10125:10524   */\n      jump\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_213:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7707:7722  _balances[from] */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":7685:7704  uint256 fromBalance */\n      0x00\n        /* \"tokens/ERC20.sol\":7707:7722  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"tokens/ERC20.sol\":7740:7761  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_218\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":10731:10733   */\n      0x20\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":10713:10734   */\n      mstore\n        /* \"#utility.yul\":10770:10772   */\n      0x26\n        /* \"#utility.yul\":10750:10768   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":10743:10773   */\n      mstore\n        /* \"#utility.yul\":10809:10843   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":10789:10807   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":10782:10844   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":10860:10878   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":10853:10889   */\n      mstore\n        /* \"#utility.yul\":10906:10925   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_138\n        /* \"#utility.yul\":10529:10931   */\n      jump\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_218:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7838:7853  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"tokens/ERC20.sol\":7838:7847  _balances */\n      0x00\n        /* \"tokens/ERC20.sol\":7838:7853  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"tokens/ERC20.sol\":7856:7876  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"tokens/ERC20.sol\":7838:7876  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"tokens/ERC20.sol\":7896:7909  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      dup1\n      sload\n        /* \"tokens/ERC20.sol\":7870:7876  amount */\n      dup5\n      swap3\n        /* \"tokens/ERC20.sol\":7838:7847  _balances */\n      swap1\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      tag_221\n      swap1\n        /* \"tokens/ERC20.sol\":7870:7876  amount */\n      dup5\n      swap1\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      tag_131\n      jump\t// in\n    tag_221:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"tokens/ERC20.sol\":7950:7952  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      and\n        /* \"tokens/ERC20.sol\":7944:7948  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"tokens/ERC20.sol\":7954:7960  amount */\n      dup5\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_222\n      swap2\n        /* \"#utility.yul\":1565:1590   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1553:1555   */\n      0x20\n        /* \"#utility.yul\":1538:1556   */\n      add\n      swap1\n        /* \"#utility.yul\":1419:1596   */\n      jump\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n    tag_222:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"tokens/ERC20.sol\":7972:8009  _afterTokenTransfer(from, to, amount) */\n      tag_208\n        /* \"tokens/ERC20.sol\":9001:9577  function _burn(address account, uint256 amount) internal virtual {... */\n      jump\n        /* \"lib/EIP712.sol\":3143:3451  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_125:\n        /* \"lib/EIP712.sol\":3196:3203  bytes32 */\n      0x00\n        /* \"lib/EIP712.sol\":3227:3231  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/EIP712.sol\":3236:3248  _CACHED_THIS */\n      immutable(\"0xd3dad2b3fa6464c5d12f6373a47a6014623e3f162de557e09b0006ceac3fe4f9\")\n        /* \"lib/EIP712.sol\":3219:3248  address(this) == _CACHED_THIS */\n      and\n      eq\n        /* \"lib/EIP712.sol\":3219:3285  address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID */\n      dup1\n      iszero\n      tag_226\n      jumpi\n      pop\n        /* \"lib/EIP712.sol\":3269:3285  _CACHED_CHAIN_ID */\n      immutable(\"0xa9903e230a4a4f2af602b37c0f984d2b43537f89ce9d4cfbf1232e27c498bd38\")\n        /* \"lib/EIP712.sol\":3252:3265  block.chainid */\n      chainid\n        /* \"lib/EIP712.sol\":3252:3285  block.chainid == _CACHED_CHAIN_ID */\n      eq\n        /* \"lib/EIP712.sol\":3219:3285  address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID */\n    tag_226:\n        /* \"lib/EIP712.sol\":3215:3445  if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {... */\n      iszero\n      tag_227\n      jumpi\n      pop\n        /* \"lib/EIP712.sol\":3308:3332  _CACHED_DOMAIN_SEPARATOR */\n      immutable(\"0x02f6903e55725b8fb1e67e68fc4dfbf8e90ced5ec278dfd2021debfe4c69d139\")\n      swap1\n        /* \"lib/EIP712.sol\":3143:3451  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"lib/EIP712.sol\":3215:3445  if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {... */\n    tag_227:\n      pop\n        /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"lib/EIP712.sol\":3392:3402  _TYPE_HASH */\n      immutable(\"0x1d2b7ce2c7309c0ae499257b4d570bbc2aa804a132076a507e13da63d22f2ea8\")\n        /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n      0x20\n      dup1\n      dup4\n      add\n        /* \"#utility.yul\":12895:12920   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/EIP712.sol\":3404:3416  _HASHED_NAME */\n      immutable(\"0xc5e1f1d4bf9d5972febd47f77b791d34fca2c4f78e047aba365c0f66e5d88c39\")\n        /* \"#utility.yul\":12936:12954   */\n      dup3\n      dup5\n      add\n        /* \"#utility.yul\":12929:12963   */\n      mstore\n        /* \"lib/EIP712.sol\":3418:3433  _HASHED_VERSION */\n      immutable(\"0xf44e26cb6192c7a70f026ebae4c4bdf0822fd8ec199501187afd94cd2c3c7097\")\n        /* \"#utility.yul\":12979:12997   */\n      0x60\n      dup4\n      add\n        /* \"#utility.yul\":12972:13006   */\n      mstore\n        /* \"lib/EIP712.sol\":3677:3690  block.chainid */\n      chainid\n        /* \"#utility.yul\":13022:13040   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":13015:13049   */\n      mstore\n        /* \"lib/EIP712.sol\":3700:3704  this */\n      address\n        /* \"#utility.yul\":13065:13084   */\n      0xa0\n      dup1\n      dup5\n      add\n        /* \"#utility.yul\":13058:13119   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":12867:12886   */\n      0xc0\n      swap1\n      swap3\n      add\n        /* \"lib/EIP712.sol\":3633:3706  abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)) */\n      swap1\n      swap3\n      mstore\n        /* \"lib/EIP712.sol\":3623:3707  keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this))) */\n      dup1\n      mload\n      swap2\n      add\n      keccak256\n      swap1\n        /* \"lib/ERC20Permit.sol\":2812:2925  function DOMAIN_SEPARATOR() external view override returns (bytes32) {... */\n      jump\t// out\n        /* \"tokens/ERC20.sol\":8292:8681  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_142:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":8375:8396  account != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":8367:8432  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_232\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11138:11140   */\n      0x20\n        /* \"tokens/ERC20.sol\":8367:8432  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11120:11141   */\n      mstore\n        /* \"#utility.yul\":11177:11179   */\n      0x1f\n        /* \"#utility.yul\":11157:11175   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11150:11180   */\n      mstore\n        /* \"#utility.yul\":11216:11249   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":11196:11214   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11189:11250   */\n      mstore\n        /* \"#utility.yul\":11267:11285   */\n      0x64\n      add\n        /* \"tokens/ERC20.sol\":8367:8432  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_138\n        /* \"#utility.yul\":10936:11291   */\n      jump\n        /* \"tokens/ERC20.sol\":8367:8432  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_232:\n        /* \"tokens/ERC20.sol\":8519:8525  amount */\n      dup1\n        /* \"tokens/ERC20.sol\":8503:8515  _totalSupply */\n      0x02\n      0x00\n        /* \"tokens/ERC20.sol\":8503:8525  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_236\n      swap2\n      swap1\n      tag_131\n      jump\t// in\n    tag_236:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":8535:8553  _balances[account] */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":8535:8544  _balances */\n      0x00\n        /* \"tokens/ERC20.sol\":8535:8553  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"tokens/ERC20.sol\":8535:8563  _balances[account] += amount */\n      dup1\n      sload\n        /* \"tokens/ERC20.sol\":8557:8563  amount */\n      dup4\n      swap3\n        /* \"tokens/ERC20.sol\":8535:8544  _balances */\n      swap1\n        /* \"tokens/ERC20.sol\":8535:8563  _balances[account] += amount */\n      tag_237\n      swap1\n        /* \"tokens/ERC20.sol\":8557:8563  amount */\n      dup5\n      swap1\n        /* \"tokens/ERC20.sol\":8535:8563  _balances[account] += amount */\n      tag_131\n      jump\t// in\n    tag_237:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"tokens/ERC20.sol\":8578:8615  Transfer(address(0), account, amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1565:1590   */\n      dup2\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":8578:8615  Transfer(address(0), account, amount) */\n      dup4\n      and\n      swap1\n        /* \"tokens/ERC20.sol\":8595:8596  0 */\n      0x00\n      swap1\n        /* \"tokens/ERC20.sol\":8578:8615  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1553:1555   */\n      0x20\n        /* \"#utility.yul\":1538:1556   */\n      add\n        /* \"tokens/ERC20.sol\":8578:8615  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"SCTERC20.sol\":526:644  function mint(address account_, uint256 amount_) external override onlyVault {... */\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":9001:9577  function _burn(address account, uint256 amount) internal virtual {... */\n    tag_145:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":9084:9105  account != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":9076:9143  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_241\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11498:11500   */\n      0x20\n        /* \"tokens/ERC20.sol\":9076:9143  require(account != address(0), \"ERC20: burn from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11480:11501   */\n      mstore\n        /* \"#utility.yul\":11537:11539   */\n      0x21\n        /* \"#utility.yul\":11517:11535   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11510:11540   */\n      mstore\n        /* \"#utility.yul\":11576:11610   */\n      0x45524332303a206275726e2066726f6d20746865207a65726f20616464726573\n        /* \"#utility.yul\":11556:11574   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11549:11611   */\n      mstore\n      shl(0xf8, 0x73)\n        /* \"#utility.yul\":11627:11645   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":11620:11651   */\n      mstore\n        /* \"#utility.yul\":11668:11687   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":9076:9143  require(account != address(0), \"ERC20: burn from the zero address\") */\n      tag_138\n        /* \"#utility.yul\":11296:11693   */\n      jump\n        /* \"tokens/ERC20.sol\":9076:9143  require(account != address(0), \"ERC20: burn from the zero address\") */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":9239:9257  _balances[account] */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":9214:9236  uint256 accountBalance */\n      0x00\n        /* \"tokens/ERC20.sol\":9239:9257  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"tokens/ERC20.sol\":9275:9299  accountBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":9267:9338  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_245\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":11900:11902   */\n      0x20\n        /* \"tokens/ERC20.sol\":9267:9338  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":11882:11903   */\n      mstore\n        /* \"#utility.yul\":11939:11941   */\n      0x22\n        /* \"#utility.yul\":11919:11937   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":11912:11942   */\n      mstore\n        /* \"#utility.yul\":11978:12012   */\n      0x45524332303a206275726e20616d6f756e7420657863656564732062616c616e\n        /* \"#utility.yul\":11958:11976   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":11951:12013   */\n      mstore\n      shl(0xf0, 0x6365)\n        /* \"#utility.yul\":12029:12047   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12022:12054   */\n      mstore\n        /* \"#utility.yul\":12071:12090   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":9267:9338  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n      tag_138\n        /* \"#utility.yul\":11698:12096   */\n      jump\n        /* \"tokens/ERC20.sol\":9267:9338  require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\") */\n    tag_245:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":9372:9390  _balances[account] */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":9372:9381  _balances */\n      0x00\n        /* \"tokens/ERC20.sol\":9372:9390  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup2\n      keccak256\n        /* \"tokens/ERC20.sol\":9393:9416  accountBalance - amount */\n      dup4\n      dup4\n      sub\n        /* \"tokens/ERC20.sol\":9372:9416  _balances[account] = accountBalance - amount */\n      swap1\n      sstore\n        /* \"tokens/ERC20.sol\":9436:9448  _totalSupply */\n      0x02\n        /* \"tokens/ERC20.sol\":9436:9458  _totalSupply -= amount */\n      dup1\n      sload\n        /* \"tokens/ERC20.sol\":9410:9416  amount */\n      dup5\n      swap3\n        /* \"tokens/ERC20.sol\":9372:9381  _balances */\n      swap1\n        /* \"tokens/ERC20.sol\":9436:9458  _totalSupply -= amount */\n      tag_248\n      swap1\n        /* \"tokens/ERC20.sol\":9410:9416  amount */\n      dup5\n      swap1\n        /* \"tokens/ERC20.sol\":9436:9458  _totalSupply -= amount */\n      tag_249\n      jump\t// in\n    tag_248:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n        /* \"tokens/ERC20.sol\":9474:9511  Transfer(account, address(0), amount) */\n      mload(0x40)\n        /* \"#utility.yul\":1565:1590   */\n      dup3\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":9500:9501  0 */\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":9474:9511  Transfer(account, address(0), amount) */\n      dup6\n      and\n      swap1\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n        /* \"#utility.yul\":1553:1555   */\n      0x20\n        /* \"#utility.yul\":1538:1556   */\n      add\n        /* \"tokens/ERC20.sol\":9474:9511  Transfer(account, address(0), amount) */\n      tag_201\n        /* \"#utility.yul\":1419:1596   */\n      jump\n        /* \"tokens/ERC20.sol\":9522:9570  _afterTokenTransfer(account, address(0), amount) */\n    tag_251:\n        /* \"tokens/ERC20.sol\":9066:9577  {... */\n      pop\n        /* \"tokens/ERC20.sol\":9001:9577  function _burn(address account, uint256 amount) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"SCTERC20.sol\":868:1221  function _burnFrom(address account_, uint256 amount_) internal {... */\n    tag_149:\n        /* \"SCTERC20.sol\":941:964  uint256 senderAllowance */\n      0x00\n        /* \"SCTERC20.sol\":967:998  allowance(account_, msg.sender) */\n      tag_253\n        /* \"SCTERC20.sol\":977:985  account_ */\n      dup4\n        /* \"SCTERC20.sol\":987:997  msg.sender */\n      caller\n        /* \"SCTERC20.sol\":967:976  allowance */\n      tag_101\n        /* \"SCTERC20.sol\":967:998  allowance(account_, msg.sender) */\n      jump\t// in\n    tag_253:\n        /* \"SCTERC20.sol\":941:998  uint256 senderAllowance = allowance(account_, msg.sender) */\n      swap1\n      pop\n        /* \"SCTERC20.sol\":1045:1046  0 */\n      0x00\n        /* \"SCTERC20.sol\":1016:1041  senderAllowance - amount_ */\n      tag_254\n        /* \"SCTERC20.sol\":1034:1041  amount_ */\n      dup4\n        /* \"SCTERC20.sol\":941:998  uint256 senderAllowance = allowance(account_, msg.sender) */\n      dup4\n        /* \"SCTERC20.sol\":1016:1041  senderAllowance - amount_ */\n      tag_249\n      jump\t// in\n    tag_254:\n        /* \"SCTERC20.sol\":1016:1046  senderAllowance - amount_ >= 0 */\n      lt\n      iszero\n        /* \"SCTERC20.sol\":1008:1087  require(senderAllowance - amount_ >= 0, \"ERC20: burn amount exceeds allowance\") */\n      tag_255\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":12433:12435   */\n      0x20\n        /* \"SCTERC20.sol\":1008:1087  require(senderAllowance - amount_ >= 0, \"ERC20: burn amount exceeds allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":12415:12436   */\n      mstore\n        /* \"#utility.yul\":12472:12474   */\n      0x24\n        /* \"#utility.yul\":12452:12470   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":12445:12475   */\n      mstore\n        /* \"#utility.yul\":12511:12545   */\n      0x45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77\n        /* \"#utility.yul\":12491:12509   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":12484:12546   */\n      mstore\n      shl(0xe0, 0x616e6365)\n        /* \"#utility.yul\":12562:12580   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":12555:12589   */\n      mstore\n        /* \"#utility.yul\":12606:12625   */\n      0x84\n      add\n        /* \"SCTERC20.sol\":1008:1087  require(senderAllowance - amount_ >= 0, \"ERC20: burn amount exceeds allowance\") */\n      tag_138\n        /* \"#utility.yul\":12231:12631   */\n      jump\n        /* \"SCTERC20.sol\":1008:1087  require(senderAllowance - amount_ >= 0, \"ERC20: burn amount exceeds allowance\") */\n    tag_255:\n        /* \"SCTERC20.sol\":1097:1123  senderAllowance -= amount_ */\n      tag_258\n        /* \"SCTERC20.sol\":1116:1123  amount_ */\n      dup3\n        /* \"SCTERC20.sol\":1097:1123  senderAllowance -= amount_ */\n      dup3\n      tag_249\n      jump\t// in\n    tag_258:\n      swap1\n      pop\n        /* \"SCTERC20.sol\":1133:1180  _approve(account_, msg.sender, senderAllowance) */\n      tag_259\n        /* \"SCTERC20.sol\":1142:1150  account_ */\n      dup4\n        /* \"SCTERC20.sol\":1152:1162  msg.sender */\n      caller\n        /* \"SCTERC20.sol\":1164:1179  senderAllowance */\n      dup4\n        /* \"SCTERC20.sol\":1133:1141  _approve */\n      tag_114\n        /* \"SCTERC20.sol\":1133:1180  _approve(account_, msg.sender, senderAllowance) */\n      jump\t// in\n    tag_259:\n        /* \"SCTERC20.sol\":1190:1214  _burn(account_, amount_) */\n      tag_251\n        /* \"SCTERC20.sol\":1196:1204  account_ */\n      dup4\n        /* \"SCTERC20.sol\":1206:1213  amount_ */\n      dup4\n        /* \"SCTERC20.sol\":1190:1195  _burn */\n      tag_145\n        /* \"SCTERC20.sol\":1190:1214  _burn(account_, amount_) */\n      jump\t// in\n        /* \"lib/ERC20Permit.sol\":3056:3259  function _useNonce(address owner) internal virtual returns (uint256 current) {... */\n    tag_181:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/ERC20Permit.sol\":3176:3190  _nonces[owner] */\n      dup2\n      and\n        /* \"lib/ERC20Permit.sol\":3116:3131  uint256 current */\n      0x00\n        /* \"lib/ERC20Permit.sol\":3176:3190  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"lib/ERC20Permit.sol\":3176:3183  _nonces */\n      0x05\n        /* \"lib/ERC20Permit.sol\":3176:3190  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"lib/Counters.sol\":918:932  counter._value */\n      dup1\n      sload\n        /* \"lib/Counters.sol\":1050:1051  1 */\n      0x01\n        /* \"lib/Counters.sol\":1032:1051  counter._value += 1 */\n      dup2\n      add\n      dup3\n      sstore\n        /* \"lib/Counters.sol\":918:932  counter._value */\n      swap1\n        /* \"lib/ERC20Permit.sol\":3235:3252  nonce.increment() */\n    tag_264:\n        /* \"lib/ERC20Permit.sol\":3133:3259  {... */\n      pop\n        /* \"lib/ERC20Permit.sol\":3056:3259  function _useNonce(address owner) internal virtual returns (uint256 current) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"lib/EIP712.sol\":4339:4504  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_185:\n        /* \"lib/EIP712.sol\":4416:4423  bytes32 */\n      0x00\n        /* \"lib/EIP712.sol\":4442:4497  ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_158\n        /* \"lib/EIP712.sol\":4464:4484  _domainSeparatorV4() */\n      tag_268\n        /* \"lib/EIP712.sol\":4464:4482  _domainSeparatorV4 */\n      tag_125\n        /* \"lib/EIP712.sol\":4464:4484  _domainSeparatorV4() */\n      jump\t// in\n    tag_268:\n        /* \"lib/EIP712.sol\":4486:4496  structHash */\n      dup4\n        /* \"lib/ECDSA.sol\":9225:9282  abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash) */\n      mload(0x40)\n      shl(0xf0, 0x1901)\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":13388:13415   */\n      mstore\n        /* \"#utility.yul\":13431:13442   */\n      0x22\n      dup2\n      add\n        /* \"#utility.yul\":13424:13451   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":13467:13479   */\n      0x42\n      dup2\n      add\n        /* \"#utility.yul\":13460:13488   */\n      dup3\n      swap1\n      mstore\n        /* \"lib/ECDSA.sol\":9189:9196  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":13504:13516   */\n      0x62\n      add\n        /* \"lib/ECDSA.sol\":9225:9282  abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"lib/ECDSA.sol\":9215:9283  keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"lib/ECDSA.sol\":9208:9283  return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)) */\n      swap1\n      pop\n        /* \"lib/ECDSA.sol\":9096:9290  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\n        /* \"lib/ECDSA.sol\":7451:7721  function recover(... */\n    tag_187:\n        /* \"lib/ECDSA.sol\":7574:7581  address */\n      0x00\n        /* \"lib/ECDSA.sol\":7594:7611  address recovered */\n      dup1\n        /* \"lib/ECDSA.sol\":7613:7631  RecoverError error */\n      0x00\n        /* \"lib/ECDSA.sol\":7635:7660  tryRecover(hash, v, r, s) */\n      tag_271\n        /* \"lib/ECDSA.sol\":7646:7650  hash */\n      dup8\n        /* \"lib/ECDSA.sol\":7652:7653  v */\n      dup8\n        /* \"lib/ECDSA.sol\":7655:7656  r */\n      dup8\n        /* \"lib/ECDSA.sol\":7658:7659  s */\n      dup8\n        /* \"lib/ECDSA.sol\":7635:7645  tryRecover */\n      tag_272\n        /* \"lib/ECDSA.sol\":7635:7660  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_271:\n        /* \"lib/ECDSA.sol\":7593:7660  (address recovered, RecoverError error) = tryRecover(hash, v, r, s) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"lib/ECDSA.sol\":7670:7688  _throwError(error) */\n      tag_273\n        /* \"lib/ECDSA.sol\":7682:7687  error */\n      dup2\n        /* \"lib/ECDSA.sol\":7670:7681  _throwError */\n      tag_274\n        /* \"lib/ECDSA.sol\":7670:7688  _throwError(error) */\n      jump\t// in\n    tag_273:\n      pop\n        /* \"lib/ECDSA.sol\":7705:7714  recovered */\n      swap6\n        /* \"lib/ECDSA.sol\":7451:7721  function recover(... */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/ECDSA.sol\":5715:7318  function tryRecover(... */\n    tag_272:\n        /* \"lib/ECDSA.sol\":5841:5848  address */\n      0x00\n      dup1\n        /* \"lib/ECDSA.sol\":6765:6831  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"lib/ECDSA.sol\":6752:6831  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup4\n      gt\n        /* \"lib/ECDSA.sol\":6748:6909  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_285\n      jumpi\n      pop\n        /* \"lib/ECDSA.sol\":6863:6864  0 */\n      0x00\n      swap1\n      pop\n        /* \"lib/ECDSA.sol\":6867:6897  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"lib/ECDSA.sol\":6847:6898  return (address(0), RecoverError.InvalidSignatureS) */\n      jump(tag_284)\n        /* \"lib/ECDSA.sol\":6748:6909  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_285:\n        /* \"lib/ECDSA.sol\":6922:6923  v */\n      dup5\n        /* \"lib/ECDSA.sol\":6922:6929  v != 27 */\n      0xff\n      and\n        /* \"lib/ECDSA.sol\":6927:6929  27 */\n      0x1b\n        /* \"lib/ECDSA.sol\":6922:6929  v != 27 */\n      eq\n      iszero\n        /* \"lib/ECDSA.sol\":6922:6940  v != 27 && v != 28 */\n      dup1\n      iszero\n      tag_286\n      jumpi\n      pop\n        /* \"lib/ECDSA.sol\":6933:6934  v */\n      dup5\n        /* \"lib/ECDSA.sol\":6933:6940  v != 28 */\n      0xff\n      and\n        /* \"lib/ECDSA.sol\":6938:6940  28 */\n      0x1c\n        /* \"lib/ECDSA.sol\":6933:6940  v != 28 */\n      eq\n      iszero\n        /* \"lib/ECDSA.sol\":6922:6940  v != 27 && v != 28 */\n    tag_286:\n        /* \"lib/ECDSA.sol\":6918:7018  if (v != 27 && v != 28) {... */\n      iszero\n      tag_287\n      jumpi\n      pop\n        /* \"lib/ECDSA.sol\":6972:6973  0 */\n      0x00\n      swap1\n      pop\n        /* \"lib/ECDSA.sol\":6976:7006  RecoverError.InvalidSignatureV */\n      0x04\n        /* \"lib/ECDSA.sol\":6956:7007  return (address(0), RecoverError.InvalidSignatureV) */\n      jump(tag_284)\n        /* \"lib/ECDSA.sol\":6918:7018  if (v != 27 && v != 28) {... */\n    tag_287:\n        /* \"lib/ECDSA.sol\":7129:7153  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"lib/ECDSA.sol\":7112:7126  address signer */\n      0x00\n        /* \"lib/ECDSA.sol\":7129:7153  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":13754:13779   */\n      dup10\n      swap1\n      mstore\n        /* \"#utility.yul\":13827:13831   */\n      0xff\n        /* \"#utility.yul\":13815:13832   */\n      dup9\n      and\n        /* \"#utility.yul\":13795:13813   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":13788:13833   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":13849:13867   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":13842:13876   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":13892:13910   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":13885:13919   */\n      dup6\n      swap1\n      mstore\n        /* \"lib/ECDSA.sol\":7129:7153  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":13726:13745   */\n      0xa0\n      add\n        /* \"lib/ECDSA.sol\":7129:7153  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_291\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_291:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"lib/ECDSA.sol\":7167:7187  signer == address(0) */\n      dup2\n      and\n        /* \"lib/ECDSA.sol\":7163:7264  if (signer == address(0)) {... */\n      tag_292\n      jumpi\n        /* \"lib/ECDSA.sol\":7219:7220  0 */\n      0x00\n        /* \"lib/ECDSA.sol\":7223:7252  RecoverError.InvalidSignature */\n      0x01\n        /* \"lib/ECDSA.sol\":7203:7253  return (address(0), RecoverError.InvalidSignature) */\n      swap3\n      pop\n      swap3\n      pop\n      pop\n      jump(tag_284)\n        /* \"lib/ECDSA.sol\":7163:7264  if (signer == address(0)) {... */\n    tag_292:\n        /* \"lib/ECDSA.sol\":7282:7288  signer */\n      swap2\n      pop\n        /* \"lib/ECDSA.sol\":7290:7310  RecoverError.NoError */\n      0x00\n      swap1\n      pop\n        /* \"lib/ECDSA.sol\":5715:7318  function tryRecover(... */\n    tag_284:\n      swap5\n      pop\n      swap5\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"lib/ECDSA.sol\":547:1178  function _throwError(RecoverError error) private pure {... */\n    tag_274:\n        /* \"lib/ECDSA.sol\":624:644  RecoverError.NoError */\n      0x00\n        /* \"lib/ECDSA.sol\":615:620  error */\n      dup2\n        /* \"lib/ECDSA.sol\":615:644  error == RecoverError.NoError */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_298\n      jumpi\n      tag_298\n      tag_296\n      jump\t// in\n    tag_298:\n      sub\n        /* \"lib/ECDSA.sol\":611:1172  if (error == RecoverError.NoError) {... */\n      tag_299\n      jumpi\n        /* \"lib/ECDSA.sol\":547:1178  function _throwError(RecoverError error) private pure {... */\n      pop\n      jump\t// out\n        /* \"lib/ECDSA.sol\":611:1172  if (error == RecoverError.NoError) {... */\n    tag_299:\n        /* \"lib/ECDSA.sol\":720:749  RecoverError.InvalidSignature */\n      0x01\n        /* \"lib/ECDSA.sol\":711:716  error */\n      dup2\n        /* \"lib/ECDSA.sol\":711:749  error == RecoverError.InvalidSignature */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_304\n      jumpi\n      tag_304\n      tag_296\n      jump\t// in\n    tag_304:\n      sub\n        /* \"lib/ECDSA.sol\":707:1172  if (error == RecoverError.InvalidSignature) {... */\n      tag_305\n      jumpi\n        /* \"lib/ECDSA.sol\":765:799  revert(\"ECDSA: invalid signature\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14264:14266   */\n      0x20\n        /* \"lib/ECDSA.sol\":765:799  revert(\"ECDSA: invalid signature\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14246:14267   */\n      mstore\n        /* \"#utility.yul\":14303:14305   */\n      0x18\n        /* \"#utility.yul\":14283:14301   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14276:14306   */\n      mstore\n        /* \"#utility.yul\":14342:14368   */\n      0x45434453413a20696e76616c6964207369676e61747572650000000000000000\n        /* \"#utility.yul\":14322:14340   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14315:14369   */\n      mstore\n        /* \"#utility.yul\":14386:14404   */\n      0x64\n      add\n        /* \"lib/ECDSA.sol\":765:799  revert(\"ECDSA: invalid signature\") */\n      tag_138\n        /* \"#utility.yul\":14062:14410   */\n      jump\n        /* \"lib/ECDSA.sol\":707:1172  if (error == RecoverError.InvalidSignature) {... */\n    tag_305:\n        /* \"lib/ECDSA.sol\":829:864  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"lib/ECDSA.sol\":820:825  error */\n      dup2\n        /* \"lib/ECDSA.sol\":820:864  error == RecoverError.InvalidSignatureLength */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_312\n      jumpi\n      tag_312\n      tag_296\n      jump\t// in\n    tag_312:\n      sub\n        /* \"lib/ECDSA.sol\":816:1172  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_313\n      jumpi\n        /* \"lib/ECDSA.sol\":880:921  revert(\"ECDSA: invalid signature length\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14617:14619   */\n      0x20\n        /* \"lib/ECDSA.sol\":880:921  revert(\"ECDSA: invalid signature length\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14599:14620   */\n      mstore\n        /* \"#utility.yul\":14656:14658   */\n      0x1f\n        /* \"#utility.yul\":14636:14654   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14629:14659   */\n      mstore\n        /* \"#utility.yul\":14695:14728   */\n      0x45434453413a20696e76616c6964207369676e6174757265206c656e67746800\n        /* \"#utility.yul\":14675:14693   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":14668:14729   */\n      mstore\n        /* \"#utility.yul\":14746:14764   */\n      0x64\n      add\n        /* \"lib/ECDSA.sol\":880:921  revert(\"ECDSA: invalid signature length\") */\n      tag_138\n        /* \"#utility.yul\":14415:14770   */\n      jump\n        /* \"lib/ECDSA.sol\":816:1172  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_313:\n        /* \"lib/ECDSA.sol\":951:981  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"lib/ECDSA.sol\":942:947  error */\n      dup2\n        /* \"lib/ECDSA.sol\":942:981  error == RecoverError.InvalidSignatureS */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_320\n      jumpi\n      tag_320\n      tag_296\n      jump\t// in\n    tag_320:\n      sub\n        /* \"lib/ECDSA.sol\":938:1172  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_321\n      jumpi\n        /* \"lib/ECDSA.sol\":997:1041  revert(\"ECDSA: invalid signature 's' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":14977:14979   */\n      0x20\n        /* \"lib/ECDSA.sol\":997:1041  revert(\"ECDSA: invalid signature 's' value\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":14959:14980   */\n      mstore\n        /* \"#utility.yul\":15016:15018   */\n      0x22\n        /* \"#utility.yul\":14996:15014   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":14989:15019   */\n      mstore\n        /* \"#utility.yul\":15055:15089   */\n      0x45434453413a20696e76616c6964207369676e6174757265202773272076616c\n        /* \"#utility.yul\":15035:15053   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15028:15090   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":15106:15124   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15099:15131   */\n      mstore\n        /* \"#utility.yul\":15148:15167   */\n      0x84\n      add\n        /* \"lib/ECDSA.sol\":997:1041  revert(\"ECDSA: invalid signature 's' value\") */\n      tag_138\n        /* \"#utility.yul\":14775:15173   */\n      jump\n        /* \"lib/ECDSA.sol\":938:1172  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_321:\n        /* \"lib/ECDSA.sol\":1071:1101  RecoverError.InvalidSignatureV */\n      0x04\n        /* \"lib/ECDSA.sol\":1062:1067  error */\n      dup2\n        /* \"lib/ECDSA.sol\":1062:1101  error == RecoverError.InvalidSignatureV */\n      0x04\n      dup2\n      gt\n      iszero\n      tag_328\n      jumpi\n      tag_328\n      tag_296\n      jump\t// in\n    tag_328:\n      sub\n        /* \"lib/ECDSA.sol\":1058:1172  if (error == RecoverError.InvalidSignatureV) {... */\n      tag_144\n      jumpi\n        /* \"lib/ECDSA.sol\":1117:1161  revert(\"ECDSA: invalid signature 'v' value\") */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":15380:15382   */\n      0x20\n        /* \"lib/ECDSA.sol\":1117:1161  revert(\"ECDSA: invalid signature 'v' value\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":15362:15383   */\n      mstore\n        /* \"#utility.yul\":15419:15421   */\n      0x22\n        /* \"#utility.yul\":15399:15417   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":15392:15422   */\n      mstore\n        /* \"#utility.yul\":15458:15492   */\n      0x45434453413a20696e76616c6964207369676e6174757265202776272076616c\n        /* \"#utility.yul\":15438:15456   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":15431:15493   */\n      mstore\n      shl(0xf0, 0x7565)\n        /* \"#utility.yul\":15509:15527   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":15502:15534   */\n      mstore\n        /* \"#utility.yul\":15551:15570   */\n      0x84\n      add\n        /* \"lib/ECDSA.sol\":1117:1161  revert(\"ECDSA: invalid signature 'v' value\") */\n      tag_138\n        /* \"#utility.yul\":15178:15576   */\n      jump\n        /* \"#utility.yul\":169:766   */\n    tag_28:\n        /* \"#utility.yul\":281:285   */\n      0x00\n        /* \"#utility.yul\":310:312   */\n      0x20\n        /* \"#utility.yul\":339:341   */\n      dup1\n        /* \"#utility.yul\":328:337   */\n      dup4\n        /* \"#utility.yul\":321:342   */\n      mstore\n        /* \"#utility.yul\":371:377   */\n      dup4\n        /* \"#utility.yul\":365:378   */\n      mload\n        /* \"#utility.yul\":414:420   */\n      dup1\n        /* \"#utility.yul\":409:411   */\n      dup3\n        /* \"#utility.yul\":398:407   */\n      dup6\n        /* \"#utility.yul\":394:412   */\n      add\n        /* \"#utility.yul\":387:421   */\n      mstore\n        /* \"#utility.yul\":439:440   */\n      0x00\n        /* \"#utility.yul\":449:589   */\n    tag_339:\n        /* \"#utility.yul\":463:469   */\n      dup2\n        /* \"#utility.yul\":460:461   */\n      dup2\n        /* \"#utility.yul\":457:470   */\n      lt\n        /* \"#utility.yul\":449:589   */\n      iszero\n      tag_341\n      jumpi\n        /* \"#utility.yul\":558:572   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":554:577   */\n      dup4\n      add\n        /* \"#utility.yul\":548:578   */\n      mload\n        /* \"#utility.yul\":524:541   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":543:545   */\n      0x40\n        /* \"#utility.yul\":520:546   */\n      add\n        /* \"#utility.yul\":513:579   */\n      mstore\n        /* \"#utility.yul\":478:488   */\n      dup3\n      add\n        /* \"#utility.yul\":449:589   */\n      jump(tag_339)\n    tag_341:\n        /* \"#utility.yul\":607:613   */\n      dup2\n        /* \"#utility.yul\":604:605   */\n      dup2\n        /* \"#utility.yul\":601:614   */\n      gt\n        /* \"#utility.yul\":598:689   */\n      iszero\n      tag_342\n      jumpi\n        /* \"#utility.yul\":677:678   */\n      0x00\n        /* \"#utility.yul\":672:674   */\n      0x40\n        /* \"#utility.yul\":663:669   */\n      dup4\n        /* \"#utility.yul\":652:661   */\n      dup8\n        /* \"#utility.yul\":648:670   */\n      add\n        /* \"#utility.yul\":644:675   */\n      add\n        /* \"#utility.yul\":637:679   */\n      mstore\n        /* \"#utility.yul\":598:689   */\n    tag_342:\n      pop\n        /* \"#utility.yul\":750:752   */\n      0x1f\n        /* \"#utility.yul\":729:744   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":725:754   */\n      and\n        /* \"#utility.yul\":710:755   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":757:759   */\n      0x40\n        /* \"#utility.yul\":706:760   */\n      add\n      swap4\n        /* \"#utility.yul\":169:766   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":771:902   */\n    tag_333:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":846:877   */\n      dup2\n      and\n        /* \"#utility.yul\":836:878   */\n      dup2\n      eq\n        /* \"#utility.yul\":826:896   */\n      tag_144\n      jumpi\n        /* \"#utility.yul\":892:893   */\n      0x00\n        /* \"#utility.yul\":889:890   */\n      dup1\n        /* \"#utility.yul\":882:894   */\n      revert\n        /* \"#utility.yul\":907:1222   */\n    tag_31:\n        /* \"#utility.yul\":975:981   */\n      0x00\n        /* \"#utility.yul\":983:989   */\n      dup1\n        /* \"#utility.yul\":1036:1038   */\n      0x40\n        /* \"#utility.yul\":1024:1033   */\n      dup4\n        /* \"#utility.yul\":1015:1022   */\n      dup6\n        /* \"#utility.yul\":1011:1034   */\n      sub\n        /* \"#utility.yul\":1007:1039   */\n      slt\n        /* \"#utility.yul\":1004:1056   */\n      iszero\n      tag_346\n      jumpi\n        /* \"#utility.yul\":1052:1053   */\n      0x00\n        /* \"#utility.yul\":1049:1050   */\n      dup1\n        /* \"#utility.yul\":1042:1054   */\n      revert\n        /* \"#utility.yul\":1004:1056   */\n    tag_346:\n        /* \"#utility.yul\":1091:1100   */\n      dup3\n        /* \"#utility.yul\":1078:1101   */\n      calldataload\n        /* \"#utility.yul\":1110:1141   */\n      tag_347\n        /* \"#utility.yul\":1135:1140   */\n      dup2\n        /* \"#utility.yul\":1110:1141   */\n      tag_333\n      jump\t// in\n    tag_347:\n        /* \"#utility.yul\":1160:1165   */\n      swap5\n        /* \"#utility.yul\":1212:1214   */\n      0x20\n        /* \"#utility.yul\":1197:1215   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1184:1216   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":907:1222   */\n      jump\t// out\n        /* \"#utility.yul\":1601:2057   */\n    tag_41:\n        /* \"#utility.yul\":1678:1684   */\n      0x00\n        /* \"#utility.yul\":1686:1692   */\n      dup1\n        /* \"#utility.yul\":1694:1700   */\n      0x00\n        /* \"#utility.yul\":1747:1749   */\n      0x60\n        /* \"#utility.yul\":1735:1744   */\n      dup5\n        /* \"#utility.yul\":1726:1733   */\n      dup7\n        /* \"#utility.yul\":1722:1745   */\n      sub\n        /* \"#utility.yul\":1718:1750   */\n      slt\n        /* \"#utility.yul\":1715:1767   */\n      iszero\n      tag_351\n      jumpi\n        /* \"#utility.yul\":1763:1764   */\n      0x00\n        /* \"#utility.yul\":1760:1761   */\n      dup1\n        /* \"#utility.yul\":1753:1765   */\n      revert\n        /* \"#utility.yul\":1715:1767   */\n    tag_351:\n        /* \"#utility.yul\":1802:1811   */\n      dup4\n        /* \"#utility.yul\":1789:1812   */\n      calldataload\n        /* \"#utility.yul\":1821:1852   */\n      tag_352\n        /* \"#utility.yul\":1846:1851   */\n      dup2\n        /* \"#utility.yul\":1821:1852   */\n      tag_333\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":1871:1876   */\n      swap3\n      pop\n        /* \"#utility.yul\":1928:1930   */\n      0x20\n        /* \"#utility.yul\":1913:1931   */\n      dup5\n      add\n        /* \"#utility.yul\":1900:1932   */\n      calldataload\n        /* \"#utility.yul\":1941:1974   */\n      tag_353\n        /* \"#utility.yul\":1900:1932   */\n      dup2\n        /* \"#utility.yul\":1941:1974   */\n      tag_333\n      jump\t// in\n    tag_353:\n        /* \"#utility.yul\":1601:2057   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1993:2000   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":2047:2049   */\n      0x40\n        /* \"#utility.yul\":2032:2050   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":2019:2051   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1601:2057   */\n      jump\t// out\n        /* \"#utility.yul\":2433:2613   */\n    tag_61:\n        /* \"#utility.yul\":2492:2498   */\n      0x00\n        /* \"#utility.yul\":2545:2547   */\n      0x20\n        /* \"#utility.yul\":2533:2542   */\n      dup3\n        /* \"#utility.yul\":2524:2531   */\n      dup5\n        /* \"#utility.yul\":2520:2543   */\n      sub\n        /* \"#utility.yul\":2516:2548   */\n      slt\n        /* \"#utility.yul\":2513:2565   */\n      iszero\n      tag_357\n      jumpi\n        /* \"#utility.yul\":2561:2562   */\n      0x00\n        /* \"#utility.yul\":2558:2559   */\n      dup1\n        /* \"#utility.yul\":2551:2563   */\n      revert\n        /* \"#utility.yul\":2513:2565   */\n    tag_357:\n      pop\n        /* \"#utility.yul\":2584:2607   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2433:2613   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2618:2865   */\n    tag_65:\n        /* \"#utility.yul\":2677:2683   */\n      0x00\n        /* \"#utility.yul\":2730:2732   */\n      0x20\n        /* \"#utility.yul\":2718:2727   */\n      dup3\n        /* \"#utility.yul\":2709:2716   */\n      dup5\n        /* \"#utility.yul\":2705:2728   */\n      sub\n        /* \"#utility.yul\":2701:2733   */\n      slt\n        /* \"#utility.yul\":2698:2750   */\n      iszero\n      tag_359\n      jumpi\n        /* \"#utility.yul\":2746:2747   */\n      0x00\n        /* \"#utility.yul\":2743:2744   */\n      dup1\n        /* \"#utility.yul\":2736:2748   */\n      revert\n        /* \"#utility.yul\":2698:2750   */\n    tag_359:\n        /* \"#utility.yul\":2785:2794   */\n      dup2\n        /* \"#utility.yul\":2772:2795   */\n      calldataload\n        /* \"#utility.yul\":2804:2835   */\n      tag_360\n        /* \"#utility.yul\":2829:2834   */\n      dup2\n        /* \"#utility.yul\":2804:2835   */\n      tag_333\n      jump\t// in\n    tag_360:\n        /* \"#utility.yul\":2854:2859   */\n      swap4\n        /* \"#utility.yul\":2618:2865   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3384:4213   */\n    tag_96:\n        /* \"#utility.yul\":3495:3501   */\n      0x00\n        /* \"#utility.yul\":3503:3509   */\n      dup1\n        /* \"#utility.yul\":3511:3517   */\n      0x00\n        /* \"#utility.yul\":3519:3525   */\n      dup1\n        /* \"#utility.yul\":3527:3533   */\n      0x00\n        /* \"#utility.yul\":3535:3541   */\n      dup1\n        /* \"#utility.yul\":3543:3549   */\n      0x00\n        /* \"#utility.yul\":3596:3599   */\n      0xe0\n        /* \"#utility.yul\":3584:3593   */\n      dup9\n        /* \"#utility.yul\":3575:3582   */\n      dup11\n        /* \"#utility.yul\":3571:3594   */\n      sub\n        /* \"#utility.yul\":3567:3600   */\n      slt\n        /* \"#utility.yul\":3564:3617   */\n      iszero\n      tag_366\n      jumpi\n        /* \"#utility.yul\":3613:3614   */\n      0x00\n        /* \"#utility.yul\":3610:3611   */\n      dup1\n        /* \"#utility.yul\":3603:3615   */\n      revert\n        /* \"#utility.yul\":3564:3617   */\n    tag_366:\n        /* \"#utility.yul\":3652:3661   */\n      dup8\n        /* \"#utility.yul\":3639:3662   */\n      calldataload\n        /* \"#utility.yul\":3671:3702   */\n      tag_367\n        /* \"#utility.yul\":3696:3701   */\n      dup2\n        /* \"#utility.yul\":3671:3702   */\n      tag_333\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":3721:3726   */\n      swap7\n      pop\n        /* \"#utility.yul\":3778:3780   */\n      0x20\n        /* \"#utility.yul\":3763:3781   */\n      dup9\n      add\n        /* \"#utility.yul\":3750:3782   */\n      calldataload\n        /* \"#utility.yul\":3791:3824   */\n      tag_368\n        /* \"#utility.yul\":3750:3782   */\n      dup2\n        /* \"#utility.yul\":3791:3824   */\n      tag_333\n      jump\t// in\n    tag_368:\n        /* \"#utility.yul\":3843:3850   */\n      swap6\n      pop\n        /* \"#utility.yul\":3897:3899   */\n      0x40\n        /* \"#utility.yul\":3882:3900   */\n      dup9\n      add\n        /* \"#utility.yul\":3869:3901   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":3948:3950   */\n      0x60\n        /* \"#utility.yul\":3933:3951   */\n      dup9\n      add\n        /* \"#utility.yul\":3920:3952   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":4004:4007   */\n      0x80\n        /* \"#utility.yul\":3989:4008   */\n      dup9\n      add\n        /* \"#utility.yul\":3976:4009   */\n      calldataload\n        /* \"#utility.yul\":4053:4057   */\n      0xff\n        /* \"#utility.yul\":4040:4058   */\n      dup2\n      and\n        /* \"#utility.yul\":4028:4059   */\n      dup2\n      eq\n        /* \"#utility.yul\":4018:4077   */\n      tag_369\n      jumpi\n        /* \"#utility.yul\":4073:4074   */\n      0x00\n        /* \"#utility.yul\":4070:4071   */\n      dup1\n        /* \"#utility.yul\":4063:4075   */\n      revert\n        /* \"#utility.yul\":4018:4077   */\n    tag_369:\n        /* \"#utility.yul\":3384:4213   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":4096:4103   */\n      swap5\n        /* \"#utility.yul\":4150:4153   */\n      0xa0\n        /* \"#utility.yul\":4135:4154   */\n      dup5\n      add\n        /* \"#utility.yul\":4122:4155   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4202:4205   */\n      0xc0\n        /* \"#utility.yul\":4187:4206   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":4174:4207   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":3384:4213   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4218:4606   */\n    tag_100:\n        /* \"#utility.yul\":4286:4292   */\n      0x00\n        /* \"#utility.yul\":4294:4300   */\n      dup1\n        /* \"#utility.yul\":4347:4349   */\n      0x40\n        /* \"#utility.yul\":4335:4344   */\n      dup4\n        /* \"#utility.yul\":4326:4333   */\n      dup6\n        /* \"#utility.yul\":4322:4345   */\n      sub\n        /* \"#utility.yul\":4318:4350   */\n      slt\n        /* \"#utility.yul\":4315:4367   */\n      iszero\n      tag_371\n      jumpi\n        /* \"#utility.yul\":4363:4364   */\n      0x00\n        /* \"#utility.yul\":4360:4361   */\n      dup1\n        /* \"#utility.yul\":4353:4365   */\n      revert\n        /* \"#utility.yul\":4315:4367   */\n    tag_371:\n        /* \"#utility.yul\":4402:4411   */\n      dup3\n        /* \"#utility.yul\":4389:4412   */\n      calldataload\n        /* \"#utility.yul\":4421:4452   */\n      tag_372\n        /* \"#utility.yul\":4446:4451   */\n      dup2\n        /* \"#utility.yul\":4421:4452   */\n      tag_333\n      jump\t// in\n    tag_372:\n        /* \"#utility.yul\":4471:4476   */\n      swap2\n      pop\n        /* \"#utility.yul\":4528:4530   */\n      0x20\n        /* \"#utility.yul\":4513:4531   */\n      dup4\n      add\n        /* \"#utility.yul\":4500:4532   */\n      calldataload\n        /* \"#utility.yul\":4541:4574   */\n      tag_373\n        /* \"#utility.yul\":4500:4532   */\n      dup2\n        /* \"#utility.yul\":4541:4574   */\n      tag_333\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":4593:4600   */\n      dup1\n        /* \"#utility.yul\":4583:4600   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":4218:4606   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4611:4991   */\n    tag_105:\n        /* \"#utility.yul\":4690:4691   */\n      0x01\n        /* \"#utility.yul\":4686:4698   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":4733:4745   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":4754:4815   */\n      tag_375\n      jumpi\n        /* \"#utility.yul\":4808:4812   */\n      0x7f\n        /* \"#utility.yul\":4800:4806   */\n      dup3\n        /* \"#utility.yul\":4796:4813   */\n      and\n        /* \"#utility.yul\":4786:4813   */\n      swap2\n      pop\n        /* \"#utility.yul\":4754:4815   */\n    tag_375:\n        /* \"#utility.yul\":4861:4863   */\n      0x20\n        /* \"#utility.yul\":4853:4859   */\n      dup3\n        /* \"#utility.yul\":4850:4864   */\n      lt\n        /* \"#utility.yul\":4830:4848   */\n      dup2\n        /* \"#utility.yul\":4827:4865   */\n      sub\n        /* \"#utility.yul\":4824:4985   */\n      tag_264\n      jumpi\n        /* \"#utility.yul\":4907:4917   */\n      0x4e487b71\n        /* \"#utility.yul\":4902:4905   */\n      0xe0\n        /* \"#utility.yul\":4898:4918   */\n      shl\n        /* \"#utility.yul\":4895:4896   */\n      0x00\n        /* \"#utility.yul\":4888:4919   */\n      mstore\n        /* \"#utility.yul\":4942:4946   */\n      0x22\n        /* \"#utility.yul\":4939:4940   */\n      0x04\n        /* \"#utility.yul\":4932:4947   */\n      mstore\n        /* \"#utility.yul\":4970:4974   */\n      0x24\n        /* \"#utility.yul\":4967:4968   */\n      0x00\n        /* \"#utility.yul\":4960:4975   */\n      revert\n        /* \"#utility.yul\":4996:5123   */\n    tag_334:\n        /* \"#utility.yul\":5057:5067   */\n      0x4e487b71\n        /* \"#utility.yul\":5052:5055   */\n      0xe0\n        /* \"#utility.yul\":5048:5068   */\n      shl\n        /* \"#utility.yul\":5045:5046   */\n      0x00\n        /* \"#utility.yul\":5038:5069   */\n      mstore\n        /* \"#utility.yul\":5088:5092   */\n      0x11\n        /* \"#utility.yul\":5085:5086   */\n      0x04\n        /* \"#utility.yul\":5078:5093   */\n      mstore\n        /* \"#utility.yul\":5112:5116   */\n      0x24\n        /* \"#utility.yul\":5109:5110   */\n      0x00\n        /* \"#utility.yul\":5102:5117   */\n      revert\n        /* \"#utility.yul\":5128:5256   */\n    tag_131:\n        /* \"#utility.yul\":5168:5171   */\n      0x00\n        /* \"#utility.yul\":5199:5200   */\n      dup3\n        /* \"#utility.yul\":5195:5201   */\n      not\n        /* \"#utility.yul\":5192:5193   */\n      dup3\n        /* \"#utility.yul\":5189:5202   */\n      gt\n        /* \"#utility.yul\":5186:5225   */\n      iszero\n      tag_380\n      jumpi\n        /* \"#utility.yul\":5205:5223   */\n      tag_380\n      tag_334\n      jump\t// in\n    tag_380:\n      pop\n        /* \"#utility.yul\":5241:5250   */\n      add\n      swap1\n        /* \"#utility.yul\":5128:5256   */\n      jump\t// out\n        /* \"#utility.yul\":5261:5512   */\n    tag_136:\n        /* \"#utility.yul\":5331:5337   */\n      0x00\n        /* \"#utility.yul\":5384:5386   */\n      0x20\n        /* \"#utility.yul\":5372:5381   */\n      dup3\n        /* \"#utility.yul\":5363:5370   */\n      dup5\n        /* \"#utility.yul\":5359:5382   */\n      sub\n        /* \"#utility.yul\":5355:5387   */\n      slt\n        /* \"#utility.yul\":5352:5404   */\n      iszero\n      tag_382\n      jumpi\n        /* \"#utility.yul\":5400:5401   */\n      0x00\n        /* \"#utility.yul\":5397:5398   */\n      dup1\n        /* \"#utility.yul\":5390:5402   */\n      revert\n        /* \"#utility.yul\":5352:5404   */\n    tag_382:\n        /* \"#utility.yul\":5432:5441   */\n      dup2\n        /* \"#utility.yul\":5426:5442   */\n      mload\n        /* \"#utility.yul\":5451:5482   */\n      tag_360\n        /* \"#utility.yul\":5476:5481   */\n      dup2\n        /* \"#utility.yul\":5451:5482   */\n      tag_333\n      jump\t// in\n        /* \"#utility.yul\":5643:6829   */\n    tag_139:\n        /* \"#utility.yul\":5752:5756   */\n      0x00\n        /* \"#utility.yul\":5781:5783   */\n      0x20\n        /* \"#utility.yul\":5810:5812   */\n      dup1\n        /* \"#utility.yul\":5799:5808   */\n      dup4\n        /* \"#utility.yul\":5792:5813   */\n      mstore\n        /* \"#utility.yul\":5833:5834   */\n      0x00\n        /* \"#utility.yul\":5866:5872   */\n      dup5\n        /* \"#utility.yul\":5860:5873   */\n      sload\n        /* \"#utility.yul\":5896:5899   */\n      dup2\n        /* \"#utility.yul\":5918:5919   */\n      0x01\n        /* \"#utility.yul\":5946:5955   */\n      dup3\n        /* \"#utility.yul\":5942:5944   */\n      dup2\n        /* \"#utility.yul\":5938:5956   */\n      shr\n        /* \"#utility.yul\":5928:5956   */\n      swap2\n      pop\n        /* \"#utility.yul\":6006:6008   */\n      dup1\n        /* \"#utility.yul\":5995:6004   */\n      dup4\n        /* \"#utility.yul\":5991:6009   */\n      and\n        /* \"#utility.yul\":6028:6046   */\n      dup1\n        /* \"#utility.yul\":6018:6079   */\n      tag_386\n      jumpi\n        /* \"#utility.yul\":6072:6076   */\n      0x7f\n        /* \"#utility.yul\":6064:6070   */\n      dup4\n        /* \"#utility.yul\":6060:6077   */\n      and\n        /* \"#utility.yul\":6050:6077   */\n      swap3\n      pop\n        /* \"#utility.yul\":6018:6079   */\n    tag_386:\n        /* \"#utility.yul\":6125:6127   */\n      dup6\n        /* \"#utility.yul\":6117:6123   */\n      dup4\n        /* \"#utility.yul\":6114:6128   */\n      lt\n        /* \"#utility.yul\":6094:6112   */\n      dup2\n        /* \"#utility.yul\":6091:6129   */\n      sub\n        /* \"#utility.yul\":6088:6253   */\n      tag_387\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":6152:6185   */\n      dup6\n      mstore\n        /* \"#utility.yul\":6208:6212   */\n      0x22\n        /* \"#utility.yul\":6205:6206   */\n      0x04\n        /* \"#utility.yul\":6198:6213   */\n      mstore\n        /* \"#utility.yul\":6238:6242   */\n      0x24\n        /* \"#utility.yul\":6159:6162   */\n      dup6\n        /* \"#utility.yul\":6226:6243   */\n      revert\n        /* \"#utility.yul\":6088:6253   */\n    tag_387:\n        /* \"#utility.yul\":6309:6327   */\n      dup8\n      dup7\n      add\n        /* \"#utility.yul\":101:120   */\n      dup4\n      dup2\n      mstore\n        /* \"#utility.yul\":153:157   */\n      0x20\n        /* \"#utility.yul\":144:158   */\n      add\n        /* \"#utility.yul\":6352:6370   */\n      dup2\n        /* \"#utility.yul\":6379:6479   */\n      dup1\n      iszero\n      tag_390\n      jumpi\n        /* \"#utility.yul\":6493:6494   */\n      0x01\n        /* \"#utility.yul\":6488:6803   */\n      dup2\n      eq\n      tag_391\n      jumpi\n        /* \"#utility.yul\":6345:6803   */\n      jump(tag_389)\n        /* \"#utility.yul\":6379:6479   */\n    tag_390:\n      not(0xff)\n        /* \"#utility.yul\":6412:6436   */\n      dup7\n      and\n        /* \"#utility.yul\":6400:6437   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6457:6469   */\n      dup8\n      dup3\n      add\n      swap7\n      pop\n        /* \"#utility.yul\":6379:6479   */\n      jump(tag_389)\n        /* \"#utility.yul\":6488:6803   */\n    tag_391:\n        /* \"#utility.yul\":5590:5591   */\n      0x00\n        /* \"#utility.yul\":5583:5597   */\n      dup12\n      dup2\n      mstore\n        /* \"#utility.yul\":5627:5631   */\n      0x20\n        /* \"#utility.yul\":5614:5632   */\n      swap1\n      keccak256\n        /* \"#utility.yul\":6583:6584   */\n      0x00\n        /* \"#utility.yul\":6597:6762   */\n    tag_393:\n        /* \"#utility.yul\":6611:6617   */\n      dup7\n        /* \"#utility.yul\":6608:6609   */\n      dup2\n        /* \"#utility.yul\":6605:6618   */\n      lt\n        /* \"#utility.yul\":6597:6762   */\n      iszero\n      tag_395\n      jumpi\n        /* \"#utility.yul\":6689:6703   */\n      dup2\n      sload\n        /* \"#utility.yul\":6676:6687   */\n      dup5\n      dup3\n      add\n        /* \"#utility.yul\":6669:6704   */\n      mstore\n        /* \"#utility.yul\":6732:6748   */\n      swap1\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":6626:6636   */\n      dup10\n      add\n        /* \"#utility.yul\":6597:6762   */\n      jump(tag_393)\n    tag_395:\n        /* \"#utility.yul\":6782:6793   */\n      dup4\n      add\n      swap8\n      pop\n      pop\n        /* \"#utility.yul\":6345:6803   */\n    tag_389:\n      pop\n        /* \"#utility.yul\":6820:6823   */\n      swap5\n      swap10\n        /* \"#utility.yul\":5643:6829   */\n      swap9\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12101:12226   */\n    tag_249:\n        /* \"#utility.yul\":12141:12145   */\n      0x00\n        /* \"#utility.yul\":12169:12170   */\n      dup3\n        /* \"#utility.yul\":12166:12167   */\n      dup3\n        /* \"#utility.yul\":12163:12171   */\n      lt\n        /* \"#utility.yul\":12160:12194   */\n      iszero\n      tag_411\n      jumpi\n        /* \"#utility.yul\":12174:12192   */\n      tag_411\n      tag_334\n      jump\t// in\n    tag_411:\n      pop\n        /* \"#utility.yul\":12211:12220   */\n      sub\n      swap1\n        /* \"#utility.yul\":12101:12226   */\n      jump\t// out\n        /* \"#utility.yul\":13930:14057   */\n    tag_296:\n        /* \"#utility.yul\":13991:14001   */\n      0x4e487b71\n        /* \"#utility.yul\":13986:13989   */\n      0xe0\n        /* \"#utility.yul\":13982:14002   */\n      shl\n        /* \"#utility.yul\":13979:13980   */\n      0x00\n        /* \"#utility.yul\":13972:14003   */\n      mstore\n        /* \"#utility.yul\":14022:14026   */\n      0x21\n        /* \"#utility.yul\":14019:14020   */\n      0x04\n        /* \"#utility.yul\":14012:14027   */\n      mstore\n        /* \"#utility.yul\":14046:14050   */\n      0x24\n        /* \"#utility.yul\":14043:14044   */\n      0x00\n        /* \"#utility.yul\":14036:14051   */\n      revert\n\n    auxdata: 0xa26469706673582212205a7cc3753eb1bba830e14db12bfb50eab119e053805b4ea8f494b84d6aa5881164736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1059": {
									"entryPoint": null,
									"id": 1059,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_1220": {
									"entryPoint": null,
									"id": 1220,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_1555": {
									"entryPoint": null,
									"id": 1555,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_32": {
									"entryPoint": null,
									"id": 32,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_944": {
									"entryPoint": null,
									"id": 944,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_1000": {
									"entryPoint": null,
									"id": 1000,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 730,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:1185:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "95:209:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "141:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "150:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "153:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "137:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "108:32:14"
															},
															"nodeType": "YulIf",
															"src": "105:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "179:16:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "170:5:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "258:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "267:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "270:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "243:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "248:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "252:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "207:50:14"
															},
															"nodeType": "YulIf",
															"src": "204:70:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "283:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "293:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "61:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "72:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "84:6:14",
														"type": ""
													}
												],
												"src": "14:290:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "522:276:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "532:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "544:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "555:3:14",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "540:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "532:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "575:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "586:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "568:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "568:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "568:25:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "613:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "624:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "609:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "609:18:14"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "629:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "602:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "602:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "602:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "656:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "667:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "652:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "652:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "672:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "645:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "645:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "645:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "699:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "710:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "695:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "695:18:14"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "715:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "688:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "688:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "688:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "742:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "753:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "738:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "738:19:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "763:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "779:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "784:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "775:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "775:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "788:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "771:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "771:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "759:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "759:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "731:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "731:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "731:61:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "459:9:14",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "470:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "478:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "486:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "494:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "502:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "513:4:14",
														"type": ""
													}
												],
												"src": "309:489:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "858:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "868:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "882:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "885:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "878:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "878:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "868:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "899:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "929:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "935:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "925:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "925:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "903:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "976:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "978:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "992:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1000:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "988:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "988:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "978:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "956:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "949:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "949:26:14"
															},
															"nodeType": "YulIf",
															"src": "946:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1066:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1087:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1094:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1099:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1090:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1090:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1080:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1080:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1080:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1131:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1134:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1124:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1124:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1124:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1159:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1162:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1152:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1152:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1152:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1022:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1045:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1053:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1042:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1042:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1019:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1019:38:14"
															},
															"nodeType": "YulIf",
															"src": "1016:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "838:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "847:6:14",
														"type": ""
													}
												],
												"src": "803:380:14"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH2 0x1A0 PUSH1 0x40 MSTORE PUSH1 0xC PUSH2 0x160 DUP2 SWAP1 MSTORE PUSH12 0x15539055551213D492569151 PUSH1 0xA2 SHL PUSH2 0x180 SWAP1 DUP2 MSTORE PUSH3 0x32 SWAP2 PUSH1 0x7 SWAP2 SWAP1 PUSH3 0x202 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 0x40 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1949 CODESIZE SUB DUP1 PUSH3 0x1949 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x63 SWAP2 PUSH3 0x2A8 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x14D0D5 PUSH1 0xEA SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x14D0D5 PUSH1 0xEA SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x14D0D5 PUSH1 0xEA SHL DUP2 MSTORE POP PUSH1 0x9 DUP3 PUSH1 0x3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH3 0xED SWAP3 SWAP2 SWAP1 PUSH3 0x202 JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x103 SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x202 JUMP JUMPDEST POP PUSH1 0xFF AND PUSH1 0x80 MSTORE POP POP DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 DUP3 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH2 0x100 DUP3 SWAP1 MSTORE PUSH2 0x120 DUP2 SWAP1 MSTORE CHAINID PUSH1 0xC0 MSTORE PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH3 0x1A1 DUP2 DUP5 DUP5 PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP3 SWAP1 MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA0 MSTORE ADDRESS PUSH1 0xE0 MSTORE PUSH2 0x140 MSTORE POP POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP4 POP PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP3 POP PUSH1 0x0 SWAP2 POP LOG2 POP POP PUSH3 0x316 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x210 SWAP1 PUSH3 0x2DA JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x234 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x27F JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x24F JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x27F JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x27F JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x27F JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x262 JUMP JUMPDEST POP PUSH3 0x28D SWAP3 SWAP2 POP PUSH3 0x291 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x28D JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x292 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x2BB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x2EF JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x310 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x15D8 PUSH3 0x371 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0xBEE ADD MSTORE PUSH1 0x0 PUSH2 0xC3D ADD MSTORE PUSH1 0x0 PUSH2 0xC18 ADD MSTORE PUSH1 0x0 PUSH2 0xB71 ADD MSTORE PUSH1 0x0 PUSH2 0xB9B ADD MSTORE PUSH1 0x0 PUSH2 0xBC5 ADD MSTORE PUSH1 0x0 PUSH2 0x193 ADD MSTORE PUSH2 0x15D8 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x157 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x1321 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x16B PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x157 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EB PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH2 0x16B PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x157 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x668 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1416 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2F0 SWAP1 PUSH2 0x144F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x31C SWAP1 PUSH2 0x144F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x369 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x33E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x369 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x34C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x7F7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x399 DUP6 DUP3 DUP6 PUSH2 0x91C JUMP JUMPDEST PUSH2 0x3A4 DUP6 DUP6 DUP6 PUSH2 0x996 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B9 PUSH2 0xB64 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x3D1 DUP4 DUP4 PUSH2 0x7CC JUMP JUMPDEST PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x1499 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x457 SWAP2 SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x7 SWAP1 PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0x14CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x49F DUP3 DUP3 PUSH2 0xC8B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4AD CALLER DUP3 PUSH2 0xD6A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x49F DUP3 DUP3 PUSH2 0xEB5 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x7 SWAP1 PUSH2 0x565 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0x14CE JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2F0 SWAP1 PUSH2 0x144F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x5ED DUP3 DUP7 PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x64D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x3A4 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x996 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x6E7 DUP13 PUSH2 0xF4A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x742 DUP3 PUSH2 0xF72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x752 DUP3 DUP8 DUP8 DUP8 PUSH2 0xFC0 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x7C0 DUP11 DUP11 DUP11 PUSH2 0x7F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x928 DUP5 DUP5 PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x990 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x990 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x7F7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xB0B SWAP1 DUP5 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB57 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x990 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xBBD JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBE7 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCF3 SWAP2 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xD20 SWAP1 DUP5 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xE6D SWAP1 DUP5 SWAP1 PUSH2 0x1575 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x90F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 DUP4 CALLER PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECF DUP4 DUP4 PUSH2 0x1575 JUMP JUMPDEST LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0xF33 DUP3 DUP3 PUSH2 0x1575 JUMP JUMPDEST SWAP1 POP PUSH2 0xF40 DUP4 CALLER DUP4 PUSH2 0x7F7 JUMP JUMPDEST PUSH2 0xEB0 DUP4 DUP4 PUSH2 0xD6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CA PUSH2 0xF7F PUSH2 0xB64 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD1 DUP8 DUP8 DUP8 DUP8 PUSH2 0xFE8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xFDE DUP2 PUSH2 0x10D5 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x101F JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x10CC JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x1037 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x1048 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x109C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C5 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x10CC JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10E9 JUMPI PUSH2 0x10E9 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x10F1 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1105 JUMPI PUSH2 0x1105 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1166 JUMPI PUSH2 0x1166 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x11B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x11C7 JUMPI PUSH2 0x11C7 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x121F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1233 JUMPI PUSH2 0x1233 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x4AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12B8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x129C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x12CA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1313 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1341 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1351 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x138D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1398 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x13C5 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x13D5 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1434 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1444 DUP2 PUSH2 0x12E0 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1463 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF6C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x14AC JUMPI PUSH2 0x14AC PUSH2 0x1483 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1398 DUP2 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x14F0 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST DUP6 DUP4 LT DUP2 SUB PUSH2 0x150D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP8 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP2 DUP1 ISZERO PUSH2 0x152A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x153B JUMPI PUSH2 0x1566 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP3 MSTORE DUP8 DUP3 ADD SWAP7 POP PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1560 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP10 ADD PUSH2 0x1547 JUMP JUMPDEST DUP4 ADD SWAP8 POP POP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1587 JUMPI PUSH2 0x1587 PUSH2 0x1483 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS PUSH29 0xC3753EB1BBA830E14DB12BFB50EAB119E053805B4EA8F494B84D6AA588 GT PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "494:36:11:-:0;316:907:0;494:36:11;;316:907:0;494:36:11;;;-1:-1:-1;;;494:36:11;;;;;;;;;;:::i;:::-;;384:136:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;506:10;1762:52:10;;;;;;;;;;;;;-1:-1:-1;;;1762:52:10;;;1801:4;2455:602:9;;;;;;;;;;;;;-1:-1:-1;;;2455:602:9;;;1804:161:13;;;;;;;;;;;;;-1:-1:-1;;;1804:161:13;;;;;;;;;;;;;;;;-1:-1:-1;;;1804:161:13;;;440:1:0;1895:5:13;1887;:13;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1910:17:13;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;1937:21:13;;;;-1:-1:-1;;2541:22:9;;;;;;;;;;2597:25;;;;;;;;;2778;;;;2813:31;;;;2873:13;2854:32;;2651:117;2923:58;2651:117;2541:22;2597:25;3633:73;;;;;;568:25:14;;;609:18;;;602:34;;;652:18;;;645:34;;;3677:13:9;695:18:14;;;688:34;3700:4:9;738:19:14;;;731:61;3597:7:9;;540:19:14;;3633:73:9;;;;;;;;;;;;3623:84;;;;;;3616:91;;3457:257;;;;;;2923:58;2896:85;;3014:4;2991:28;;3029:21;;-1:-1:-1;;634:9:11;:22;;-1:-1:-1;;;;;;634:22:11;-1:-1:-1;;;;;634:22:11;;;;;;;;671:28;;634:22;;-1:-1:-1;671:28:11;;-1:-1:-1;;;;671:28:11;580:126;384:136:0;316:907;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;316:907:0;;;-1:-1:-1;316:907:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:290:14;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:14;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:14:o;803:380::-;882:1;878:12;;;;925;;;946:61;;1000:4;992:6;988:17;978:27;;946:61;1053:2;1045:6;1042:14;1022:18;1019:38;1016:161;;1099:10;1094:3;1090:20;1087:1;1080:31;1134:4;1131:1;1124:15;1162:4;1159:1;1152:15;1016:161;;803:380;;;:::o;:::-;316:907:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1159": {
									"entryPoint": 943,
									"id": 1159,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_afterTokenTransfer_2095": {
									"entryPoint": null,
									"id": 2095,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_2030": {
									"entryPoint": 2039,
									"id": 2030,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_2084": {
									"entryPoint": null,
									"id": 2084,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_1000": {
									"entryPoint": null,
									"id": 1000,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@_burnFrom_116": {
									"entryPoint": 3765,
									"id": 116,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_burn_1985": {
									"entryPoint": 3434,
									"id": 1985,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_973": {
									"entryPoint": 2916,
									"id": 973,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_1016": {
									"entryPoint": 3954,
									"id": 1016,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_1913": {
									"entryPoint": 3211,
									"id": 1913,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_2073": {
									"entryPoint": 2332,
									"id": 2073,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_520": {
									"entryPoint": 4309,
									"id": 520,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_1857": {
									"entryPoint": 2454,
									"id": 1857,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1188": {
									"entryPoint": 3914,
									"id": 1188,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_1652": {
									"entryPoint": 1996,
									"id": 1652,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1677": {
									"entryPoint": 883,
									"id": 1677,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@authority_1205": {
									"entryPoint": null,
									"id": 1205,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@balanceOf_1609": {
									"entryPoint": null,
									"id": 1609,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_75": {
									"entryPoint": 1200,
									"id": 75,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_61": {
									"entryPoint": 1187,
									"id": 61,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@current_400": {
									"entryPoint": null,
									"id": 400,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1585": {
									"entryPoint": null,
									"id": 1585,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1780": {
									"entryPoint": 1503,
									"id": 1780,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1739": {
									"entryPoint": 958,
									"id": 1739,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increment_414": {
									"entryPoint": null,
									"id": 414,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@mint_48": {
									"entryPoint": 992,
									"id": 48,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_1565": {
									"entryPoint": 737,
									"id": 1565,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1148": {
									"entryPoint": 1456,
									"id": 1148,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@permit_1132": {
									"entryPoint": 1640,
									"id": 1132,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_803": {
									"entryPoint": 4032,
									"id": 803,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@setAuthority_1298": {
									"entryPoint": 1210,
									"id": 1298,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@symbol_1575": {
									"entryPoint": 1488,
									"id": 1575,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toTypedDataHash_862": {
									"entryPoint": null,
									"id": 862,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_1595": {
									"entryPoint": null,
									"id": 1595,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1710": {
									"entryPoint": 907,
									"id": 1710,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1634": {
									"entryPoint": 1626,
									"id": 1634,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_770": {
									"entryPoint": 4072,
									"id": 770,
									"parameterSlots": 4,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 4987,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 5297,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 5142,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 4897,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 5023,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 4853,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_contract$_ISolidDaoManagement_$360": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 4962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_contract$_ISolidDaoManagement_$360__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 4747,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 5326,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_string": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 5273,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 5493,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 5199,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 5251,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 5516,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_address": {
									"entryPoint": 4832,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:15578:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "91:73:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "108:3:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "113:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "101:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "101:19:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "101:19:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "129:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "148:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "153:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "144:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "144:14:14"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nodeType": "YulIdentifier",
																	"src": "129:11:14"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "59:3:14",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "64:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nodeType": "YulTypedName",
														"src": "75:11:14",
														"type": ""
													}
												],
												"src": "14:150:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "290:476:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "300:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "310:2:14",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "304:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "328:9:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "339:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "321:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "321:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "321:21:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "351:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "371:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "365:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "365:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "355:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "398:9:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "409:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "394:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "394:18:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "414:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "387:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "387:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "387:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "430:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "439:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "434:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "499:90:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "528:9:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "539:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "524:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "524:17:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "543:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "520:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "520:26:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "562:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "570:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "558:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "558:14:14"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "574:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "554:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "554:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "548:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "548:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "513:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "513:66:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "513:66:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "460:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "463:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "457:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "457:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "471:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "473:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "482:1:14"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "485:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "478:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "478:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "473:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "453:3:14",
																"statements": []
															},
															"src": "449:140:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "623:66:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "652:9:14"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "663:6:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "648:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "648:22:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "672:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "644:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "644:31:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "677:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "637:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "637:42:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "637:42:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "604:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "607:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "601:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "601:13:14"
															},
															"nodeType": "YulIf",
															"src": "598:91:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "698:62:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "714:9:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "733:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "741:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "729:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "729:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "750:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "746:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "746:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "725:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "725:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "710:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "710:45:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "757:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "706:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "706:54:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "698:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "259:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "270:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "281:4:14",
														"type": ""
													}
												],
												"src": "169:597:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "816:86:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "880:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "889:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "892:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "882:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "882:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "882:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "839:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "850:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "865:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "870:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "861:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "861:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "874:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "857:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "857:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "846:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "846:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "836:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "836:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "829:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "829:50:14"
															},
															"nodeType": "YulIf",
															"src": "826:70:14"
														}
													]
												},
												"name": "validator_revert_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "805:5:14",
														"type": ""
													}
												],
												"src": "771:131:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "994:228:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1040:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1049:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1052:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1042:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1042:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1042:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1015:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1024:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1011:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1011:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1036:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1007:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1007:32:14"
															},
															"nodeType": "YulIf",
															"src": "1004:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1065:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1091:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1078:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1078:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1069:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1135:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1110:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1110:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1110:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1150:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1160:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1150:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1174:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1201:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1212:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1197:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1197:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1184:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1184:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1174:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "952:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "963:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "975:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "983:6:14",
														"type": ""
													}
												],
												"src": "907:315:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1322:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1332:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1344:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1355:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1340:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1340:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1332:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1374:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1399:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1392:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1392:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1385:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1385:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1367:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1367:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1367:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1291:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1302:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1313:4:14",
														"type": ""
													}
												],
												"src": "1227:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1520:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1530:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1542:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1553:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1538:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1538:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1530:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1572:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1583:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1565:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1565:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1565:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1489:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1500:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1511:4:14",
														"type": ""
													}
												],
												"src": "1419:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1705:352:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1751:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1760:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1763:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1753:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1753:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1753:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1726:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1735:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1722:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1722:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1747:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1718:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1718:32:14"
															},
															"nodeType": "YulIf",
															"src": "1715:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1776:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1802:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1789:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1789:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1780:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1846:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1821:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1821:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1821:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1861:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1871:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1861:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1885:47:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1917:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1928:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1913:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1913:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1900:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1900:32:14"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "1889:7:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "1966:7:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "1941:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1941:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1941:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1983:17:14",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "1993:7:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1983:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2009:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2036:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2047:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2032:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2032:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2019:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2019:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2009:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1655:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1666:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1678:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1686:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1694:6:14",
														"type": ""
													}
												],
												"src": "1601:456:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2159:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2169:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2181:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2192:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2177:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2177:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2169:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2211:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2226:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2234:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2222:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2222:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2204:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2204:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2204:36:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2128:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2139:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2150:4:14",
														"type": ""
													}
												],
												"src": "2062:184:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2352:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2362:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2374:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2385:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2370:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2370:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2362:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2404:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2415:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2397:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2397:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2397:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2321:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2332:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2343:4:14",
														"type": ""
													}
												],
												"src": "2251:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2503:110:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2549:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2558:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2561:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2551:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2551:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2551:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2524:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2533:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2520:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2520:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2545:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2516:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2516:32:14"
															},
															"nodeType": "YulIf",
															"src": "2513:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2574:33:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2597:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2584:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2584:23:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2574:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2469:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2480:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2492:6:14",
														"type": ""
													}
												],
												"src": "2433:180:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2688:177:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2734:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2743:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2746:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2736:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2736:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2736:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2709:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2718:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2705:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2705:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2730:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2701:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2701:32:14"
															},
															"nodeType": "YulIf",
															"src": "2698:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2759:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2785:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2772:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2772:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2763:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "2829:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "2804:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2804:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2804:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2844:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2854:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2844:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2654:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2665:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2677:6:14",
														"type": ""
													}
												],
												"src": "2618:247:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2967:177:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3013:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3022:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3025:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3015:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3015:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3015:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2988:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2997:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2984:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2984:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3009:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2980:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2980:32:14"
															},
															"nodeType": "YulIf",
															"src": "2977:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3038:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3064:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3051:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3051:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3042:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3108:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3083:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3083:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3083:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3123:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3133:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3123:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_contract$_ISolidDaoManagement_$360",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2933:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2944:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2956:6:14",
														"type": ""
													}
												],
												"src": "2870:274:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3277:102:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3287:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3299:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3310:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3295:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3295:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3287:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3329:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3344:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3360:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3365:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3356:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3356:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3369:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3352:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3352:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3340:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3340:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3322:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3322:51:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3322:51:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_ISolidDaoManagement_$360__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3246:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3257:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3268:4:14",
														"type": ""
													}
												],
												"src": "3149:230:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3554:659:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3601:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3610:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3613:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3603:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3603:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3603:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3575:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3584:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3571:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3571:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3596:3:14",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3567:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3567:33:14"
															},
															"nodeType": "YulIf",
															"src": "3564:53:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3626:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3652:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3639:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3639:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3630:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "3696:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3671:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3671:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3671:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3711:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3721:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3711:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3735:47:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3767:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3778:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3763:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3763:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3750:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:32:14"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "3739:7:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "3816:7:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "3791:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3791:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3791:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3833:17:14",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "3843:7:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3833:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3859:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3886:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3897:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3882:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3882:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3869:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3869:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "3859:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3910:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3937:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3948:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3933:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3933:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3920:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3920:32:14"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "3910:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3961:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3993:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4004:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3989:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3989:19:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3976:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3976:33:14"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nodeType": "YulTypedName",
																	"src": "3965:7:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4061:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4070:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4073:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4063:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4063:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4063:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_2",
																				"nodeType": "YulIdentifier",
																				"src": "4031:7:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_2",
																						"nodeType": "YulIdentifier",
																						"src": "4044:7:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4053:4:14",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4040:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4040:18:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "4028:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4028:31:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4021:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4021:39:14"
															},
															"nodeType": "YulIf",
															"src": "4018:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4086:17:14",
															"value": {
																"name": "value_2",
																"nodeType": "YulIdentifier",
																"src": "4096:7:14"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "4086:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4112:43:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4139:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4150:3:14",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4135:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4135:19:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4122:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4122:33:14"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "4112:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4164:43:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4191:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4202:3:14",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4187:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4187:19:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4174:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4174:33:14"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "4164:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3472:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3483:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3495:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3503:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3511:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "3519:6:14",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "3527:6:14",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "3535:6:14",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "3543:6:14",
														"type": ""
													}
												],
												"src": "3384:829:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4305:301:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4351:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4360:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4363:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4353:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4353:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4353:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4326:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4335:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4322:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4322:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4347:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4318:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4318:32:14"
															},
															"nodeType": "YulIf",
															"src": "4315:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4376:36:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4402:9:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4389:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4389:23:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "4380:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "4446:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "4421:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4421:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4421:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4461:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "4471:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4461:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4485:47:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4517:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4528:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4513:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4513:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4500:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4500:32:14"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nodeType": "YulTypedName",
																	"src": "4489:7:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value_1",
																		"nodeType": "YulIdentifier",
																		"src": "4566:7:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "4541:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4541:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4541:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4583:17:14",
															"value": {
																"name": "value_1",
																"nodeType": "YulIdentifier",
																"src": "4593:7:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4583:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4263:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4274:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4286:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4294:6:14",
														"type": ""
													}
												],
												"src": "4218:388:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4666:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4676:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4690:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4693:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "4686:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4686:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "4676:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4707:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "4737:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4743:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4733:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4733:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "4711:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4784:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4786:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "4800:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4808:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "4796:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4796:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4786:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4764:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4757:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4757:26:14"
															},
															"nodeType": "YulIf",
															"src": "4754:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4874:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4895:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4902:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4907:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4898:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4898:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4888:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4888:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4888:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4939:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4942:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "4932:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4932:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4932:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4967:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4970:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4960:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4960:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4960:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "4830:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "4853:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4861:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4850:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4850:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "4827:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4827:38:14"
															},
															"nodeType": "YulIf",
															"src": "4824:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "4646:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "4655:6:14",
														"type": ""
													}
												],
												"src": "4611:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5028:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5045:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5052:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5057:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5048:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5048:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5038:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5038:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5038:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5085:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5088:4:14",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5078:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5078:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5078:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5109:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5112:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "5102:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5102:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5102:15:14"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "4996:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5176:80:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5203:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "5205:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5205:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5205:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5192:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5199:1:14"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "5195:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5195:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "5189:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5189:13:14"
															},
															"nodeType": "YulIf",
															"src": "5186:39:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5234:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5245:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5248:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5241:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5241:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "5234:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "5159:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "5162:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "5168:3:14",
														"type": ""
													}
												],
												"src": "5128:128:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5342:170:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5388:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5397:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5400:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5390:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5390:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5390:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5363:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5372:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5359:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5359:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5384:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5355:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5355:32:14"
															},
															"nodeType": "YulIf",
															"src": "5352:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5413:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5432:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "5426:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5426:16:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "5417:5:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "5476:5:14"
																	}
																],
																"functionName": {
																	"name": "validator_revert_address",
																	"nodeType": "YulIdentifier",
																	"src": "5451:24:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5451:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5451:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5491:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "5501:5:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5491:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5308:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5319:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5331:6:14",
														"type": ""
													}
												],
												"src": "5261:251:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5573:65:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5590:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "5593:3:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5583:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5583:14:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5583:14:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5606:26:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5624:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5627:4:14",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "5614:9:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5614:18:14"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "5606:4:14"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "5556:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5564:4:14",
														"type": ""
													}
												],
												"src": "5517:121:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5761:1068:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5771:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5781:2:14",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5775:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5799:9:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "5810:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5792:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5792:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5792:21:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5822:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5833:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "ret",
																	"nodeType": "YulTypedName",
																	"src": "5826:3:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5843:30:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "5866:6:14"
																	}
																],
																"functionName": {
																	"name": "sload",
																	"nodeType": "YulIdentifier",
																	"src": "5860:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5860:13:14"
															},
															"variables": [
																{
																	"name": "slotValue",
																	"nodeType": "YulTypedName",
																	"src": "5847:9:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5882:17:14",
															"value": {
																"name": "ret",
																"nodeType": "YulIdentifier",
																"src": "5896:3:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "5886:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5908:11:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "5918:1:14",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "5912:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5928:28:14",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "5942:2:14"
																	},
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "5946:9:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5938:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5938:18:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5928:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5965:44:14",
															"value": {
																"arguments": [
																	{
																		"name": "slotValue",
																		"nodeType": "YulIdentifier",
																		"src": "5995:9:14"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "6006:2:14"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5991:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5991:18:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5969:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6048:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "6050:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "6064:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6072:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "6060:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6060:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6050:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6028:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6021:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6021:26:14"
															},
															"nodeType": "YulIf",
															"src": "6018:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6138:115:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "6159:3:14"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6168:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6173:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6164:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6164:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6152:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6152:33:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6152:33:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6205:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6208:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6198:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6198:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6198:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ret",
																					"nodeType": "YulIdentifier",
																					"src": "6233:3:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6238:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6226:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6226:17:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6226:17:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "6094:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "6117:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6125:2:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "6114:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6114:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "6091:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6091:38:14"
															},
															"nodeType": "YulIf",
															"src": "6088:165:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6262:74:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6313:9:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6324:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6309:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6309:18:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6329:6:14"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_string",
																	"nodeType": "YulIdentifier",
																	"src": "6273:35:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "6273:63:14"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "6266:3:14",
																	"type": ""
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6386:93:14",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6407:3:14"
																						},
																						{
																							"arguments": [
																								{
																									"name": "slotValue",
																									"nodeType": "YulIdentifier",
																									"src": "6416:9:14"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "6431:3:14",
																											"type": "",
																											"value": "255"
																										}
																									],
																									"functionName": {
																										"name": "not",
																										"nodeType": "YulIdentifier",
																										"src": "6427:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "6427:8:14"
																								}
																							],
																							"functionName": {
																								"name": "and",
																								"nodeType": "YulIdentifier",
																								"src": "6412:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "6412:24:14"
																						}
																					],
																					"functionName": {
																						"name": "mstore",
																						"nodeType": "YulIdentifier",
																						"src": "6400:6:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6400:37:14"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "6400:37:14"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "6450:19:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6461:3:14"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "6466:2:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6457:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6457:12:14"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "6450:3:14"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6379:100:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6384:1:14",
																		"type": "",
																		"value": "0"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "6495:308:14",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6509:52:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "value0",
																							"nodeType": "YulIdentifier",
																							"src": "6554:6:14"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "6524:29:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6524:37:14"
																				},
																				"variables": [
																					{
																						"name": "dataPos",
																						"nodeType": "YulTypedName",
																						"src": "6513:7:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "6574:10:14",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6583:1:14",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "6578:1:14",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "6651:111:14",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "pos",
																												"nodeType": "YulIdentifier",
																												"src": "6680:3:14"
																											},
																											{
																												"name": "i",
																												"nodeType": "YulIdentifier",
																												"src": "6685:1:14"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "6676:3:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6676:11:14"
																									},
																									{
																										"arguments": [
																											{
																												"name": "dataPos",
																												"nodeType": "YulIdentifier",
																												"src": "6695:7:14"
																											}
																										],
																										"functionName": {
																											"name": "sload",
																											"nodeType": "YulIdentifier",
																											"src": "6689:5:14"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "6689:14:14"
																									}
																								],
																								"functionName": {
																									"name": "mstore",
																									"nodeType": "YulIdentifier",
																									"src": "6669:6:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6669:35:14"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "6669:35:14"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "6721:27:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "dataPos",
																										"nodeType": "YulIdentifier",
																										"src": "6736:7:14"
																									},
																									{
																										"name": "_2",
																										"nodeType": "YulIdentifier",
																										"src": "6745:2:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6732:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6732:16:14"
																							},
																							"variableNames": [
																								{
																									"name": "dataPos",
																									"nodeType": "YulIdentifier",
																									"src": "6721:7:14"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6608:1:14"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "6611:6:14"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "6605:2:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6605:13:14"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "6619:19:14",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "6621:15:14",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "6630:1:14"
																									},
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "6633:2:14"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6626:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6626:10:14"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "6621:1:14"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "6601:3:14",
																					"statements": []
																				},
																				"src": "6597:165:14"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "6775:18:14",
																				"value": {
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "6786:3:14"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "6791:1:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6782:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6782:11:14"
																				},
																				"variableNames": [
																					{
																						"name": "ret",
																						"nodeType": "YulIdentifier",
																						"src": "6775:3:14"
																					}
																				]
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "6488:315:14",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6493:1:14",
																		"type": "",
																		"value": "1"
																	}
																}
															],
															"expression": {
																"name": "outOfPlaceEncoding",
																"nodeType": "YulIdentifier",
																"src": "6352:18:14"
															},
															"nodeType": "YulSwitch",
															"src": "6345:458:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6812:11:14",
															"value": {
																"name": "ret",
																"nodeType": "YulIdentifier",
																"src": "6820:3:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6812:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5730:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5741:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5752:4:14",
														"type": ""
													}
												],
												"src": "5643:1186:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7008:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7025:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7036:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7018:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7018:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7018:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7059:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7070:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7055:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7055:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7075:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7048:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7048:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7048:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7098:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7109:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7094:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7094:18:14"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7114:34:14",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7087:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7087:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7087:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7169:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7180:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7165:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7165:18:14"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7185:7:14",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7158:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7158:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7158:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7202:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7214:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7225:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7210:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7210:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7202:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6985:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6999:4:14",
														"type": ""
													}
												],
												"src": "6834:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7414:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7431:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7442:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7424:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7424:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7424:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7465:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7476:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7461:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7461:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7481:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7454:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7454:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7454:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7504:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7515:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7500:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7500:18:14"
																	},
																	{
																		"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7520:31:14",
																		"type": "",
																		"value": "ERC20Permit: expired deadline"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7493:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7493:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7493:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7561:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7573:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7584:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7569:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7569:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7561:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7391:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7405:4:14",
														"type": ""
													}
												],
												"src": "7240:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7839:350:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7849:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7861:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7872:3:14",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7857:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7857:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7849:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7892:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "7903:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7885:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7885:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7885:25:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7919:29:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7937:3:14",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7942:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7933:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7933:11:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7946:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "7929:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7929:19:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "7923:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7968:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7979:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7964:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7964:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "7988:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "7996:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7984:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7984:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7957:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "7957:43:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7957:43:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8020:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8031:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8016:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8016:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "8040:6:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "8048:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "8036:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8036:15:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8009:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8009:43:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8009:43:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8072:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8083:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8068:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8068:18:14"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "8088:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8061:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8061:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8061:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8115:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8126:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8111:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8111:19:14"
																	},
																	{
																		"name": "value4",
																		"nodeType": "YulIdentifier",
																		"src": "8132:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8104:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8104:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8104:35:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8159:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8170:3:14",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8155:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8155:19:14"
																	},
																	{
																		"name": "value5",
																		"nodeType": "YulIdentifier",
																		"src": "8176:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8148:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8148:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8148:35:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7768:9:14",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "7779:6:14",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "7787:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "7795:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "7803:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7811:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7819:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7830:4:14",
														"type": ""
													}
												],
												"src": "7598:591:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8368:180:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8385:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8396:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8378:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8378:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8378:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8419:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8430:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8415:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8415:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8435:2:14",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8408:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8408:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8408:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8458:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8469:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8454:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8454:18:14"
																	},
																	{
																		"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8474:32:14",
																		"type": "",
																		"value": "ERC20Permit: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8447:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8447:60:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8447:60:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8516:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8528:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8539:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8524:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8524:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8516:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8345:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8359:4:14",
														"type": ""
													}
												],
												"src": "8194:354:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8727:226:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8744:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8755:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8737:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8737:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8737:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8778:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8789:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8774:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8774:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8794:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8767:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8767:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8767:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8817:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8828:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8813:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8813:18:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8833:34:14",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8806:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8806:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8806:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8888:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8899:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8884:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8884:18:14"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8904:6:14",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8877:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8877:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8877:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8920:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8932:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8943:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8928:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "8928:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8920:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8704:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8718:4:14",
														"type": ""
													}
												],
												"src": "8553:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9132:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9149:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9160:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9142:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9142:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9142:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9183:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9194:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9179:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9179:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9199:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9172:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9172:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9172:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9222:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9233:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9218:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9218:18:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9238:34:14",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9211:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9211:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9211:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9293:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9304:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9289:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9289:18:14"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9309:4:14",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9282:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9282:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9282:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9323:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9335:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9346:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9331:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9331:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9323:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9109:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9123:4:14",
														"type": ""
													}
												],
												"src": "8958:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9535:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9552:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9563:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9545:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9545:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9545:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9586:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9597:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9582:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9582:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9602:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9575:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9575:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9575:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9625:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9636:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9621:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9621:18:14"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9641:31:14",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9614:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9614:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9614:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9682:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9694:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9705:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9690:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9690:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9682:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9512:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9526:4:14",
														"type": ""
													}
												],
												"src": "9361:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9893:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9910:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9921:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9903:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9903:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9903:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9944:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9955:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9940:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9940:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9960:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9933:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9933:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9933:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9983:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9994:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9979:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9979:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9999:34:14",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9972:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "9972:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9972:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10054:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10065:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10050:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10050:18:14"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10070:7:14",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10043:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10043:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10043:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10087:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10099:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10110:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10095:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10095:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10087:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9870:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9884:4:14",
														"type": ""
													}
												],
												"src": "9719:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10299:225:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10316:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10327:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10309:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10309:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10309:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10350:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10361:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10346:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10346:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10366:2:14",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10339:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10339:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10339:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10389:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10400:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10385:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10385:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10405:34:14",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10378:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10378:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10378:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10460:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10471:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10456:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10456:18:14"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10476:5:14",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10449:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10449:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10449:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10491:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10503:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10514:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10499:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10499:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10491:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10276:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10290:4:14",
														"type": ""
													}
												],
												"src": "10125:399:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10703:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10720:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10731:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10713:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10713:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10713:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10754:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10765:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10750:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10750:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10770:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10743:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10743:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10743:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10793:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10804:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10789:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10789:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10809:34:14",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10782:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10782:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10782:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10864:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10875:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10860:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10860:18:14"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10880:8:14",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10853:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10853:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10853:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10898:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10910:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10921:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10906:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "10906:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10898:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10680:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10694:4:14",
														"type": ""
													}
												],
												"src": "10529:402:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11110:181:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11127:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11138:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11120:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11120:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11120:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11161:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11172:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11157:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11157:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11177:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11150:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11150:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11150:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11200:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11211:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11196:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11196:18:14"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11216:33:14",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11189:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11189:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11189:61:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11259:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11271:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11282:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11267:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11267:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11259:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11087:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11101:4:14",
														"type": ""
													}
												],
												"src": "10936:355:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11470:223:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11487:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11498:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11480:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11480:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11480:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11521:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11532:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11517:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11517:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11537:2:14",
																		"type": "",
																		"value": "33"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11510:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11510:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11510:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11560:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11571:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11556:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11556:18:14"
																	},
																	{
																		"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f20616464726573",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11576:34:14",
																		"type": "",
																		"value": "ERC20: burn from the zero addres"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11549:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11549:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11549:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11631:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11642:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11627:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11627:18:14"
																	},
																	{
																		"hexValue": "73",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11647:3:14",
																		"type": "",
																		"value": "s"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11620:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11620:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11620:31:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11660:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11672:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11683:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11668:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11668:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "11660:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11447:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11461:4:14",
														"type": ""
													}
												],
												"src": "11296:397:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11872:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "11889:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11900:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11882:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11882:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11882:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11923:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11934:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11919:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11919:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11939:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11912:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11912:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11912:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "11962:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11973:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "11958:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11958:18:14"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "11978:34:14",
																		"type": "",
																		"value": "ERC20: burn amount exceeds balan"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11951:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "11951:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11951:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12033:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12044:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12029:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12029:18:14"
																	},
																	{
																		"hexValue": "6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12049:4:14",
																		"type": "",
																		"value": "ce"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12022:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12022:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12022:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12063:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12075:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12086:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12071:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12071:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12063:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "11849:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "11863:4:14",
														"type": ""
													}
												],
												"src": "11698:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12150:76:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "12172:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "12174:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "12174:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "12174:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12166:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12169:1:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "12163:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12163:8:14"
															},
															"nodeType": "YulIf",
															"src": "12160:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12203:17:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "12215:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "12218:1:14"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "12211:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12211:9:14"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "12203:4:14"
																}
															]
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "12132:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "12135:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "12141:4:14",
														"type": ""
													}
												],
												"src": "12101:125:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12405:226:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12422:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12433:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12415:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12415:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12415:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12456:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12467:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12452:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12452:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12472:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12445:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12445:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12445:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12495:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12506:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12491:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12491:18:14"
																	},
																	{
																		"hexValue": "45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12511:34:14",
																		"type": "",
																		"value": "ERC20: burn amount exceeds allow"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12484:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12484:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12484:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12566:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12577:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12562:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12562:18:14"
																	},
																	{
																		"hexValue": "616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "12582:6:14",
																		"type": "",
																		"value": "ance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12555:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12555:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12555:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "12598:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12610:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12621:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12606:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12606:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12598:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12382:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12396:4:14",
														"type": ""
													}
												],
												"src": "12231:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "12849:276:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "12859:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12871:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "12882:3:14",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "12867:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12867:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "12859:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "12902:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "12913:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12895:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12895:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12895:25:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12940:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12951:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12936:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12936:18:14"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "12956:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12929:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12929:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12929:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "12983:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "12994:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "12979:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "12979:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "12999:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "12972:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "12972:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "12972:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13026:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13037:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13022:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13022:18:14"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "13042:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13015:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13015:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13015:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13069:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13080:3:14",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13065:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13065:19:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nodeType": "YulIdentifier",
																				"src": "13090:6:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13106:3:14",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "13111:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "13102:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "13102:11:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "13115:1:14",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "13098:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "13098:19:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13086:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13086:32:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13058:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13058:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13058:61:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "12786:9:14",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "12797:6:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "12805:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "12813:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "12821:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "12829:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "12840:4:14",
														"type": ""
													}
												],
												"src": "12636:489:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13378:144:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13395:3:14"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13404:3:14",
																				"type": "",
																				"value": "240"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13409:4:14",
																				"type": "",
																				"value": "6401"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13400:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13400:14:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13388:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13388:27:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13388:27:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "13435:3:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13440:1:14",
																				"type": "",
																				"value": "2"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13431:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13431:11:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13444:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13424:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13424:27:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13424:27:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "13471:3:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13476:2:14",
																				"type": "",
																				"value": "34"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13467:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13467:12:14"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "13481:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13460:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13460:28:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13460:28:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "13497:19:14",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "13508:3:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13513:2:14",
																		"type": "",
																		"value": "66"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13504:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13504:12:14"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "13497:3:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "13346:3:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13351:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13359:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "13370:3:14",
														"type": ""
													}
												],
												"src": "13130:392:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13708:217:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "13718:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13730:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13741:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "13726:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13726:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "13718:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "13761:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "13772:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13754:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13754:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13754:25:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13799:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13810:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13795:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13795:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "13819:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13827:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "13815:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13815:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13788:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13788:45:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13788:45:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13853:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13864:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13849:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13849:18:14"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "13869:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13842:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13842:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13842:34:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "13896:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13907:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "13892:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13892:18:14"
																	},
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "13912:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13885:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13885:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13885:34:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "13653:9:14",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "13664:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "13672:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "13680:6:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "13688:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "13699:4:14",
														"type": ""
													}
												],
												"src": "13527:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "13962:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "13979:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13986:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "13991:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "13982:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "13982:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "13972:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "13972:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "13972:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14019:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14022:4:14",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14012:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14012:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14012:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14043:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14046:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "14036:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14036:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14036:15:14"
														}
													]
												},
												"name": "panic_error_0x21",
												"nodeType": "YulFunctionDefinition",
												"src": "13930:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14236:174:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14253:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14264:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14246:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14246:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14246:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14287:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14298:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14283:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14283:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14303:2:14",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14276:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14276:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14276:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14326:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14337:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14322:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14322:18:14"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14342:26:14",
																		"type": "",
																		"value": "ECDSA: invalid signature"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14315:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14315:54:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14315:54:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14378:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14390:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14401:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14386:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14386:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14378:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14213:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14227:4:14",
														"type": ""
													}
												],
												"src": "14062:348:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14589:181:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14606:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14617:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14599:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14599:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14599:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14640:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14651:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14636:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14636:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14656:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14629:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14629:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14629:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "14679:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "14690:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14675:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14675:18:14"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "14695:33:14",
																		"type": "",
																		"value": "ECDSA: invalid signature length"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14668:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14668:61:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14668:61:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "14738:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14750:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14761:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "14746:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14746:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "14738:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14566:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14580:4:14",
														"type": ""
													}
												],
												"src": "14415:355:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "14949:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "14966:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "14977:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14959:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14959:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14959:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15000:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15011:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "14996:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "14996:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15016:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "14989:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "14989:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "14989:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15039:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15050:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15035:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15035:18:14"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15055:34:14",
																		"type": "",
																		"value": "ECDSA: invalid signature 's' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15028:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15028:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15028:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15110:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15121:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15106:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15106:18:14"
																	},
																	{
																		"hexValue": "7565",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15126:4:14",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15099:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15099:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15099:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15140:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15152:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15163:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15148:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15148:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15140:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "14926:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "14940:4:14",
														"type": ""
													}
												],
												"src": "14775:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "15352:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15369:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15380:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15362:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15362:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15362:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15403:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15414:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15399:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15399:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15419:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15392:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15392:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15392:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15442:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15453:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15438:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15438:18:14"
																	},
																	{
																		"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15458:34:14",
																		"type": "",
																		"value": "ECDSA: invalid signature 'v' val"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15431:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15431:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15431:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "15513:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "15524:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "15509:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "15509:18:14"
																	},
																	{
																		"hexValue": "7565",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "15529:4:14",
																		"type": "",
																		"value": "ue"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "15502:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15502:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "15502:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "15543:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "15555:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "15566:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "15551:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "15551:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "15543:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "15329:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "15343:4:14",
														"type": ""
													}
												],
												"src": "15178:398:14"
											}
										]
									},
									"contents": "{\n    { }\n    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n    {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_ISolidDaoManagement_$360(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ISolidDaoManagement_$360__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_t_string_storage__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := ret\n        let _2 := 1\n        length := shr(_2, slotValue)\n        let outOfPlaceEncoding := and(slotValue, _2)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, _1))\n        {\n            mstore(ret, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(ret, 0x24)\n        }\n        let pos := array_storeLengthForEncoding_string(add(headStart, _1), length)\n        switch outOfPlaceEncoding\n        case 0 {\n            mstore(pos, and(slotValue, not(255)))\n            ret := add(pos, _1)\n        }\n        case 1 {\n            let dataPos := array_dataslot_string_storage(value0)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _1) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _2)\n            }\n            ret := add(pos, i)\n        }\n        tail := ret\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20Permit: expired deadline\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"ERC20Permit: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 33)\n        mstore(add(headStart, 64), \"ERC20: burn from the zero addres\")\n        mstore(add(headStart, 96), \"s\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds balan\")\n        mstore(add(headStart, 96), \"ce\")\n        tail := add(headStart, 128)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: burn amount exceeds allow\")\n        mstore(add(headStart, 96), \"ance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, shl(240, 6401))\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 'v' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"869": [
									{
										"length": 32,
										"start": 3013
									}
								],
								"871": [
									{
										"length": 32,
										"start": 2971
									}
								],
								"873": [
									{
										"length": 32,
										"start": 2929
									}
								],
								"875": [
									{
										"length": 32,
										"start": 3096
									}
								],
								"877": [
									{
										"length": 32,
										"start": 3133
									}
								],
								"879": [
									{
										"length": 32,
										"start": 3054
									}
								],
								"1532": [
									{
										"length": 32,
										"start": 403
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063a457c2d711610071578063a457c2d71461026a578063a9059cbb1461027d578063bf7e214f14610290578063d505accf146102bb578063dd62ed3e146102ce57600080fd5b806370a082311461020057806379cc6790146102295780637a9e5e4b1461023c5780637ecebe001461024f57806395d89b411461026257600080fd5b8063313ce567116100f4578063313ce5671461018c5780633644e515146101bd57806339509351146101c557806340c10f19146101d857806342966c68146101ed57600080fd5b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016757806323b872dd14610179575b600080fd5b61012e6102e1565b60405161013b919061128b565b60405180910390f35b6101576101523660046112f5565b610373565b604051901515815260200161013b565b6002545b60405190815260200161013b565b610157610187366004611321565b61038b565b60405160ff7f000000000000000000000000000000000000000000000000000000000000000016815260200161013b565b61016b6103af565b6101576101d33660046112f5565b6103be565b6101eb6101e63660046112f5565b6103e0565b005b6101eb6101fb366004611362565b6104a3565b61016b61020e36600461137b565b6001600160a01b031660009081526020819052604090205490565b6101eb6102373660046112f5565b6104b0565b6101eb61024a36600461137b565b6104ba565b61016b61025d36600461137b565b6105b0565b61012e6105d0565b6101576102783660046112f5565b6105df565b61015761028b3660046112f5565b61065a565b6008546102a3906001600160a01b031681565b6040516001600160a01b03909116815260200161013b565b6101eb6102c936600461139f565b610668565b61016b6102dc366004611416565b6107cc565b6060600380546102f09061144f565b80601f016020809104026020016040519081016040528092919081815260200182805461031c9061144f565b80156103695780601f1061033e57610100808354040283529160200191610369565b820191906000526020600020905b81548152906001019060200180831161034c57829003601f168201915b5050505050905090565b6000336103818185856107f7565b5060019392505050565b60003361039985828561091c565b6103a4858585610996565b506001949350505050565b60006103b9610b64565b905090565b6000336103818185856103d183836107cc565b6103db9190611499565b6107f7565b600860009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045791906114b1565b6001600160a01b0316336001600160a01b0316146007906104945760405162461bcd60e51b815260040161048b91906114ce565b60405180910390fd5b5061049f8282610c8b565b5050565b6104ad3382610d6a565b50565b61049f8282610eb5565b600860009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561050d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053191906114b1565b6001600160a01b0316336001600160a01b0316146007906105655760405162461bcd60e51b815260040161048b91906114ce565b50600880546001600160a01b0319166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6001600160a01b0381166000908152600560205260408120545b92915050565b6060600480546102f09061144f565b600033816105ed82866107cc565b90508381101561064d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161048b565b6103a482868684036107f7565b600033610381818585610996565b834211156106b85760405162461bcd60e51b815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015260640161048b565b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886106e78c610f4a565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050600061074282610f72565b9050600061075282878787610fc0565b9050896001600160a01b0316816001600160a01b0316146107b55760405162461bcd60e51b815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015260640161048b565b6107c08a8a8a6107f7565b50505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166108595760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161048b565b6001600160a01b0382166108ba5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161048b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600061092884846107cc565b9050600019811461099057818110156109835760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161048b565b61099084848484036107f7565b50505050565b6001600160a01b0383166109fa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161048b565b6001600160a01b038216610a5c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161048b565b6001600160a01b03831660009081526020819052604090205481811015610ad45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161048b565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610b0b908490611499565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b5791815260200190565b60405180910390a3610990565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015610bbd57507f000000000000000000000000000000000000000000000000000000000000000046145b15610be757507f000000000000000000000000000000000000000000000000000000000000000090565b50604080517f00000000000000000000000000000000000000000000000000000000000000006020808301919091527f0000000000000000000000000000000000000000000000000000000000000000828401527f000000000000000000000000000000000000000000000000000000000000000060608301524660808301523060a0808401919091528351808403909101815260c0909201909252805191012090565b6001600160a01b038216610ce15760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161048b565b8060026000828254610cf39190611499565b90915550506001600160a01b03821660009081526020819052604081208054839290610d20908490611499565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610dca5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161048b565b6001600160a01b03821660009081526020819052604090205481811015610e3e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161048b565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610e6d908490611575565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161090f565b505050565b6000610ec183336107cc565b90506000610ecf8383611575565b1015610f295760405162461bcd60e51b8152602060048201526024808201527f45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77604482015263616e636560e01b606482015260840161048b565b610f338282611575565b9050610f408333836107f7565b610eb08383610d6a565b6001600160a01b03811660009081526005602052604090208054600181018255905b50919050565b60006105ca610f7f610b64565b8360405161190160f01b6020820152602281018390526042810182905260009060620160405160208183030381529060405280519060200120905092915050565b6000806000610fd187878787610fe8565b91509150610fde816110d5565b5095945050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561101f57506000905060036110cc565b8460ff16601b1415801561103757508460ff16601c14155b1561104857506000905060046110cc565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561109c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166110c5576000600192509250506110cc565b9150600090505b94509492505050565b60008160048111156110e9576110e961158c565b036110f15750565b60018160048111156111055761110561158c565b036111525760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161048b565b60028160048111156111665761116661158c565b036111b35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161048b565b60038160048111156111c7576111c761158c565b0361121f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b606482015260840161048b565b60048160048111156112335761123361158c565b036104ad5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b606482015260840161048b565b600060208083528351808285015260005b818110156112b85785810183015185820160400152820161129c565b818111156112ca576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146104ad57600080fd5b6000806040838503121561130857600080fd5b8235611313816112e0565b946020939093013593505050565b60008060006060848603121561133657600080fd5b8335611341816112e0565b92506020840135611351816112e0565b929592945050506040919091013590565b60006020828403121561137457600080fd5b5035919050565b60006020828403121561138d57600080fd5b8135611398816112e0565b9392505050565b600080600080600080600060e0888a0312156113ba57600080fd5b87356113c5816112e0565b965060208801356113d5816112e0565b95506040880135945060608801359350608088013560ff811681146113f957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561142957600080fd5b8235611434816112e0565b91506020830135611444816112e0565b809150509250929050565b600181811c9082168061146357607f821691505b602082108103610f6c57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156114ac576114ac611483565b500190565b6000602082840312156114c357600080fd5b8151611398816112e0565b600060208083526000845481600182811c9150808316806114f057607f831692505b858310810361150d57634e487b7160e01b85526022600452602485fd5b87860183815260200181801561152a576001811461153b57611566565b60ff19861682528782019650611566565b60008b81526020902060005b8681101561156057815484820152908501908901611547565b83019750505b50949998505050505050505050565b60008282101561158757611587611483565b500390565b634e487b7160e01b600052602160045260246000fdfea26469706673582212205a7cc3753eb1bba830e14db12bfb50eab119e053805b4ea8f494b84d6aa5881164736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x121 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x26A JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xBF7E214F EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x200 JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0x7A9E5E4B EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xF4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x18C JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x126 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x179 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12E PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x13B SWAP2 SWAP1 PUSH2 0x128B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH2 0x152 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x373 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x157 PUSH2 0x187 CALLDATASIZE PUSH1 0x4 PUSH2 0x1321 JUMP JUMPDEST PUSH2 0x38B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x16B PUSH2 0x3AF JUMP JUMPDEST PUSH2 0x157 PUSH2 0x1D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x3BE JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x1E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x3E0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1EB PUSH2 0x1FB CALLDATASIZE PUSH1 0x4 PUSH2 0x1362 JUMP JUMPDEST PUSH2 0x4A3 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x20E CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x4B0 JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH2 0x4BA JUMP JUMPDEST PUSH2 0x16B PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x137B JUMP JUMPDEST PUSH2 0x5B0 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x5D0 JUMP JUMPDEST PUSH2 0x157 PUSH2 0x278 CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x5DF JUMP JUMPDEST PUSH2 0x157 PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x12F5 JUMP JUMPDEST PUSH2 0x65A JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x2A3 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x13B JUMP JUMPDEST PUSH2 0x1EB PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0x139F JUMP JUMPDEST PUSH2 0x668 JUMP JUMPDEST PUSH2 0x16B PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1416 JUMP JUMPDEST PUSH2 0x7CC JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2F0 SWAP1 PUSH2 0x144F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x31C SWAP1 PUSH2 0x144F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x369 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x33E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x369 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x34C JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x7F7 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x399 DUP6 DUP3 DUP6 PUSH2 0x91C JUMP JUMPDEST PUSH2 0x3A4 DUP6 DUP6 DUP6 PUSH2 0x996 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3B9 PUSH2 0xB64 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x3D1 DUP4 DUP4 PUSH2 0x7CC JUMP JUMPDEST PUSH2 0x3DB SWAP2 SWAP1 PUSH2 0x1499 JUMP JUMPDEST PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFBFA77CF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x433 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x457 SWAP2 SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x7 SWAP1 PUSH2 0x494 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0x14CE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x49F DUP3 DUP3 PUSH2 0xC8B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x4AD CALLER DUP3 PUSH2 0xD6A JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x49F DUP3 DUP3 PUSH2 0xEB5 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC340A24 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x50D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x531 SWAP2 SWAP1 PUSH2 0x14B1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH1 0x7 SWAP1 PUSH2 0x565 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48B SWAP2 SWAP1 PUSH2 0x14CE JUMP JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD SWAP1 PUSH1 0x0 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2F0 SWAP1 PUSH2 0x144F JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x5ED DUP3 DUP7 PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x64D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x3A4 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x7F7 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x381 DUP2 DUP6 DUP6 PUSH2 0x996 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x6B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A206578706972656420646561646C696E65000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x6E7 DUP13 PUSH2 0xF4A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x742 DUP3 PUSH2 0xF72 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x752 DUP3 DUP8 DUP8 DUP8 PUSH2 0xFC0 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7B5 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332305065726D69743A20696E76616C6964207369676E61747572650000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x7C0 DUP11 DUP11 DUP11 PUSH2 0x7F7 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x859 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x928 DUP5 DUP5 PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x990 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0x990 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x7F7 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x9FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xA5C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xAD4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xB0B SWAP1 DUP5 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0xB57 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x990 JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0xBBD JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBE7 JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 DUP3 DUP5 ADD MSTORE PUSH32 0x0 PUSH1 0x60 DUP4 ADD MSTORE CHAINID PUSH1 0x80 DUP4 ADD MSTORE ADDRESS PUSH1 0xA0 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xC0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xCE1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xCF3 SWAP2 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xD20 SWAP1 DUP5 SWAP1 PUSH2 0x1499 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH1 0x0 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xDCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xE3E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 DUP4 SUB SWAP1 SSTORE PUSH1 0x2 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0xE6D SWAP1 DUP5 SWAP1 PUSH2 0x1575 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH1 0x20 ADD PUSH2 0x90F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEC1 DUP4 CALLER PUSH2 0x7CC JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xECF DUP4 DUP4 PUSH2 0x1575 JUMP JUMPDEST LT ISZERO PUSH2 0xF29 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x616E6365 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH2 0xF33 DUP3 DUP3 PUSH2 0x1575 JUMP JUMPDEST SWAP1 POP PUSH2 0xF40 DUP4 CALLER DUP4 PUSH2 0x7F7 JUMP JUMPDEST PUSH2 0xEB0 DUP4 DUP4 PUSH2 0xD6A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE SWAP1 JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5CA PUSH2 0xF7F PUSH2 0xB64 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x22 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x42 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x62 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xFD1 DUP8 DUP8 DUP8 DUP8 PUSH2 0xFE8 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xFDE DUP2 PUSH2 0x10D5 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0x101F JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x10CC JUMP JUMPDEST DUP5 PUSH1 0xFF AND PUSH1 0x1B EQ ISZERO DUP1 ISZERO PUSH2 0x1037 JUMPI POP DUP5 PUSH1 0xFF AND PUSH1 0x1C EQ ISZERO JUMPDEST ISZERO PUSH2 0x1048 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x4 PUSH2 0x10CC JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x109C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x10C5 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x10CC JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x10E9 JUMPI PUSH2 0x10E9 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x10F1 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1105 JUMPI PUSH2 0x1105 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x1152 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1166 JUMPI PUSH2 0x1166 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x11B3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x11C7 JUMPI PUSH2 0x11C7 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x121F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x1233 JUMPI PUSH2 0x1233 PUSH2 0x158C JUMP JUMPDEST SUB PUSH2 0x4AD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202776272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x48B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12B8 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x129C JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x12CA JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x4AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1308 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1313 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1341 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1351 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1374 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x138D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1398 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x13BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 CALLDATALOAD PUSH2 0x13C5 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD CALLDATALOAD PUSH2 0x13D5 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x13F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1429 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1434 DUP2 PUSH2 0x12E0 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1444 DUP2 PUSH2 0x12E0 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x1463 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xF6C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x14AC JUMPI PUSH2 0x14AC PUSH2 0x1483 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x14C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1398 DUP2 PUSH2 0x12E0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE PUSH1 0x0 DUP5 SLOAD DUP2 PUSH1 0x1 DUP3 DUP2 SHR SWAP2 POP DUP1 DUP4 AND DUP1 PUSH2 0x14F0 JUMPI PUSH1 0x7F DUP4 AND SWAP3 POP JUMPDEST DUP6 DUP4 LT DUP2 SUB PUSH2 0x150D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP8 DUP7 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP2 DUP1 ISZERO PUSH2 0x152A JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x153B JUMPI PUSH2 0x1566 JUMP JUMPDEST PUSH1 0xFF NOT DUP7 AND DUP3 MSTORE DUP8 DUP3 ADD SWAP7 POP PUSH2 0x1566 JUMP JUMPDEST PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH1 0x0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x1560 JUMPI DUP2 SLOAD DUP5 DUP3 ADD MSTORE SWAP1 DUP6 ADD SWAP1 DUP10 ADD PUSH2 0x1547 JUMP JUMPDEST DUP4 ADD SWAP8 POP POP JUMPDEST POP SWAP5 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1587 JUMPI PUSH2 0x1587 PUSH2 0x1483 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS PUSH29 0xC3753EB1BBA830E14DB12BFB50EAB119E053805B4EA8F494B84D6AA588 GT PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "316:907:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2030:98:13;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4314:197;;;;;;:::i;:::-;;:::i;:::-;;;1392:14:14;;1385:22;1367:41;;1355:2;1340:18;4314:197:13;1227:187:14;3125:106:13;3212:12;;3125:106;;;1565:25:14;;;1553:2;1538:18;3125:106:13;1419:177:14;5073:286:13;;;;;;:::i;:::-;;:::i;2967:98::-;;;2234:4:14;3049:9:13;2222:17:14;2204:36;;2192:2;2177:18;2967:98:13;2062:184:14;2812:113:10;;;:::i;5754:234:13:-;;;;;;:::i;:::-;;:::i;526:118:0:-;;;;;;:::i;:::-;;:::i;:::-;;650:90;;;;;;:::i;:::-;;:::i;3289:125:13:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3389:18:13;3363:7;3389:18;;;;;;;;;;;;3289:125;746:116:0;;;;;;:::i;:::-;;:::i;2055:167:11:-;;;;;;:::i;:::-;;:::i;2562:126:10:-;;;;;;:::i;:::-;;:::i;2241:102:13:-;;;:::i;6475:427::-;;;;;;:::i;:::-;;:::i;3610:189::-;;;;;;:::i;:::-;;:::i;537:36:11:-;;;;;-1:-1:-1;;;;;537:36:11;;;;;;-1:-1:-1;;;;;3340:32:14;;;3322:51;;3310:2;3295:18;537:36:11;3149:230:14;1875:626:10;;;;;;:::i;:::-;;:::i;3857:149:13:-;;;;;;:::i;:::-;;:::i;2030:98::-;2084:13;2116:5;2109:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2030:98;:::o;4314:197::-;4397:4;719:10:6;4451:32:13;719:10:6;4467:7:13;4476:6;4451:8;:32::i;:::-;-1:-1:-1;4500:4:13;;4314:197;-1:-1:-1;;;4314:197:13:o;5073:286::-;5200:4;719:10:6;5256:38:13;5272:4;719:10:6;5287:6:13;5256:15;:38::i;:::-;5304:27;5314:4;5320:2;5324:6;5304:9;:27::i;:::-;-1:-1:-1;5348:4:13;;5073:286;-1:-1:-1;;;;5073:286:13:o;2812:113:10:-;2872:7;2898:20;:18;:20::i;:::-;2891:27;;2812:113;:::o;5754:234:13:-;5842:4;719:10:6;5896:64:13;719:10:6;5912:7:13;5949:10;5921:25;719:10:6;5912:7:13;5921:9;:25::i;:::-;:38;;;;:::i;:::-;5896:8;:64::i;526:118:0:-;1777:9:11;;;;;;;;;-1:-1:-1;;;;;1777:9:11;-1:-1:-1;;;;;1777:15:11;;:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;1763:31:11;:10;-1:-1:-1;;;;;1763:31:11;;1796:12;1755:54;;;;;-1:-1:-1;;;1755:54:11;;;;;;;;:::i;:::-;;;;;;;;;;613:24:0::1;619:8;629:7;613:5;:24::i;:::-;526:118:::0;;:::o;650:90::-;708:25;714:10;726:6;708:5;:25::i;:::-;650:90;:::o;746:116::-;827:28;837:8;847:7;827:9;:28::i;2055:167:11:-;938:9;;;;;;;;;-1:-1:-1;;;;;938:9:11;-1:-1:-1;;;;;938:18:11;;:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;924:34:11;:10;-1:-1:-1;;;;;924:34:11;;960:12;916:57;;;;;-1:-1:-1;;;916:57:11;;;;;;;;:::i;:::-;-1:-1:-1;2144:9:11::1;:25:::0;;-1:-1:-1;;;;;;2144:25:11::1;-1:-1:-1::0;;;;;2144:25:11;::::1;::::0;;::::1;::::0;;;2184:31:::1;::::0;::::1;::::0;-1:-1:-1;;2184:31:11::1;2055:167:::0;:::o;2562:126:10:-;-1:-1:-1;;;;;2657:14:10;;2631:7;2657:14;;;:7;:14;;;;;918::7;2657:24:10;2650:31;2562:126;-1:-1:-1;;2562:126:10:o;2241:102:13:-;2297:13;2329:7;2322:14;;;;;:::i;6475:427::-;6568:4;719:10:6;6568:4:13;6649:25;719:10:6;6666:7:13;6649:9;:25::i;:::-;6622:52;;6712:15;6692:16;:35;;6684:85;;;;-1:-1:-1;;;6684:85:13;;7036:2:14;6684:85:13;;;7018:21:14;7075:2;7055:18;;;7048:30;7114:34;7094:18;;;7087:62;-1:-1:-1;;;7165:18:14;;;7158:35;7210:19;;6684:85:13;6834:401:14;6684:85:13;6803:60;6812:5;6819:7;6847:15;6828:16;:34;6803:8;:60::i;3610:189::-;3689:4;719:10:6;3743:28:13;719:10:6;3760:2:13;3764:6;3743:9;:28::i;1875:626:10:-;2110:8;2091:15;:27;;2083:69;;;;-1:-1:-1;;;2083:69:10;;7442:2:14;2083:69:10;;;7424:21:14;7481:2;7461:18;;;7454:30;7520:31;7500:18;;;7493:59;7569:18;;2083:69:10;7240:353:14;2083:69:10;2163:18;1070:95;2223:5;2230:7;2239:5;2246:16;2256:5;2246:9;:16::i;:::-;2194:79;;;;;;7885:25:14;;;;-1:-1:-1;;;;;7984:15:14;;;7964:18;;;7957:43;8036:15;;;;8016:18;;;8009:43;8068:18;;;8061:34;8111:19;;;8104:35;8155:19;;;8148:35;;;7857:19;;2194:79:10;;;;;;;;;;;;2184:90;;;;;;2163:111;;2285:12;2300:28;2317:10;2300:16;:28::i;:::-;2285:43;;2339:14;2356:28;2370:4;2376:1;2379;2382;2356:13;:28::i;:::-;2339:45;;2412:5;-1:-1:-1;;;;;2402:15:10;:6;-1:-1:-1;;;;;2402:15:10;;2394:58;;;;-1:-1:-1;;;2394:58:10;;8396:2:14;2394:58:10;;;8378:21:14;8435:2;8415:18;;;8408:30;8474:32;8454:18;;;8447:60;8524:18;;2394:58:10;8194:354:14;2394:58:10;2463:31;2472:5;2479:7;2488:5;2463:8;:31::i;:::-;2073:428;;;1875:626;;;;;;;:::o;3857:149:13:-;-1:-1:-1;;;;;3972:18:13;;;3946:7;3972:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3857:149::o;10000:370::-;-1:-1:-1;;;;;10131:19:13;;10123:68;;;;-1:-1:-1;;;10123:68:13;;8755:2:14;10123:68:13;;;8737:21:14;8794:2;8774:18;;;8767:30;8833:34;8813:18;;;8806:62;-1:-1:-1;;;8884:18:14;;;8877:34;8928:19;;10123:68:13;8553:400:14;10123:68:13;-1:-1:-1;;;;;10209:21:13;;10201:68;;;;-1:-1:-1;;;10201:68:13;;9160:2:14;10201:68:13;;;9142:21:14;9199:2;9179:18;;;9172:30;9238:34;9218:18;;;9211:62;-1:-1:-1;;;9289:18:14;;;9282:32;9331:19;;10201:68:13;8958:398:14;10201:68:13;-1:-1:-1;;;;;10280:18:13;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10331:32;;1565:25:14;;;10331:32:13;;1538:18:14;10331:32:13;;;;;;;;10000:370;;;:::o;10651:441::-;10781:24;10808:25;10818:5;10825:7;10808:9;:25::i;:::-;10781:52;;-1:-1:-1;;10847:16:13;:37;10843:243;;10928:6;10908:16;:26;;10900:68;;;;-1:-1:-1;;;10900:68:13;;9563:2:14;10900:68:13;;;9545:21:14;9602:2;9582:18;;;9575:30;9641:31;9621:18;;;9614:59;9690:18;;10900:68:13;9361:353:14;10900:68:13;11010:51;11019:5;11026:7;11054:6;11035:16;:25;11010:8;:51::i;:::-;10771:321;10651:441;;;:::o;7365:651::-;-1:-1:-1;;;;;7491:18:13;;7483:68;;;;-1:-1:-1;;;7483:68:13;;9921:2:14;7483:68:13;;;9903:21:14;9960:2;9940:18;;;9933:30;9999:34;9979:18;;;9972:62;-1:-1:-1;;;10050:18:14;;;10043:35;10095:19;;7483:68:13;9719:401:14;7483:68:13;-1:-1:-1;;;;;7569:16:13;;7561:64;;;;-1:-1:-1;;;7561:64:13;;10327:2:14;7561:64:13;;;10309:21:14;10366:2;10346:18;;;10339:30;10405:34;10385:18;;;10378:62;-1:-1:-1;;;10456:18:14;;;10449:33;10499:19;;7561:64:13;10125:399:14;7561:64:13;-1:-1:-1;;;;;7707:15:13;;7685:19;7707:15;;;;;;;;;;;7740:21;;;;7732:72;;;;-1:-1:-1;;;7732:72:13;;10731:2:14;7732:72:13;;;10713:21:14;10770:2;10750:18;;;10743:30;10809:34;10789:18;;;10782:62;-1:-1:-1;;;10860:18:14;;;10853:36;10906:19;;7732:72:13;10529:402:14;7732:72:13;-1:-1:-1;;;;;7838:15:13;;;:9;:15;;;;;;;;;;;7856:20;;;7838:38;;7896:13;;;;;;;;:23;;7870:6;;7838:9;7896:23;;7870:6;;7896:23;:::i;:::-;;;;;;;;7950:2;-1:-1:-1;;;;;7935:26:13;7944:4;-1:-1:-1;;;;;7935:26:13;;7954:6;7935:26;;;;1565:25:14;;1553:2;1538:18;;1419:177;7935:26:13;;;;;;;;7972:37;9001:576;3143:308:9;3196:7;3227:4;-1:-1:-1;;;;;3236:12:9;3219:29;;:66;;;;;3269:16;3252:13;:33;3219:66;3215:230;;;-1:-1:-1;3308:24:9;;3143:308::o;3215:230::-;-1:-1:-1;3633:73:9;;;3392:10;3633:73;;;;12895:25:14;;;;3404:12:9;12936:18:14;;;12929:34;3418:15:9;12979:18:14;;;12972:34;3677:13:9;13022:18:14;;;13015:34;3700:4:9;13065:19:14;;;;13058:61;;;;3633:73:9;;;;;;;;;;12867:19:14;;;;3633:73:9;;;3623:84;;;;;;2812:113:10:o;8292:389:13:-;-1:-1:-1;;;;;8375:21:13;;8367:65;;;;-1:-1:-1;;;8367:65:13;;11138:2:14;8367:65:13;;;11120:21:14;11177:2;11157:18;;;11150:30;11216:33;11196:18;;;11189:61;11267:18;;8367:65:13;10936:355:14;8367:65:13;8519:6;8503:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8535:18:13;;:9;:18;;;;;;;;;;:28;;8557:6;;8535:9;:28;;8557:6;;8535:28;:::i;:::-;;;;-1:-1:-1;;8578:37:13;;1565:25:14;;;-1:-1:-1;;;;;8578:37:13;;;8595:1;;8578:37;;1553:2:14;1538:18;8578:37:13;;;;;;;526:118:0;;:::o;9001:576:13:-;-1:-1:-1;;;;;9084:21:13;;9076:67;;;;-1:-1:-1;;;9076:67:13;;11498:2:14;9076:67:13;;;11480:21:14;11537:2;11517:18;;;11510:30;11576:34;11556:18;;;11549:62;-1:-1:-1;;;11627:18:14;;;11620:31;11668:19;;9076:67:13;11296:397:14;9076:67:13;-1:-1:-1;;;;;9239:18:13;;9214:22;9239:18;;;;;;;;;;;9275:24;;;;9267:71;;;;-1:-1:-1;;;9267:71:13;;11900:2:14;9267:71:13;;;11882:21:14;11939:2;11919:18;;;11912:30;11978:34;11958:18;;;11951:62;-1:-1:-1;;;12029:18:14;;;12022:32;12071:19;;9267:71:13;11698:398:14;9267:71:13;-1:-1:-1;;;;;9372:18:13;;:9;:18;;;;;;;;;;9393:23;;;9372:44;;9436:12;:22;;9410:6;;9372:9;9436:22;;9410:6;;9436:22;:::i;:::-;;;;-1:-1:-1;;9474:37:13;;1565:25:14;;;9500:1:13;;-1:-1:-1;;;;;9474:37:13;;;;;1553:2:14;1538:18;9474:37:13;1419:177:14;9522:48:13;9066:511;9001:576;;:::o;868:353:0:-;941:23;967:31;977:8;987:10;967:9;:31::i;:::-;941:57;-1:-1:-1;1045:1:0;1016:25;1034:7;941:57;1016:25;:::i;:::-;:30;;1008:79;;;;-1:-1:-1;;;1008:79:0;;12433:2:14;1008:79:0;;;12415:21:14;12472:2;12452:18;;;12445:30;12511:34;12491:18;;;12484:62;-1:-1:-1;;;12562:18:14;;;12555:34;12606:19;;1008:79:0;12231:400:14;1008:79:0;1097:26;1116:7;1097:26;;:::i;:::-;;;1133:47;1142:8;1152:10;1164:15;1133:8;:47::i;:::-;1190:24;1196:8;1206:7;1190:5;:24::i;3056:203:10:-;-1:-1:-1;;;;;3176:14:10;;3116:15;3176:14;;;:7;:14;;;;;918::7;;1050:1;1032:19;;;;918:14;3235:17:10;3133:126;3056:203;;;:::o;4339:165:9:-;4416:7;4442:55;4464:20;:18;:20::i;:::-;4486:10;9225:57:8;;-1:-1:-1;;;9225:57:8;;;13388:27:14;13431:11;;;13424:27;;;13467:12;;;13460:28;;;9189:7:8;;13504:12:14;;9225:57:8;;;;;;;;;;;;9215:68;;;;;;9208:75;;9096:194;;;;;7451:270;7574:7;7594:17;7613:18;7635:25;7646:4;7652:1;7655;7658;7635:10;:25::i;:::-;7593:67;;;;7670:18;7682:5;7670:11;:18::i;:::-;-1:-1:-1;7705:9:8;7451:270;-1:-1:-1;;;;;7451:270:8:o;5715:1603::-;5841:7;;6765:66;6752:79;;6748:161;;;-1:-1:-1;6863:1:8;;-1:-1:-1;6867:30:8;6847:51;;6748:161;6922:1;:7;;6927:2;6922:7;;:18;;;;;6933:1;:7;;6938:2;6933:7;;6922:18;6918:100;;;-1:-1:-1;6972:1:8;;-1:-1:-1;6976:30:8;6956:51;;6918:100;7129:24;;;7112:14;7129:24;;;;;;;;;13754:25:14;;;13827:4;13815:17;;13795:18;;;13788:45;;;;13849:18;;;13842:34;;;13892:18;;;13885:34;;;7129:24:8;;13726:19:14;;7129:24:8;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7129:24:8;;-1:-1:-1;;7129:24:8;;;-1:-1:-1;;;;;;;7167:20:8;;7163:101;;7219:1;7223:29;7203:50;;;;;;;7163:101;7282:6;-1:-1:-1;7290:20:8;;-1:-1:-1;5715:1603:8;;;;;;;;:::o;547:631::-;624:20;615:5;:29;;;;;;;;:::i;:::-;;611:561;;547:631;:::o;611:561::-;720:29;711:5;:38;;;;;;;;:::i;:::-;;707:465;;765:34;;-1:-1:-1;;;765:34:8;;14264:2:14;765:34:8;;;14246:21:14;14303:2;14283:18;;;14276:30;14342:26;14322:18;;;14315:54;14386:18;;765:34:8;14062:348:14;707:465:8;829:35;820:5;:44;;;;;;;;:::i;:::-;;816:356;;880:41;;-1:-1:-1;;;880:41:8;;14617:2:14;880:41:8;;;14599:21:14;14656:2;14636:18;;;14629:30;14695:33;14675:18;;;14668:61;14746:18;;880:41:8;14415:355:14;816:356:8;951:30;942:5;:39;;;;;;;;:::i;:::-;;938:234;;997:44;;-1:-1:-1;;;997:44:8;;14977:2:14;997:44:8;;;14959:21:14;15016:2;14996:18;;;14989:30;15055:34;15035:18;;;15028:62;-1:-1:-1;;;15106:18:14;;;15099:32;15148:19;;997:44:8;14775:398:14;938:234:8;1071:30;1062:5;:39;;;;;;;;:::i;:::-;;1058:114;;1117:44;;-1:-1:-1;;;1117:44:8;;15380:2:14;1117:44:8;;;15362:21:14;15419:2;15399:18;;;15392:30;15458:34;15438:18;;;15431:62;-1:-1:-1;;;15509:18:14;;;15502:32;15551:19;;1117:44:8;15178:398:14;169:597;281:4;310:2;339;328:9;321:21;371:6;365:13;414:6;409:2;398:9;394:18;387:34;439:1;449:140;463:6;460:1;457:13;449:140;;;558:14;;;554:23;;548:30;524:17;;;543:2;520:26;513:66;478:10;;449:140;;;607:6;604:1;601:13;598:91;;;677:1;672:2;663:6;652:9;648:22;644:31;637:42;598:91;-1:-1:-1;750:2:14;729:15;-1:-1:-1;;725:29:14;710:45;;;;757:2;706:54;;169:597;-1:-1:-1;;;169:597:14:o;771:131::-;-1:-1:-1;;;;;846:31:14;;836:42;;826:70;;892:1;889;882:12;907:315;975:6;983;1036:2;1024:9;1015:7;1011:23;1007:32;1004:52;;;1052:1;1049;1042:12;1004:52;1091:9;1078:23;1110:31;1135:5;1110:31;:::i;:::-;1160:5;1212:2;1197:18;;;;1184:32;;-1:-1:-1;;;907:315:14:o;1601:456::-;1678:6;1686;1694;1747:2;1735:9;1726:7;1722:23;1718:32;1715:52;;;1763:1;1760;1753:12;1715:52;1802:9;1789:23;1821:31;1846:5;1821:31;:::i;:::-;1871:5;-1:-1:-1;1928:2:14;1913:18;;1900:32;1941:33;1900:32;1941:33;:::i;:::-;1601:456;;1993:7;;-1:-1:-1;;;2047:2:14;2032:18;;;;2019:32;;1601:456::o;2433:180::-;2492:6;2545:2;2533:9;2524:7;2520:23;2516:32;2513:52;;;2561:1;2558;2551:12;2513:52;-1:-1:-1;2584:23:14;;2433:180;-1:-1:-1;2433:180:14:o;2618:247::-;2677:6;2730:2;2718:9;2709:7;2705:23;2701:32;2698:52;;;2746:1;2743;2736:12;2698:52;2785:9;2772:23;2804:31;2829:5;2804:31;:::i;:::-;2854:5;2618:247;-1:-1:-1;;;2618:247:14:o;3384:829::-;3495:6;3503;3511;3519;3527;3535;3543;3596:3;3584:9;3575:7;3571:23;3567:33;3564:53;;;3613:1;3610;3603:12;3564:53;3652:9;3639:23;3671:31;3696:5;3671:31;:::i;:::-;3721:5;-1:-1:-1;3778:2:14;3763:18;;3750:32;3791:33;3750:32;3791:33;:::i;:::-;3843:7;-1:-1:-1;3897:2:14;3882:18;;3869:32;;-1:-1:-1;3948:2:14;3933:18;;3920:32;;-1:-1:-1;4004:3:14;3989:19;;3976:33;4053:4;4040:18;;4028:31;;4018:59;;4073:1;4070;4063:12;4018:59;3384:829;;;;-1:-1:-1;3384:829:14;;;;4096:7;4150:3;4135:19;;4122:33;;-1:-1:-1;4202:3:14;4187:19;;;4174:33;;3384:829;-1:-1:-1;;3384:829:14:o;4218:388::-;4286:6;4294;4347:2;4335:9;4326:7;4322:23;4318:32;4315:52;;;4363:1;4360;4353:12;4315:52;4402:9;4389:23;4421:31;4446:5;4421:31;:::i;:::-;4471:5;-1:-1:-1;4528:2:14;4513:18;;4500:32;4541:33;4500:32;4541:33;:::i;:::-;4593:7;4583:17;;;4218:388;;;;;:::o;4611:380::-;4690:1;4686:12;;;;4733;;;4754:61;;4808:4;4800:6;4796:17;4786:27;;4754:61;4861:2;4853:6;4850:14;4830:18;4827:38;4824:161;;4907:10;4902:3;4898:20;4895:1;4888:31;4942:4;4939:1;4932:15;4970:4;4967:1;4960:15;4996:127;5057:10;5052:3;5048:20;5045:1;5038:31;5088:4;5085:1;5078:15;5112:4;5109:1;5102:15;5128:128;5168:3;5199:1;5195:6;5192:1;5189:13;5186:39;;;5205:18;;:::i;:::-;-1:-1:-1;5241:9:14;;5128:128::o;5261:251::-;5331:6;5384:2;5372:9;5363:7;5359:23;5355:32;5352:52;;;5400:1;5397;5390:12;5352:52;5432:9;5426:16;5451:31;5476:5;5451:31;:::i;5643:1186::-;5752:4;5781:2;5810;5799:9;5792:21;5833:1;5866:6;5860:13;5896:3;5918:1;5946:9;5942:2;5938:18;5928:28;;6006:2;5995:9;5991:18;6028;6018:61;;6072:4;6064:6;6060:17;6050:27;;6018:61;6125:2;6117:6;6114:14;6094:18;6091:38;6088:165;;-1:-1:-1;;;6152:33:14;;6208:4;6205:1;6198:15;6238:4;6159:3;6226:17;6088:165;6309:18;;;101:19;;;153:4;144:14;6352:18;6379:100;;;;6493:1;6488:315;;;;6345:458;;6379:100;-1:-1:-1;;6412:24:14;;6400:37;;6457:12;;;;-1:-1:-1;6379:100:14;;6488:315;5590:1;5583:14;;;5627:4;5614:18;;6583:1;6597:165;6611:6;6608:1;6605:13;6597:165;;;6689:14;;6676:11;;;6669:35;6732:16;;;;6626:10;;6597:165;;;6782:11;;;-1:-1:-1;;6345:458:14;-1:-1:-1;6820:3:14;;5643:1186;-1:-1:-1;;;;;;;;;5643:1186:14:o;12101:125::-;12141:4;12169:1;12166;12163:8;12160:34;;;12174:18;;:::i;:::-;-1:-1:-1;12211:9:14;;12101:125::o;13930:127::-;13991:10;13986:3;13982:20;13979:1;13972:31;14022:4;14019:1;14012:15;14046:4;14043:1;14036:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1118400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24642",
								"authority()": "2403",
								"balanceOf(address)": "2557",
								"burn(uint256)": "50972",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "infinite",
								"decreaseAllowance(address,uint256)": "26967",
								"increaseAllowance(address,uint256)": "27040",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "2643",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"setAuthority(address)": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2349",
								"transfer(address,uint256)": "51220",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_burnFrom(address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH",
									"source": 11,
									"value": "1A0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH",
									"source": 11,
									"value": "C"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "160"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "15539055551213D492569151"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH",
									"source": 11,
									"value": "180"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH",
									"source": 11,
									"value": "7"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "2"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "JUMP",
									"source": 11,
									"value": "[in]"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 494,
									"end": 530,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 494,
									"end": 530,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 384,
									"end": 520,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "tag",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 384,
									"end": 520,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "tag",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 384,
									"end": 520,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 506,
									"end": 516,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "PUSH",
									"source": 10,
									"value": "3"
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "14D0D5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 1762,
									"end": 1814,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 1801,
									"end": 1805,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "PUSH",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2455,
									"end": 3057,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "14D0D5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "14D0D5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EA"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 440,
									"end": 441,
									"name": "PUSH",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 1895,
									"end": 1900,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1892,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "tag",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1917,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1910,
									"end": 1917,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "tag",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "PUSH",
									"source": 13,
									"value": "FF"
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "SWAP2",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 2778,
									"end": 2803,
									"name": "PUSH",
									"source": 9,
									"value": "100"
								},
								{
									"begin": 2778,
									"end": 2803,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 2778,
									"end": 2803,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2778,
									"end": 2803,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2813,
									"end": 2844,
									"name": "PUSH",
									"source": 9,
									"value": "120"
								},
								{
									"begin": 2813,
									"end": 2844,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2813,
									"end": 2844,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 2813,
									"end": 2844,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2873,
									"end": 2886,
									"name": "CHAINID",
									"source": 9
								},
								{
									"begin": 2854,
									"end": 2886,
									"name": "PUSH",
									"source": 9,
									"value": "C0"
								},
								{
									"begin": 2854,
									"end": 2886,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 2651,
									"end": 2768,
									"name": "PUSH",
									"source": 9,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 2923,
									"end": 2981,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 2651,
									"end": 2768,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 2541,
									"end": 2563,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 2597,
									"end": 2622,
									"name": "DUP5",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 568,
									"end": 593,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 568,
									"end": 593,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 568,
									"end": 593,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 609,
									"end": 627,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 609,
									"end": 627,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 609,
									"end": 627,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 602,
									"end": 636,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 602,
									"end": 636,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 602,
									"end": 636,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 652,
									"end": 670,
									"name": "PUSH",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 652,
									"end": 670,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 652,
									"end": 670,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 645,
									"end": 679,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 645,
									"end": 679,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 645,
									"end": 679,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3677,
									"end": 3690,
									"name": "CHAINID",
									"source": 9
								},
								{
									"begin": 695,
									"end": 713,
									"name": "PUSH",
									"source": 14,
									"value": "80"
								},
								{
									"begin": 695,
									"end": 713,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 695,
									"end": 713,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 688,
									"end": 722,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3700,
									"end": 3704,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 738,
									"end": 757,
									"name": "PUSH",
									"source": 14,
									"value": "A0"
								},
								{
									"begin": 738,
									"end": 757,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 738,
									"end": 757,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 731,
									"end": 792,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 3597,
									"end": 3604,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 3597,
									"end": 3604,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 540,
									"end": 559,
									"name": "PUSH",
									"source": 14,
									"value": "C0"
								},
								{
									"begin": 540,
									"end": 559,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "DUP4",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "SUB",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 3633,
									"end": 3706,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "MLOAD",
									"source": 9
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "PUSH",
									"source": 9,
									"value": "20"
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "ADD",
									"source": 9
								},
								{
									"begin": 3623,
									"end": 3707,
									"name": "KECCAK256",
									"source": 9
								},
								{
									"begin": 3616,
									"end": 3707,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 3616,
									"end": 3707,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "SWAP4",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "SWAP3",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "POP",
									"source": 9
								},
								{
									"begin": 3457,
									"end": 3714,
									"name": "JUMP",
									"source": 9
								},
								{
									"begin": 2923,
									"end": 2981,
									"name": "tag",
									"source": 9,
									"value": "15"
								},
								{
									"begin": 2923,
									"end": 2981,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 2896,
									"end": 2981,
									"name": "PUSH",
									"source": 9,
									"value": "A0"
								},
								{
									"begin": 2896,
									"end": 2981,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3014,
									"end": 3018,
									"name": "ADDRESS",
									"source": 9
								},
								{
									"begin": 2991,
									"end": 3019,
									"name": "PUSH",
									"source": 9,
									"value": "E0"
								},
								{
									"begin": 2991,
									"end": 3019,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 3029,
									"end": 3050,
									"name": "PUSH",
									"source": 9,
									"value": "140"
								},
								{
									"begin": 3029,
									"end": 3050,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 634,
									"end": 643,
									"name": "PUSH",
									"source": 11,
									"value": "8"
								},
								{
									"begin": 634,
									"end": 656,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 634,
									"end": 656,
									"name": "AND",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 634,
									"end": 656,
									"name": "DUP7",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "AND",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SSTORE",
									"source": 11
								},
								{
									"begin": 671,
									"end": 699,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 671,
									"end": 699,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 634,
									"end": 656,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 671,
									"end": 699,
									"name": "PUSH",
									"source": 11,
									"value": "2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD"
								},
								{
									"begin": 671,
									"end": 699,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SWAP2",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 671,
									"end": 699,
									"name": "LOG2",
									"source": 11
								},
								{
									"begin": 580,
									"end": 706,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 384,
									"end": 520,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "35"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "KECCAK256",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "27"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "1F"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "LT",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "FF"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "28"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP6",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "29"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "30"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0,
									"value": "[in]"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0,
									"value": "[out]"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "32"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "tag",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "GT",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "31"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "33"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 14,
									"value": "5"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 14
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "tag",
									"source": 14,
									"value": "25"
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 882,
									"end": 883,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 878,
									"end": 890,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 878,
									"end": 890,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 878,
									"end": 890,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 878,
									"end": 890,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 925,
									"end": 937,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 925,
									"end": 937,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 925,
									"end": 937,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 946,
									"end": 1007,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 946,
									"end": 1007,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1000,
									"end": 1004,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 992,
									"end": 998,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 988,
									"end": 1005,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 978,
									"end": 1005,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 978,
									"end": 1005,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 946,
									"end": 1007,
									"name": "tag",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 946,
									"end": 1007,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1053,
									"end": 1055,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1045,
									"end": 1051,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1042,
									"end": 1056,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 1022,
									"end": 1040,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1019,
									"end": 1057,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 1016,
									"end": 1177,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 1016,
									"end": 1177,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1099,
									"end": 1109,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 1094,
									"end": 1097,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 1090,
									"end": 1110,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 1087,
									"end": 1088,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1080,
									"end": 1111,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1134,
									"end": 1138,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1131,
									"end": 1132,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 1124,
									"end": 1139,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1162,
									"end": 1166,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 1159,
									"end": 1160,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1152,
									"end": 1167,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1016,
									"end": 1177,
									"name": "tag",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 1016,
									"end": 1177,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1016,
									"end": 1177,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "tag",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 803,
									"end": 1183,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "A0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "C0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "E0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "120"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "140"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "879"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "877"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "875"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "873"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "871"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "869"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "ASSIGNIMMUTABLE",
									"source": 0,
									"value": "1532"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 316,
									"end": 1223,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205a7cc3753eb1bba830e14db12bfb50eab119e053805b4ea8f494b84d6aa5881164736f6c634300080d0033",
									".code": [
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "A457C2D7"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "A9059CBB"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "BF7E214F"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "D505ACCF"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "DD62ED3E"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "79CC6790"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "7A9E5E4B"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "7ECEBE00"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "tag",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "313CE567"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "3644E515"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "39509351"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "40C10F19"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "42966C68"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "18160DDD"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 316,
											"end": 1223,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "28"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1392,
											"end": 1406,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1392,
											"end": 1406,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1385,
											"end": 1407,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1367,
											"end": 1408,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1367,
											"end": 1408,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1355,
											"end": 1357,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1340,
											"end": 1358,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1227,
											"end": 1414,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3224,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 3212,
											"end": 3224,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1553,
											"end": 1555,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 1419,
											"end": 1596,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2234,
											"end": 2238,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 3049,
											"end": 3058,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1532"
										},
										{
											"begin": 2222,
											"end": 2239,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2204,
											"end": 2240,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2204,
											"end": 2240,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2192,
											"end": 2194,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2177,
											"end": 2195,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "27"
										},
										{
											"begin": 2062,
											"end": 2246,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "53"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "tag",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 3370,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 746,
											"end": 862,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 746,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 746,
											"end": 862,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 746,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "tag",
											"source": 11,
											"value": "14"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "56"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "65"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "tag",
											"source": 11,
											"value": "72"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "83"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "29"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "tag",
											"source": 11,
											"value": "19"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 537,
											"end": 573,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "tag",
											"source": 11,
											"value": "90"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 537,
											"end": 573,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 537,
											"end": 573,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3340,
											"end": 3372,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 3340,
											"end": 3372,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 3340,
											"end": 3372,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 3322,
											"end": 3373,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3322,
											"end": 3373,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3310,
											"end": 3312,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3295,
											"end": 3313,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 537,
											"end": 573,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "27"
										},
										{
											"begin": 3149,
											"end": 3379,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "tag",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "56"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "35"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "26"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2084,
											"end": 2097,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2116,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "106"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "108"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4397,
											"end": 4401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4467,
											"end": 4474,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4476,
											"end": 4482,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4451,
											"end": 4459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "tag",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4500,
											"end": 4504,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 4500,
											"end": 4504,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "42"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5200,
											"end": 5204,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5287,
											"end": 5293,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5256,
											"end": 5271,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "tag",
											"source": 13,
											"value": "118"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 5314,
											"end": 5318,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5320,
											"end": 5322,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5324,
											"end": 5330,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5304,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "121"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "tag",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5348,
											"end": 5352,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5348,
											"end": 5352,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2872,
											"end": 2879,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2898,
											"end": 2918,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 2898,
											"end": 2916,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "125"
										},
										{
											"begin": 2898,
											"end": 2918,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2898,
											"end": 2918,
											"name": "tag",
											"source": 10,
											"value": "124"
										},
										{
											"begin": 2898,
											"end": 2918,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2891,
											"end": 2918,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2891,
											"end": 2918,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "54"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5842,
											"end": 5846,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5896,
											"end": 5960,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5912,
											"end": 5919,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5949,
											"end": 5959,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "129"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5912,
											"end": 5919,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5930,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "tag",
											"source": 13,
											"value": "129"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "tag",
											"source": 13,
											"value": "130"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5896,
											"end": 5904,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 5896,
											"end": 5960,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1777,
											"end": 1786,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1777,
											"end": 1792,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1792,
											"name": "PUSH",
											"source": 11,
											"value": "FBFA77CF"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "tag",
											"source": 11,
											"value": "134"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "tag",
											"source": 11,
											"value": "135"
										},
										{
											"begin": 1777,
											"end": 1794,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1763,
											"end": 1794,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1763,
											"end": 1773,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1763,
											"end": 1794,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1763,
											"end": 1794,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1796,
											"end": 1808,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "137"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "tag",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "tag",
											"source": 11,
											"value": "137"
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 1755,
											"end": 1809,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 613,
											"end": 637,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 619,
											"end": 627,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 629,
											"end": 636,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 613,
											"end": 618,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "142"
										},
										{
											"begin": 613,
											"end": 637,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 613,
											"end": 637,
											"name": "tag",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 613,
											"end": 637,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "tag",
											"source": 0,
											"value": "62"
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 708,
											"end": 733,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 714,
											"end": 724,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 726,
											"end": 732,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 708,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 708,
											"end": 733,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 708,
											"end": 733,
											"name": "tag",
											"source": 0,
											"value": "144"
										},
										{
											"begin": 708,
											"end": 733,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 650,
											"end": 740,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "tag",
											"source": 0,
											"value": "70"
										},
										{
											"begin": 746,
											"end": 862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 827,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "141"
										},
										{
											"begin": 837,
											"end": 845,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 847,
											"end": 854,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 827,
											"end": 836,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 827,
											"end": 855,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "tag",
											"source": 11,
											"value": "74"
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 938,
											"end": 947,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 947,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 938,
											"end": 947,
											"name": "EXP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 947,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 938,
											"end": 947,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 938,
											"end": 956,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 938,
											"end": 956,
											"name": "PUSH",
											"source": 11,
											"value": "C340A24"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFF"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "E0"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "SHL",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP7",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "GAS",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "STATICCALL",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "RETURNDATACOPY",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "tag",
											"source": 11,
											"value": "152"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "RETURNDATASIZE",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "NOT",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 938,
											"end": 958,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "136"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "tag",
											"source": 11,
											"value": "153"
										},
										{
											"begin": 938,
											"end": 958,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 924,
											"end": 958,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 924,
											"end": 934,
											"name": "CALLER",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 924,
											"end": 958,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 924,
											"end": 958,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 960,
											"end": 972,
											"name": "PUSH",
											"source": 11,
											"value": "7"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 916,
											"end": 973,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "138"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 916,
											"end": 973,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "139"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "JUMP",
											"source": 11,
											"value": "[in]"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "tag",
											"source": 11,
											"value": "154"
										},
										{
											"begin": 916,
											"end": 973,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2144,
											"end": 2153,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "AND",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "OR",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2144,
											"end": 2169,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 2184,
											"end": 2215,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2184,
											"end": 2215,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2184,
											"end": 2215,
											"name": "PUSH",
											"source": 11,
											"value": "2F658B440C35314F52658EA8A740E05B284CDC84DC9AE01E891F21B8933E7CAD"
										},
										{
											"begin": 2184,
											"end": 2215,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 2184,
											"end": 2215,
											"name": "LOG2",
											"source": 11
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 2055,
											"end": 2222,
											"name": "JUMP",
											"source": 11,
											"value": "[out]"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2631,
											"end": 2638,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2664,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2657,
											"end": 2671,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2657,
											"end": 2681,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 2657,
											"end": 2681,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2650,
											"end": 2681,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 2688,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "tag",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2297,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2329,
											"end": 2336,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "104"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "105"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "84"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6568,
											"end": 6572,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6568,
											"end": 6572,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "168"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6666,
											"end": 6673,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6649,
											"end": 6658,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "tag",
											"source": 13,
											"value": "168"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6622,
											"end": 6674,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6622,
											"end": 6674,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6712,
											"end": 6727,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6708,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6727,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6727,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "169"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7036,
											"end": 7038,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7018,
											"end": 7039,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7075,
											"end": 7077,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7055,
											"end": 7073,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7048,
											"end": 7078,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7114,
											"end": 7148,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 7094,
											"end": 7112,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 7094,
											"end": 7112,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7094,
											"end": 7112,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7087,
											"end": 7149,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7165,
											"end": 7183,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7158,
											"end": 7193,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7210,
											"end": 7229,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 7210,
											"end": 7229,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 6834,
											"end": 7235,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "tag",
											"source": 13,
											"value": "169"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6803,
											"end": 6863,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 6812,
											"end": 6817,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6819,
											"end": 6826,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6847,
											"end": 6862,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6828,
											"end": 6844,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6828,
											"end": 6862,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6803,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 6803,
											"end": 6863,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3689,
											"end": 3693,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3743,
											"end": 3771,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "113"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3760,
											"end": 3762,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3764,
											"end": 3770,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3743,
											"end": 3752,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "121"
										},
										{
											"begin": 3743,
											"end": 3771,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "tag",
											"source": 10,
											"value": "97"
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2110,
											"end": 2118,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2091,
											"end": 2106,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 2091,
											"end": 2118,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 2091,
											"end": 2118,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7442,
											"end": 7444,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7424,
											"end": 7445,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7481,
											"end": 7483,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 7461,
											"end": 7479,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 7461,
											"end": 7479,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7461,
											"end": 7479,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7454,
											"end": 7484,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7520,
											"end": 7551,
											"name": "PUSH",
											"source": 14,
											"value": "45524332305065726D69743A206578706972656420646561646C696E65000000"
										},
										{
											"begin": 7500,
											"end": 7518,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 7500,
											"end": 7518,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7500,
											"end": 7518,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7493,
											"end": 7552,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7569,
											"end": 7587,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 7569,
											"end": 7587,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 7240,
											"end": 7593,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "tag",
											"source": 10,
											"value": "177"
										},
										{
											"begin": 2083,
											"end": 2152,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2181,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1070,
											"end": 1165,
											"name": "PUSH",
											"source": 10,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2223,
											"end": 2228,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2230,
											"end": 2237,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2239,
											"end": 2244,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2256,
											"end": 2261,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 2246,
											"end": 2255,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 2246,
											"end": 2262,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 7885,
											"end": 7910,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 7885,
											"end": 7910,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7885,
											"end": 7910,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 7885,
											"end": 7910,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7984,
											"end": 7999,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 7984,
											"end": 7999,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 7984,
											"end": 7999,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 7964,
											"end": 7982,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7957,
											"end": 8000,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8051,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8051,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 8036,
											"end": 8051,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 8016,
											"end": 8034,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 8016,
											"end": 8034,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 8016,
											"end": 8034,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8009,
											"end": 8052,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8068,
											"end": 8086,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 8068,
											"end": 8086,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 8068,
											"end": 8086,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8061,
											"end": 8095,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8111,
											"end": 8130,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 8111,
											"end": 8130,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8111,
											"end": 8130,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8104,
											"end": 8139,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8155,
											"end": 8174,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 8155,
											"end": 8174,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 8155,
											"end": 8174,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 8148,
											"end": 8183,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7857,
											"end": 7876,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 7857,
											"end": 7876,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2194,
											"end": 2273,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 2184,
											"end": 2274,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2274,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2163,
											"end": 2274,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2285,
											"end": 2297,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2300,
											"end": 2328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 2317,
											"end": 2327,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2300,
											"end": 2316,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 2300,
											"end": 2328,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2300,
											"end": 2328,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 2300,
											"end": 2328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2285,
											"end": 2328,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2285,
											"end": 2328,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2339,
											"end": 2353,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 2356,
											"end": 2384,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 2370,
											"end": 2374,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2376,
											"end": 2377,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2379,
											"end": 2380,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2382,
											"end": 2383,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 2356,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 2356,
											"end": 2384,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2384,
											"name": "tag",
											"source": 10,
											"value": "186"
										},
										{
											"begin": 2356,
											"end": 2384,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2339,
											"end": 2384,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 2339,
											"end": 2384,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2412,
											"end": 2417,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2402,
											"end": 2417,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2402,
											"end": 2408,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2402,
											"end": 2417,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2402,
											"end": 2417,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8396,
											"end": 8398,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 8378,
											"end": 8399,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8435,
											"end": 8437,
											"name": "PUSH",
											"source": 14,
											"value": "1E"
										},
										{
											"begin": 8415,
											"end": 8433,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8415,
											"end": 8433,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8415,
											"end": 8433,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8408,
											"end": 8438,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8474,
											"end": 8506,
											"name": "PUSH",
											"source": 14,
											"value": "45524332305065726D69743A20696E76616C6964207369676E61747572650000"
										},
										{
											"begin": 8454,
											"end": 8472,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8454,
											"end": 8472,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8454,
											"end": 8472,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8447,
											"end": 8507,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8524,
											"end": 8542,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 8524,
											"end": 8542,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 8194,
											"end": 8548,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 2394,
											"end": 2452,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2463,
											"end": 2494,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 2472,
											"end": 2477,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 2479,
											"end": 2486,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 2488,
											"end": 2493,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 2463,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 2463,
											"end": 2494,
											"name": "JUMP",
											"source": 10,
											"value": "[in]"
										},
										{
											"begin": 2463,
											"end": 2494,
											"name": "tag",
											"source": 10,
											"value": "191"
										},
										{
											"begin": 2463,
											"end": 2494,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 2073,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2073,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 2073,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1875,
											"end": 2501,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3946,
											"end": 3953,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3983,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "tag",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8755,
											"end": 8757,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 8737,
											"end": 8758,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8794,
											"end": 8796,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8774,
											"end": 8792,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8767,
											"end": 8797,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8833,
											"end": 8867,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 8813,
											"end": 8831,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 8813,
											"end": 8831,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8813,
											"end": 8831,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8806,
											"end": 8868,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 8884,
											"end": 8902,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8877,
											"end": 8911,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 8928,
											"end": 8947,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 8928,
											"end": 8947,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 8553,
											"end": 8953,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "tag",
											"source": 13,
											"value": "195"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10209,
											"end": 10230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10209,
											"end": 10230,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9160,
											"end": 9162,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9142,
											"end": 9163,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9199,
											"end": 9201,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 9179,
											"end": 9197,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9179,
											"end": 9197,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9179,
											"end": 9197,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9172,
											"end": 9202,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9238,
											"end": 9272,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 9218,
											"end": 9236,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9218,
											"end": 9236,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9218,
											"end": 9236,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9211,
											"end": 9273,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9289,
											"end": 9307,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 9289,
											"end": 9307,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9289,
											"end": 9307,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9282,
											"end": 9314,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9331,
											"end": 9350,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 9331,
											"end": 9350,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 8958,
											"end": 9356,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "tag",
											"source": 13,
											"value": "198"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "PUSH",
											"source": 13,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "tag",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "tag",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10805,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "203"
										},
										{
											"begin": 10818,
											"end": 10823,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10825,
											"end": 10832,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10808,
											"end": 10817,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "101"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "tag",
											"source": 13,
											"value": "203"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10833,
											"name": "POP",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10847,
											"end": 10863,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10847,
											"end": 10884,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 10843,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "208"
										},
										{
											"begin": 10843,
											"end": 11086,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10928,
											"end": 10934,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10924,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10934,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10934,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9563,
											"end": 9565,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9545,
											"end": 9566,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9602,
											"end": 9604,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 9582,
											"end": 9600,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9582,
											"end": 9600,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9582,
											"end": 9600,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9575,
											"end": 9605,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9641,
											"end": 9672,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9621,
											"end": 9639,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9614,
											"end": 9673,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9690,
											"end": 9708,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 9690,
											"end": 9708,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 9361,
											"end": 9714,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "tag",
											"source": 13,
											"value": "205"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "208"
										},
										{
											"begin": 11019,
											"end": 11024,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11026,
											"end": 11033,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11054,
											"end": 11060,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11035,
											"end": 11051,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11035,
											"end": 11060,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11018,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "114"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "tag",
											"source": 13,
											"value": "208"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10771,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7365,
											"end": 8016,
											"name": "tag",
											"source": 13,
											"value": "121"
										},
										{
											"begin": 7365,
											"end": 8016,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7491,
											"end": 7509,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7491,
											"end": 7509,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "210"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9921,
											"end": 9923,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 9903,
											"end": 9924,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9960,
											"end": 9962,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9933,
											"end": 9963,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9999,
											"end": 10033,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 9979,
											"end": 9997,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 9979,
											"end": 9997,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 9979,
											"end": 9997,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9972,
											"end": 10034,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10050,
											"end": 10068,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10050,
											"end": 10068,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10050,
											"end": 10068,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10043,
											"end": 10078,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10095,
											"end": 10114,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 10095,
											"end": 10114,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 9719,
											"end": 10120,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "tag",
											"source": 13,
											"value": "210"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7569,
											"end": 7585,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7569,
											"end": 7585,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "213"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10327,
											"end": 10329,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10309,
											"end": 10330,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10366,
											"end": 10368,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 10346,
											"end": 10364,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10346,
											"end": 10364,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10346,
											"end": 10364,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10339,
											"end": 10369,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10405,
											"end": 10439,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 10385,
											"end": 10403,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 10385,
											"end": 10403,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10385,
											"end": 10403,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10378,
											"end": 10440,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10456,
											"end": 10474,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10456,
											"end": 10474,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10456,
											"end": 10474,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10449,
											"end": 10482,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10499,
											"end": 10518,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 10499,
											"end": 10518,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 10125,
											"end": 10524,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "tag",
											"source": 13,
											"value": "213"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7685,
											"end": 7704,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "218"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10731,
											"end": 10733,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 10713,
											"end": 10734,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10770,
											"end": 10772,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 10750,
											"end": 10768,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 10750,
											"end": 10768,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10750,
											"end": 10768,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10743,
											"end": 10773,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10809,
											"end": 10843,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 10789,
											"end": 10807,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 10789,
											"end": 10807,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10789,
											"end": 10807,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10782,
											"end": 10844,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10860,
											"end": 10878,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 10860,
											"end": 10878,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 10860,
											"end": 10878,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10853,
											"end": 10889,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10906,
											"end": 10925,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 10906,
											"end": 10925,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 10529,
											"end": 10931,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "tag",
											"source": 13,
											"value": "218"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7847,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7876,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7876,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7847,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "tag",
											"source": 13,
											"value": "221"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7950,
											"end": 7952,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7944,
											"end": 7948,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7954,
											"end": 7960,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1553,
											"end": 1555,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1419,
											"end": 1596,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "tag",
											"source": 13,
											"value": "222"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 7972,
											"end": 8009,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "208"
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3143,
											"end": 3451,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3143,
											"end": 3451,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 3227,
											"end": 3231,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3236,
											"end": 3248,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "873"
										},
										{
											"begin": 3219,
											"end": 3248,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3248,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 3269,
											"end": 3285,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "871"
										},
										{
											"begin": 3252,
											"end": 3265,
											"name": "CHAINID",
											"source": 9
										},
										{
											"begin": 3252,
											"end": 3285,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "tag",
											"source": 9,
											"value": "226"
										},
										{
											"begin": 3219,
											"end": 3285,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3215,
											"end": 3445,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 3215,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 3215,
											"end": 3445,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3308,
											"end": 3332,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "869"
										},
										{
											"begin": 3308,
											"end": 3332,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3143,
											"end": 3451,
											"name": "JUMP",
											"source": 9,
											"value": "[out]"
										},
										{
											"begin": 3215,
											"end": 3445,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 3215,
											"end": 3445,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3392,
											"end": 3402,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "879"
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 12895,
											"end": 12920,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12895,
											"end": 12920,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12895,
											"end": 12920,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 12895,
											"end": 12920,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3404,
											"end": 3416,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "875"
										},
										{
											"begin": 12936,
											"end": 12954,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12936,
											"end": 12954,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 12936,
											"end": 12954,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12929,
											"end": 12963,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3418,
											"end": 3433,
											"name": "PUSHIMMUTABLE",
											"source": 9,
											"value": "877"
										},
										{
											"begin": 12979,
											"end": 12997,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 12979,
											"end": 12997,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 12979,
											"end": 12997,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12972,
											"end": 13006,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3677,
											"end": 3690,
											"name": "CHAINID",
											"source": 9
										},
										{
											"begin": 13022,
											"end": 13040,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 13022,
											"end": 13040,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13022,
											"end": 13040,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13015,
											"end": 13049,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3700,
											"end": 3704,
											"name": "ADDRESS",
											"source": 9
										},
										{
											"begin": 13065,
											"end": 13084,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 13065,
											"end": 13084,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 13065,
											"end": 13084,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 13065,
											"end": 13084,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13058,
											"end": 13119,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13058,
											"end": 13119,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13058,
											"end": 13119,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 13058,
											"end": 13119,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 12867,
											"end": 12886,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 12867,
											"end": 12886,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12867,
											"end": 12886,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 12867,
											"end": 12886,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 3633,
											"end": 3706,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 3623,
											"end": 3707,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2812,
											"end": 2925,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 8292,
											"end": 8681,
											"name": "tag",
											"source": 13,
											"value": "142"
										},
										{
											"begin": 8292,
											"end": 8681,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8375,
											"end": 8396,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8375,
											"end": 8396,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "232"
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11138,
											"end": 11140,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11120,
											"end": 11141,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11177,
											"end": 11179,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 11157,
											"end": 11175,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11157,
											"end": 11175,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11157,
											"end": 11175,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11150,
											"end": 11180,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11216,
											"end": 11249,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 11196,
											"end": 11214,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 11196,
											"end": 11214,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11196,
											"end": 11214,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11189,
											"end": 11250,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11267,
											"end": 11285,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 11267,
											"end": 11285,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 10936,
											"end": 11291,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "tag",
											"source": 13,
											"value": "232"
										},
										{
											"begin": 8367,
											"end": 8432,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8519,
											"end": 8525,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8515,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 8503,
											"end": 8515,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "tag",
											"source": 13,
											"value": "236"
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8503,
											"end": 8525,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8544,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8553,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 8557,
											"end": 8563,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8557,
											"end": 8563,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8544,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8557,
											"end": 8563,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 8557,
											"end": 8563,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "131"
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "tag",
											"source": 13,
											"value": "237"
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8535,
											"end": 8563,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8595,
											"end": 8596,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 8595,
											"end": 8596,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "PUSH",
											"source": 13,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1553,
											"end": 1555,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 8578,
											"end": 8615,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 526,
											"end": 644,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 526,
											"end": 644,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "tag",
											"source": 13,
											"value": "145"
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9084,
											"end": 9105,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9084,
											"end": 9105,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "241"
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11498,
											"end": 11500,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11480,
											"end": 11501,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11537,
											"end": 11539,
											"name": "PUSH",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 11517,
											"end": 11535,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11517,
											"end": 11535,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11517,
											"end": 11535,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11510,
											"end": 11540,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11576,
											"end": 11610,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A206275726E2066726F6D20746865207A65726F20616464726573"
										},
										{
											"begin": 11556,
											"end": 11574,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 11556,
											"end": 11574,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11556,
											"end": 11574,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11549,
											"end": 11611,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11627,
											"end": 11645,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 11627,
											"end": 11645,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11627,
											"end": 11645,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11620,
											"end": 11651,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11668,
											"end": 11687,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 11668,
											"end": 11687,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 11296,
											"end": 11693,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "tag",
											"source": 13,
											"value": "241"
										},
										{
											"begin": 9076,
											"end": 9143,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9214,
											"end": 9236,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 9239,
											"end": 9257,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 9275,
											"end": 9299,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9275,
											"end": 9299,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9275,
											"end": 9299,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 9275,
											"end": 9299,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 11900,
											"end": 11902,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 11882,
											"end": 11903,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11939,
											"end": 11941,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 11919,
											"end": 11937,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 11919,
											"end": 11937,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11919,
											"end": 11937,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11912,
											"end": 11942,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 11978,
											"end": 12012,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A206275726E20616D6F756E7420657863656564732062616C616E"
										},
										{
											"begin": 11958,
											"end": 11976,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 11958,
											"end": 11976,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 11958,
											"end": 11976,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 11951,
											"end": 12013,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12022,
											"end": 12054,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12071,
											"end": 12090,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 12071,
											"end": 12090,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "138"
										},
										{
											"begin": 11698,
											"end": 12096,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "tag",
											"source": 13,
											"value": "245"
										},
										{
											"begin": 9267,
											"end": 9338,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9381,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9390,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 9393,
											"end": 9416,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9393,
											"end": 9416,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 9393,
											"end": 9416,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9416,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9416,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9448,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 9410,
											"end": 9416,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 9410,
											"end": 9416,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 9372,
											"end": 9381,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "248"
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9410,
											"end": 9416,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 9410,
											"end": 9416,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "249"
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "tag",
											"source": 13,
											"value": "248"
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 9436,
											"end": 9458,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1565,
											"end": 1590,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9500,
											"end": 9501,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 9500,
											"end": 9501,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "PUSH",
											"source": 13,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1553,
											"end": 1555,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1538,
											"end": 1556,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9474,
											"end": 9511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "201"
										},
										{
											"begin": 1419,
											"end": 1596,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9522,
											"end": 9570,
											"name": "tag",
											"source": 13,
											"value": "251"
										},
										{
											"begin": 9522,
											"end": 9570,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 9066,
											"end": 9577,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 9001,
											"end": 9577,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 868,
											"end": 1221,
											"name": "tag",
											"source": 0,
											"value": "149"
										},
										{
											"begin": 868,
											"end": 1221,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 941,
											"end": 964,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 967,
											"end": 998,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 977,
											"end": 985,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 987,
											"end": 997,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 967,
											"end": 976,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 967,
											"end": 998,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 967,
											"end": 998,
											"name": "tag",
											"source": 0,
											"value": "253"
										},
										{
											"begin": 967,
											"end": 998,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 941,
											"end": 998,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1045,
											"end": 1046,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1016,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "254"
										},
										{
											"begin": 1034,
											"end": 1041,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 941,
											"end": 998,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 1016,
											"end": 1041,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1016,
											"end": 1041,
											"name": "tag",
											"source": 0,
											"value": "254"
										},
										{
											"begin": 1016,
											"end": 1041,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 1046,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1016,
											"end": 1046,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 12433,
											"end": 12435,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 12415,
											"end": 12436,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12472,
											"end": 12474,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 12452,
											"end": 12470,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 12452,
											"end": 12470,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12452,
											"end": 12470,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12445,
											"end": 12475,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12511,
											"end": 12545,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A206275726E20616D6F756E74206578636565647320616C6C6F77"
										},
										{
											"begin": 12491,
											"end": 12509,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 12491,
											"end": 12509,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12491,
											"end": 12509,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12484,
											"end": 12546,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12562,
											"end": 12580,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 12562,
											"end": 12580,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12562,
											"end": 12580,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 12555,
											"end": 12589,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 12606,
											"end": 12625,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 12606,
											"end": 12625,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "138"
										},
										{
											"begin": 12231,
											"end": 12631,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "tag",
											"source": 0,
											"value": "255"
										},
										{
											"begin": 1008,
											"end": 1087,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 1116,
											"end": 1123,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "249"
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "tag",
											"source": 0,
											"value": "258"
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1123,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1133,
											"end": 1180,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 1142,
											"end": 1150,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1152,
											"end": 1162,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1164,
											"end": 1179,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1133,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1133,
											"end": 1180,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1133,
											"end": 1180,
											"name": "tag",
											"source": 0,
											"value": "259"
										},
										{
											"begin": 1133,
											"end": 1180,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1190,
											"end": 1214,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "251"
										},
										{
											"begin": 1196,
											"end": 1204,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1206,
											"end": 1213,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1190,
											"end": 1195,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "145"
										},
										{
											"begin": 1190,
											"end": 1214,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "tag",
											"source": 10,
											"value": "181"
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 3116,
											"end": 3131,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3183,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3176,
											"end": 3190,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 918,
											"end": 932,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1050,
											"end": 1051,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1032,
											"end": 1051,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 918,
											"end": 932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3235,
											"end": 3252,
											"name": "tag",
											"source": 10,
											"value": "264"
										},
										{
											"begin": 3235,
											"end": 3252,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 3133,
											"end": 3259,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 3056,
											"end": 3259,
											"name": "JUMP",
											"source": 10,
											"value": "[out]"
										},
										{
											"begin": 4339,
											"end": 4504,
											"name": "tag",
											"source": 9,
											"value": "185"
										},
										{
											"begin": 4339,
											"end": 4504,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4416,
											"end": 4423,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4442,
											"end": 4497,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "158"
										},
										{
											"begin": 4464,
											"end": 4484,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 4464,
											"end": 4482,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 4464,
											"end": 4484,
											"name": "JUMP",
											"source": 9,
											"value": "[in]"
										},
										{
											"begin": 4464,
											"end": 4484,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 4464,
											"end": 4484,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4486,
											"end": 4496,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 13388,
											"end": 13415,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13431,
											"end": 13442,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 13431,
											"end": 13442,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13431,
											"end": 13442,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13424,
											"end": 13451,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 13424,
											"end": 13451,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13424,
											"end": 13451,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13467,
											"end": 13479,
											"name": "PUSH",
											"source": 14,
											"value": "42"
										},
										{
											"begin": 13467,
											"end": 13479,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13467,
											"end": 13479,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13460,
											"end": 13488,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13460,
											"end": 13488,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13460,
											"end": 13488,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 9189,
											"end": 9196,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9189,
											"end": 9196,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13504,
											"end": 13516,
											"name": "PUSH",
											"source": 14,
											"value": "62"
										},
										{
											"begin": 13504,
											"end": 13516,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9225,
											"end": 9282,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9215,
											"end": 9283,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9283,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9208,
											"end": 9283,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9290,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9290,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9290,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9290,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9096,
											"end": 9290,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7451,
											"end": 7721,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 7451,
											"end": 7721,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7574,
											"end": 7581,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7594,
											"end": 7611,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7613,
											"end": 7631,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7635,
											"end": 7660,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 7646,
											"end": 7650,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7652,
											"end": 7653,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7655,
											"end": 7656,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7658,
											"end": 7659,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 7635,
											"end": 7645,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 7635,
											"end": 7660,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7635,
											"end": 7660,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 7635,
											"end": 7660,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7660,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7660,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7660,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 7593,
											"end": 7660,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7670,
											"end": 7688,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 7682,
											"end": 7687,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7670,
											"end": 7681,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 7670,
											"end": 7688,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 7670,
											"end": 7688,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 7670,
											"end": 7688,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7705,
											"end": 7714,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 7451,
											"end": 7721,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7451,
											"end": 7721,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "tag",
											"source": 8,
											"value": "272"
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5841,
											"end": 5848,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 5841,
											"end": 5848,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6765,
											"end": 6831,
											"name": "PUSH",
											"source": 8,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6752,
											"end": 6831,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 6752,
											"end": 6831,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6748,
											"end": 6909,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6748,
											"end": 6909,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 6748,
											"end": 6909,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6863,
											"end": 6864,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6863,
											"end": 6864,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6867,
											"end": 6897,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 6847,
											"end": 6898,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 6847,
											"end": 6898,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6748,
											"end": 6909,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 6748,
											"end": 6909,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6923,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6927,
											"end": 6929,
											"name": "PUSH",
											"source": 8,
											"value": "1B"
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6929,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 6933,
											"end": 6934,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 6933,
											"end": 6940,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 6933,
											"end": 6940,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 6938,
											"end": 6940,
											"name": "PUSH",
											"source": 8,
											"value": "1C"
										},
										{
											"begin": 6933,
											"end": 6940,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6933,
											"end": 6940,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 6922,
											"end": 6940,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6918,
											"end": 7018,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6918,
											"end": 7018,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 6918,
											"end": 7018,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6972,
											"end": 6973,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6972,
											"end": 6973,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6976,
											"end": 7006,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6956,
											"end": 7007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 6956,
											"end": 7007,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6918,
											"end": 7018,
											"name": "tag",
											"source": 8,
											"value": "287"
										},
										{
											"begin": 6918,
											"end": 7018,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7112,
											"end": 7126,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 13754,
											"end": 13779,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 13754,
											"end": 13779,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13754,
											"end": 13779,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13827,
											"end": 13831,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 13815,
											"end": 13832,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 13815,
											"end": 13832,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 13795,
											"end": 13813,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13795,
											"end": 13813,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 13795,
											"end": 13813,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13788,
											"end": 13833,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13788,
											"end": 13833,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13788,
											"end": 13833,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 13788,
											"end": 13833,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13849,
											"end": 13867,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 13849,
											"end": 13867,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13849,
											"end": 13867,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13842,
											"end": 13876,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 13842,
											"end": 13876,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13842,
											"end": 13876,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 13892,
											"end": 13910,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 13892,
											"end": 13910,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 13892,
											"end": 13910,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 13885,
											"end": 13919,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 13885,
											"end": 13919,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 13885,
											"end": 13919,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 13726,
											"end": 13745,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 13726,
											"end": 13745,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "GAS",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "STATICCALL",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "RETURNDATACOPY",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "RETURNDATASIZE",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "tag",
											"source": 8,
											"value": "291"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 7129,
											"end": 7153,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7167,
											"end": 7187,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7167,
											"end": 7187,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 7163,
											"end": 7264,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 7163,
											"end": 7264,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 7219,
											"end": 7220,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7223,
											"end": 7252,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 7203,
											"end": 7253,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7163,
											"end": 7264,
											"name": "tag",
											"source": 8,
											"value": "292"
										},
										{
											"begin": 7163,
											"end": 7264,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7282,
											"end": 7288,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7290,
											"end": 7310,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 7290,
											"end": 7310,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "tag",
											"source": 8,
											"value": "284"
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 5715,
											"end": 7318,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 547,
											"end": 1178,
											"name": "tag",
											"source": 8,
											"value": "274"
										},
										{
											"begin": 547,
											"end": 1178,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 624,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 615,
											"end": 620,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "tag",
											"source": 8,
											"value": "298"
										},
										{
											"begin": 615,
											"end": 644,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 615,
											"end": 644,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 611,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 611,
											"end": 1172,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 547,
											"end": 1178,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 547,
											"end": 1178,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 611,
											"end": 1172,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 611,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 720,
											"end": 749,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 711,
											"end": 716,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 711,
											"end": 749,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 711,
											"end": 749,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 707,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 707,
											"end": 1172,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 765,
											"end": 799,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 765,
											"end": 799,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 765,
											"end": 799,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 765,
											"end": 799,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14264,
											"end": 14266,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 765,
											"end": 799,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 765,
											"end": 799,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 765,
											"end": 799,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14246,
											"end": 14267,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14303,
											"end": 14305,
											"name": "PUSH",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 14283,
											"end": 14301,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 14283,
											"end": 14301,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14283,
											"end": 14301,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14276,
											"end": 14306,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14342,
											"end": 14368,
											"name": "PUSH",
											"source": 14,
											"value": "45434453413A20696E76616C6964207369676E61747572650000000000000000"
										},
										{
											"begin": 14322,
											"end": 14340,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 14322,
											"end": 14340,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14322,
											"end": 14340,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14315,
											"end": 14369,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14386,
											"end": 14404,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 14386,
											"end": 14404,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 765,
											"end": 799,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 14062,
											"end": 14410,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 707,
											"end": 1172,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 707,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 829,
											"end": 864,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 820,
											"end": 825,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "tag",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 820,
											"end": 864,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 820,
											"end": 864,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 816,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "313"
										},
										{
											"begin": 816,
											"end": 1172,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 880,
											"end": 921,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 880,
											"end": 921,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 880,
											"end": 921,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 880,
											"end": 921,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14617,
											"end": 14619,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 880,
											"end": 921,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 880,
											"end": 921,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 880,
											"end": 921,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14599,
											"end": 14620,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14656,
											"end": 14658,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14636,
											"end": 14654,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14629,
											"end": 14659,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14695,
											"end": 14728,
											"name": "PUSH",
											"source": 14,
											"value": "45434453413A20696E76616C6964207369676E6174757265206C656E67746800"
										},
										{
											"begin": 14675,
											"end": 14693,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 14675,
											"end": 14693,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14675,
											"end": 14693,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14668,
											"end": 14729,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14746,
											"end": 14764,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 14746,
											"end": 14764,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 880,
											"end": 921,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 14415,
											"end": 14770,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 816,
											"end": 1172,
											"name": "tag",
											"source": 8,
											"value": "313"
										},
										{
											"begin": 816,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 951,
											"end": 981,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 942,
											"end": 947,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "tag",
											"source": 8,
											"value": "320"
										},
										{
											"begin": 942,
											"end": 981,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 942,
											"end": 981,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 938,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 938,
											"end": 1172,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 14977,
											"end": 14979,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 14959,
											"end": 14980,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15016,
											"end": 15018,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 14996,
											"end": 15014,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 14996,
											"end": 15014,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 14996,
											"end": 15014,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 14989,
											"end": 15019,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15055,
											"end": 15089,
											"name": "PUSH",
											"source": 14,
											"value": "45434453413A20696E76616C6964207369676E6174757265202773272076616C"
										},
										{
											"begin": 15035,
											"end": 15053,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 15035,
											"end": 15053,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15035,
											"end": 15053,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15028,
											"end": 15090,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15106,
											"end": 15124,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 15106,
											"end": 15124,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15106,
											"end": 15124,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15099,
											"end": 15131,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15148,
											"end": 15167,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 15148,
											"end": 15167,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 997,
											"end": 1041,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 14775,
											"end": 15173,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 938,
											"end": 1172,
											"name": "tag",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 938,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1071,
											"end": 1101,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1062,
											"end": 1067,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "296"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "tag",
											"source": 8,
											"value": "328"
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1062,
											"end": 1101,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1058,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "144"
										},
										{
											"begin": 1058,
											"end": 1172,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 15380,
											"end": 15382,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 15362,
											"end": 15383,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15419,
											"end": 15421,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 15399,
											"end": 15417,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 15399,
											"end": 15417,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15399,
											"end": 15417,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15392,
											"end": 15422,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15458,
											"end": 15492,
											"name": "PUSH",
											"source": 14,
											"value": "45434453413A20696E76616C6964207369676E6174757265202776272076616C"
										},
										{
											"begin": 15438,
											"end": 15456,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 15438,
											"end": 15456,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15438,
											"end": 15456,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15431,
											"end": 15493,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7565"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15509,
											"end": 15527,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 15509,
											"end": 15527,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 15509,
											"end": 15527,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 15502,
											"end": 15534,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 15551,
											"end": 15570,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 15551,
											"end": 15570,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1117,
											"end": 1161,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "138"
										},
										{
											"begin": 15178,
											"end": 15576,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 169,
											"end": 766,
											"name": "tag",
											"source": 14,
											"value": "28"
										},
										{
											"begin": 169,
											"end": 766,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 281,
											"end": 285,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 310,
											"end": 312,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 339,
											"end": 341,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 328,
											"end": 337,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 321,
											"end": 342,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 371,
											"end": 377,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 365,
											"end": 378,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 414,
											"end": 420,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 409,
											"end": 411,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 398,
											"end": 407,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 394,
											"end": 412,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 387,
											"end": 421,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 439,
											"end": 440,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 449,
											"end": 589,
											"name": "tag",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 449,
											"end": 589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 463,
											"end": 469,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 460,
											"end": 461,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 457,
											"end": 470,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 449,
											"end": 589,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 449,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 449,
											"end": 589,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 558,
											"end": 572,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 558,
											"end": 572,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 558,
											"end": 572,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 554,
											"end": 577,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 554,
											"end": 577,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 548,
											"end": 578,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 524,
											"end": 541,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 524,
											"end": 541,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 524,
											"end": 541,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 543,
											"end": 545,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 520,
											"end": 546,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 513,
											"end": 579,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 478,
											"end": 488,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 478,
											"end": 488,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 449,
											"end": 589,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "339"
										},
										{
											"begin": 449,
											"end": 589,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 449,
											"end": 589,
											"name": "tag",
											"source": 14,
											"value": "341"
										},
										{
											"begin": 449,
											"end": 589,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 607,
											"end": 613,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 604,
											"end": 605,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 601,
											"end": 614,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 598,
											"end": 689,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 598,
											"end": 689,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 598,
											"end": 689,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 677,
											"end": 678,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 672,
											"end": 674,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 663,
											"end": 669,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 652,
											"end": 661,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 648,
											"end": 670,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 644,
											"end": 675,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 637,
											"end": 679,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 598,
											"end": 689,
											"name": "tag",
											"source": 14,
											"value": "342"
										},
										{
											"begin": 598,
											"end": 689,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 750,
											"end": 752,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 729,
											"end": 744,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 725,
											"end": 754,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 710,
											"end": 755,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 710,
											"end": 755,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 710,
											"end": 755,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 710,
											"end": 755,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 757,
											"end": 759,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 706,
											"end": 760,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 706,
											"end": 760,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 169,
											"end": 766,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 169,
											"end": 766,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 771,
											"end": 902,
											"name": "tag",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 771,
											"end": 902,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 846,
											"end": 877,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 846,
											"end": 877,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 836,
											"end": 878,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 836,
											"end": 878,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 826,
											"end": 896,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 826,
											"end": 896,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 892,
											"end": 893,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 889,
											"end": 890,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 882,
											"end": 894,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 907,
											"end": 1222,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 907,
											"end": 1222,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 975,
											"end": 981,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 983,
											"end": 989,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1036,
											"end": 1038,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1024,
											"end": 1033,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1015,
											"end": 1022,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1011,
											"end": 1034,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1007,
											"end": 1039,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1004,
											"end": 1056,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1004,
											"end": 1056,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 1004,
											"end": 1056,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1052,
											"end": 1053,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1049,
											"end": 1050,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1042,
											"end": 1054,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1004,
											"end": 1056,
											"name": "tag",
											"source": 14,
											"value": "346"
										},
										{
											"begin": 1004,
											"end": 1056,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1091,
											"end": 1100,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 1078,
											"end": 1101,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1110,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1110,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 1110,
											"end": 1141,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1110,
											"end": 1141,
											"name": "tag",
											"source": 14,
											"value": "347"
										},
										{
											"begin": 1110,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1160,
											"end": 1165,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1212,
											"end": 1214,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1197,
											"end": 1215,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1184,
											"end": 1216,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1184,
											"end": 1216,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 907,
											"end": 1222,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1601,
											"end": 2057,
											"name": "tag",
											"source": 14,
											"value": "41"
										},
										{
											"begin": 1601,
											"end": 2057,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1678,
											"end": 1684,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1686,
											"end": 1692,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1694,
											"end": 1700,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1747,
											"end": 1749,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1735,
											"end": 1744,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1726,
											"end": 1733,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1722,
											"end": 1745,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1718,
											"end": 1750,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1715,
											"end": 1767,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1715,
											"end": 1767,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1715,
											"end": 1767,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1763,
											"end": 1764,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1760,
											"end": 1761,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1753,
											"end": 1765,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1715,
											"end": 1767,
											"name": "tag",
											"source": 14,
											"value": "351"
										},
										{
											"begin": 1715,
											"end": 1767,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1802,
											"end": 1811,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 1789,
											"end": 1812,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1821,
											"end": 1852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 1846,
											"end": 1851,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1821,
											"end": 1852,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 1821,
											"end": 1852,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1821,
											"end": 1852,
											"name": "tag",
											"source": 14,
											"value": "352"
										},
										{
											"begin": 1821,
											"end": 1852,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1871,
											"end": 1876,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1928,
											"end": 1930,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1913,
											"end": 1931,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1913,
											"end": 1931,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1900,
											"end": 1932,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1941,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "353"
										},
										{
											"begin": 1900,
											"end": 1932,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1941,
											"end": 1974,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 1941,
											"end": 1974,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1941,
											"end": 1974,
											"name": "tag",
											"source": 14,
											"value": "353"
										},
										{
											"begin": 1941,
											"end": 1974,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1601,
											"end": 2057,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1601,
											"end": 2057,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 1993,
											"end": 2000,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1993,
											"end": 2000,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2047,
											"end": 2049,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2032,
											"end": 2050,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2032,
											"end": 2050,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2032,
											"end": 2050,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2032,
											"end": 2050,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2051,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2019,
											"end": 2051,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1601,
											"end": 2057,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2433,
											"end": 2613,
											"name": "tag",
											"source": 14,
											"value": "61"
										},
										{
											"begin": 2433,
											"end": 2613,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2492,
											"end": 2498,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2545,
											"end": 2547,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2533,
											"end": 2542,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2524,
											"end": 2531,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2520,
											"end": 2543,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2516,
											"end": 2548,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2513,
											"end": 2565,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2513,
											"end": 2565,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 2513,
											"end": 2565,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2561,
											"end": 2562,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2558,
											"end": 2559,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2551,
											"end": 2563,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2513,
											"end": 2565,
											"name": "tag",
											"source": 14,
											"value": "357"
										},
										{
											"begin": 2513,
											"end": 2565,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2584,
											"end": 2607,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2584,
											"end": 2607,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2433,
											"end": 2613,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2433,
											"end": 2613,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2618,
											"end": 2865,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 2618,
											"end": 2865,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2677,
											"end": 2683,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2730,
											"end": 2732,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2718,
											"end": 2727,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2709,
											"end": 2716,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2705,
											"end": 2728,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2701,
											"end": 2733,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2698,
											"end": 2750,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2698,
											"end": 2750,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "359"
										},
										{
											"begin": 2698,
											"end": 2750,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2746,
											"end": 2747,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2743,
											"end": 2744,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2736,
											"end": 2748,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2698,
											"end": 2750,
											"name": "tag",
											"source": 14,
											"value": "359"
										},
										{
											"begin": 2698,
											"end": 2750,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2785,
											"end": 2794,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2772,
											"end": 2795,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 2804,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 2829,
											"end": 2834,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2804,
											"end": 2835,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 2804,
											"end": 2835,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2804,
											"end": 2835,
											"name": "tag",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 2804,
											"end": 2835,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2854,
											"end": 2859,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2865,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2618,
											"end": 2865,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "tag",
											"source": 14,
											"value": "96"
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3495,
											"end": 3501,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3503,
											"end": 3509,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3511,
											"end": 3517,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3519,
											"end": 3525,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3527,
											"end": 3533,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3535,
											"end": 3541,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3543,
											"end": 3549,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3596,
											"end": 3599,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 3584,
											"end": 3593,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3575,
											"end": 3582,
											"name": "DUP11",
											"source": 14
										},
										{
											"begin": 3571,
											"end": 3594,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 3564,
											"end": 3617,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 3564,
											"end": 3617,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 3564,
											"end": 3617,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 3613,
											"end": 3614,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 3610,
											"end": 3611,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3603,
											"end": 3615,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 3564,
											"end": 3617,
											"name": "tag",
											"source": 14,
											"value": "366"
										},
										{
											"begin": 3564,
											"end": 3617,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3652,
											"end": 3661,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 3639,
											"end": 3662,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 3696,
											"end": 3701,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "tag",
											"source": 14,
											"value": "367"
										},
										{
											"begin": 3671,
											"end": 3702,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3721,
											"end": 3726,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3778,
											"end": 3780,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 3763,
											"end": 3781,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3763,
											"end": 3781,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3750,
											"end": 3782,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3791,
											"end": 3824,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 3750,
											"end": 3782,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 3791,
											"end": 3824,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 3791,
											"end": 3824,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 3791,
											"end": 3824,
											"name": "tag",
											"source": 14,
											"value": "368"
										},
										{
											"begin": 3791,
											"end": 3824,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3843,
											"end": 3850,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3897,
											"end": 3899,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3882,
											"end": 3900,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3869,
											"end": 3901,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3869,
											"end": 3901,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3948,
											"end": 3950,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 3933,
											"end": 3951,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3933,
											"end": 3951,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3920,
											"end": 3952,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 3920,
											"end": 3952,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4004,
											"end": 4007,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 3989,
											"end": 4008,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3976,
											"end": 4009,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4053,
											"end": 4057,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 4040,
											"end": 4058,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4040,
											"end": 4058,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4059,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4028,
											"end": 4059,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "369"
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4073,
											"end": 4074,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4070,
											"end": 4071,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4063,
											"end": 4075,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "tag",
											"source": 14,
											"value": "369"
										},
										{
											"begin": 4018,
											"end": 4077,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP10",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": 4096,
											"end": 4103,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 4150,
											"end": 4153,
											"name": "PUSH",
											"source": 14,
											"value": "A0"
										},
										{
											"begin": 4135,
											"end": 4154,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 4135,
											"end": 4154,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4155,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4122,
											"end": 4155,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4202,
											"end": 4205,
											"name": "PUSH",
											"source": 14,
											"value": "C0"
										},
										{
											"begin": 4187,
											"end": 4206,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4206,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 4187,
											"end": 4206,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4174,
											"end": 4207,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4174,
											"end": 4207,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3384,
											"end": 4213,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "tag",
											"source": 14,
											"value": "100"
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4286,
											"end": 4292,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4294,
											"end": 4300,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4347,
											"end": 4349,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 4335,
											"end": 4344,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4326,
											"end": 4333,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 4322,
											"end": 4345,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4318,
											"end": 4350,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 4315,
											"end": 4367,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 4315,
											"end": 4367,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 4315,
											"end": 4367,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4363,
											"end": 4364,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4360,
											"end": 4361,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4353,
											"end": 4365,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4315,
											"end": 4367,
											"name": "tag",
											"source": 14,
											"value": "371"
										},
										{
											"begin": 4315,
											"end": 4367,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4402,
											"end": 4411,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4389,
											"end": 4412,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4421,
											"end": 4452,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "372"
										},
										{
											"begin": 4446,
											"end": 4451,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4421,
											"end": 4452,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 4421,
											"end": 4452,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4421,
											"end": 4452,
											"name": "tag",
											"source": 14,
											"value": "372"
										},
										{
											"begin": 4421,
											"end": 4452,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4471,
											"end": 4476,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4528,
											"end": 4530,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4513,
											"end": 4531,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 4513,
											"end": 4531,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4500,
											"end": 4532,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 4541,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 4500,
											"end": 4532,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4541,
											"end": 4574,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 4541,
											"end": 4574,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 4541,
											"end": 4574,
											"name": "tag",
											"source": 14,
											"value": "373"
										},
										{
											"begin": 4541,
											"end": 4574,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4593,
											"end": 4600,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4583,
											"end": 4600,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4583,
											"end": 4600,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4583,
											"end": 4600,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4218,
											"end": 4606,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 4611,
											"end": 4991,
											"name": "tag",
											"source": 14,
											"value": "105"
										},
										{
											"begin": 4611,
											"end": 4991,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4690,
											"end": 4691,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 4686,
											"end": 4698,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4686,
											"end": 4698,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4686,
											"end": 4698,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 4686,
											"end": 4698,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 4733,
											"end": 4745,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4733,
											"end": 4745,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4733,
											"end": 4745,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "375"
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4808,
											"end": 4812,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 4800,
											"end": 4806,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4796,
											"end": 4813,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 4786,
											"end": 4813,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 4786,
											"end": 4813,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "tag",
											"source": 14,
											"value": "375"
										},
										{
											"begin": 4754,
											"end": 4815,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 4861,
											"end": 4863,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 4853,
											"end": 4859,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4850,
											"end": 4864,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 4830,
											"end": 4848,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 4827,
											"end": 4865,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 4824,
											"end": 4985,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "264"
										},
										{
											"begin": 4824,
											"end": 4985,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 4907,
											"end": 4917,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 4902,
											"end": 4905,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 4898,
											"end": 4918,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 4895,
											"end": 4896,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4888,
											"end": 4919,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4942,
											"end": 4946,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 4939,
											"end": 4940,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 4932,
											"end": 4947,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4970,
											"end": 4974,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4967,
											"end": 4968,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 4960,
											"end": 4975,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 4996,
											"end": 5123,
											"name": "tag",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 4996,
											"end": 5123,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5057,
											"end": 5067,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 5052,
											"end": 5055,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 5048,
											"end": 5068,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 5045,
											"end": 5046,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5038,
											"end": 5069,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5088,
											"end": 5092,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 5085,
											"end": 5086,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 5078,
											"end": 5093,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5112,
											"end": 5116,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5109,
											"end": 5110,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5102,
											"end": 5117,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5128,
											"end": 5256,
											"name": "tag",
											"source": 14,
											"value": "131"
										},
										{
											"begin": 5128,
											"end": 5256,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5168,
											"end": 5171,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5199,
											"end": 5200,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5195,
											"end": 5201,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 5192,
											"end": 5193,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5189,
											"end": 5202,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 5186,
											"end": 5225,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5186,
											"end": 5225,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "380"
										},
										{
											"begin": 5186,
											"end": 5225,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "380"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "tag",
											"source": 14,
											"value": "380"
										},
										{
											"begin": 5205,
											"end": 5223,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5241,
											"end": 5250,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5241,
											"end": 5250,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5128,
											"end": 5256,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 5261,
											"end": 5512,
											"name": "tag",
											"source": 14,
											"value": "136"
										},
										{
											"begin": 5261,
											"end": 5512,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5331,
											"end": 5337,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5384,
											"end": 5386,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5372,
											"end": 5381,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5363,
											"end": 5370,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5359,
											"end": 5382,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 5355,
											"end": 5387,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 5352,
											"end": 5404,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 5352,
											"end": 5404,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 5352,
											"end": 5404,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 5400,
											"end": 5401,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5397,
											"end": 5398,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5390,
											"end": 5402,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 5352,
											"end": 5404,
											"name": "tag",
											"source": 14,
											"value": "382"
										},
										{
											"begin": 5352,
											"end": 5404,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5432,
											"end": 5441,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5426,
											"end": 5442,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 5451,
											"end": 5482,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "360"
										},
										{
											"begin": 5476,
											"end": 5481,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5451,
											"end": 5482,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "333"
										},
										{
											"begin": 5451,
											"end": 5482,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 5643,
											"end": 6829,
											"name": "tag",
											"source": 14,
											"value": "139"
										},
										{
											"begin": 5643,
											"end": 6829,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5752,
											"end": 5756,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5781,
											"end": 5783,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5810,
											"end": 5812,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5799,
											"end": 5808,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5792,
											"end": 5813,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5833,
											"end": 5834,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5866,
											"end": 5872,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 5860,
											"end": 5873,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 5896,
											"end": 5899,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5918,
											"end": 5919,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 5946,
											"end": 5955,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5942,
											"end": 5944,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5938,
											"end": 5956,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 5928,
											"end": 5956,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5928,
											"end": 5956,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6006,
											"end": 6008,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5995,
											"end": 6004,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 5991,
											"end": 6009,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6028,
											"end": 6046,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6018,
											"end": 6079,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 6018,
											"end": 6079,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6072,
											"end": 6076,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 6064,
											"end": 6070,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6060,
											"end": 6077,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6050,
											"end": 6077,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6050,
											"end": 6077,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6018,
											"end": 6079,
											"name": "tag",
											"source": 14,
											"value": "386"
										},
										{
											"begin": 6018,
											"end": 6079,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6125,
											"end": 6127,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6117,
											"end": 6123,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6114,
											"end": 6128,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 6094,
											"end": 6112,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6091,
											"end": 6129,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6088,
											"end": 6253,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 6088,
											"end": 6253,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6152,
											"end": 6185,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6152,
											"end": 6185,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6208,
											"end": 6212,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 6205,
											"end": 6206,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 6198,
											"end": 6213,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6238,
											"end": 6242,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 6159,
											"end": 6162,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6226,
											"end": 6243,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6088,
											"end": 6253,
											"name": "tag",
											"source": 14,
											"value": "387"
										},
										{
											"begin": 6088,
											"end": 6253,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6309,
											"end": 6327,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6309,
											"end": 6327,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6309,
											"end": 6327,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 101,
											"end": 120,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 101,
											"end": 120,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 101,
											"end": 120,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 153,
											"end": 157,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 144,
											"end": 158,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6352,
											"end": 6370,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "390"
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6493,
											"end": 6494,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "391"
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6345,
											"end": 6803,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "389"
										},
										{
											"begin": 6345,
											"end": 6803,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "tag",
											"source": 14,
											"value": "390"
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6412,
											"end": 6436,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6412,
											"end": 6436,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6400,
											"end": 6437,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6400,
											"end": 6437,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6469,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6469,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6469,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6469,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "389"
										},
										{
											"begin": 6379,
											"end": 6479,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "tag",
											"source": 14,
											"value": "391"
										},
										{
											"begin": 6488,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5590,
											"end": 5591,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5583,
											"end": 5597,
											"name": "DUP12",
											"source": 14
										},
										{
											"begin": 5583,
											"end": 5597,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 5583,
											"end": 5597,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5627,
											"end": 5631,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 5614,
											"end": 5632,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 5614,
											"end": 5632,
											"name": "KECCAK256",
											"source": 14
										},
										{
											"begin": 6583,
											"end": 6584,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "tag",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6611,
											"end": 6617,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 6608,
											"end": 6609,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6605,
											"end": 6618,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6689,
											"end": 6703,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6689,
											"end": 6703,
											"name": "SLOAD",
											"source": 14
										},
										{
											"begin": 6676,
											"end": 6687,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6676,
											"end": 6687,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6676,
											"end": 6687,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6669,
											"end": 6704,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6732,
											"end": 6748,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6732,
											"end": 6748,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6732,
											"end": 6748,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6732,
											"end": 6748,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6626,
											"end": 6636,
											"name": "DUP10",
											"source": 14
										},
										{
											"begin": 6626,
											"end": 6636,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "393"
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "tag",
											"source": 14,
											"value": "395"
										},
										{
											"begin": 6597,
											"end": 6762,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6782,
											"end": 6793,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 6782,
											"end": 6793,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6782,
											"end": 6793,
											"name": "SWAP8",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6345,
											"end": 6803,
											"name": "tag",
											"source": 14,
											"value": "389"
										},
										{
											"begin": 6345,
											"end": 6803,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6820,
											"end": 6823,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 6820,
											"end": 6823,
											"name": "SWAP10",
											"source": 14
										},
										{
											"begin": 5643,
											"end": 6829,
											"name": "SWAP9",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5643,
											"end": 6829,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 12101,
											"end": 12226,
											"name": "tag",
											"source": 14,
											"value": "249"
										},
										{
											"begin": 12101,
											"end": 12226,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 12141,
											"end": 12145,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 12169,
											"end": 12170,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12166,
											"end": 12167,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 12163,
											"end": 12171,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 12160,
											"end": 12194,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 12160,
											"end": 12194,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "411"
										},
										{
											"begin": 12160,
											"end": 12194,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 12174,
											"end": 12192,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "411"
										},
										{
											"begin": 12174,
											"end": 12192,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "334"
										},
										{
											"begin": 12174,
											"end": 12192,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 12174,
											"end": 12192,
											"name": "tag",
											"source": 14,
											"value": "411"
										},
										{
											"begin": 12174,
											"end": 12192,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12211,
											"end": 12220,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 12211,
											"end": 12220,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 12101,
											"end": 12226,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 13930,
											"end": 14057,
											"name": "tag",
											"source": 14,
											"value": "296"
										},
										{
											"begin": 13930,
											"end": 14057,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 13991,
											"end": 14001,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 13986,
											"end": 13989,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 13982,
											"end": 14002,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 13979,
											"end": 13980,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 13972,
											"end": 14003,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14022,
											"end": 14026,
											"name": "PUSH",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 14019,
											"end": 14020,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 14012,
											"end": 14027,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 14046,
											"end": 14050,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 14043,
											"end": 14044,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 14036,
											"end": 14051,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"authority()": "bf7e214f",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"setAuthority(address)": "7a9e5e4b",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World DAO\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"setAuthority(address)\":{\"details\":\"Emit AuthorityUpdated event\",\"params\":{\"_newAuthority\":\"Address of the new Solid Dao Management smart contract\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"title\":\"SCT ERC-20 Token\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setAuthority(address)\":{\"notice\":\"Function to set and update Solid Dao Management smart contract address\"}},\"notice\":\"SCT Token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"SCTERC20.sol\":\"SCTERC20Token\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"SCTERC20.sol\":{\"keccak256\":\"0x679637a5de4a53789fcd65a5e22a3a1930ad3ec2a976aad8df5e0f509d360806\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://052e4b91948b0a769a737ecef19c9b3bc9fab2971bd7d2935a40e6d8388d5893\",\"dweb:/ipfs/QmQMoVBK8FrZicsDLmphQpcZQUNnahmN7A4uRX7hbSvy5x\"]},\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5ab724c374aa11b7d36796b8b247e217d0450f17ac5602cad5ef2f3972e20a29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://970545544bd5acb3dfbe77d23145ddf5ff1f92e5098a3ab2639aef290461d7c7\",\"dweb:/ipfs/QmeznehGiN9jkRCeWP2WLKZBDUthS9iG3dDayDM5EKj5z7\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0x6c5d6b0fac68a0df7d5c22de80963331eba86dd134546760142c1574af2e0149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63bb0f2401c9e2c2b02812002dbb739fe6b87906e0d5cc6b47b9cafb4e38eaec\",\"dweb:/ipfs/QmcC4q2C95ZU4MyT2tbBNghHshFvmJNm1JcWMU3ggtyBUJ\"]},\"interfaces/ISCT.sol\":{\"keccak256\":\"0xf0f8752e0eab8fd241446bc33a92189fb0205beda927291823c76301caca1484\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f37c80ed39dc2fdf32b3be9df6c136359f8b7b3c6c1487d6a4f58e36c3e8ff1\",\"dweb:/ipfs/QmewDPDF3jAkLFUYWdiR2LvqS13LLe5VQzVaLenUmdFyic\"]},\"interfaces/ISolidDaoManagement.sol\":{\"keccak256\":\"0xfb63c0130746202658e7fb3283676d7cb250577ad0a588583a9108be1fbe5e0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3895b5685122d1f72871ce9d0540e35d33079a1d55e79100d9b0dc5820cd5f04\",\"dweb:/ipfs/QmXaXZQ1ooLy8fzhQBcxj3A28pWfTRrnbL227C8RGuyNPC\"]},\"lib/Context.sol\":{\"keccak256\":\"0xa46498600c8c57847d8f9ab4d1aa637430774a38c8dc931a7042e567631bc9e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff544714ca02ccb77277b236f9626d9f062aff293379f5f94c01204ce0ac753e\",\"dweb:/ipfs/QmdmRkqNwy9FmLGdfhime1uBGh5KkmuFEF1WnKScUvhPWg\"]},\"lib/Counters.sol\":{\"keccak256\":\"0x77898d5981da699aa451beabcb0ed96b4c5b1995981089cb325c3cf602bef76a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72ccb026c6d7a63e42a5bae821596c6e40f14c1fdf01d4963d8bc51caf1e3e77\",\"dweb:/ipfs/QmVZc2GYfvJsWhmYeoTEAoYa7zSzbMMte87Dqb1rGZ3Sf1\"]},\"lib/ECDSA.sol\":{\"keccak256\":\"0x520645adb5993259909660d35f33b85f3243d99e5188730eee6be76925852dde\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71048fdda06285509e650eb19cc1480229ecdf0fc5af591e1f22f0d07619a325\",\"dweb:/ipfs/QmRnRTtMbv6gjEnXB6MyvNcLjg2V3cDHTv2oc5fbPxfjU8\"]},\"lib/EIP712.sol\":{\"keccak256\":\"0xa48876cff251e305d0552a85f1fc2b597725464a9bd568ab7153fa0e80763e8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f4d3c87a3bff9df59911ab0121e096bb27eb4f9bb30b67215f979714cd83ef8\",\"dweb:/ipfs/QmQ8e6SvBkdmWikitvCDdW3F59un6yCSSUenzmjP9yEe2o\"]},\"lib/ERC20Permit.sol\":{\"keccak256\":\"0x993dff934d3d210b62ca31a4a2f9bc6d5658b8803e67b1e16dc2d0c7b6f7efda\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5e3bfca057406884bf32527fd993c736df9736b9eac15c1b784dddc93393844\",\"dweb:/ipfs/QmQmo99vKGwbAEfvWTx9izMYo6a4zoU9yrTg5GgBUM6BZv\"]},\"lib/SolidDaoManaged.sol\":{\"keccak256\":\"0xecee613ceda26429bebc796767798ac8cadd6194f2469b8ab1c9ef0e8c21b39b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75d1a5d2b59a3c28cb13922ec94de32f846a0c3540210d5ade5b1d1496ecbd1a\",\"dweb:/ipfs/QmNw8fMKx8qHoGjX4pVh9afizqBGrLYZy11fAfrEuDbgTR\"]},\"lib/Strings.sol\":{\"keccak256\":\"0x9f1088cb32eb6043568c033e1c6f0f51cc382485d0614137373905dca647941e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ff55d8a39d9b1b2e8bdbb779772e00c777f10fba9b30048e237e07da9e1b173\",\"dweb:/ipfs/QmPeenxPo1n4KC8kbC72doiYRwPAj2Ya1Kf9b2e8U2b6f5\"]},\"tokens/ERC20.sol\":{\"keccak256\":\"0x4d8cb1879e6842e12e6650f24ed3acf34962c58c85b8066a324744d42d54acad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6aa2e16957e66504484c50664947b7cef7574e84e91291005a80e134c7d40283\",\"dweb:/ipfs/QmXHxsoFLbXrSXuYRBWAAqjxFCZSUSWpx1xvXfiKCvQPvG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"setAuthority(address)": {
								"notice": "Function to set and update Solid Dao Management smart contract address"
							}
						},
						"notice": "SCT Token",
						"version": 1
					}
				}
			},
			"interfaces/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5ab724c374aa11b7d36796b8b247e217d0450f17ac5602cad5ef2f3972e20a29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://970545544bd5acb3dfbe77d23145ddf5ff1f92e5098a3ab2639aef290461d7c7\",\"dweb:/ipfs/QmeznehGiN9jkRCeWP2WLKZBDUthS9iG3dDayDM5EKj5z7\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0x6c5d6b0fac68a0df7d5c22de80963331eba86dd134546760142c1574af2e0149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63bb0f2401c9e2c2b02812002dbb739fe6b87906e0d5cc6b47b9cafb4e38eaec\",\"dweb:/ipfs/QmcC4q2C95ZU4MyT2tbBNghHshFvmJNm1JcWMU3ggtyBUJ\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ISCT.sol": {
				"ISCT": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account_",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount_",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"mint(address,uint256)": "40c10f19",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ISCT.sol\":\"ISCT\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"interfaces/ISCT.sol\":{\"keccak256\":\"0xf0f8752e0eab8fd241446bc33a92189fb0205beda927291823c76301caca1484\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8f37c80ed39dc2fdf32b3be9df6c136359f8b7b3c6c1487d6a4f58e36c3e8ff1\",\"dweb:/ipfs/QmewDPDF3jAkLFUYWdiR2LvqS13LLe5VQzVaLenUmdFyic\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"interfaces/ISolidDaoManagement.sol": {
				"ISolidDaoManagement": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "GovernorPulled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_effectiveImmediately",
									"type": "bool"
								}
							],
							"name": "GovernorPushed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "GuardianPulled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_effectiveImmediately",
									"type": "bool"
								}
							],
							"name": "GuardianPushed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "PolicyPulled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_effectiveImmediately",
									"type": "bool"
								}
							],
							"name": "PolicyPushed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "VaultPulled",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "_effectiveImmediately",
									"type": "bool"
								}
							],
							"name": "VaultPushed",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "governor",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "guardian",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "policy",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vault",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"governor()": "0c340a24",
							"guardian()": "452a9320",
							"policy()": "0505c8c9",
							"vault()": "fbfa77cf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GovernorPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_effectiveImmediately\",\"type\":\"bool\"}],\"name\":\"GovernorPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"GuardianPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_effectiveImmediately\",\"type\":\"bool\"}],\"name\":\"GuardianPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"PolicyPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_effectiveImmediately\",\"type\":\"bool\"}],\"name\":\"PolicyPushed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"VaultPulled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_effectiveImmediately\",\"type\":\"bool\"}],\"name\":\"VaultPushed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"policy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"interfaces/ISolidDaoManagement.sol\":\"ISolidDaoManagement\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ISolidDaoManagement.sol\":{\"keccak256\":\"0xfb63c0130746202658e7fb3283676d7cb250577ad0a588583a9108be1fbe5e0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3895b5685122d1f72871ce9d0540e35d33079a1d55e79100d9b0dc5820cd5f04\",\"dweb:/ipfs/QmXaXZQ1ooLy8fzhQBcxj3A28pWfTRrnbL227C8RGuyNPC\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/Context.sol\":{\"keccak256\":\"0xa46498600c8c57847d8f9ab4d1aa637430774a38c8dc931a7042e567631bc9e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff544714ca02ccb77277b236f9626d9f062aff293379f5f94c01204ce0ac753e\",\"dweb:/ipfs/QmdmRkqNwy9FmLGdfhime1uBGh5KkmuFEF1WnKScUvhPWg\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/Counters.sol": {
				"Counters": {
					"abi": [],
					"devdoc": {
						"author": "Matt Condon (@shrugs)",
						"details": "Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`",
						"kind": "dev",
						"methods": {},
						"title": "Counters",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/Counters.sol\":424:1395  library Counters {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/Counters.sol\":424:1395  library Counters {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220891864771a4b1eadeb2f44e18e77a0e8a28e4a60780c88ef538effb3e6023e7f64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220891864771a4b1eadeb2f44e18e77a0e8a28e4a60780c88ef538effb3e6023e7f64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 XOR PUSH5 0x771A4B1EAD 0xEB 0x2F DIFFICULTY 0xE1 DUP15 PUSH24 0xA0E8A28E4A60780C88EF538EFFB3E6023E7F64736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "424:971:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;424:971:7;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220891864771a4b1eadeb2f44e18e77a0e8a28e4a60780c88ef538effb3e6023e7f64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 XOR PUSH5 0x771A4B1EAD 0xEB 0x2F DIFFICULTY 0xE1 DUP15 PUSH24 0xA0E8A28E4A60780C88EF538EFFB3E6023E7F64736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "424:971:7:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"current(struct Counters.Counter storage pointer)": "infinite",
								"decrement(struct Counters.Counter storage pointer)": "infinite",
								"increment(struct Counters.Counter storage pointer)": "infinite",
								"reset(struct Counters.Counter storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "B"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "BYTE",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "EQ",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "4"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "24"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "PUSH",
									"source": 7,
									"value": "73"
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "MSTORE8",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 424,
									"end": 1395,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220891864771a4b1eadeb2f44e18e77a0e8a28e4a60780c88ef538effb3e6023e7f64736f6c634300080d0033",
									".code": [
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSHDEPLOYADDRESS",
											"source": 7
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 424,
											"end": 1395,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/Counters.sol\":{\"keccak256\":\"0x77898d5981da699aa451beabcb0ed96b4c5b1995981089cb325c3cf602bef76a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72ccb026c6d7a63e42a5bae821596c6e40f14c1fdf01d4963d8bc51caf1e3e77\",\"dweb:/ipfs/QmVZc2GYfvJsWhmYeoTEAoYa7zSzbMMte87Dqb1rGZ3Sf1\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/ECDSA.sol": {
				"ECDSA": {
					"abi": [],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/ECDSA.sol\":368:9292  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/ECDSA.sol\":368:9292  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122094319c2ba9b35f09646b92780ab674638d843941abd92ac95a4122cc407d1e8c64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122094319c2ba9b35f09646b92780ab674638d843941abd92ac95a4122cc407d1e8c64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 BALANCE SWAP13 0x2B 0xA9 0xB3 0x5F MULMOD PUSH5 0x6B92780AB6 PUSH21 0x638D843941ABD92AC95A4122CC407D1E8C64736F6C PUSH4 0x4300080D STOP CALLER ",
							"sourceMap": "368:8924:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;368:8924:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122094319c2ba9b35f09646b92780ab674638d843941abd92ac95a4122cc407d1e8c64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP5 BALANCE SWAP13 0x2B 0xA9 0xB3 0x5F MULMOD PUSH5 0x6B92780AB6 PUSH21 0x638D843941ABD92AC95A4122CC407D1E8C64736F6C PUSH4 0x4300080D STOP CALLER ",
							"sourceMap": "368:8924:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 368,
									"end": 9292,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122094319c2ba9b35f09646b92780ab674638d843941abd92ac95a4122cc407d1e8c64736f6c634300080d0033",
									".code": [
										{
											"begin": 368,
											"end": 9292,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 368,
											"end": 9292,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/ECDSA.sol\":{\"keccak256\":\"0x520645adb5993259909660d35f33b85f3243d99e5188730eee6be76925852dde\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71048fdda06285509e650eb19cc1480229ecdf0fc5af591e1f22f0d07619a325\",\"dweb:/ipfs/QmRnRTtMbv6gjEnXB6MyvNcLjg2V3cDHTv2oc5fbPxfjU8\"]},\"lib/Strings.sol\":{\"keccak256\":\"0x9f1088cb32eb6043568c033e1c6f0f51cc382485d0614137373905dca647941e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ff55d8a39d9b1b2e8bdbb779772e00c777f10fba9b30048e237e07da9e1b173\",\"dweb:/ipfs/QmPeenxPo1n4KC8kbC72doiYRwPAj2Ya1Kf9b2e8U2b6f5\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/EIP712.sol": {
				"EIP712": {
					"abi": [],
					"devdoc": {
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in their contracts using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/ECDSA.sol\":{\"keccak256\":\"0x520645adb5993259909660d35f33b85f3243d99e5188730eee6be76925852dde\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71048fdda06285509e650eb19cc1480229ecdf0fc5af591e1f22f0d07619a325\",\"dweb:/ipfs/QmRnRTtMbv6gjEnXB6MyvNcLjg2V3cDHTv2oc5fbPxfjU8\"]},\"lib/EIP712.sol\":{\"keccak256\":\"0xa48876cff251e305d0552a85f1fc2b597725464a9bd568ab7153fa0e80763e8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f4d3c87a3bff9df59911ab0121e096bb27eb4f9bb30b67215f979714cd83ef8\",\"dweb:/ipfs/QmQ8e6SvBkdmWikitvCDdW3F59un6yCSSUenzmjP9yEe2o\"]},\"lib/Strings.sol\":{\"keccak256\":\"0x9f1088cb32eb6043568c033e1c6f0f51cc382485d0614137373905dca647941e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ff55d8a39d9b1b2e8bdbb779772e00c777f10fba9b30048e237e07da9e1b173\",\"dweb:/ipfs/QmPeenxPo1n4KC8kbC72doiYRwPAj2Ya1Kf9b2e8U2b6f5\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "See {IERC20Permit-DOMAIN_SEPARATOR}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "See {IERC20Permit-nonces}."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "See {IERC20Permit-permit}."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"_PERMIT_TYPEHASH_DEPRECATED_SLOT": {
								"custom:oz-renamed-from": "_PERMIT_TYPEHASH",
								"details": "In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"See {IERC20Permit-DOMAIN_SEPARATOR}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"See {IERC20Permit-nonces}.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"See {IERC20Permit-permit}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"_PERMIT_TYPEHASH_DEPRECATED_SLOT\":{\"custom:oz-renamed-from\":\"_PERMIT_TYPEHASH\",\"details\":\"In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`. However, to ensure consistency with the upgradeable transpiler, we will continue to reserve a slot.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5ab724c374aa11b7d36796b8b247e217d0450f17ac5602cad5ef2f3972e20a29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://970545544bd5acb3dfbe77d23145ddf5ff1f92e5098a3ab2639aef290461d7c7\",\"dweb:/ipfs/QmeznehGiN9jkRCeWP2WLKZBDUthS9iG3dDayDM5EKj5z7\"]},\"interfaces/IERC20Permit.sol\":{\"keccak256\":\"0x6c5d6b0fac68a0df7d5c22de80963331eba86dd134546760142c1574af2e0149\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://63bb0f2401c9e2c2b02812002dbb739fe6b87906e0d5cc6b47b9cafb4e38eaec\",\"dweb:/ipfs/QmcC4q2C95ZU4MyT2tbBNghHshFvmJNm1JcWMU3ggtyBUJ\"]},\"lib/Context.sol\":{\"keccak256\":\"0xa46498600c8c57847d8f9ab4d1aa637430774a38c8dc931a7042e567631bc9e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff544714ca02ccb77277b236f9626d9f062aff293379f5f94c01204ce0ac753e\",\"dweb:/ipfs/QmdmRkqNwy9FmLGdfhime1uBGh5KkmuFEF1WnKScUvhPWg\"]},\"lib/Counters.sol\":{\"keccak256\":\"0x77898d5981da699aa451beabcb0ed96b4c5b1995981089cb325c3cf602bef76a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72ccb026c6d7a63e42a5bae821596c6e40f14c1fdf01d4963d8bc51caf1e3e77\",\"dweb:/ipfs/QmVZc2GYfvJsWhmYeoTEAoYa7zSzbMMte87Dqb1rGZ3Sf1\"]},\"lib/ECDSA.sol\":{\"keccak256\":\"0x520645adb5993259909660d35f33b85f3243d99e5188730eee6be76925852dde\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://71048fdda06285509e650eb19cc1480229ecdf0fc5af591e1f22f0d07619a325\",\"dweb:/ipfs/QmRnRTtMbv6gjEnXB6MyvNcLjg2V3cDHTv2oc5fbPxfjU8\"]},\"lib/EIP712.sol\":{\"keccak256\":\"0xa48876cff251e305d0552a85f1fc2b597725464a9bd568ab7153fa0e80763e8e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f4d3c87a3bff9df59911ab0121e096bb27eb4f9bb30b67215f979714cd83ef8\",\"dweb:/ipfs/QmQ8e6SvBkdmWikitvCDdW3F59un6yCSSUenzmjP9yEe2o\"]},\"lib/ERC20Permit.sol\":{\"keccak256\":\"0x993dff934d3d210b62ca31a4a2f9bc6d5658b8803e67b1e16dc2d0c7b6f7efda\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5e3bfca057406884bf32527fd993c736df9736b9eac15c1b784dddc93393844\",\"dweb:/ipfs/QmQmo99vKGwbAEfvWTx9izMYo6a4zoU9yrTg5GgBUM6BZv\"]},\"lib/Strings.sol\":{\"keccak256\":\"0x9f1088cb32eb6043568c033e1c6f0f51cc382485d0614137373905dca647941e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ff55d8a39d9b1b2e8bdbb779772e00c777f10fba9b30048e237e07da9e1b173\",\"dweb:/ipfs/QmPeenxPo1n4KC8kbC72doiYRwPAj2Ya1Kf9b2e8U2b6f5\"]},\"tokens/ERC20.sol\":{\"keccak256\":\"0x4d8cb1879e6842e12e6650f24ed3acf34962c58c85b8066a324744d42d54acad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6aa2e16957e66504484c50664947b7cef7574e84e91291005a80e134c7d40283\",\"dweb:/ipfs/QmXHxsoFLbXrSXuYRBWAAqjxFCZSUSWpx1xvXfiKCvQPvG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/SolidDaoManaged.sol": {
				"SolidDaoManaged": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "contract ISolidDaoManagement",
									"name": "authority",
									"type": "address"
								}
							],
							"name": "AuthorityUpdated",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "authority",
							"outputs": [
								{
									"internalType": "contract ISolidDaoManagement",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "contract ISolidDaoManagement",
									"name": "_newAuthority",
									"type": "address"
								}
							],
							"name": "setAuthority",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Solid World DAO",
						"events": {
							"AuthorityUpdated(address)": {
								"details": "Emitted on setAuthority()",
								"params": {
									"authority": "Address of Solid Dao Management smart contract*"
								}
							}
						},
						"kind": "dev",
						"methods": {
							"setAuthority(address)": {
								"details": "Emit AuthorityUpdated event",
								"params": {
									"_newAuthority": "Address of the new Solid Dao Management smart contract"
								}
							}
						},
						"title": "Solid Dao Managed",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"authority()": "bf7e214f",
							"setAuthority(address)": "7a9e5e4b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World DAO\",\"events\":{\"AuthorityUpdated(address)\":{\"details\":\"Emitted on setAuthority()\",\"params\":{\"authority\":\"Address of Solid Dao Management smart contract*\"}}},\"kind\":\"dev\",\"methods\":{\"setAuthority(address)\":{\"details\":\"Emit AuthorityUpdated event\",\"params\":{\"_newAuthority\":\"Address of the new Solid Dao Management smart contract\"}}},\"title\":\"Solid Dao Managed\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setAuthority(address)\":{\"notice\":\"Function to set and update Solid Dao Management smart contract address\"}},\"notice\":\"Abstract contratc to implement Solid Dao Management and access control modifiers \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/SolidDaoManaged.sol\":\"SolidDaoManaged\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/ISolidDaoManagement.sol\":{\"keccak256\":\"0xfb63c0130746202658e7fb3283676d7cb250577ad0a588583a9108be1fbe5e0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3895b5685122d1f72871ce9d0540e35d33079a1d55e79100d9b0dc5820cd5f04\",\"dweb:/ipfs/QmXaXZQ1ooLy8fzhQBcxj3A28pWfTRrnbL227C8RGuyNPC\"]},\"lib/SolidDaoManaged.sol\":{\"keccak256\":\"0xecee613ceda26429bebc796767798ac8cadd6194f2469b8ab1c9ef0e8c21b39b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://75d1a5d2b59a3c28cb13922ec94de32f846a0c3540210d5ade5b1d1496ecbd1a\",\"dweb:/ipfs/QmNw8fMKx8qHoGjX4pVh9afizqBGrLYZy11fAfrEuDbgTR\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {
							"setAuthority(address)": {
								"notice": "Function to set and update Solid Dao Management smart contract address"
							}
						},
						"notice": "Abstract contratc to implement Solid Dao Management and access control modifiers ",
						"version": 1
					}
				}
			},
			"lib/Strings.sol": {
				"Strings": {
					"abi": [],
					"devdoc": {
						"details": "String operations.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/Strings.sol\":146:2031  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"lib/Strings.sol\":146:2031  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122035457ef93f5f37b58155fa857a3c6590ae503b6baf0c2cf0ef8acb44a98f23bb64736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035457ef93f5f37b58155fa857a3c6590ae503b6baf0c2cf0ef8acb44a98f23bb64736f6c634300080d0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD GASLIMIT PUSH31 0xF93F5F37B58155FA857A3C6590AE503B6BAF0C2CF0EF8ACB44A98F23BB6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "146:1885:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;146:1885:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122035457ef93f5f37b58155fa857a3c6590ae503b6baf0c2cf0ef8acb44a98f23bb64736f6c634300080d0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATALOAD GASLIMIT PUSH31 0xF93F5F37B58155FA857A3C6590AE503B6BAF0C2CF0EF8ACB44A98F23BB6473 PUSH16 0x6C634300080D00330000000000000000 ",
							"sourceMap": "146:1885:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 146,
									"end": 2031,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122035457ef93f5f37b58155fa857a3c6590ae503b6baf0c2cf0ef8acb44a98f23bb64736f6c634300080d0033",
									".code": [
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 146,
											"end": 2031,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/Strings.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/Strings.sol\":{\"keccak256\":\"0x9f1088cb32eb6043568c033e1c6f0f51cc382485d0614137373905dca647941e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ff55d8a39d9b1b2e8bdbb779772e00c777f10fba9b30048e237e07da9e1b173\",\"dweb:/ipfs/QmPeenxPo1n4KC8kbC72doiYRwPAj2Ya1Kf9b2e8U2b6f5\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"tokens/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name_",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "symbol_",
									"type": "string"
								},
								{
									"internalType": "uint8",
									"name": "decimals_",
									"type": "uint8"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name}, {symbol} and {decimals}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"tokens/ERC20.sol\":1411:12507  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mstore(0x40, 0xa0)\n    /* \"tokens/ERC20.sol\":1804:1965  constructor(string memory name_, string memory symbol_, uint8 decimals_) {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"tokens/ERC20.sol\":1887:1900  _name = name_ */\n  dup3\n  mload\n  tag_6\n  swap1\n    /* \"tokens/ERC20.sol\":1887:1892  _name */\n  0x03\n  swap1\n    /* \"tokens/ERC20.sol\":1887:1900  _name = name_ */\n  0x20\n  dup7\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_6:\n  pop\n    /* \"tokens/ERC20.sol\":1910:1927  _symbol = symbol_ */\n  dup2\n  mload\n  tag_8\n  swap1\n    /* \"tokens/ERC20.sol\":1910:1917  _symbol */\n  0x04\n  swap1\n    /* \"tokens/ERC20.sol\":1910:1927  _symbol = symbol_ */\n  0x20\n  dup6\n  add\n  swap1\n  tag_7\n  jump\t// in\ntag_8:\n  pop\n    /* \"tokens/ERC20.sol\":1937:1958  _decimals = decimals_ */\n  0xff\n  and\n  0x80\n  mstore\n  pop\n    /* \"tokens/ERC20.sol\":1411:12507  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  tag_23\n  swap1\n  pop\n  jump\ntag_7:\n  dup3\n  dup1\n  sload\n  tag_10\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  swap1\n  0x00\n  mstore\n  keccak256(0x00, 0x20)\n  swap1\n  0x1f\n  add\n  0x20\n  swap1\n  div\n  dup2\n  add\n  swap3\n  dup3\n  tag_13\n  jumpi\n  0x00\n  dup6\n  sstore\n  jump(tag_16)\ntag_13:\n  dup3\n  0x1f\n  lt\n  tag_14\n  jumpi\n  dup1\n  mload\n  not(0xff)\n  and\n  dup4\n  dup1\n  add\n  or\n  dup6\n  sstore\n  jump(tag_16)\ntag_14:\n  dup3\n  dup1\n  add\n  0x01\n  add\n  dup6\n  sstore\n  dup3\n  iszero\n  tag_16\n  jumpi\n  swap2\n  dup3\n  add\ntag_15:\n  dup3\n  dup2\n  gt\n  iszero\n  tag_16\n  jumpi\n  dup3\n  mload\n  dup3\n  sstore\n  swap2\n  0x20\n  add\n  swap2\n  swap1\n  0x01\n  add\n  swap1\n  jump(tag_15)\ntag_16:\n  pop\n  tag_17\n  swap3\n  swap2\n  pop\n  tag_18\n  jump\t// in\ntag_17:\n  pop\n  swap1\n  jump\t// out\ntag_18:\ntag_19:\n  dup1\n  dup3\n  gt\n  iszero\n  tag_17\n  jumpi\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_19)\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1031   */\ntag_22:\n    /* \"#utility.yul\":200:205   */\n  0x00\n    /* \"#utility.yul\":253:256   */\n  dup3\n    /* \"#utility.yul\":246:250   */\n  0x1f\n    /* \"#utility.yul\":238:244   */\n  dup4\n    /* \"#utility.yul\":234:251   */\n  add\n    /* \"#utility.yul\":230:257   */\n  slt\n    /* \"#utility.yul\":220:275   */\n  tag_26\n  jumpi\n    /* \"#utility.yul\":271:272   */\n  0x00\n    /* \"#utility.yul\":268:269   */\n  dup1\n    /* \"#utility.yul\":261:273   */\n  revert\n    /* \"#utility.yul\":220:275   */\ntag_26:\n    /* \"#utility.yul\":294:307   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":356:366   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":353:389   */\n  iszero\n  tag_28\n  jumpi\n    /* \"#utility.yul\":369:387   */\n  tag_28\n  tag_21\n  jump\t// in\ntag_28:\n    /* \"#utility.yul\":444:446   */\n  0x40\n    /* \"#utility.yul\":438:447   */\n  mload\n    /* \"#utility.yul\":412:414   */\n  0x1f\n    /* \"#utility.yul\":498:511   */\n  dup4\n  add\n  not(0x1f)\n    /* \"#utility.yul\":494:516   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":518:520   */\n  0x3f\n    /* \"#utility.yul\":490:521   */\n  add\n    /* \"#utility.yul\":486:526   */\n  and\n    /* \"#utility.yul\":474:527   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":542:560   */\n  dup3\n  dup3\n  gt\n    /* \"#utility.yul\":562:584   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":539:585   */\n  or\n    /* \"#utility.yul\":536:608   */\n  iszero\n  tag_30\n  jumpi\n    /* \"#utility.yul\":588:606   */\n  tag_30\n  tag_21\n  jump\t// in\ntag_30:\n    /* \"#utility.yul\":628:638   */\n  dup2\n    /* \"#utility.yul\":624:626   */\n  0x40\n    /* \"#utility.yul\":617:639   */\n  mstore\n    /* \"#utility.yul\":663:665   */\n  dup4\n    /* \"#utility.yul\":655:661   */\n  dup2\n    /* \"#utility.yul\":648:666   */\n  mstore\n    /* \"#utility.yul\":685:689   */\n  0x20\n    /* \"#utility.yul\":675:689   */\n  swap3\n  pop\n    /* \"#utility.yul\":730:733   */\n  dup7\n    /* \"#utility.yul\":725:727   */\n  dup4\n    /* \"#utility.yul\":720:722   */\n  dup6\n    /* \"#utility.yul\":712:718   */\n  dup9\n    /* \"#utility.yul\":708:723   */\n  add\n    /* \"#utility.yul\":704:728   */\n  add\n    /* \"#utility.yul\":701:734   */\n  gt\n    /* \"#utility.yul\":698:751   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":747:748   */\n  0x00\n    /* \"#utility.yul\":744:745   */\n  dup1\n    /* \"#utility.yul\":737:749   */\n  revert\n    /* \"#utility.yul\":698:751   */\ntag_31:\n    /* \"#utility.yul\":769:770   */\n  0x00\n    /* \"#utility.yul\":760:770   */\n  swap2\n  pop\n    /* \"#utility.yul\":779:912   */\ntag_32:\n    /* \"#utility.yul\":793:795   */\n  dup4\n    /* \"#utility.yul\":790:791   */\n  dup3\n    /* \"#utility.yul\":787:796   */\n  lt\n    /* \"#utility.yul\":779:912   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":881:895   */\n  dup6\n  dup3\n  add\n    /* \"#utility.yul\":877:900   */\n  dup4\n  add\n    /* \"#utility.yul\":871:901   */\n  mload\n    /* \"#utility.yul\":850:864   */\n  dup2\n  dup4\n  add\n    /* \"#utility.yul\":846:869   */\n  dup5\n  add\n    /* \"#utility.yul\":839:902   */\n  mstore\n    /* \"#utility.yul\":804:814   */\n  swap1\n  dup3\n  add\n  swap1\n    /* \"#utility.yul\":779:912   */\n  jump(tag_32)\ntag_34:\n    /* \"#utility.yul\":930:932   */\n  dup4\n    /* \"#utility.yul\":927:928   */\n  dup3\n    /* \"#utility.yul\":924:933   */\n  gt\n    /* \"#utility.yul\":921:1001   */\n  iszero\n  tag_35\n  jumpi\n    /* \"#utility.yul\":989:990   */\n  0x00\n    /* \"#utility.yul\":984:986   */\n  dup4\n    /* \"#utility.yul\":979:981   */\n  dup6\n    /* \"#utility.yul\":971:977   */\n  dup4\n    /* \"#utility.yul\":967:982   */\n  add\n    /* \"#utility.yul\":963:987   */\n  add\n    /* \"#utility.yul\":956:991   */\n  mstore\n    /* \"#utility.yul\":921:1001   */\ntag_35:\n    /* \"#utility.yul\":1019:1025   */\n  swap7\n    /* \"#utility.yul\":146:1031   */\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1036:1748   */\ntag_3:\n    /* \"#utility.yul\":1142:1148   */\n  0x00\n    /* \"#utility.yul\":1150:1156   */\n  dup1\n    /* \"#utility.yul\":1158:1164   */\n  0x00\n    /* \"#utility.yul\":1211:1213   */\n  0x60\n    /* \"#utility.yul\":1199:1208   */\n  dup5\n    /* \"#utility.yul\":1190:1197   */\n  dup7\n    /* \"#utility.yul\":1186:1209   */\n  sub\n    /* \"#utility.yul\":1182:1214   */\n  slt\n    /* \"#utility.yul\":1179:1231   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1227:1228   */\n  0x00\n    /* \"#utility.yul\":1224:1225   */\n  dup1\n    /* \"#utility.yul\":1217:1229   */\n  revert\n    /* \"#utility.yul\":1179:1231   */\ntag_37:\n    /* \"#utility.yul\":1254:1270   */\n  dup4\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1319:1333   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":1316:1350   */\n  iszero\n  tag_38\n  jumpi\n    /* \"#utility.yul\":1346:1347   */\n  0x00\n    /* \"#utility.yul\":1343:1344   */\n  dup1\n    /* \"#utility.yul\":1336:1348   */\n  revert\n    /* \"#utility.yul\":1316:1350   */\ntag_38:\n    /* \"#utility.yul\":1369:1430   */\n  tag_39\n    /* \"#utility.yul\":1422:1429   */\n  dup8\n    /* \"#utility.yul\":1413:1419   */\n  dup4\n    /* \"#utility.yul\":1402:1411   */\n  dup9\n    /* \"#utility.yul\":1398:1420   */\n  add\n    /* \"#utility.yul\":1369:1430   */\n  tag_22\n  jump\t// in\ntag_39:\n    /* \"#utility.yul\":1359:1430   */\n  swap5\n  pop\n    /* \"#utility.yul\":1476:1478   */\n  0x20\n    /* \"#utility.yul\":1465:1474   */\n  dup7\n    /* \"#utility.yul\":1461:1479   */\n  add\n    /* \"#utility.yul\":1455:1480   */\n  mload\n    /* \"#utility.yul\":1439:1480   */\n  swap2\n  pop\n    /* \"#utility.yul\":1505:1507   */\n  dup1\n    /* \"#utility.yul\":1495:1503   */\n  dup3\n    /* \"#utility.yul\":1492:1508   */\n  gt\n    /* \"#utility.yul\":1489:1525   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1521:1522   */\n  0x00\n    /* \"#utility.yul\":1518:1519   */\n  dup1\n    /* \"#utility.yul\":1511:1523   */\n  revert\n    /* \"#utility.yul\":1489:1525   */\ntag_40:\n  pop\n    /* \"#utility.yul\":1544:1607   */\n  tag_41\n    /* \"#utility.yul\":1599:1606   */\n  dup7\n    /* \"#utility.yul\":1588:1596   */\n  dup3\n    /* \"#utility.yul\":1577:1586   */\n  dup8\n    /* \"#utility.yul\":1573:1597   */\n  add\n    /* \"#utility.yul\":1544:1607   */\n  tag_22\n  jump\t// in\ntag_41:\n    /* \"#utility.yul\":1534:1607   */\n  swap3\n  pop\n  pop\n    /* \"#utility.yul\":1650:1652   */\n  0x40\n    /* \"#utility.yul\":1639:1648   */\n  dup5\n    /* \"#utility.yul\":1635:1653   */\n  add\n    /* \"#utility.yul\":1629:1654   */\n  mload\n    /* \"#utility.yul\":1694:1698   */\n  0xff\n    /* \"#utility.yul\":1687:1692   */\n  dup2\n    /* \"#utility.yul\":1683:1699   */\n  and\n    /* \"#utility.yul\":1676:1681   */\n  dup2\n    /* \"#utility.yul\":1673:1700   */\n  eq\n    /* \"#utility.yul\":1663:1718   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1714:1715   */\n  0x00\n    /* \"#utility.yul\":1711:1712   */\n  dup1\n    /* \"#utility.yul\":1704:1716   */\n  revert\n    /* \"#utility.yul\":1663:1718   */\ntag_42:\n    /* \"#utility.yul\":1737:1742   */\n  dup1\n    /* \"#utility.yul\":1727:1742   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":1036:1748   */\n  swap3\n  pop\n  swap3\n  pop\n  swap3\n  jump\t// out\n    /* \"#utility.yul\":1753:2133   */\ntag_11:\n    /* \"#utility.yul\":1832:1833   */\n  0x01\n    /* \"#utility.yul\":1828:1840   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1875:1887   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1896:1957   */\n  tag_44\n  jumpi\n    /* \"#utility.yul\":1950:1954   */\n  0x7f\n    /* \"#utility.yul\":1942:1948   */\n  dup3\n    /* \"#utility.yul\":1938:1955   */\n  and\n    /* \"#utility.yul\":1928:1955   */\n  swap2\n  pop\n    /* \"#utility.yul\":1896:1957   */\ntag_44:\n    /* \"#utility.yul\":2003:2005   */\n  0x20\n    /* \"#utility.yul\":1995:2001   */\n  dup3\n    /* \"#utility.yul\":1992:2006   */\n  lt\n    /* \"#utility.yul\":1972:1990   */\n  dup2\n    /* \"#utility.yul\":1969:2007   */\n  sub\n    /* \"#utility.yul\":1966:2127   */\n  tag_45\n  jumpi\n    /* \"#utility.yul\":2049:2059   */\n  0x4e487b71\n    /* \"#utility.yul\":2044:2047   */\n  0xe0\n    /* \"#utility.yul\":2040:2060   */\n  shl\n    /* \"#utility.yul\":2037:2038   */\n  0x00\n    /* \"#utility.yul\":2030:2061   */\n  mstore\n    /* \"#utility.yul\":2084:2088   */\n  0x22\n    /* \"#utility.yul\":2081:2082   */\n  0x04\n    /* \"#utility.yul\":2074:2089   */\n  mstore\n    /* \"#utility.yul\":2112:2116   */\n  0x24\n    /* \"#utility.yul\":2109:2110   */\n  0x00\n    /* \"#utility.yul\":2102:2117   */\n  revert\n    /* \"#utility.yul\":1966:2127   */\ntag_45:\n  pop\n    /* \"#utility.yul\":1753:2133   */\n  swap2\n  swap1\n  pop\n  jump\t// out\ntag_23:\n    /* \"tokens/ERC20.sol\":1411:12507  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n  mload(0x80)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xbfa4c3ea5a2d294d938e01522babaca2aa640becce055f0bd2b924f41632ea8d\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"tokens/ERC20.sol\":1411:12507  contract ERC20 is Context, IERC20, IERC20Metadata {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"tokens/ERC20.sol\":3212:3224  _totalSupply */\n      sload(0x02)\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"tokens/ERC20.sol\":3125:3231  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2967:3065  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"#utility.yul\":1932:1936   */\n      0xff\n        /* \"tokens/ERC20.sol\":3049:3058  _decimals */\n      immutable(\"0xbfa4c3ea5a2d294d938e01522babaca2aa640becce055f0bd2b924f41632ea8d\")\n        /* \"#utility.yul\":1920:1937   */\n      and\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"tokens/ERC20.sol\":2967:3065  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"tokens/ERC20.sol\":5754:5988  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3289:3414  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":3389:3407  _balances[account] */\n      and\n        /* \"tokens/ERC20.sol\":3363:3370  uint256 */\n      0x00\n        /* \"tokens/ERC20.sol\":3389:3407  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"tokens/ERC20.sol\":3289:3414  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"tokens/ERC20.sol\":2241:2343  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"tokens/ERC20.sol\":6475:6902  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3610:3799  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"tokens/ERC20.sol\":2084:2097  string memory */\n      0x60\n        /* \"tokens/ERC20.sol\":2116:2121  _name */\n      0x03\n        /* \"tokens/ERC20.sol\":2109:2121  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"tokens/ERC20.sol\":2030:2128  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"tokens/ERC20.sol\":4397:4401  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":4451:4483  _approve(owner, spender, amount) */\n      tag_73\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":4467:4474  spender */\n      dup6\n        /* \"tokens/ERC20.sol\":4476:4482  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":4451:4459  _approve */\n      tag_74\n        /* \"tokens/ERC20.sol\":4451:4483  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"tokens/ERC20.sol\":4500:4504  true */\n      0x01\n      swap4\n        /* \"tokens/ERC20.sol\":4314:4511  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n    tag_32:\n        /* \"tokens/ERC20.sol\":5200:5204  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":5256:5294  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"tokens/ERC20.sol\":5272:5276  from */\n      dup6\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"tokens/ERC20.sol\":5287:5293  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":5256:5271  _spendAllowance */\n      tag_79\n        /* \"tokens/ERC20.sol\":5256:5294  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"tokens/ERC20.sol\":5304:5331  _transfer(from, to, amount) */\n      tag_80\n        /* \"tokens/ERC20.sol\":5314:5318  from */\n      dup6\n        /* \"tokens/ERC20.sol\":5320:5322  to */\n      dup6\n        /* \"tokens/ERC20.sol\":5324:5330  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":5304:5313  _transfer */\n      tag_81\n        /* \"tokens/ERC20.sol\":5304:5331  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"tokens/ERC20.sol\":5348:5352  true */\n      0x01\n      swap5\n        /* \"tokens/ERC20.sol\":5073:5359  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":5754:5988  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"tokens/ERC20.sol\":5842:5846  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":5896:5960  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":5912:5919  spender */\n      dup6\n        /* \"tokens/ERC20.sol\":5949:5959  addedValue */\n      dup6\n        /* \"tokens/ERC20.sol\":5921:5946  allowance(owner, spender) */\n      tag_86\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup4\n        /* \"tokens/ERC20.sol\":5912:5919  spender */\n      dup4\n        /* \"tokens/ERC20.sol\":5921:5930  allowance */\n      tag_61\n        /* \"tokens/ERC20.sol\":5921:5946  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"tokens/ERC20.sol\":5921:5959  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"tokens/ERC20.sol\":5896:5904  _approve */\n      tag_74\n        /* \"tokens/ERC20.sol\":5896:5960  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"tokens/ERC20.sol\":2241:2343  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"tokens/ERC20.sol\":2297:2310  string memory */\n      0x60\n        /* \"tokens/ERC20.sol\":2329:2336  _symbol */\n      0x04\n        /* \"tokens/ERC20.sol\":2322:2336  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"tokens/ERC20.sol\":6475:6902  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"tokens/ERC20.sol\":6568:6572  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":6568:6572  bool */\n      dup2\n        /* \"tokens/ERC20.sol\":6649:6674  allowance(owner, spender) */\n      tag_98\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup3\n        /* \"tokens/ERC20.sol\":6666:6673  spender */\n      dup7\n        /* \"tokens/ERC20.sol\":6649:6658  allowance */\n      tag_61\n        /* \"tokens/ERC20.sol\":6649:6674  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"tokens/ERC20.sol\":6622:6674  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"tokens/ERC20.sol\":6712:6727  subtractedValue */\n      dup4\n        /* \"tokens/ERC20.sol\":6692:6708  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":6692:6727  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":6684:6769  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"tokens/ERC20.sol\":6803:6863  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"tokens/ERC20.sol\":6812:6817  owner */\n      dup3\n        /* \"tokens/ERC20.sol\":6819:6826  spender */\n      dup7\n        /* \"tokens/ERC20.sol\":6847:6862  subtractedValue */\n      dup7\n        /* \"tokens/ERC20.sol\":6828:6844  currentAllowance */\n      dup5\n        /* \"tokens/ERC20.sol\":6828:6862  currentAllowance - subtractedValue */\n      sub\n        /* \"tokens/ERC20.sol\":6803:6811  _approve */\n      tag_74\n        /* \"tokens/ERC20.sol\":6803:6863  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3610:3799  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"tokens/ERC20.sol\":3689:3693  bool */\n      0x00\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      caller\n        /* \"tokens/ERC20.sol\":3743:3771  _transfer(owner, to, amount) */\n      tag_73\n        /* \"lib/Context.sol\":719:729  msg.sender */\n      dup2\n        /* \"tokens/ERC20.sol\":3760:3762  to */\n      dup6\n        /* \"tokens/ERC20.sol\":3764:3770  amount */\n      dup6\n        /* \"tokens/ERC20.sol\":3743:3752  _transfer */\n      tag_81\n        /* \"tokens/ERC20.sol\":3743:3771  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":3946:3953  uint256 */\n      0x00\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":3972:3983  _allowances */\n      0x01\n        /* \"tokens/ERC20.sol\":3972:3990  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"tokens/ERC20.sol\":3972:3999  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"tokens/ERC20.sol\":3857:4006  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"tokens/ERC20.sol\":10000:10370  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10131:10150  owner != address(0) */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"tokens/ERC20.sol\":10123:10191  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10209:10230  spender != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"tokens/ERC20.sol\":10201:10269  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":10280:10298  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":10280:10291  _allowances */\n      0x01\n        /* \"tokens/ERC20.sol\":10280:10298  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"tokens/ERC20.sol\":10280:10307  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"tokens/ERC20.sol\":10280:10316  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"tokens/ERC20.sol\":10331:10363  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"tokens/ERC20.sol\":10000:10370  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":10651:11092  function _spendAllowance(... */\n    tag_79:\n        /* \"tokens/ERC20.sol\":10781:10805  uint256 currentAllowance */\n      0x00\n        /* \"tokens/ERC20.sol\":10808:10833  allowance(owner, spender) */\n      tag_117\n        /* \"tokens/ERC20.sol\":10818:10823  owner */\n      dup5\n        /* \"tokens/ERC20.sol\":10825:10832  spender */\n      dup5\n        /* \"tokens/ERC20.sol\":10808:10817  allowance */\n      tag_61\n        /* \"tokens/ERC20.sol\":10808:10833  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"tokens/ERC20.sol\":10781:10833  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"tokens/ERC20.sol\":10847:10863  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":10847:10884  currentAllowance != type(uint256).max */\n      eq\n        /* \"tokens/ERC20.sol\":10843:11086  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"tokens/ERC20.sol\":10928:10934  amount */\n      dup2\n        /* \"tokens/ERC20.sol\":10908:10924  currentAllowance */\n      dup2\n        /* \"tokens/ERC20.sol\":10908:10934  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"tokens/ERC20.sol\":10900:10968  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"tokens/ERC20.sol\":11010:11061  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"tokens/ERC20.sol\":11019:11024  owner */\n      dup5\n        /* \"tokens/ERC20.sol\":11026:11033  spender */\n      dup5\n        /* \"tokens/ERC20.sol\":11054:11060  amount */\n      dup5\n        /* \"tokens/ERC20.sol\":11035:11051  currentAllowance */\n      dup5\n        /* \"tokens/ERC20.sol\":11035:11060  currentAllowance - amount */\n      sub\n        /* \"tokens/ERC20.sol\":11010:11018  _approve */\n      tag_74\n        /* \"tokens/ERC20.sol\":11010:11061  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"tokens/ERC20.sol\":10771:11092  {... */\n      pop\n        /* \"tokens/ERC20.sol\":10651:11092  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"tokens/ERC20.sol\":7365:8016  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7491:7509  from != address(0) */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"tokens/ERC20.sol\":7483:7551  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7569:7585  to != address(0) */\n      dup3\n      and\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"tokens/ERC20.sol\":7561:7625  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7707:7722  _balances[from] */\n      dup4\n      and\n        /* \"tokens/ERC20.sol\":7685:7704  uint256 fromBalance */\n      0x00\n        /* \"tokens/ERC20.sol\":7707:7722  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"tokens/ERC20.sol\":7740:7761  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"tokens/ERC20.sol\":7732:7804  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7838:7853  _balances[from] */\n      dup1\n      dup6\n      and\n        /* \"tokens/ERC20.sol\":7838:7847  _balances */\n      0x00\n        /* \"tokens/ERC20.sol\":7838:7853  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"tokens/ERC20.sol\":7856:7876  fromBalance - amount */\n      dup6\n      dup6\n      sub\n        /* \"tokens/ERC20.sol\":7838:7876  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"tokens/ERC20.sol\":7896:7909  _balances[to] */\n      swap2\n      dup6\n      and\n      dup2\n      mstore\n      swap1\n      dup2\n      keccak256\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      dup1\n      sload\n        /* \"tokens/ERC20.sol\":7870:7876  amount */\n      dup5\n      swap3\n        /* \"tokens/ERC20.sol\":7838:7847  _balances */\n      swap1\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      tag_135\n      swap1\n        /* \"tokens/ERC20.sol\":7870:7876  amount */\n      dup5\n      swap1\n        /* \"tokens/ERC20.sol\":7896:7919  _balances[to] += amount */\n      tag_88\n      jump\t// in\n    tag_135:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"tokens/ERC20.sol\":7950:7952  to */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      and\n        /* \"tokens/ERC20.sol\":7944:7948  from */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"tokens/ERC20.sol\":7954:7960  amount */\n      dup5\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n      mload(0x40)\n      tag_136\n      swap2\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"tokens/ERC20.sol\":7935:7961  Transfer(from, to, amount) */\n    tag_136:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"tokens/ERC20.sol\":7972:8009  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"tokens/ERC20.sol\":11676:11797  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_144:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_144)\n    tag_146:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_147\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_147:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_141:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_149\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_149:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_151\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_151:\n        /* \"#utility.yul\":962:991   */\n      tag_152\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_141\n      jump\t// in\n    tag_152:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_156\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_156:\n        /* \"#utility.yul\":1612:1641   */\n      tag_157\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_141\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_158\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_141\n      jump\t// in\n    tag_158:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_161\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_161:\n        /* \"#utility.yul\":2100:2129   */\n      tag_162\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_141\n      jump\t// in\n    tag_162:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_164\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_164:\n        /* \"#utility.yul\":2308:2337   */\n      tag_165\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_141\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_166\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_141\n      jump\t// in\n    tag_166:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_168:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_169\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_169:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_88:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_171\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_171:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212203ab0a88ee4dcb32752ae9eb40a81eb096df65b55d9ff5bc5491481ad9eb7255564736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1555": {
									"entryPoint": null,
									"id": 1555,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"abi_decode_string_fromMemory": {
									"entryPoint": 299,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8_fromMemory": {
									"entryPoint": 482,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"extract_byte_array_length": {
									"entryPoint": 615,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 277,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2135:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:14",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:14",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:14",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:14",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:14",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:14",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:14"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "210:821:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "259:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "268:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "271:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "261:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "261:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "261:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "238:6:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "246:4:14",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "234:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "234:17:14"
																			},
																			{
																				"name": "end",
																				"nodeType": "YulIdentifier",
																				"src": "253:3:14"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "230:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "230:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "223:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "223:35:14"
															},
															"nodeType": "YulIf",
															"src": "220:55:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "284:23:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "300:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "294:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "294:13:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "288:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "316:28:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "334:2:14",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "338:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "330:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "330:10:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "342:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "326:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "326:18:14"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "320:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "367:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "369:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "369:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "369:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "359:2:14"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "363:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "356:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "356:10:14"
															},
															"nodeType": "YulIf",
															"src": "353:36:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "398:17:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "412:2:14",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "408:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "408:7:14"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "402:2:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "424:23:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "444:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "438:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "438:9:14"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "428:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "456:71:14",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "478:6:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_1",
																										"nodeType": "YulIdentifier",
																										"src": "502:2:14"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "506:4:14",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "498:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "498:13:14"
																							},
																							{
																								"name": "_3",
																								"nodeType": "YulIdentifier",
																								"src": "513:2:14"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "494:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "494:22:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "518:2:14",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "490:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "490:31:14"
																			},
																			{
																				"name": "_3",
																				"nodeType": "YulIdentifier",
																				"src": "523:2:14"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "486:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "486:40:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "474:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "474:53:14"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "460:10:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "586:22:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "588:16:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "588:18:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "588:18:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "545:10:14"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "557:2:14"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "542:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "542:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "565:10:14"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "577:6:14"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "562:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "562:22:14"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "539:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "539:46:14"
															},
															"nodeType": "YulIf",
															"src": "536:72:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "624:2:14",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "628:10:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "617:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "617:22:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "617:22:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "655:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "663:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "648:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "648:18:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "648:18:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "675:14:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "685:4:14",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "679:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "735:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "744:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "747:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "737:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "737:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "737:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "712:6:14"
																					},
																					{
																						"name": "_1",
																						"nodeType": "YulIdentifier",
																						"src": "720:2:14"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "708:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "708:15:14"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "725:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "704:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "704:24:14"
																	},
																	{
																		"name": "end",
																		"nodeType": "YulIdentifier",
																		"src": "730:3:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "701:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:33:14"
															},
															"nodeType": "YulIf",
															"src": "698:53:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "760:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "769:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "764:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "825:87:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "854:6:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "862:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "850:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "850:14:14"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "866:2:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "846:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "846:23:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "offset",
																											"nodeType": "YulIdentifier",
																											"src": "885:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "893:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "881:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "881:14:14"
																								},
																								{
																									"name": "_4",
																									"nodeType": "YulIdentifier",
																									"src": "897:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "877:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "877:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "871:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "871:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "839:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "839:63:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "839:63:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "790:1:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "793:2:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "787:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "787:9:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "797:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "799:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "808:1:14"
																				},
																				{
																					"name": "_4",
																					"nodeType": "YulIdentifier",
																					"src": "811:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "804:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "804:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "799:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "783:3:14",
																"statements": []
															},
															"src": "779:133:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "942:59:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "971:6:14"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "979:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "967:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "967:15:14"
																						},
																						{
																							"name": "_4",
																							"nodeType": "YulIdentifier",
																							"src": "984:2:14"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "963:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "963:24:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "989:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "956:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "956:35:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "956:35:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "927:1:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "930:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "924:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "924:9:14"
															},
															"nodeType": "YulIf",
															"src": "921:80:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1010:15:14",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1019:6:14"
															},
															"variableNames": [
																{
																	"name": "array",
																	"nodeType": "YulIdentifier",
																	"src": "1010:5:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_string_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "184:6:14",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "192:3:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "200:5:14",
														"type": ""
													}
												],
												"src": "146:885:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1169:579:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1215:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1224:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1227:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1217:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1217:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1217:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1190:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1199:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1186:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1186:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1211:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1182:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1182:32:14"
															},
															"nodeType": "YulIf",
															"src": "1179:52:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1240:30:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1260:9:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1254:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1254:16:14"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1244:6:14",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1279:28:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1297:2:14",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1301:1:14",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1293:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1293:10:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1305:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1289:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1289:18:14"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1283:2:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1334:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1343:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1346:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1336:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1336:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1336:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1322:6:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1330:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1319:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1319:14:14"
															},
															"nodeType": "YulIf",
															"src": "1316:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1359:71:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1402:9:14"
																			},
																			{
																				"name": "offset",
																				"nodeType": "YulIdentifier",
																				"src": "1413:6:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1398:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1398:22:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1422:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1369:28:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1369:61:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1359:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1439:41:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1465:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1476:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1461:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1461:18:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1455:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1455:25:14"
															},
															"variables": [
																{
																	"name": "offset_1",
																	"nodeType": "YulTypedName",
																	"src": "1443:8:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1509:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1518:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1521:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1511:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1511:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1511:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset_1",
																		"nodeType": "YulIdentifier",
																		"src": "1495:8:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1505:2:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1492:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1492:16:14"
															},
															"nodeType": "YulIf",
															"src": "1489:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1534:73:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1577:9:14"
																			},
																			{
																				"name": "offset_1",
																				"nodeType": "YulIdentifier",
																				"src": "1588:8:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1573:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1573:24:14"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1599:7:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_string_fromMemory",
																	"nodeType": "YulIdentifier",
																	"src": "1544:28:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:63:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1534:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1616:38:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1639:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1650:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1635:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1635:18:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1629:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1629:25:14"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1620:5:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1702:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1711:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1714:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1704:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1704:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1704:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1676:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1687:5:14"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1694:4:14",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1683:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1683:16:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1673:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1673:27:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1666:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1666:35:14"
															},
															"nodeType": "YulIf",
															"src": "1663:55:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1727:15:14",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1737:5:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1727:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1119:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1130:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1142:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1150:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1158:6:14",
														"type": ""
													}
												],
												"src": "1036:712:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1808:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1818:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1832:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1835:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1828:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1828:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1818:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1849:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1879:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1885:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1853:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1926:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1928:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1942:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1950:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1938:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1938:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1928:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1906:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1899:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1899:26:14"
															},
															"nodeType": "YulIf",
															"src": "1896:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2016:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2037:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2044:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2049:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2040:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2040:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2030:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2030:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2030:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2081:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2084:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2074:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2074:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2074:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2109:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2112:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2102:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2102:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2102:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1972:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1995:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2003:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1992:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1992:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1969:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1969:38:14"
															},
															"nodeType": "YulIf",
															"src": "1966:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1788:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1797:6:14",
														"type": ""
													}
												],
												"src": "1753:380:14"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        if gt(i, _1)\n        {\n            mstore(add(add(memPtr, _1), _4), 0)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_uint8_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value2 := value\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "60a06040523480156200001157600080fd5b5060405162000b6738038062000b678339810160408190526200003491620001e2565b8251620000499060039060208601906200006f565b5081516200005f9060049060208501906200006f565b5060ff1660805250620002a39050565b8280546200007d9062000267565b90600052602060002090601f016020900481019282620000a15760008555620000ec565b82601f10620000bc57805160ff1916838001178555620000ec565b82800160010185558215620000ec579182015b82811115620000ec578251825591602001919060010190620000cf565b50620000fa929150620000fe565b5090565b5b80821115620000fa5760008155600101620000ff565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013d57600080fd5b81516001600160401b03808211156200015a576200015a62000115565b604051601f8301601f19908116603f0116810190828211818310171562000185576200018562000115565b81604052838152602092508683858801011115620001a257600080fd5b600091505b83821015620001c65785820183015181830184015290820190620001a7565b83821115620001d85760008385830101525b9695505050505050565b600080600060608486031215620001f857600080fd5b83516001600160401b03808211156200021057600080fd5b6200021e878388016200012b565b945060208601519150808211156200023557600080fd5b5062000244868287016200012b565b925050604084015160ff811681146200025c57600080fd5b809150509250925092565b600181811c908216806200027c57607f821691505b6020821081036200029d57634e487b7160e01b600052602260045260246000fd5b50919050565b6080516108a8620002bf600039600061011b01526108a86000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461014557806370a082311461015857806395d89b4114610181578063a457c2d714610189578063a9059cbb1461019c578063dd62ed3e146101af57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c2565b6040516100c391906106e6565b60405180910390f35b6100df6100da366004610757565b610254565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610781565b61026c565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100c3565b6100df610153366004610757565b610290565b6100f36101663660046107bd565b6001600160a01b031660009081526020819052604090205490565b6100b66102b2565b6100df610197366004610757565b6102c1565b6100df6101aa366004610757565b610341565b6100f36101bd3660046107df565b61034f565b6060600380546101d190610812565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd90610812565b801561024a5780601f1061021f5761010080835404028352916020019161024a565b820191906000526020600020905b81548152906001019060200180831161022d57829003601f168201915b5050505050905090565b60003361026281858561037a565b5060019392505050565b60003361027a85828561049e565b610285858585610518565b506001949350505050565b6000336102628185856102a3838361034f565b6102ad919061084c565b61037a565b6060600480546101d190610812565b600033816102cf828661034f565b9050838110156103345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610285828686840361037a565b600033610262818585610518565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103dc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161032b565b6001600160a01b03821661043d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161032b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104aa848461034f565b9050600019811461051257818110156105055760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161032b565b610512848484840361037a565b50505050565b6001600160a01b03831661057c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161032b565b6001600160a01b0382166105de5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161032b565b6001600160a01b038316600090815260208190526040902054818110156106565760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161032b565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061068d90849061084c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106d991815260200190565b60405180910390a3610512565b600060208083528351808285015260005b81811015610713578581018301518582016040015282016106f7565b81811115610725576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461075257600080fd5b919050565b6000806040838503121561076a57600080fd5b6107738361073b565b946020939093013593505050565b60008060006060848603121561079657600080fd5b61079f8461073b565b92506107ad6020850161073b565b9150604084013590509250925092565b6000602082840312156107cf57600080fd5b6107d88261073b565b9392505050565b600080604083850312156107f257600080fd5b6107fb8361073b565b91506108096020840161073b565b90509250929050565b600181811c9082168061082657607f821691505b60208210810361084657634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561086d57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212203ab0a88ee4dcb32752ae9eb40a81eb096df65b55d9ff5bc5491481ad9eb7255564736f6c634300080d0033",
							"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xB67 CODESIZE SUB DUP1 PUSH3 0xB67 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1E2 JUMP JUMPDEST DUP3 MLOAD PUSH3 0x49 SWAP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x6F JUMP JUMPDEST POP DUP2 MLOAD PUSH3 0x5F SWAP1 PUSH1 0x4 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH3 0x6F JUMP JUMPDEST POP PUSH1 0xFF AND PUSH1 0x80 MSTORE POP PUSH3 0x2A3 SWAP1 POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x7D SWAP1 PUSH3 0x267 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0xA1 JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0xEC JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0xBC JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0xEC JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0xEC JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0xEC JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0xCF JUMP JUMPDEST POP PUSH3 0xFA SWAP3 SWAP2 POP PUSH3 0xFE JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0xFA JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0xFF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x13D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x15A JUMPI PUSH3 0x15A PUSH3 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x185 JUMPI PUSH3 0x185 PUSH3 0x115 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x1C6 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x1A7 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 0x1D8 JUMPI PUSH1 0x0 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x21E DUP8 DUP4 DUP9 ADD PUSH3 0x12B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x244 DUP7 DUP3 DUP8 ADD PUSH3 0x12B JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x25C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x27C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x29D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x8A8 PUSH3 0x2BF PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x11B ADD MSTORE PUSH2 0x8A8 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x254 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x781 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2B2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x341 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x7DF JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D1 SWAP1 PUSH2 0x812 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1FD SWAP1 PUSH2 0x812 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x21F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x37A JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27A DUP6 DUP3 DUP6 PUSH2 0x49E JUMP JUMPDEST PUSH2 0x285 DUP6 DUP6 DUP6 PUSH2 0x518 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x2A3 DUP4 DUP4 PUSH2 0x34F JUMP JUMPDEST PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x84C JUMP JUMPDEST PUSH2 0x37A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D1 SWAP1 PUSH2 0x812 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2CF DUP3 DUP7 PUSH2 0x34F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x285 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x37A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x43D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AA DUP5 DUP5 PUSH2 0x34F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x512 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST PUSH2 0x512 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x37A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x68D SWAP1 DUP5 SWAP1 PUSH2 0x84C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6D9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x713 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x752 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x773 DUP4 PUSH2 0x73B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79F DUP5 PUSH2 0x73B JUMP JUMPDEST SWAP3 POP PUSH2 0x7AD PUSH1 0x20 DUP6 ADD PUSH2 0x73B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D8 DUP3 PUSH2 0x73B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FB DUP4 PUSH2 0x73B JUMP JUMPDEST SWAP2 POP PUSH2 0x809 PUSH1 0x20 DUP5 ADD PUSH2 0x73B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x826 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x846 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x86D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xB0 0xA8 DUP15 0xE4 0xDC 0xB3 0x27 MSTORE 0xAE SWAP15 0xB4 EXP DUP2 0xEB MULMOD PUSH14 0xF65B55D9FF5BC5491481AD9EB725 SSTORE PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1411:11096:13:-:0;;;1804:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1887:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;1910:17:13;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;1937:21:13;;;;-1:-1:-1;1411:11096:13;;-1:-1:-1;1411:11096:13;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1411:11096:13;;;-1:-1:-1;1411:11096:13;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:14;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:885;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:14;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:14;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;930:2;927:1;924:9;921:80;;;989:1;984:2;979;971:6;967:15;963:24;956:35;921:80;1019:6;146:885;-1:-1:-1;;;;;;146:885:14:o;1036:712::-;1142:6;1150;1158;1211:2;1199:9;1190:7;1186:23;1182:32;1179:52;;;1227:1;1224;1217:12;1179:52;1254:16;;-1:-1:-1;;;;;1319:14:14;;;1316:34;;;1346:1;1343;1336:12;1316:34;1369:61;1422:7;1413:6;1402:9;1398:22;1369:61;:::i;:::-;1359:71;;1476:2;1465:9;1461:18;1455:25;1439:41;;1505:2;1495:8;1492:16;1489:36;;;1521:1;1518;1511:12;1489:36;;1544:63;1599:7;1588:8;1577:9;1573:24;1544:63;:::i;:::-;1534:73;;;1650:2;1639:9;1635:18;1629:25;1694:4;1687:5;1683:16;1676:5;1673:27;1663:55;;1714:1;1711;1704:12;1663:55;1737:5;1727:15;;;1036:712;;;;;:::o;1753:380::-;1832:1;1828:12;;;;1875;;;1896:61;;1950:4;1942:6;1938:17;1928:27;;1896:61;2003:2;1995:6;1992:14;1972:18;1969:38;1966:161;;2049:10;2044:3;2040:20;2037:1;2030:31;2084:4;2081:1;2074:15;2112:4;2109:1;2102:15;1966:161;;1753:380;;;:::o;:::-;1411:11096:13;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_2095": {
									"entryPoint": null,
									"id": 2095,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_2030": {
									"entryPoint": 890,
									"id": 2030,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_2084": {
									"entryPoint": null,
									"id": 2084,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_372": {
									"entryPoint": null,
									"id": 372,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_2073": {
									"entryPoint": 1182,
									"id": 2073,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_1857": {
									"entryPoint": 1304,
									"id": 1857,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_1652": {
									"entryPoint": 847,
									"id": 1652,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_1677": {
									"entryPoint": 596,
									"id": 1677,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_1609": {
									"entryPoint": null,
									"id": 1609,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_1585": {
									"entryPoint": null,
									"id": 1585,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_1780": {
									"entryPoint": 705,
									"id": 1780,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_1739": {
									"entryPoint": 656,
									"id": 1739,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_1565": {
									"entryPoint": 450,
									"id": 1565,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_1575": {
									"entryPoint": 690,
									"id": 1575,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_1595": {
									"entryPoint": null,
									"id": 1595,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_1710": {
									"entryPoint": 620,
									"id": 1710,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_1634": {
									"entryPoint": 833,
									"id": 1634,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1851,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1981,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2015,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1921,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1879,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1766,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2124,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 2066,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:14",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:14",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:14",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:14",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:14"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:14"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:14"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:14",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:14"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:14"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:14",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:14",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:14"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:14"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:14"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:14"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:14"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:14"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:14"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:14"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:14"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:14"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:14"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:14"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:14",
																"statements": []
															},
															"src": "294:140:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:14"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:14"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:14"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:14"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:14",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:14"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:14"
															},
															"nodeType": "YulIf",
															"src": "443:91:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:14"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:14"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:14",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:14"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:14",
														"type": ""
													}
												],
												"src": "14:597:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:14",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:14"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:14"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:14"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:14"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:14",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:14",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:14"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:14"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:14",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:14"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:14"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:14"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:14"
															},
															"nodeType": "YulIf",
															"src": "713:70:14"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:14",
														"type": ""
													}
												],
												"src": "616:173:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:14"
															},
															"nodeType": "YulIf",
															"src": "891:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:14",
														"type": ""
													}
												],
												"src": "794:254:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:14"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:14"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:14"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:14",
														"type": ""
													}
												],
												"src": "1053:187:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:14"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:14",
														"type": ""
													}
												],
												"src": "1245:177:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:14"
															},
															"nodeType": "YulIf",
															"src": "1541:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:14"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:14"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:14",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:14",
														"type": ""
													}
												],
												"src": "1427:328:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:14"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:14",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:14"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:14"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:14",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:14",
														"type": ""
													}
												],
												"src": "1760:184:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:14"
															},
															"nodeType": "YulIf",
															"src": "2029:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:14",
														"type": ""
													}
												],
												"src": "1949:186:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:14",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:14"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:14"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:14",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:14"
															},
															"nodeType": "YulIf",
															"src": "2237:52:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:14"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:14"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:14",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:14"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:14"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:14"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:14",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:14",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:14",
														"type": ""
													}
												],
												"src": "2140:260:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:14",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:14",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:14",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:14"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:14"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:14"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:14",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:14",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:14"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:14",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:14",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:14",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:14"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:14",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:14"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:14"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:14"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:14"
															},
															"nodeType": "YulIf",
															"src": "2548:61:14"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:14",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:14"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:14"
															},
															"nodeType": "YulIf",
															"src": "2618:161:14"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:14",
														"type": ""
													}
												],
												"src": "2405:380:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:14",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:14",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:14",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:14",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:14"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:14",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:14",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:14"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:14",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:14"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:14"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:14"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:14"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:14"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:14"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:14"
															},
															"nodeType": "YulIf",
															"src": "2848:136:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:14",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:14"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:14"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:14"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:14"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:14",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:14",
														"type": ""
													}
												],
												"src": "2790:225:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:14"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:14",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:14"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:14",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:14",
														"type": ""
													}
												],
												"src": "3020:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:14",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:14",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:14"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:14",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:14",
														"type": ""
													}
												],
												"src": "3426:400:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:14",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:14"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:14",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:14"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:14",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:14",
														"type": ""
													}
												],
												"src": "3831:398:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:14",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:14"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:14",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:14",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:14",
														"type": ""
													}
												],
												"src": "4234:353:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:14",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:14",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:14"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:14",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:14",
														"type": ""
													}
												],
												"src": "4592:401:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:14",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:14",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:14"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:14",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:14",
														"type": ""
													}
												],
												"src": "4998:399:14"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:14",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:14",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:14",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:14",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:14",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:14"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:14",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:14"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:14",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:14"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:14"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:14",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:14"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:14"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:14",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:14"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:14",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:14"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:14"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:14"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:14",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:14",
														"type": ""
													}
												],
												"src": "5402:402:14"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 14,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"1532": [
									{
										"length": 32,
										"start": 283
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461014557806370a082311461015857806395d89b4114610181578063a457c2d714610189578063a9059cbb1461019c578063dd62ed3e146101af57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101c2565b6040516100c391906106e6565b60405180910390f35b6100df6100da366004610757565b610254565b60405190151581526020016100c3565b6002545b6040519081526020016100c3565b6100df61010f366004610781565b61026c565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100c3565b6100df610153366004610757565b610290565b6100f36101663660046107bd565b6001600160a01b031660009081526020819052604090205490565b6100b66102b2565b6100df610197366004610757565b6102c1565b6100df6101aa366004610757565b610341565b6100f36101bd3660046107df565b61034f565b6060600380546101d190610812565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd90610812565b801561024a5780601f1061021f5761010080835404028352916020019161024a565b820191906000526020600020905b81548152906001019060200180831161022d57829003601f168201915b5050505050905090565b60003361026281858561037a565b5060019392505050565b60003361027a85828561049e565b610285858585610518565b506001949350505050565b6000336102628185856102a3838361034f565b6102ad919061084c565b61037a565b6060600480546101d190610812565b600033816102cf828661034f565b9050838110156103345760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b610285828686840361037a565b600033610262818585610518565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166103dc5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161032b565b6001600160a01b03821661043d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161032b565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006104aa848461034f565b9050600019811461051257818110156105055760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161032b565b610512848484840361037a565b50505050565b6001600160a01b03831661057c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161032b565b6001600160a01b0382166105de5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161032b565b6001600160a01b038316600090815260208190526040902054818110156106565760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161032b565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061068d90849061084c565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106d991815260200190565b60405180910390a3610512565b600060208083528351808285015260005b81811015610713578581018301518582016040015282016106f7565b81811115610725576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461075257600080fd5b919050565b6000806040838503121561076a57600080fd5b6107738361073b565b946020939093013593505050565b60008060006060848603121561079657600080fd5b61079f8461073b565b92506107ad6020850161073b565b9150604084013590509250925092565b6000602082840312156107cf57600080fd5b6107d88261073b565b9392505050565b600080604083850312156107f257600080fd5b6107fb8361073b565b91506108096020840161073b565b90509250929050565b600181811c9082168061082657607f821691505b60208210810361084657634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561086d57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212203ab0a88ee4dcb32752ae9eb40a81eb096df65b55d9ff5bc5491481ad9eb7255564736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x145 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x158 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x181 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x254 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x781 JUMP JUMPDEST PUSH2 0x26C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x153 CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x290 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x7BD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x2B2 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x2C1 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x1AA CALLDATASIZE PUSH1 0x4 PUSH2 0x757 JUMP JUMPDEST PUSH2 0x341 JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x1BD CALLDATASIZE PUSH1 0x4 PUSH2 0x7DF JUMP JUMPDEST PUSH2 0x34F JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1D1 SWAP1 PUSH2 0x812 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1FD SWAP1 PUSH2 0x812 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x24A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x21F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x24A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x22D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x37A JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x27A DUP6 DUP3 DUP6 PUSH2 0x49E JUMP JUMPDEST PUSH2 0x285 DUP6 DUP6 DUP6 PUSH2 0x518 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x2A3 DUP4 DUP4 PUSH2 0x34F JUMP JUMPDEST PUSH2 0x2AD SWAP2 SWAP1 PUSH2 0x84C JUMP JUMPDEST PUSH2 0x37A JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1D1 SWAP1 PUSH2 0x812 JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2CF DUP3 DUP7 PUSH2 0x34F JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x334 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x285 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x37A JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x262 DUP2 DUP6 DUP6 PUSH2 0x518 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3DC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x43D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4AA DUP5 DUP5 PUSH2 0x34F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x512 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x505 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x32B JUMP JUMPDEST PUSH2 0x512 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x37A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x57C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x656 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x32B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 KECCAK256 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 0x68D SWAP1 DUP5 SWAP1 PUSH2 0x84C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x6D9 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x512 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x713 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6F7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x752 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x76A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x773 DUP4 PUSH2 0x73B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x79F DUP5 PUSH2 0x73B JUMP JUMPDEST SWAP3 POP PUSH2 0x7AD PUSH1 0x20 DUP6 ADD PUSH2 0x73B JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x7CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D8 DUP3 PUSH2 0x73B JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FB DUP4 PUSH2 0x73B JUMP JUMPDEST SWAP2 POP PUSH2 0x809 PUSH1 0x20 DUP5 ADD PUSH2 0x73B JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x826 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x846 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x86D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASPRICE 0xB0 0xA8 DUP15 0xE4 0xDC 0xB3 0x27 MSTORE 0xAE SWAP15 0xB4 EXP DUP2 0xEB MULMOD PUSH14 0xF65B55D9FF5BC5491481AD9EB725 SSTORE PUSH5 0x736F6C6343 STOP ADDMOD 0xD STOP CALLER ",
							"sourceMap": "1411:11096:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2030:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4314:197;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:14;;1211:22;1193:41;;1181:2;1166:18;4314:197:13;1053:187:14;3125:106:13;3212:12;;3125:106;;;1391:25:14;;;1379:2;1364:18;3125:106:13;1245:177:14;5073:286:13;;;;;;:::i;:::-;;:::i;2967:98::-;;;1932:4:14;3049:9:13;1920:17:14;1902:36;;1890:2;1875:18;2967:98:13;1760:184:14;5754:234:13;;;;;;:::i;:::-;;:::i;3289:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3389:18:13;3363:7;3389:18;;;;;;;;;;;;3289:125;2241:102;;;:::i;6475:427::-;;;;;;:::i;:::-;;:::i;3610:189::-;;;;;;:::i;:::-;;:::i;3857:149::-;;;;;;:::i;:::-;;:::i;2030:98::-;2084:13;2116:5;2109:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2030:98;:::o;4314:197::-;4397:4;719:10:6;4451:32:13;719:10:6;4467:7:13;4476:6;4451:8;:32::i;:::-;-1:-1:-1;4500:4:13;;4314:197;-1:-1:-1;;;4314:197:13:o;5073:286::-;5200:4;719:10:6;5256:38:13;5272:4;719:10:6;5287:6:13;5256:15;:38::i;:::-;5304:27;5314:4;5320:2;5324:6;5304:9;:27::i;:::-;-1:-1:-1;5348:4:13;;5073:286;-1:-1:-1;;;;5073:286:13:o;5754:234::-;5842:4;719:10:6;5896:64:13;719:10:6;5912:7:13;5949:10;5921:25;719:10:6;5912:7:13;5921:9;:25::i;:::-;:38;;;;:::i;:::-;5896:8;:64::i;2241:102::-;2297:13;2329:7;2322:14;;;;;:::i;6475:427::-;6568:4;719:10:6;6568:4:13;6649:25;719:10:6;6666:7:13;6649:9;:25::i;:::-;6622:52;;6712:15;6692:16;:35;;6684:85;;;;-1:-1:-1;;;6684:85:13;;3222:2:14;6684:85:13;;;3204:21:14;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:14;;;3344:35;3396:19;;6684:85:13;;;;;;;;;6803:60;6812:5;6819:7;6847:15;6828:16;:34;6803:8;:60::i;3610:189::-;3689:4;719:10:6;3743:28:13;719:10:6;3760:2:13;3764:6;3743:9;:28::i;3857:149::-;-1:-1:-1;;;;;3972:18:13;;;3946:7;3972:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3857:149::o;10000:370::-;-1:-1:-1;;;;;10131:19:13;;10123:68;;;;-1:-1:-1;;;10123:68:13;;3628:2:14;10123:68:13;;;3610:21:14;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:14;;;3750:34;3801:19;;10123:68:13;3426:400:14;10123:68:13;-1:-1:-1;;;;;10209:21:13;;10201:68;;;;-1:-1:-1;;;10201:68:13;;4033:2:14;10201:68:13;;;4015:21:14;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:14;;;4155:32;4204:19;;10201:68:13;3831:398:14;10201:68:13;-1:-1:-1;;;;;10280:18:13;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10331:32;;1391:25:14;;;10331:32:13;;1364:18:14;10331:32:13;;;;;;;10000:370;;;:::o;10651:441::-;10781:24;10808:25;10818:5;10825:7;10808:9;:25::i;:::-;10781:52;;-1:-1:-1;;10847:16:13;:37;10843:243;;10928:6;10908:16;:26;;10900:68;;;;-1:-1:-1;;;10900:68:13;;4436:2:14;10900:68:13;;;4418:21:14;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;10900:68:13;4234:353:14;10900:68:13;11010:51;11019:5;11026:7;11054:6;11035:16;:25;11010:8;:51::i;:::-;10771:321;10651:441;;;:::o;7365:651::-;-1:-1:-1;;;;;7491:18:13;;7483:68;;;;-1:-1:-1;;;7483:68:13;;4794:2:14;7483:68:13;;;4776:21:14;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:14;;;4916:35;4968:19;;7483:68:13;4592:401:14;7483:68:13;-1:-1:-1;;;;;7569:16:13;;7561:64;;;;-1:-1:-1;;;7561:64:13;;5200:2:14;7561:64:13;;;5182:21:14;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:14;;;5322:33;5372:19;;7561:64:13;4998:399:14;7561:64:13;-1:-1:-1;;;;;7707:15:13;;7685:19;7707:15;;;;;;;;;;;7740:21;;;;7732:72;;;;-1:-1:-1;;;7732:72:13;;5604:2:14;7732:72:13;;;5586:21:14;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:14;;;5726:36;5779:19;;7732:72:13;5402:402:14;7732:72:13;-1:-1:-1;;;;;7838:15:13;;;:9;:15;;;;;;;;;;;7856:20;;;7838:38;;7896:13;;;;;;;;:23;;7870:6;;7838:9;7896:23;;7870:6;;7896:23;:::i;:::-;;;;;;;;7950:2;-1:-1:-1;;;;;7935:26:13;7944:4;-1:-1:-1;;;;;7935:26:13;;7954:6;7935:26;;;;1391:25:14;;1379:2;1364:18;;1245:177;7935:26:13;;;;;;;;7972:37;11676:121;14:597:14;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:14;574:15;-1:-1:-1;;570:29:14;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:14:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:14;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:14:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:14:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:14;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "443200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2562",
								"decimals()": "infinite",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "26978",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51270",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "A0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "CALLVALUE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "CODESIZE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSHSIZE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "tag",
									"source": 13,
									"value": "2"
								},
								{
									"begin": 1804,
									"end": 1965,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1892,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 1887,
									"end": 1892,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "7"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "tag",
									"source": 13,
									"value": "6"
								},
								{
									"begin": 1887,
									"end": 1900,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1917,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1910,
									"end": 1917,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "7"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "tag",
									"source": 13,
									"value": "8"
								},
								{
									"begin": 1910,
									"end": 1927,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "PUSH",
									"source": 13,
									"value": "FF"
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1937,
									"end": 1958,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "23"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "7"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "10"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "11"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "10"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DIV",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "16"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "13"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "FF"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "16"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "14"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "16"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "15"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "16"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "15"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "16"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "17"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13,
									"value": "[in]"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "17"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13,
									"value": "[out]"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "18"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "tag",
									"source": 13,
									"value": "19"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "17"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "19"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "tag",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 200,
									"end": 205,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 253,
									"end": 256,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 246,
									"end": 250,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 238,
									"end": 244,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 234,
									"end": 251,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 230,
									"end": 257,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 220,
									"end": 275,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 271,
									"end": 272,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 268,
									"end": 269,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 261,
									"end": 273,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 220,
									"end": 275,
									"name": "tag",
									"source": 14,
									"value": "26"
								},
								{
									"begin": 220,
									"end": 275,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 294,
									"end": 307,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 294,
									"end": 307,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 356,
									"end": 366,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 356,
									"end": 366,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 353,
									"end": 389,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 353,
									"end": 389,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 353,
									"end": 389,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "tag",
									"source": 14,
									"value": "28"
								},
								{
									"begin": 369,
									"end": 387,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 444,
									"end": 446,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 438,
									"end": 447,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 412,
									"end": 414,
									"name": "PUSH",
									"source": 14,
									"value": "1F"
								},
								{
									"begin": 498,
									"end": 511,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 498,
									"end": 511,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 494,
									"end": 516,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 494,
									"end": 516,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 494,
									"end": 516,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 518,
									"end": 520,
									"name": "PUSH",
									"source": 14,
									"value": "3F"
								},
								{
									"begin": 490,
									"end": 521,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 486,
									"end": 526,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 474,
									"end": 527,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 542,
									"end": 560,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 562,
									"end": 584,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 539,
									"end": 585,
									"name": "OR",
									"source": 14
								},
								{
									"begin": 536,
									"end": 608,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 536,
									"end": 608,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 536,
									"end": 608,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "21"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "tag",
									"source": 14,
									"value": "30"
								},
								{
									"begin": 588,
									"end": 606,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 628,
									"end": 638,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 624,
									"end": 626,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 617,
									"end": 639,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 663,
									"end": 665,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 655,
									"end": 661,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 648,
									"end": 666,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 685,
									"end": 689,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 675,
									"end": 689,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 675,
									"end": 689,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 730,
									"end": 733,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 725,
									"end": 727,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 720,
									"end": 722,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 712,
									"end": 718,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 708,
									"end": 723,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 704,
									"end": 728,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 701,
									"end": 734,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 747,
									"end": 748,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 744,
									"end": 745,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 737,
									"end": 749,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 698,
									"end": 751,
									"name": "tag",
									"source": 14,
									"value": "31"
								},
								{
									"begin": 698,
									"end": 751,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 760,
									"end": 770,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 760,
									"end": 770,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 793,
									"end": 795,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 790,
									"end": 791,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 787,
									"end": 796,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 881,
									"end": 895,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 877,
									"end": 900,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 877,
									"end": 900,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 871,
									"end": 901,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 850,
									"end": 864,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 846,
									"end": 869,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 846,
									"end": 869,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 839,
									"end": 902,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 804,
									"end": 814,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "32"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 779,
									"end": 912,
									"name": "tag",
									"source": 14,
									"value": "34"
								},
								{
									"begin": 779,
									"end": 912,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 930,
									"end": 932,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 927,
									"end": 928,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 924,
									"end": 933,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 989,
									"end": 990,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 984,
									"end": 986,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 979,
									"end": 981,
									"name": "DUP6",
									"source": 14
								},
								{
									"begin": 971,
									"end": 977,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 967,
									"end": 982,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 963,
									"end": 987,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 956,
									"end": 991,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "tag",
									"source": 14,
									"value": "35"
								},
								{
									"begin": 921,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1019,
									"end": 1025,
									"name": "SWAP7",
									"source": 14
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "SWAP6",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 146,
									"end": 1031,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "tag",
									"source": 14,
									"value": "3"
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1142,
									"end": 1148,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1150,
									"end": 1156,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1158,
									"end": 1164,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1211,
									"end": 1213,
									"name": "PUSH",
									"source": 14,
									"value": "60"
								},
								{
									"begin": 1199,
									"end": 1208,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1190,
									"end": 1197,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1186,
									"end": 1209,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 1182,
									"end": 1214,
									"name": "SLT",
									"source": 14
								},
								{
									"begin": 1179,
									"end": 1231,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1179,
									"end": 1231,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 1179,
									"end": 1231,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1227,
									"end": 1228,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1224,
									"end": 1225,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1217,
									"end": 1229,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1179,
									"end": 1231,
									"name": "tag",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 1179,
									"end": 1231,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1254,
									"end": 1270,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 1254,
									"end": 1270,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1319,
									"end": 1333,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1319,
									"end": 1333,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1319,
									"end": 1333,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1316,
									"end": 1350,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1316,
									"end": 1350,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 1316,
									"end": 1350,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1346,
									"end": 1347,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1343,
									"end": 1344,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1336,
									"end": 1348,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1316,
									"end": 1350,
									"name": "tag",
									"source": 14,
									"value": "38"
								},
								{
									"begin": 1316,
									"end": 1350,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1369,
									"end": 1430,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1422,
									"end": 1429,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 1413,
									"end": 1419,
									"name": "DUP4",
									"source": 14
								},
								{
									"begin": 1402,
									"end": 1411,
									"name": "DUP9",
									"source": 14
								},
								{
									"begin": 1398,
									"end": 1420,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1369,
									"end": 1430,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1369,
									"end": 1430,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1369,
									"end": 1430,
									"name": "tag",
									"source": 14,
									"value": "39"
								},
								{
									"begin": 1369,
									"end": 1430,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1359,
									"end": 1430,
									"name": "SWAP5",
									"source": 14
								},
								{
									"begin": 1359,
									"end": 1430,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1476,
									"end": 1478,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1465,
									"end": 1474,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1461,
									"end": 1479,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1455,
									"end": 1480,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1439,
									"end": 1480,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1439,
									"end": 1480,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1505,
									"end": 1507,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1495,
									"end": 1503,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1492,
									"end": 1508,
									"name": "GT",
									"source": 14
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "ISZERO",
									"source": 14
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1521,
									"end": 1522,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1518,
									"end": 1519,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1511,
									"end": 1523,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "tag",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1489,
									"end": 1525,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1544,
									"end": 1607,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 1599,
									"end": 1606,
									"name": "DUP7",
									"source": 14
								},
								{
									"begin": 1588,
									"end": 1596,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1577,
									"end": 1586,
									"name": "DUP8",
									"source": 14
								},
								{
									"begin": 1573,
									"end": 1597,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1544,
									"end": 1607,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 1544,
									"end": 1607,
									"name": "JUMP",
									"source": 14,
									"value": "[in]"
								},
								{
									"begin": 1544,
									"end": 1607,
									"name": "tag",
									"source": 14,
									"value": "41"
								},
								{
									"begin": 1544,
									"end": 1607,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1534,
									"end": 1607,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 1534,
									"end": 1607,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1534,
									"end": 1607,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1650,
									"end": 1652,
									"name": "PUSH",
									"source": 14,
									"value": "40"
								},
								{
									"begin": 1639,
									"end": 1648,
									"name": "DUP5",
									"source": 14
								},
								{
									"begin": 1635,
									"end": 1653,
									"name": "ADD",
									"source": 14
								},
								{
									"begin": 1629,
									"end": 1654,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1694,
									"end": 1698,
									"name": "PUSH",
									"source": 14,
									"value": "FF"
								},
								{
									"begin": 1687,
									"end": 1692,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1683,
									"end": 1699,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1676,
									"end": 1681,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1673,
									"end": 1700,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1663,
									"end": 1718,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 1663,
									"end": 1718,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1714,
									"end": 1715,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1711,
									"end": 1712,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1704,
									"end": 1716,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1663,
									"end": 1718,
									"name": "tag",
									"source": 14,
									"value": "42"
								},
								{
									"begin": 1663,
									"end": 1718,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1737,
									"end": 1742,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1727,
									"end": 1742,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1727,
									"end": 1742,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1727,
									"end": 1742,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "SWAP3",
									"source": 14
								},
								{
									"begin": 1036,
									"end": 1748,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "tag",
									"source": 14,
									"value": "11"
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1832,
									"end": 1833,
									"name": "PUSH",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1828,
									"end": 1840,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1828,
									"end": 1840,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1828,
									"end": 1840,
									"name": "SHR",
									"source": 14
								},
								{
									"begin": 1828,
									"end": 1840,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1875,
									"end": 1887,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1875,
									"end": 1887,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1875,
									"end": 1887,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1896,
									"end": 1957,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1896,
									"end": 1957,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1950,
									"end": 1954,
									"name": "PUSH",
									"source": 14,
									"value": "7F"
								},
								{
									"begin": 1942,
									"end": 1948,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1938,
									"end": 1955,
									"name": "AND",
									"source": 14
								},
								{
									"begin": 1928,
									"end": 1955,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1928,
									"end": 1955,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1896,
									"end": 1957,
									"name": "tag",
									"source": 14,
									"value": "44"
								},
								{
									"begin": 1896,
									"end": 1957,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 2003,
									"end": 2005,
									"name": "PUSH",
									"source": 14,
									"value": "20"
								},
								{
									"begin": 1995,
									"end": 2001,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1992,
									"end": 2006,
									"name": "LT",
									"source": 14
								},
								{
									"begin": 1972,
									"end": 1990,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1969,
									"end": 2007,
									"name": "SUB",
									"source": 14
								},
								{
									"begin": 1966,
									"end": 2127,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "45"
								},
								{
									"begin": 1966,
									"end": 2127,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 2049,
									"end": 2059,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B71"
								},
								{
									"begin": 2044,
									"end": 2047,
									"name": "PUSH",
									"source": 14,
									"value": "E0"
								},
								{
									"begin": 2040,
									"end": 2060,
									"name": "SHL",
									"source": 14
								},
								{
									"begin": 2037,
									"end": 2038,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2030,
									"end": 2061,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2084,
									"end": 2088,
									"name": "PUSH",
									"source": 14,
									"value": "22"
								},
								{
									"begin": 2081,
									"end": 2082,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 2074,
									"end": 2089,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 2112,
									"end": 2116,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 2109,
									"end": 2110,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 2102,
									"end": 2117,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1966,
									"end": 2127,
									"name": "tag",
									"source": 14,
									"value": "45"
								},
								{
									"begin": 1966,
									"end": 2127,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1966,
									"end": 2127,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "JUMP",
									"source": 14,
									"value": "[out]"
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "tag",
									"source": 14,
									"value": "23"
								},
								{
									"begin": 1753,
									"end": 2133,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "80"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "ASSIGNIMMUTABLE",
									"source": 13,
									"value": "1532"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1411,
									"end": 12507,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212203ab0a88ee4dcb32752ae9eb40a81eb096df65b55d9ff5bc5491481ad9eb7255564736f6c634300080d0033",
									".code": [
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "CALLVALUE",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "tag",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "39509351"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "39509351"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "70A08231"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "95D89B41"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "A457C2D7"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "A9059CBB"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "DD62ED3E"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "tag",
											"source": 13,
											"value": "14"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "6FDDE03"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "95EA7B3"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "18160DDD"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "23B872DD"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "313CE567"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "tag",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1411,
											"end": 12507,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "18"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "RETURN",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "5"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3212,
											"end": 3224,
											"name": "PUSH",
											"source": 13,
											"value": "2"
										},
										{
											"begin": 3212,
											"end": 3224,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "tag",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3125,
											"end": 3231,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "6"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "30"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "tag",
											"source": 13,
											"value": "7"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1932,
											"end": 1936,
											"name": "PUSH",
											"source": 14,
											"value": "FF"
										},
										{
											"begin": 3049,
											"end": 3058,
											"name": "PUSHIMMUTABLE",
											"source": 13,
											"value": "1532"
										},
										{
											"begin": 1920,
											"end": 1937,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2967,
											"end": 3065,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "8"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "39"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "tag",
											"source": 13,
											"value": "9"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "tag",
											"source": 13,
											"value": "43"
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3363,
											"end": 3370,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3389,
											"end": 3407,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3289,
											"end": 3414,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "tag",
											"source": 13,
											"value": "10"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "15"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "11"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "12"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "19"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "21"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "55"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "13"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "25"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "59"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "tag",
											"source": 13,
											"value": "16"
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2084,
											"end": 2097,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2116,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "3"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "68"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "69"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "69"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "tag",
											"source": 13,
											"value": "67"
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2109,
											"end": 2121,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2030,
											"end": 2128,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "tag",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4397,
											"end": 4401,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4467,
											"end": 4474,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4476,
											"end": 4482,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4451,
											"end": 4459,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "tag",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 4451,
											"end": 4483,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4500,
											"end": 4504,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 4500,
											"end": 4504,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4314,
											"end": 4511,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "tag",
											"source": 13,
											"value": "32"
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5200,
											"end": 5204,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5287,
											"end": 5293,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5256,
											"end": 5271,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "79"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "tag",
											"source": 13,
											"value": "78"
										},
										{
											"begin": 5256,
											"end": 5294,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 5314,
											"end": 5318,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5320,
											"end": 5322,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5324,
											"end": 5330,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5304,
											"end": 5313,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "tag",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 5304,
											"end": 5331,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5348,
											"end": 5352,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5348,
											"end": 5352,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5073,
											"end": 5359,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "tag",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5754,
											"end": 5988,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5842,
											"end": 5846,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5896,
											"end": 5960,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5912,
											"end": 5919,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5949,
											"end": 5959,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "86"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 5912,
											"end": 5919,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5930,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "tag",
											"source": 13,
											"value": "86"
										},
										{
											"begin": 5921,
											"end": 5946,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "tag",
											"source": 13,
											"value": "87"
										},
										{
											"begin": 5921,
											"end": 5959,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5896,
											"end": 5904,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 5896,
											"end": 5960,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "tag",
											"source": 13,
											"value": "48"
										},
										{
											"begin": 2241,
											"end": 2343,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2297,
											"end": 2310,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2329,
											"end": 2336,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "65"
										},
										{
											"begin": 2322,
											"end": 2336,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "tag",
											"source": 13,
											"value": "52"
										},
										{
											"begin": 6475,
											"end": 6902,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6568,
											"end": 6572,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6568,
											"end": 6572,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 6666,
											"end": 6673,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6649,
											"end": 6658,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "tag",
											"source": 13,
											"value": "98"
										},
										{
											"begin": 6649,
											"end": 6674,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6622,
											"end": 6674,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6622,
											"end": 6674,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 6712,
											"end": 6727,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6708,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6727,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 6692,
											"end": 6727,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "tag",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 6684,
											"end": 6769,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6803,
											"end": 6863,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 6812,
											"end": 6817,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6819,
											"end": 6826,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6847,
											"end": 6862,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6828,
											"end": 6844,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6828,
											"end": 6862,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 6803,
											"end": 6811,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 6803,
											"end": 6863,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "tag",
											"source": 13,
											"value": "56"
										},
										{
											"begin": 3610,
											"end": 3799,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3689,
											"end": 3693,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 3743,
											"end": 3771,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "73"
										},
										{
											"begin": 719,
											"end": 729,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 3760,
											"end": 3762,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3764,
											"end": 3770,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3743,
											"end": 3752,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 3743,
											"end": 3771,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "tag",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3946,
											"end": 3953,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3983,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3990,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3972,
											"end": 3999,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3857,
											"end": 4006,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "tag",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "tag",
											"source": 13,
											"value": "109"
										},
										{
											"begin": 10123,
											"end": 10191,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10209,
											"end": 10230,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10209,
											"end": 10230,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "tag",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 10201,
											"end": 10269,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10291,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10307,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10280,
											"end": 10316,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "PUSH",
											"source": 13,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10331,
											"end": 10363,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10000,
											"end": 10370,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "tag",
											"source": 13,
											"value": "79"
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10805,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 10818,
											"end": 10823,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10825,
											"end": 10832,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 10808,
											"end": 10817,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "61"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "tag",
											"source": 13,
											"value": "117"
										},
										{
											"begin": 10808,
											"end": 10833,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10833,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 10781,
											"end": 10833,
											"name": "POP",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10847,
											"end": 10863,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10847,
											"end": 10884,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 10843,
											"end": 11086,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "122"
										},
										{
											"begin": 10843,
											"end": 11086,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10928,
											"end": 10934,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10924,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10934,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 10908,
											"end": 10934,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 14,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "tag",
											"source": 13,
											"value": "119"
										},
										{
											"begin": 10900,
											"end": 10968,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "122"
										},
										{
											"begin": 11019,
											"end": 11024,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11026,
											"end": 11033,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11054,
											"end": 11060,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11035,
											"end": 11051,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 11035,
											"end": 11060,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 11010,
											"end": 11018,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "74"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "tag",
											"source": 13,
											"value": "122"
										},
										{
											"begin": 11010,
											"end": 11061,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 10771,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 10651,
											"end": 11092,
											"name": "JUMP",
											"source": 13,
											"value": "[out]"
										},
										{
											"begin": 7365,
											"end": 8016,
											"name": "tag",
											"source": 13,
											"value": "81"
										},
										{
											"begin": 7365,
											"end": 8016,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7491,
											"end": 7509,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7491,
											"end": 7509,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "124"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 14,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "tag",
											"source": 13,
											"value": "124"
										},
										{
											"begin": 7483,
											"end": 7551,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7569,
											"end": 7585,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7569,
											"end": 7585,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "127"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 14,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "tag",
											"source": 13,
											"value": "127"
										},
										{
											"begin": 7561,
											"end": 7625,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7685,
											"end": 7704,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7707,
											"end": 7722,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 7740,
											"end": 7761,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "132"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 14,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 14,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 14,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 14,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "tag",
											"source": 13,
											"value": "132"
										},
										{
											"begin": 7732,
											"end": 7804,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7847,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7853,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7856,
											"end": 7876,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7876,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7876,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7909,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7838,
											"end": 7847,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "135"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7870,
											"end": 7876,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "88"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "JUMP",
											"source": 13,
											"value": "[in]"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "tag",
											"source": 13,
											"value": "135"
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "SSTORE",
											"source": 13
										},
										{
											"begin": 7896,
											"end": 7919,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 7950,
											"end": 7952,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7944,
											"end": 7948,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7954,
											"end": 7960,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "136"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "tag",
											"source": 13,
											"value": "136"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7935,
											"end": 7961,
											"name": "LOG3",
											"source": 13
										},
										{
											"begin": 7972,
											"end": 8009,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "122"
										},
										{
											"begin": 11676,
											"end": 11797,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 14,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "144"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 14,
											"value": "146"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 14
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 14,
											"value": "147"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 14,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 14,
											"value": "149"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 14,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 14,
											"value": "151"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 14,
											"value": "152"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 14,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 14
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 14,
											"value": "156"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 14,
											"value": "157"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 14
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 14,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 14,
											"value": "161"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 14,
											"value": "162"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 14
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 14,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 14
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 14,
											"value": "164"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 14
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 14,
											"value": "165"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "141"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMP",
											"source": 14,
											"value": "[in]"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 14,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 14
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 14,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 14,
											"value": "168"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 14
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 14,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 14,
											"value": "169"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 14,
											"value": "88"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 14
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 14,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 14,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 14
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 14,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 14,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 14,
											"value": "171"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMP",
											"source": 14,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name}, {symbol} and {decimals}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"tokens/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"interfaces/IERC20.sol\":{\"keccak256\":\"0xbb468cd9676a6fdae71b903143d44854a9b4082b703613463644b828e9b7a400\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://21c8b22a3e1b54ef211bc17afb71f5a91ab26360133c7f835c9d0e89706bfb52\",\"dweb:/ipfs/QmNwhncwZbdRfqpJe5fVH2S2KkZQrnLGXQsWdHnEfXVrFd\"]},\"interfaces/IERC20Metadata.sol\":{\"keccak256\":\"0x5ab724c374aa11b7d36796b8b247e217d0450f17ac5602cad5ef2f3972e20a29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://970545544bd5acb3dfbe77d23145ddf5ff1f92e5098a3ab2639aef290461d7c7\",\"dweb:/ipfs/QmeznehGiN9jkRCeWP2WLKZBDUthS9iG3dDayDM5EKj5z7\"]},\"lib/Context.sol\":{\"keccak256\":\"0xa46498600c8c57847d8f9ab4d1aa637430774a38c8dc931a7042e567631bc9e7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff544714ca02ccb77277b236f9626d9f062aff293379f5f94c01204ce0ac753e\",\"dweb:/ipfs/QmdmRkqNwy9FmLGdfhime1uBGh5KkmuFEF1WnKScUvhPWg\"]},\"tokens/ERC20.sol\":{\"keccak256\":\"0x4d8cb1879e6842e12e6650f24ed3acf34962c58c85b8066a324744d42d54acad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6aa2e16957e66504484c50664947b7cef7574e84e91291005a80e134c7d40283\",\"dweb:/ipfs/QmXHxsoFLbXrSXuYRBWAAqjxFCZSUSWpx1xvXfiKCvQPvG\"]}},\"version\":1}",
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"SCTERC20.sol": {
				"ast": {
					"absolutePath": "SCTERC20.sol",
					"exportedSymbols": {
						"Context": [
							382
						],
						"Counters": [
							456
						],
						"ECDSA": [
							863
						],
						"EIP712": [
							1017
						],
						"ERC20": [
							2096
						],
						"ERC20Permit": [
							1189
						],
						"IERC20": [
							195
						],
						"IERC20Metadata": [
							220
						],
						"IERC20Permit": [
							256
						],
						"ISCT": [
							281
						],
						"ISolidDaoManagement": [
							360
						],
						"SCTERC20Token": [
							117
						],
						"SolidDaoManaged": [
							1299
						],
						"Strings": [
							1502
						]
					},
					"id": 118,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "./interfaces/IERC20.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 196,
							"src": "58:33:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/ISCT.sol",
							"file": "./interfaces/ISCT.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 282,
							"src": "92:31:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Permit.sol",
							"file": "./interfaces/IERC20Permit.sol",
							"id": 4,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 257,
							"src": "124:39:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/ERC20Permit.sol",
							"file": "./lib/ERC20Permit.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 1190,
							"src": "164:31:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/SolidDaoManaged.sol",
							"file": "./lib/SolidDaoManaged.sol",
							"id": 6,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 118,
							"sourceUnit": 1300,
							"src": "196:35:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 8,
										"name": "ERC20Permit",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1189,
										"src": "342:11:0"
									},
									"id": 9,
									"nodeType": "InheritanceSpecifier",
									"src": "342:11:0"
								},
								{
									"baseName": {
										"id": 10,
										"name": "ISCT",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 281,
										"src": "355:4:0"
									},
									"id": 11,
									"nodeType": "InheritanceSpecifier",
									"src": "355:4:0"
								},
								{
									"baseName": {
										"id": 12,
										"name": "SolidDaoManaged",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1299,
										"src": "361:15:0"
									},
									"id": 13,
									"nodeType": "InheritanceSpecifier",
									"src": "361:15:0"
								}
							],
							"canonicalName": "SCTERC20Token",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 7,
								"nodeType": "StructuredDocumentation",
								"src": "233:82:0",
								"text": " @title SCT ERC-20 Token\n @author Solid World DAO\n @notice SCT Token"
							},
							"fullyImplemented": true,
							"id": 117,
							"linearizedBaseContracts": [
								117,
								1299,
								281,
								1189,
								1017,
								256,
								2096,
								220,
								195,
								382
							],
							"name": "SCTERC20Token",
							"nameLocation": "325:13:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 31,
										"nodeType": "Block",
										"src": "518:2:0",
										"statements": []
									},
									"id": 32,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "534354",
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "426:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_b2b1dc3929a2664c613672dce30cd0d6fe6b6e782ad9ee21092964c70aaaffa9",
														"typeString": "literal_string \"SCT\""
													},
													"value": "SCT"
												},
												{
													"hexValue": "534354",
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "433:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_b2b1dc3929a2664c613672dce30cd0d6fe6b6e782ad9ee21092964c70aaaffa9",
														"typeString": "literal_string \"SCT\""
													},
													"value": "SCT"
												},
												{
													"hexValue": "39",
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "440:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_9_by_1",
														"typeString": "int_const 9"
													},
													"value": "9"
												}
											],
											"id": 21,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 17,
												"name": "ERC20",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2096,
												"src": "420:5:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "420:22:0"
										},
										{
											"arguments": [
												{
													"hexValue": "534354",
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "459:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_b2b1dc3929a2664c613672dce30cd0d6fe6b6e782ad9ee21092964c70aaaffa9",
														"typeString": "literal_string \"SCT\""
													},
													"value": "SCT"
												}
											],
											"id": 24,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 22,
												"name": "ERC20Permit",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1189,
												"src": "447:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "447:18:0"
										},
										{
											"arguments": [
												{
													"arguments": [
														{
															"id": 27,
															"name": "_authority",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 15,
															"src": "506:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 26,
														"name": "ISolidDaoManagement",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "486:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_ISolidDaoManagement_$360_$",
															"typeString": "type(contract ISolidDaoManagement)"
														}
													},
													"id": 28,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "486:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												}
											],
											"id": 29,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 25,
												"name": "SolidDaoManaged",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1299,
												"src": "470:15:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "470:48:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "_authority",
												"nameLocation": "404:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "396:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "396:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "395:20:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "518:0:0"
									},
									"scope": 117,
									"src": "384:136:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										268
									],
									"body": {
										"id": 47,
										"nodeType": "Block",
										"src": "603:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 43,
															"name": "account_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "619:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 44,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 36,
															"src": "629:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 42,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1913,
														"src": "613:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "613:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "613:24:0"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 48,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 40,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 39,
												"name": "onlyVault",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1280,
												"src": "593:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "593:9:0"
										}
									],
									"name": "mint",
									"nameLocation": "535:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 38,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "584:8:0"
									},
									"parameters": {
										"id": 37,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 34,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "548:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "540:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "540:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 36,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "566:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 48,
												"src": "558:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 35,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "558:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:35:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "603:0:0"
									},
									"scope": 117,
									"src": "526:118:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										273
									],
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "698:42:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 55,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "714:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "714:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 57,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 50,
															"src": "726:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 54,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "708:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 58,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "708:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 59,
												"nodeType": "ExpressionStatement",
												"src": "708:25:0"
											}
										]
									},
									"functionSelector": "42966c68",
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "659:4:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 52,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "689:8:0"
									},
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "672:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "664:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 49,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "664:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "663:16:0"
									},
									"returnParameters": {
										"id": 53,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "698:0:0"
									},
									"scope": 117,
									"src": "650:90:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										280
									],
									"body": {
										"id": 74,
										"nodeType": "Block",
										"src": "817:45:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 70,
															"name": "account_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 63,
															"src": "837:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 71,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 65,
															"src": "847:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 69,
														"name": "_burnFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 116,
														"src": "827:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 72,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "827:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 73,
												"nodeType": "ExpressionStatement",
												"src": "827:28:0"
											}
										]
									},
									"functionSelector": "79cc6790",
									"id": 75,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "755:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 67,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "808:8:0"
									},
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "772:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "764:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 62,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "764:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "790:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 75,
												"src": "782:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 64,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "782:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "763:35:0"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "817:0:0"
									},
									"scope": 117,
									"src": "746:116:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 115,
										"nodeType": "Block",
										"src": "931:290:0",
										"statements": [
											{
												"assignments": [
													83
												],
												"declarations": [
													{
														"constant": false,
														"id": 83,
														"mutability": "mutable",
														"name": "senderAllowance",
														"nameLocation": "949:15:0",
														"nodeType": "VariableDeclaration",
														"scope": 115,
														"src": "941:23:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 82,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "941:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 89,
												"initialValue": {
													"arguments": [
														{
															"id": 85,
															"name": "account_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "977:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 86,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "987:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 87,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "987:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 84,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1652,
														"src": "967:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 88,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "967:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "941:57:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 95,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 93,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 91,
																	"name": "senderAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 83,
																	"src": "1016:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 92,
																	"name": "amount_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 79,
																	"src": "1034:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1016:25:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"hexValue": "30",
																"id": 94,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1045:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1016:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e6365",
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1048:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db",
																"typeString": "literal_string \"ERC20: burn amount exceeds allowance\""
															},
															"value": "ERC20: burn amount exceeds allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a287c363786607a1457a2d9d12fa61c0073358e02d76b4035fc2c2d86a19c0db",
																"typeString": "literal_string \"ERC20: burn amount exceeds allowance\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1008:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1008:79:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "1008:79:0"
											},
											{
												"expression": {
													"id": 101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 99,
														"name": "senderAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 83,
														"src": "1097:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 100,
														"name": "amount_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 79,
														"src": "1116:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1097:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 102,
												"nodeType": "ExpressionStatement",
												"src": "1097:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 104,
															"name": "account_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1142:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 105,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1152:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1152:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 107,
															"name": "senderAllowance",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 83,
															"src": "1164:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 103,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "1133:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1133:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 109,
												"nodeType": "ExpressionStatement",
												"src": "1133:47:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 111,
															"name": "account_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 77,
															"src": "1196:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 112,
															"name": "amount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 79,
															"src": "1206:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 110,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1985,
														"src": "1190:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1190:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 114,
												"nodeType": "ExpressionStatement",
												"src": "1190:24:0"
											}
										]
									},
									"id": 116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burnFrom",
									"nameLocation": "877:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 77,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "895:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "887:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 76,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "887:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 79,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "913:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "905:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 78,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "905:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "886:35:0"
									},
									"returnParameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "931:0:0"
									},
									"scope": 117,
									"src": "868:353:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 118,
							"src": "316:907:0",
							"usedErrors": []
						}
					],
					"src": "33:1191:0"
				},
				"id": 0
			},
			"interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							195
						]
					},
					"id": 196,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 119,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "106:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 120,
								"nodeType": "StructuredDocumentation",
								"src": "131:70:1",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 195,
							"linearizedBaseContracts": [
								195
							],
							"name": "IERC20",
							"nameLocation": "212:6:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "225:66:1",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 126,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "305:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "316:2:1"
									},
									"returnParameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "342:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "342:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "341:9:1"
									},
									"scope": 195,
									"src": "296:55:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "357:72:1",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 134,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "443:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "461:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "453:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "453:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "452:17:1"
									},
									"returnParameters": {
										"id": 133,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 132,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 134,
												"src": "493:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 131,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "493:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "492:9:1"
									},
									"scope": 195,
									"src": "434:68:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 135,
										"nodeType": "StructuredDocumentation",
										"src": "508:202:1",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 144,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "724:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 137,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "741:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "733:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 136,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "733:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "753:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "745:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "745:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "732:28:1"
									},
									"returnParameters": {
										"id": 143,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 142,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 144,
												"src": "779:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 141,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "779:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "778:6:1"
									},
									"scope": 195,
									"src": "715:70:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 145,
										"nodeType": "StructuredDocumentation",
										"src": "791:264:1",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1069:9:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1087:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1079:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 146,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1079:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1102:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1094:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1078:32:1"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "1134:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1134:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1133:9:1"
									},
									"scope": 195,
									"src": "1060:83:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "1149:642:1",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 164,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "1805:7:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 157,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1821:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "1813:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 156,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1813:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1838:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "1830:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 158,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1812:33:1"
									},
									"returnParameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 164,
												"src": "1864:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 161,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1864:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1863:6:1"
									},
									"scope": 195,
									"src": "1796:74:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 165,
										"nodeType": "StructuredDocumentation",
										"src": "1876:287:1",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 176,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2177:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2207:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "2199:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 166,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2199:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2229:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "2221:10:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2221:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2249:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "2241:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 170,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2241:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:72:1"
									},
									"returnParameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 176,
												"src": "2280:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 173,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2280:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2279:6:1"
									},
									"scope": 195,
									"src": "2168:118:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 177,
										"nodeType": "StructuredDocumentation",
										"src": "2292:158:1",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 185,
									"name": "Transfer",
									"nameLocation": "2461:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2486:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "2470:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2470:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 181,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2508:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "2492:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2492:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 183,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2520:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 185,
												"src": "2512:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2469:57:1"
									},
									"src": "2455:72:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 186,
										"nodeType": "StructuredDocumentation",
										"src": "2533:148:1",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 194,
									"name": "Approval",
									"nameLocation": "2692:8:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2717:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2701:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2701:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2740:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2724:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2757:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "2749:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2749:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2700:63:1"
									},
									"src": "2686:78:1"
								}
							],
							"scope": 196,
							"src": "202:2564:1",
							"usedErrors": []
						}
					],
					"src": "106:2660:1"
				},
				"id": 1
			},
			"interfaces/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							195
						],
						"IERC20Metadata": [
							220
						]
					},
					"id": 221,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 197,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "110:23:2"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 198,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 221,
							"sourceUnit": 196,
							"src": "135:22:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 200,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 195,
										"src": "304:6:2"
									},
									"id": 201,
									"nodeType": "InheritanceSpecifier",
									"src": "304:6:2"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 199,
								"nodeType": "StructuredDocumentation",
								"src": "159:116:2",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 220,
							"linearizedBaseContracts": [
								220,
								195
							],
							"name": "IERC20Metadata",
							"nameLocation": "286:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "317:54:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "385:4:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "389:2:2"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "415:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 204,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "415:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "414:15:2"
									},
									"scope": 220,
									"src": "376:54:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "436:56:2",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 213,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "506:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "512:2:2"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "538:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 210,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "538:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "537:15:2"
									},
									"scope": 220,
									"src": "497:56:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "559:65:2",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "638:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "646:2:2"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 217,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "672:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 216,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "672:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "671:7:2"
									},
									"scope": 220,
									"src": "629:50:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 221,
							"src": "276:405:2",
							"usedErrors": []
						}
					],
					"src": "110:571:2"
				},
				"id": 2
			},
			"interfaces/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "interfaces/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							256
						]
					},
					"id": 257,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 222,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "114:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 223,
								"nodeType": "StructuredDocumentation",
								"src": "139:480:3",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": false,
							"id": 256,
							"linearizedBaseContracts": [
								256
							],
							"name": "IERC20Permit",
							"nameLocation": "630:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 224,
										"nodeType": "StructuredDocumentation",
										"src": "649:792:3",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."
									},
									"functionSelector": "d505accf",
									"id": 241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1455:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 226,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 225,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1471:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1502:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1494:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1494:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1527:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1519:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1519:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1550:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1542:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 231,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1574:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1568:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 233,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1568:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1593:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1585:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 235,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1585:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1612:1:3",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "1604:9:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 237,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1604:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1461:158:3"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1628:0:3"
									},
									"scope": 256,
									"src": "1446:183:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "1635:294:3",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 249,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "1943:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 244,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1958:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1950:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1950:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1949:15:3"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 249,
												"src": "1988:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1988:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1987:9:3"
									},
									"scope": 256,
									"src": "1934:63:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 250,
										"nodeType": "StructuredDocumentation",
										"src": "2003:128:3",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 255,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2198:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 251,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2214:2:3"
									},
									"returnParameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 253,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 255,
												"src": "2240:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 252,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2240:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2239:9:3"
									},
									"scope": 256,
									"src": "2189:60:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 257,
							"src": "620:1631:3",
							"usedErrors": []
						}
					],
					"src": "114:2137:3"
				},
				"id": 3
			},
			"interfaces/ISCT.sol": {
				"ast": {
					"absolutePath": "interfaces/ISCT.sol",
					"exportedSymbols": {
						"IERC20": [
							195
						],
						"ISCT": [
							281
						]
					},
					"id": 282,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 258,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:4"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 259,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 282,
							"sourceUnit": 196,
							"src": "57:22:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 260,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 195,
										"src": "99:6:4"
									},
									"id": 261,
									"nodeType": "InheritanceSpecifier",
									"src": "99:6:4"
								}
							],
							"canonicalName": "ISCT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 281,
							"linearizedBaseContracts": [
								281,
								195
							],
							"name": "ISCT",
							"nameLocation": "91:4:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "40c10f19",
									"id": 268,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "119:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 266,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "132:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "124:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 262,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "124:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "150:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "142:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 264,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "142:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "123:35:4"
									},
									"returnParameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "167:0:4"
									},
									"scope": 281,
									"src": "110:58:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "42966c68",
									"id": 273,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "181:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "194:6:4",
												"nodeType": "VariableDeclaration",
												"scope": 273,
												"src": "186:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "186:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "185:16:4"
									},
									"returnParameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "210:0:4"
									},
									"scope": 281,
									"src": "172:39:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "79cc6790",
									"id": 280,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "224:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "account_",
												"nameLocation": "241:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "233:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "233:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "amount_",
												"nameLocation": "259:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "251:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 276,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "251:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "232:35:4"
									},
									"returnParameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "276:0:4"
									},
									"scope": 281,
									"src": "215:62:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 282,
							"src": "81:198:4",
							"usedErrors": []
						}
					],
					"src": "32:248:4"
				},
				"id": 4
			},
			"interfaces/ISolidDaoManagement.sol": {
				"ast": {
					"absolutePath": "interfaces/ISolidDaoManagement.sol",
					"exportedSymbols": {
						"ISolidDaoManagement": [
							360
						]
					},
					"id": 361,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 283,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISolidDaoManagement",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 360,
							"linearizedBaseContracts": [
								360
							],
							"name": "ISolidDaoManagement",
							"nameLocation": "67:19:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "4f337dcbb2512f18373c1f72d990a2f0a6ee5024b04007c52afd01eb73374a89",
									"id": 291,
									"name": "GovernorPushed",
									"nameLocation": "104:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 285,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "135:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "119:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 284,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "119:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 287,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "157:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "141:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "141:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"indexed": false,
												"mutability": "mutable",
												"name": "_effectiveImmediately",
												"nameLocation": "166:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "161:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 288,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "161:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "118:70:5"
									},
									"src": "98:91:5"
								},
								{
									"anonymous": false,
									"eventSelector": "de655975891e8f09671597b37bd4d663bcc5c21dc6d7641b33cdf85fbe15d08b",
									"id": 299,
									"name": "GuardianPushed",
									"nameLocation": "200:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 293,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "231:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "215:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 292,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "215:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 295,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "253:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "237:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "237:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"indexed": false,
												"mutability": "mutable",
												"name": "_effectiveImmediately",
												"nameLocation": "262:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 299,
												"src": "257:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 296,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "257:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "214:70:5"
									},
									"src": "194:91:5"
								},
								{
									"anonymous": false,
									"eventSelector": "90a5902a45c24aae553d5aff384ca16d6560f08d74c9784a4fbd2796d9e13f2b",
									"id": 307,
									"name": "PolicyPushed",
									"nameLocation": "300:12:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "329:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "313:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "313:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "351:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "335:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "335:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"indexed": false,
												"mutability": "mutable",
												"name": "_effectiveImmediately",
												"nameLocation": "360:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "355:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 304,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "355:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "312:70:5"
									},
									"src": "294:89:5"
								},
								{
									"anonymous": false,
									"eventSelector": "05a80f5053574d6a62733e1692e8cbcfaf927dc82df0a7267ea2e489a7cc18ff",
									"id": 315,
									"name": "VaultPushed",
									"nameLocation": "398:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "426:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "410:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "410:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "448:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "432:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "432:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"indexed": false,
												"mutability": "mutable",
												"name": "_effectiveImmediately",
												"nameLocation": "457:21:5",
												"nodeType": "VariableDeclaration",
												"scope": 315,
												"src": "452:26:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 312,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "452:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "409:70:5"
									},
									"src": "392:88:5"
								},
								{
									"anonymous": false,
									"eventSelector": "ffd6fed33fe8ec1016718bdd5d04ae6fecd9aba0da6578807daaaa7fc3d16826",
									"id": 321,
									"name": "GovernorPulled",
									"nameLocation": "496:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "527:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "511:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "511:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 319,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "549:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "533:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "533:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "510:42:5"
									},
									"src": "490:63:5"
								},
								{
									"anonymous": false,
									"eventSelector": "0960fb9900fb8096216606c4f7fc2fce5d08cc0c82da55cec8619b66b5238481",
									"id": 327,
									"name": "GuardianPulled",
									"nameLocation": "564:14:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "595:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "579:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "579:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "617:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "601:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "578:42:5"
									},
									"src": "558:63:5"
								},
								{
									"anonymous": false,
									"eventSelector": "64d2fa522b403ca222efff0c7ad07d2ef45472a45e5770918bdfa9a2845d29a8",
									"id": 333,
									"name": "PolicyPulled",
									"nameLocation": "632:12:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "661:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "645:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "645:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 331,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "683:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 333,
												"src": "667:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 330,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "644:42:5"
									},
									"src": "626:61:5"
								},
								{
									"anonymous": false,
									"eventSelector": "3d08e01e3b8340be6ca709db7a9321448661a1f490da4d7f3eb03d84fe730953",
									"id": 339,
									"name": "VaultPulled",
									"nameLocation": "698:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 338,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "726:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "710:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "710:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 337,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "748:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 339,
												"src": "732:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 336,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "732:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "709:42:5"
									},
									"src": "692:60:5"
								},
								{
									"functionSelector": "0c340a24",
									"id": 344,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "governor",
									"nameLocation": "771:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "779:2:5"
									},
									"returnParameters": {
										"id": 343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 344,
												"src": "805:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 341,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "805:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "804:9:5"
									},
									"scope": 360,
									"src": "762:52:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "452a9320",
									"id": 349,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "guardian",
									"nameLocation": "828:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "836:2:5"
									},
									"returnParameters": {
										"id": 348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "862:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "862:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "861:9:5"
									},
									"scope": 360,
									"src": "819:52:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "0505c8c9",
									"id": 354,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "policy",
									"nameLocation": "885:6:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "891:2:5"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 354,
												"src": "917:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 351,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "917:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "916:9:5"
									},
									"scope": 360,
									"src": "876:50:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "fbfa77cf",
									"id": 359,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "vault",
									"nameLocation": "940:5:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "945:2:5"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 359,
												"src": "971:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:5"
									},
									"scope": 360,
									"src": "931:49:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 361,
							"src": "57:925:5",
							"usedErrors": []
						}
					],
					"src": "32:950:5"
				},
				"id": 5
			},
			"lib/Context.sol": {
				"ast": {
					"absolutePath": "lib/Context.sol",
					"exportedSymbols": {
						"Context": [
							382
						]
					},
					"id": 383,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 362,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:6"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 363,
								"nodeType": "StructuredDocumentation",
								"src": "111:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 382,
							"linearizedBaseContracts": [
								382
							],
							"name": "Context",
							"nameLocation": "626:7:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 371,
										"nodeType": "Block",
										"src": "702:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 368,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "719:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 369,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "719:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 367,
												"id": 370,
												"nodeType": "Return",
												"src": "712:17:6"
											}
										]
									},
									"id": 372,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "649:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 364,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "659:2:6"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 372,
												"src": "693:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 365,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "693:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:9:6"
									},
									"scope": 382,
									"src": "640:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 380,
										"nodeType": "Block",
										"src": "809:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 377,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "826:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 378,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "826:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 376,
												"id": 379,
												"nodeType": "Return",
												"src": "819:15:6"
											}
										]
									},
									"id": 381,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "751:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "759:2:6"
									},
									"returnParameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 375,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 381,
												"src": "793:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 374,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "793:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "792:16:6"
									},
									"scope": 382,
									"src": "742:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 383,
							"src": "608:235:6",
							"usedErrors": []
						}
					],
					"src": "86:757:6"
				},
				"id": 6
			},
			"lib/Counters.sol": {
				"ast": {
					"absolutePath": "lib/Counters.sol",
					"exportedSymbols": {
						"Counters": [
							456
						]
					},
					"id": 457,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 384,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Counters",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 385,
								"nodeType": "StructuredDocumentation",
								"src": "112:311:7",
								"text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"
							},
							"fullyImplemented": true,
							"id": 456,
							"linearizedBaseContracts": [
								456
							],
							"name": "Counters",
							"nameLocation": "432:8:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Counters.Counter",
									"id": 388,
									"members": [
										{
											"constant": false,
											"id": 387,
											"mutability": "mutable",
											"name": "_value",
											"nameLocation": "794:6:7",
											"nodeType": "VariableDeclaration",
											"scope": 388,
											"src": "786:14:7",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 386,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "786:7:7",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Counter",
									"nameLocation": "454:7:7",
									"nodeType": "StructDefinition",
									"scope": 456,
									"src": "447:374:7",
									"visibility": "public"
								},
								{
									"body": {
										"id": 399,
										"nodeType": "Block",
										"src": "901:38:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 396,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 391,
														"src": "918:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 397,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 387,
													"src": "918:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 398,
												"nodeType": "Return",
												"src": "911:21:7"
											}
										]
									},
									"id": 400,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "current",
									"nameLocation": "836:7:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "860:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "844:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 390,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 389,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 388,
														"src": "844:7:7"
													},
													"referencedDeclaration": 388,
													"src": "844:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "843:25:7"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 400,
												"src": "892:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "892:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "891:9:7"
									},
									"scope": 456,
									"src": "827:112:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 413,
										"nodeType": "Block",
										"src": "998:70:7",
										"statements": [
											{
												"id": 412,
												"nodeType": "UncheckedBlock",
												"src": "1008:54:7",
												"statements": [
													{
														"expression": {
															"id": 410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 406,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 403,
																	"src": "1032:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 408,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 387,
																"src": "1032:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"hexValue": "31",
																"id": 409,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1050:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "1032:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 411,
														"nodeType": "ExpressionStatement",
														"src": "1032:19:7"
													}
												]
											}
										]
									},
									"id": 414,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "954:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "980:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 414,
												"src": "964:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 402,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 401,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 388,
														"src": "964:7:7"
													},
													"referencedDeclaration": 388,
													"src": "964:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "963:25:7"
									},
									"returnParameters": {
										"id": 405,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:0:7"
									},
									"scope": 456,
									"src": "945:123:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 441,
										"nodeType": "Block",
										"src": "1127:176:7",
										"statements": [
											{
												"assignments": [
													421
												],
												"declarations": [
													{
														"constant": false,
														"id": 421,
														"mutability": "mutable",
														"name": "value",
														"nameLocation": "1145:5:7",
														"nodeType": "VariableDeclaration",
														"scope": 441,
														"src": "1137:13:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 420,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1137:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"expression": {
														"id": 422,
														"name": "counter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "1153:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
															"typeString": "struct Counters.Counter storage pointer"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "_value",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 387,
													"src": "1153:14:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1137:30:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 428,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 426,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 421,
																"src": "1185:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 427,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1193:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1185:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436f756e7465723a2064656372656d656e74206f766572666c6f77",
															"id": 429,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1196:29:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															},
															"value": "Counter: decrement overflow"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f",
																"typeString": "literal_string \"Counter: decrement overflow\""
															}
														],
														"id": 425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1177:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1177:49:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 431,
												"nodeType": "ExpressionStatement",
												"src": "1177:49:7"
											},
											{
												"id": 440,
												"nodeType": "UncheckedBlock",
												"src": "1236:61:7",
												"statements": [
													{
														"expression": {
															"id": 438,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"expression": {
																	"id": 432,
																	"name": "counter",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 417,
																	"src": "1260:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																		"typeString": "struct Counters.Counter storage pointer"
																	}
																},
																"id": 434,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"memberName": "_value",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 387,
																"src": "1260:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 435,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 421,
																	"src": "1277:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1285:1:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "1277:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1260:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 439,
														"nodeType": "ExpressionStatement",
														"src": "1260:26:7"
													}
												]
											}
										]
									},
									"id": 442,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decrement",
									"nameLocation": "1083:9:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1109:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 442,
												"src": "1093:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 416,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 415,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 388,
														"src": "1093:7:7"
													},
													"referencedDeclaration": 388,
													"src": "1093:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1092:25:7"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1127:0:7"
									},
									"scope": 456,
									"src": "1074:229:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "1358:35:7",
										"statements": [
											{
												"expression": {
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 448,
															"name": "counter",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 445,
															"src": "1368:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 450,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberName": "_value",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 387,
														"src": "1368:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 451,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1385:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1368:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 453,
												"nodeType": "ExpressionStatement",
												"src": "1368:18:7"
											}
										]
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "reset",
									"nameLocation": "1318:5:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 445,
												"mutability": "mutable",
												"name": "counter",
												"nameLocation": "1340:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 455,
												"src": "1324:23:7",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
													"typeString": "struct Counters.Counter"
												},
												"typeName": {
													"id": 444,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 443,
														"name": "Counter",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 388,
														"src": "1324:7:7"
													},
													"referencedDeclaration": 388,
													"src": "1324:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
														"typeString": "struct Counters.Counter"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1323:25:7"
									},
									"returnParameters": {
										"id": 447,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1358:0:7"
									},
									"scope": 456,
									"src": "1309:84:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 457,
							"src": "424:971:7",
							"usedErrors": []
						}
					],
					"src": "87:1308:7"
				},
				"id": 7
			},
			"lib/ECDSA.sol": {
				"ast": {
					"absolutePath": "lib/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							863
						],
						"Strings": [
							1502
						]
					},
					"id": 864,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 458,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "112:23:8"
						},
						{
							"absolutePath": "lib/Strings.sol",
							"file": "./Strings.sol",
							"id": 459,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 864,
							"sourceUnit": 1503,
							"src": "137:23:8",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 460,
								"nodeType": "StructuredDocumentation",
								"src": "162:205:8",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 863,
							"linearizedBaseContracts": [
								863
							],
							"name": "ECDSA",
							"nameLocation": "376:5:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 466,
									"members": [
										{
											"id": 461,
											"name": "NoError",
											"nameLocation": "416:7:8",
											"nodeType": "EnumValue",
											"src": "416:7:8"
										},
										{
											"id": 462,
											"name": "InvalidSignature",
											"nameLocation": "433:16:8",
											"nodeType": "EnumValue",
											"src": "433:16:8"
										},
										{
											"id": 463,
											"name": "InvalidSignatureLength",
											"nameLocation": "459:22:8",
											"nodeType": "EnumValue",
											"src": "459:22:8"
										},
										{
											"id": 464,
											"name": "InvalidSignatureS",
											"nameLocation": "491:17:8",
											"nodeType": "EnumValue",
											"src": "491:17:8"
										},
										{
											"id": 465,
											"name": "InvalidSignatureV",
											"nameLocation": "518:17:8",
											"nodeType": "EnumValue",
											"src": "518:17:8"
										}
									],
									"name": "RecoverError",
									"nameLocation": "393:12:8",
									"nodeType": "EnumDefinition",
									"src": "388:153:8"
								},
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "601:577:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$466",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 472,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 469,
														"src": "615:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 473,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "624:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 474,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 461,
														"src": "624:20:8",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "615:29:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 481,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 478,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 469,
															"src": "711:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 479,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 466,
																"src": "720:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 480,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 462,
															"src": "720:29:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "711:38:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 487,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 469,
																"src": "820:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$466",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 488,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 466,
																	"src": "829:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 463,
																"src": "829:35:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$466",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "820:44:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$466",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 496,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "942:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$466",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 497,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 466,
																		"src": "951:12:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 464,
																	"src": "951:30:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$466",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "942:39:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_enum$_RecoverError_$466",
																		"typeString": "enum ECDSA.RecoverError"
																	},
																	"id": 508,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 505,
																		"name": "error",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 469,
																		"src": "1062:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$466",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"expression": {
																			"id": 506,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "1071:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 507,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 465,
																		"src": "1071:30:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$466",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	"src": "1062:39:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 514,
																"nodeType": "IfStatement",
																"src": "1058:114:8",
																"trueBody": {
																	"id": 513,
																	"nodeType": "Block",
																	"src": "1103:69:8",
																	"statements": [
																		{
																			"expression": {
																				"arguments": [
																					{
																						"hexValue": "45434453413a20696e76616c6964207369676e6174757265202776272076616c7565",
																						"id": 510,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "string",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "1124:36:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						},
																						"value": "ECDSA: invalid signature 'v' value"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_stringliteral_8522ee1b53216f595394db8e80a64d9e7d9bd512c0811c18debe9f40858597e4",
																							"typeString": "literal_string \"ECDSA: invalid signature 'v' value\""
																						}
																					],
																					"id": 509,
																					"name": "revert",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [
																						4294967277,
																						4294967277
																					],
																					"referencedDeclaration": 4294967277,
																					"src": "1117:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																						"typeString": "function (string memory) pure"
																					}
																				},
																				"id": 511,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1117:44:8",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$__$",
																					"typeString": "tuple()"
																				}
																			},
																			"id": 512,
																			"nodeType": "ExpressionStatement",
																			"src": "1117:44:8"
																		}
																	]
																}
															},
															"id": 515,
															"nodeType": "IfStatement",
															"src": "938:234:8",
															"trueBody": {
																"id": 504,
																"nodeType": "Block",
																"src": "983:69:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c7565",
																					"id": 501,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "1004:36:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					},
																					"value": "ECDSA: invalid signature 's' value"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
																						"typeString": "literal_string \"ECDSA: invalid signature 's' value\""
																					}
																				],
																				"id": 500,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "997:6:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 502,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "997:44:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 503,
																		"nodeType": "ExpressionStatement",
																		"src": "997:44:8"
																	}
																]
															}
														},
														"id": 516,
														"nodeType": "IfStatement",
														"src": "816:356:8",
														"trueBody": {
															"id": 495,
															"nodeType": "Block",
															"src": "866:66:8",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
																				"id": 492,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "string",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "887:33:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				},
																				"value": "ECDSA: invalid signature length"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
																					"typeString": "literal_string \"ECDSA: invalid signature length\""
																				}
																			],
																			"id": 491,
																			"name": "revert",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				4294967277,
																				4294967277
																			],
																			"referencedDeclaration": 4294967277,
																			"src": "880:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																				"typeString": "function (string memory) pure"
																			}
																		},
																		"id": 493,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "880:41:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 494,
																	"nodeType": "ExpressionStatement",
																	"src": "880:41:8"
																}
															]
														}
													},
													"id": 517,
													"nodeType": "IfStatement",
													"src": "707:465:8",
													"trueBody": {
														"id": 486,
														"nodeType": "Block",
														"src": "751:59:8",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "45434453413a20696e76616c6964207369676e6174757265",
																			"id": 483,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "string",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "772:26:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			},
																			"value": "ECDSA: invalid signature"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
																				"typeString": "literal_string \"ECDSA: invalid signature\""
																			}
																		],
																		"id": 482,
																		"name": "revert",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			4294967277,
																			4294967277
																		],
																		"referencedDeclaration": 4294967277,
																		"src": "765:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																			"typeString": "function (string memory) pure"
																		}
																	},
																	"id": 484,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "765:34:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 485,
																"nodeType": "ExpressionStatement",
																"src": "765:34:8"
															}
														]
													}
												},
												"id": 518,
												"nodeType": "IfStatement",
												"src": "611:561:8",
												"trueBody": {
													"id": 477,
													"nodeType": "Block",
													"src": "646:55:8",
													"statements": [
														{
															"functionReturnParameters": 471,
															"id": 476,
															"nodeType": "Return",
															"src": "660:7:8"
														}
													]
												}
											}
										]
									},
									"id": 520,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "556:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "581:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 520,
												"src": "568:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$466",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 467,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 466,
														"src": "568:12:8"
													},
													"referencedDeclaration": 466,
													"src": "568:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$466",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "567:20:8"
									},
									"returnParameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "601:0:8"
									},
									"scope": 863,
									"src": "547:631:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 584,
										"nodeType": "Block",
										"src": "2346:1175:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 536,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 533,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 525,
															"src": "2553:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 534,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2553:16:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 535,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2573:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2553:22:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 558,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 555,
																"name": "signature",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 525,
																"src": "3035:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3035:16:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "3634",
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3055:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_64_by_1",
																"typeString": "int_const 64"
															},
															"value": "64"
														},
														"src": "3035:22:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 581,
														"nodeType": "Block",
														"src": "3434:81:8",
														"statements": [
															{
																"expression": {
																	"components": [
																		{
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 575,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "3464:1:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 574,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "3456:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 573,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "3456:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 576,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "3456:10:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"expression": {
																				"id": 577,
																				"name": "RecoverError",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 466,
																				"src": "3468:12:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																					"typeString": "type(enum ECDSA.RecoverError)"
																				}
																			},
																			"id": 578,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "InvalidSignatureLength",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 463,
																			"src": "3468:35:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_enum$_RecoverError_$466",
																				"typeString": "enum ECDSA.RecoverError"
																			}
																		}
																	],
																	"id": 579,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "3455:49:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																		"typeString": "tuple(address,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 532,
																"id": 580,
																"nodeType": "Return",
																"src": "3448:56:8"
															}
														]
													},
													"id": 582,
													"nodeType": "IfStatement",
													"src": "3031:484:8",
													"trueBody": {
														"id": 572,
														"nodeType": "Block",
														"src": "3059:369:8",
														"statements": [
															{
																"assignments": [
																	560
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 560,
																		"mutability": "mutable",
																		"name": "r",
																		"nameLocation": "3081:1:8",
																		"nodeType": "VariableDeclaration",
																		"scope": 572,
																		"src": "3073:9:8",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 559,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "3073:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 561,
																"nodeType": "VariableDeclarationStatement",
																"src": "3073:9:8"
															},
															{
																"assignments": [
																	563
																],
																"declarations": [
																	{
																		"constant": false,
																		"id": 563,
																		"mutability": "mutable",
																		"name": "vs",
																		"nameLocation": "3104:2:8",
																		"nodeType": "VariableDeclaration",
																		"scope": 572,
																		"src": "3096:10:8",
																		"stateVariable": false,
																		"storageLocation": "default",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		"typeName": {
																			"id": 562,
																			"name": "bytes32",
																			"nodeType": "ElementaryTypeName",
																			"src": "3096:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"visibility": "internal"
																	}
																],
																"id": 564,
																"nodeType": "VariableDeclarationStatement",
																"src": "3096:10:8"
															},
															{
																"AST": {
																	"nodeType": "YulBlock",
																	"src": "3260:114:8",
																	"statements": [
																		{
																			"nodeType": "YulAssignment",
																			"src": "3278:32:8",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3293:9:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3304:4:8",
																								"type": "",
																								"value": "0x20"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3289:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3289:20:8"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3283:5:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3283:27:8"
																			},
																			"variableNames": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "3278:1:8"
																				}
																			]
																		},
																		{
																			"nodeType": "YulAssignment",
																			"src": "3327:33:8",
																			"value": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "signature",
																								"nodeType": "YulIdentifier",
																								"src": "3343:9:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3354:4:8",
																								"type": "",
																								"value": "0x40"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "3339:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3339:20:8"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3333:5:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3333:27:8"
																			},
																			"variableNames": [
																				{
																					"name": "vs",
																					"nodeType": "YulIdentifier",
																					"src": "3327:2:8"
																				}
																			]
																		}
																	]
																},
																"evmVersion": "london",
																"externalReferences": [
																	{
																		"declaration": 560,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3278:1:8",
																		"valueSize": 1
																	},
																	{
																		"declaration": 525,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3293:9:8",
																		"valueSize": 1
																	},
																	{
																		"declaration": 525,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3343:9:8",
																		"valueSize": 1
																	},
																	{
																		"declaration": 563,
																		"isOffset": false,
																		"isSlot": false,
																		"src": "3327:2:8",
																		"valueSize": 1
																	}
																],
																"id": 565,
																"nodeType": "InlineAssembly",
																"src": "3251:123:8"
															},
															{
																"expression": {
																	"arguments": [
																		{
																			"id": 567,
																			"name": "hash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 523,
																			"src": "3405:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 568,
																			"name": "r",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 560,
																			"src": "3411:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 569,
																			"name": "vs",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 563,
																			"src": "3414:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 566,
																		"name": "tryRecover",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			585,
																			659,
																			770
																		],
																		"referencedDeclaration": 659,
																		"src": "3394:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
																			"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 570,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3394:23:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																		"typeString": "tuple(address,enum ECDSA.RecoverError)"
																	}
																},
																"functionReturnParameters": 532,
																"id": 571,
																"nodeType": "Return",
																"src": "3387:30:8"
															}
														]
													}
												},
												"id": 583,
												"nodeType": "IfStatement",
												"src": "2549:966:8",
												"trueBody": {
													"id": 554,
													"nodeType": "Block",
													"src": "2577:448:8",
													"statements": [
														{
															"assignments": [
																538
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 538,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2599:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 554,
																	"src": "2591:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 537,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2591:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 539,
															"nodeType": "VariableDeclarationStatement",
															"src": "2591:9:8"
														},
														{
															"assignments": [
																541
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 541,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2622:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 554,
																	"src": "2614:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 540,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2614:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 542,
															"nodeType": "VariableDeclarationStatement",
															"src": "2614:9:8"
														},
														{
															"assignments": [
																544
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 544,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2643:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 554,
																	"src": "2637:7:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 543,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2637:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 545,
															"nodeType": "VariableDeclarationStatement",
															"src": "2637:7:8"
														},
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "2798:171:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2816:32:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2831:9:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2842:4:8",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2827:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2827:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2821:5:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2821:27:8"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nodeType": "YulIdentifier",
																				"src": "2816:1:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2865:32:8",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nodeType": "YulIdentifier",
																							"src": "2880:9:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2891:4:8",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2876:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2876:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "2870:5:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2870:27:8"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nodeType": "YulIdentifier",
																				"src": "2865:1:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2914:41:8",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2924:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nodeType": "YulIdentifier",
																									"src": "2937:9:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2948:4:8",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2933:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2933:20:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2927:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2927:27:8"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nodeType": "YulIdentifier",
																				"src": "2919:4:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2919:36:8"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nodeType": "YulIdentifier",
																				"src": "2914:1:8"
																			}
																		]
																	}
																]
															},
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 538,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2816:1:8",
																	"valueSize": 1
																},
																{
																	"declaration": 541,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2865:1:8",
																	"valueSize": 1
																},
																{
																	"declaration": 525,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2831:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 525,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2880:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 525,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2937:9:8",
																	"valueSize": 1
																},
																{
																	"declaration": 544,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2914:1:8",
																	"valueSize": 1
																}
															],
															"id": 546,
															"nodeType": "InlineAssembly",
															"src": "2789:180:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 548,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 523,
																		"src": "3000:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 549,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 544,
																		"src": "3006:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 550,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 538,
																		"src": "3009:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 551,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 541,
																		"src": "3012:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 547,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		585,
																		659,
																		770
																	],
																	"referencedDeclaration": 770,
																	"src": "2989:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
																	}
																},
																"id": 552,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2989:25:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 532,
															"id": 553,
															"nodeType": "Return",
															"src": "2982:32:8"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 521,
										"nodeType": "StructuredDocumentation",
										"src": "1184:1053:8",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"
									},
									"id": 585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2251:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 523,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2270:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2262:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 522,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2262:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 525,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2289:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2276:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 524,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2276:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2261:38:8"
									},
									"returnParameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2323:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2323:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 585,
												"src": "2332:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$466",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 530,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 529,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 466,
														"src": "2332:12:8"
													},
													"referencedDeclaration": 466,
													"src": "2332:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$466",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:23:8"
									},
									"scope": 863,
									"src": "2242:1279:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 611,
										"nodeType": "Block",
										"src": "4394:140:8",
										"statements": [
											{
												"assignments": [
													596,
													599
												],
												"declarations": [
													{
														"constant": false,
														"id": 596,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4413:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 611,
														"src": "4405:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 595,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4405:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 599,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4437:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 611,
														"src": "4424:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 598,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 597,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 466,
																"src": "4424:12:8"
															},
															"referencedDeclaration": 466,
															"src": "4424:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 604,
												"initialValue": {
													"arguments": [
														{
															"id": 601,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "4457:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 602,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 590,
															"src": "4463:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 600,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															585,
															659,
															770
														],
														"referencedDeclaration": 585,
														"src": "4446:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 603,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4446:27:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4404:69:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 606,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 599,
															"src": "4495:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 605,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "4483:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$466_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4483:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 608,
												"nodeType": "ExpressionStatement",
												"src": "4483:18:8"
											},
											{
												"expression": {
													"id": 609,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 596,
													"src": "4518:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 594,
												"id": 610,
												"nodeType": "Return",
												"src": "4511:16:8"
											}
										]
									},
									"documentation": {
										"id": 586,
										"nodeType": "StructuredDocumentation",
										"src": "3527:775:8",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."
									},
									"id": 612,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4316:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4332:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4324:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 587,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4324:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4351:9:8",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4338:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 589,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4338:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4323:38:8"
									},
									"returnParameters": {
										"id": 594,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 593,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 612,
												"src": "4385:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 592,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4385:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4384:9:8"
									},
									"scope": 863,
									"src": "4307:227:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 658,
										"nodeType": "Block",
										"src": "4921:203:8",
										"statements": [
											{
												"assignments": [
													628
												],
												"declarations": [
													{
														"constant": false,
														"id": 628,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "4939:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 658,
														"src": "4931:9:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 627,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4931:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 635,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 634,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 629,
														"name": "vs",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 619,
														"src": "4943:2:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																"id": 632,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4956:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																},
																"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																	"typeString": "int_const 5789...(69 digits omitted)...9967"
																}
															],
															"id": 631,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4948:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_bytes32_$",
																"typeString": "type(bytes32)"
															},
															"typeName": {
																"id": 630,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "4948:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 633,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4948:75:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4943:80:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4931:92:8"
											},
											{
												"assignments": [
													637
												],
												"declarations": [
													{
														"constant": false,
														"id": 637,
														"mutability": "mutable",
														"name": "v",
														"nameLocation": "5039:1:8",
														"nodeType": "VariableDeclaration",
														"scope": 658,
														"src": "5033:7:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 636,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "5033:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 650,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 648,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 645,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"id": 642,
																					"name": "vs",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 619,
																					"src": "5058:2:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 641,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5050:7:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint256_$",
																					"typeString": "type(uint256)"
																				},
																				"typeName": {
																					"id": 640,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "5050:7:8",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 643,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5050:11:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">>",
																		"rightExpression": {
																			"hexValue": "323535",
																			"id": 644,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5065:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_255_by_1",
																				"typeString": "int_const 255"
																			},
																			"value": "255"
																		},
																		"src": "5050:18:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 646,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5049:20:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "3237",
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5072:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_27_by_1",
																	"typeString": "int_const 27"
																},
																"value": "27"
															},
															"src": "5049:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 639,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "5043:5:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_uint8_$",
															"typeString": "type(uint8)"
														},
														"typeName": {
															"id": 638,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "5043:5:8",
															"typeDescriptions": {}
														}
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5043:32:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5033:42:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 652,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 615,
															"src": "5103:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 653,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 637,
															"src": "5109:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 654,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "5112:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 655,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 628,
															"src": "5115:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 651,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															585,
															659,
															770
														],
														"referencedDeclaration": 770,
														"src": "5092:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5092:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 626,
												"id": 657,
												"nodeType": "Return",
												"src": "5085:32:8"
											}
										]
									},
									"documentation": {
										"id": 613,
										"nodeType": "StructuredDocumentation",
										"src": "4540:243:8",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"
									},
									"id": 659,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4797:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4825:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4817:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 614,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4817:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4847:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4839:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 616,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4839:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4866:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4858:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 618,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4858:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4807:67:8"
									},
									"returnParameters": {
										"id": 626,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 622,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4898:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 621,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4898:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 659,
												"src": "4907:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$466",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 624,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 623,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 466,
														"src": "4907:12:8"
													},
													"referencedDeclaration": 466,
													"src": "4907:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$466",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4897:23:8"
									},
									"scope": 863,
									"src": "4788:336:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 688,
										"nodeType": "Block",
										"src": "5405:136:8",
										"statements": [
											{
												"assignments": [
													672,
													675
												],
												"declarations": [
													{
														"constant": false,
														"id": 672,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "5424:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "5416:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 671,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5416:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 675,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "5448:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 688,
														"src": "5435:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 674,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 673,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 466,
																"src": "5435:12:8"
															},
															"referencedDeclaration": 466,
															"src": "5435:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 681,
												"initialValue": {
													"arguments": [
														{
															"id": 677,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 662,
															"src": "5468:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 678,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 664,
															"src": "5474:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 679,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "5477:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 676,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															585,
															659,
															770
														],
														"referencedDeclaration": 659,
														"src": "5457:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5457:23:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5415:65:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 683,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 675,
															"src": "5502:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 682,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "5490:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$466_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5490:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 685,
												"nodeType": "ExpressionStatement",
												"src": "5490:18:8"
											},
											{
												"expression": {
													"id": 686,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 672,
													"src": "5525:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 670,
												"id": 687,
												"nodeType": "Return",
												"src": "5518:16:8"
											}
										]
									},
									"documentation": {
										"id": 660,
										"nodeType": "StructuredDocumentation",
										"src": "5130:154:8",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"
									},
									"id": 689,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "5298:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 662,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5323:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "5315:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 661,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5315:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 664,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5345:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "5337:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 663,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5337:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "5364:2:8",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "5356:10:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 665,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5356:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5305:67:8"
									},
									"returnParameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 689,
												"src": "5396:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 668,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5396:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5395:9:8"
									},
									"scope": 863,
									"src": "5289:252:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 769,
										"nodeType": "Block",
										"src": "5864:1454:8",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 708,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 698,
																"src": "6760:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 707,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6752:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 706,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6752:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 709,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6752:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 710,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6765:66:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6752:79:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 721,
												"nodeType": "IfStatement",
												"src": "6748:161:8",
												"trueBody": {
													"id": 720,
													"nodeType": "Block",
													"src": "6833:76:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 714,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6863:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 713,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6855:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 712,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6855:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6855:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 716,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "6867:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 717,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 464,
																		"src": "6867:30:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$466",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 718,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6854:44:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 705,
															"id": 719,
															"nodeType": "Return",
															"src": "6847:51:8"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 728,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 724,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 722,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "6922:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3237",
															"id": 723,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6927:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_27_by_1",
																"typeString": "int_const 27"
															},
															"value": "27"
														},
														"src": "6922:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 727,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 725,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "6933:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "3238",
															"id": 726,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6938:2:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_28_by_1",
																"typeString": "int_const 28"
															},
															"value": "28"
														},
														"src": "6933:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6922:18:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "6918:100:8",
												"trueBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "6942:76:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 731,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6972:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 730,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6964:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 729,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6964:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 732,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6964:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 733,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "6976:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignatureV",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 465,
																		"src": "6976:30:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$466",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 735,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6963:44:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 705,
															"id": 736,
															"nodeType": "Return",
															"src": "6956:51:8"
														}
													]
												}
											},
											{
												"assignments": [
													740
												],
												"declarations": [
													{
														"constant": false,
														"id": 740,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "7120:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 769,
														"src": "7112:14:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 739,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7112:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 747,
												"initialValue": {
													"arguments": [
														{
															"id": 742,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 692,
															"src": "7139:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 743,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 694,
															"src": "7145:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 744,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 696,
															"src": "7148:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 745,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 698,
															"src": "7151:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 741,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "7129:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 746,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7129:24:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7112:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 748,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "7167:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7185:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 750,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7177:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 749,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7177:7:8",
																"typeDescriptions": {}
															}
														},
														"id": 752,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7177:10:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7167:20:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 763,
												"nodeType": "IfStatement",
												"src": "7163:101:8",
												"trueBody": {
													"id": 762,
													"nodeType": "Block",
													"src": "7189:75:8",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 756,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7219:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 755,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7211:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 754,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7211:7:8",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 757,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7211:10:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 758,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 466,
																			"src": "7223:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 759,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 462,
																		"src": "7223:29:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$466",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	}
																],
																"id": 760,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "7210:43:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError)"
																}
															},
															"functionReturnParameters": 705,
															"id": 761,
															"nodeType": "Return",
															"src": "7203:50:8"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 764,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 740,
															"src": "7282:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 765,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 466,
																"src": "7290:12:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$466_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 766,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 461,
															"src": "7290:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"id": 767,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "7281:30:8",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"functionReturnParameters": 705,
												"id": 768,
												"nodeType": "Return",
												"src": "7274:37:8"
											}
										]
									},
									"documentation": {
										"id": 690,
										"nodeType": "StructuredDocumentation",
										"src": "5547:163:8",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"
									},
									"id": 770,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5724:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5752:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5744:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 691,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5744:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 694,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5772:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5766:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 693,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5766:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 696,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5791:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5783:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 695,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5783:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 698,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5810:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5802:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 697,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5802:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5734:83:8"
									},
									"returnParameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5841:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 700,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5841:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 770,
												"src": "5850:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$466",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 703,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 702,
														"name": "RecoverError",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 466,
														"src": "5850:12:8"
													},
													"referencedDeclaration": 466,
													"src": "5850:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$466",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5840:23:8"
									},
									"scope": 863,
									"src": "5715:1603:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 802,
										"nodeType": "Block",
										"src": "7583:138:8",
										"statements": [
											{
												"assignments": [
													785,
													788
												],
												"declarations": [
													{
														"constant": false,
														"id": 785,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "7602:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 802,
														"src": "7594:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 784,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7594:7:8",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 788,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "7626:5:8",
														"nodeType": "VariableDeclaration",
														"scope": 802,
														"src": "7613:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$466",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 787,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 786,
																"name": "RecoverError",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 466,
																"src": "7613:12:8"
															},
															"referencedDeclaration": 466,
															"src": "7613:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 795,
												"initialValue": {
													"arguments": [
														{
															"id": 790,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 773,
															"src": "7646:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 791,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 775,
															"src": "7652:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 792,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 777,
															"src": "7655:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 793,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 779,
															"src": "7658:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 789,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															585,
															659,
															770
														],
														"referencedDeclaration": 770,
														"src": "7635:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$466_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"
														}
													},
													"id": 794,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7635:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$466_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7593:67:8"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 797,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 788,
															"src": "7682:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$466",
																"typeString": "enum ECDSA.RecoverError"
															}
														],
														"id": 796,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "7670:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$466_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError) pure"
														}
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7670:18:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 799,
												"nodeType": "ExpressionStatement",
												"src": "7670:18:8"
											},
											{
												"expression": {
													"id": 800,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 785,
													"src": "7705:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 783,
												"id": 801,
												"nodeType": "Return",
												"src": "7698:16:8"
											}
										]
									},
									"documentation": {
										"id": 771,
										"nodeType": "StructuredDocumentation",
										"src": "7324:122:8",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 803,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "7460:7:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 780,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 773,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7485:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "7477:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 772,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7477:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 775,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "7505:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "7499:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 774,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "7499:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 777,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "7524:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "7516:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 776,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7516:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7543:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "7535:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 778,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7535:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7467:83:8"
									},
									"returnParameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 803,
												"src": "7574:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 781,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7574:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7573:9:8"
									},
									"scope": 863,
									"src": "7451:270:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 819,
										"nodeType": "Block",
										"src": "8089:187:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																	"id": 814,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8227:34:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n32"
																},
																{
																	"id": 815,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 806,
																	"src": "8263:4:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 812,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8210:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 813,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8210:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8210:58:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 811,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8200:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 817,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8200:69:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 810,
												"id": 818,
												"nodeType": "Return",
												"src": "8193:76:8"
											}
										]
									},
									"documentation": {
										"id": 804,
										"nodeType": "StructuredDocumentation",
										"src": "7727:279:8",
										"text": " @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "8020:22:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "8051:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "8043:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 805,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8043:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8042:14:8"
									},
									"returnParameters": {
										"id": 810,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 820,
												"src": "8080:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 808,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8080:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8079:9:8"
									},
									"scope": 863,
									"src": "8011:265:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 841,
										"nodeType": "Block",
										"src": "8641:116:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8685:32:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"id": 834,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 823,
																				"src": "8736:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 835,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "8736:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 832,
																			"name": "Strings",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1502,
																			"src": "8719:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Strings_$1502_$",
																				"typeString": "type(library Strings)"
																			}
																		},
																		"id": 833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "toString",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1384,
																		"src": "8719:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																			"typeString": "function (uint256) pure returns (string memory)"
																		}
																	},
																	"id": 836,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8719:26:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																{
																	"id": 837,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 823,
																	"src": "8747:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 829,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "8668:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 830,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "8668:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8668:81:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 828,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "8658:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 839,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8658:92:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 827,
												"id": 840,
												"nodeType": "Return",
												"src": "8651:99:8"
											}
										]
									},
									"documentation": {
										"id": 821,
										"nodeType": "StructuredDocumentation",
										"src": "8282:274:8",
										"text": " @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."
									},
									"id": 842,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "8570:22:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "8606:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "8593:14:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 822,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8593:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8592:16:8"
									},
									"returnParameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 842,
												"src": "8632:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 825,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8632:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8631:9:8"
									},
									"scope": 863,
									"src": "8561:196:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 861,
										"nodeType": "Block",
										"src": "9198:92:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1901",
																	"id": 855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9242:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	"value": "\u0019\u0001"
																},
																{
																	"id": 856,
																	"name": "domainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "9254:15:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 857,
																	"name": "structHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 847,
																	"src": "9271:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
																		"typeString": "literal_string hex\"1901\""
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 853,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "9225:3:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 854,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "9225:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 858,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9225:57:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 852,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "9215:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 859,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9215:68:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 851,
												"id": 860,
												"nodeType": "Return",
												"src": "9208:75:8"
											}
										]
									},
									"documentation": {
										"id": 843,
										"nodeType": "StructuredDocumentation",
										"src": "8763:328:8",
										"text": " @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."
									},
									"id": 862,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "9105:15:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 848,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 845,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "9129:15:8",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "9121:23:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 844,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9121:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 847,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "9154:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "9146:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 846,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9146:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9120:45:8"
									},
									"returnParameters": {
										"id": 851,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 850,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 862,
												"src": "9189:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 849,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9189:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9188:9:8"
									},
									"scope": 863,
									"src": "9096:194:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 864,
							"src": "368:8924:8",
							"usedErrors": []
						}
					],
					"src": "112:9180:8"
				},
				"id": 8
			},
			"lib/EIP712.sol": {
				"ast": {
					"absolutePath": "lib/EIP712.sol",
					"exportedSymbols": {
						"ECDSA": [
							863
						],
						"EIP712": [
							1017
						],
						"Strings": [
							1502
						]
					},
					"id": 1018,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 865,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:9"
						},
						{
							"absolutePath": "lib/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 866,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1018,
							"sourceUnit": 864,
							"src": "129:21:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 867,
								"nodeType": "StructuredDocumentation",
								"src": "152:1142:9",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n they need in their contracts using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n _Available since v3.4._"
							},
							"fullyImplemented": true,
							"id": 1017,
							"linearizedBaseContracts": [
								1017
							],
							"name": "EIP712",
							"nameLocation": "1313:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 869,
									"mutability": "immutable",
									"name": "_CACHED_DOMAIN_SEPARATOR",
									"nameLocation": "1589:24:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1563:50:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 868,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1563:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 871,
									"mutability": "immutable",
									"name": "_CACHED_CHAIN_ID",
									"nameLocation": "1645:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1619:42:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 870,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1619:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 873,
									"mutability": "immutable",
									"name": "_CACHED_THIS",
									"nameLocation": "1693:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1667:38:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 872,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1667:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 875,
									"mutability": "immutable",
									"name": "_HASHED_NAME",
									"nameLocation": "1738:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1712:38:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 874,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1712:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 877,
									"mutability": "immutable",
									"name": "_HASHED_VERSION",
									"nameLocation": "1782:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1756:41:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 876,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1756:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 879,
									"mutability": "immutable",
									"name": "_TYPE_HASH",
									"nameLocation": "1829:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 1017,
									"src": "1803:36:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 878,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1803:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 943,
										"nodeType": "Block",
										"src": "2510:547:9",
										"statements": [
											{
												"assignments": [
													888
												],
												"declarations": [
													{
														"constant": false,
														"id": 888,
														"mutability": "mutable",
														"name": "hashedName",
														"nameLocation": "2528:10:9",
														"nodeType": "VariableDeclaration",
														"scope": 943,
														"src": "2520:18:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 887,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2520:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 895,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 892,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 882,
																	"src": "2557:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 891,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2551:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 890,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2551:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 893,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2551:11:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 889,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2541:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 894,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2541:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2520:43:9"
											},
											{
												"assignments": [
													897
												],
												"declarations": [
													{
														"constant": false,
														"id": 897,
														"mutability": "mutable",
														"name": "hashedVersion",
														"nameLocation": "2581:13:9",
														"nodeType": "VariableDeclaration",
														"scope": 943,
														"src": "2573:21:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 896,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2573:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 904,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 901,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 884,
																	"src": "2613:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 900,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2607:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 899,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "2607:5:9",
																	"typeDescriptions": {}
																}
															},
															"id": 902,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2607:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 898,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2597:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2597:25:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2573:49:9"
											},
											{
												"assignments": [
													906
												],
												"declarations": [
													{
														"constant": false,
														"id": 906,
														"mutability": "mutable",
														"name": "typeHash",
														"nameLocation": "2640:8:9",
														"nodeType": "VariableDeclaration",
														"scope": 943,
														"src": "2632:16:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 905,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2632:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 910,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2674:84:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															},
															"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
																"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
															}
														],
														"id": 907,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2651:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2651:117:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2632:136:9"
											},
											{
												"expression": {
													"id": 913,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 911,
														"name": "_HASHED_NAME",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "2778:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 912,
														"name": "hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "2793:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2778:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 914,
												"nodeType": "ExpressionStatement",
												"src": "2778:25:9"
											},
											{
												"expression": {
													"id": 917,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 915,
														"name": "_HASHED_VERSION",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "2813:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 916,
														"name": "hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 897,
														"src": "2831:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2813:31:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 918,
												"nodeType": "ExpressionStatement",
												"src": "2813:31:9"
											},
											{
												"expression": {
													"id": 922,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 919,
														"name": "_CACHED_CHAIN_ID",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 871,
														"src": "2854:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 920,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "2873:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 921,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "2873:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2854:32:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 923,
												"nodeType": "ExpressionStatement",
												"src": "2854:32:9"
											},
											{
												"expression": {
													"id": 930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 924,
														"name": "_CACHED_DOMAIN_SEPARATOR",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "2896:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 926,
																"name": "typeHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 906,
																"src": "2945:8:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 927,
																"name": "hashedName",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 888,
																"src": "2955:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 928,
																"name": "hashedVersion",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 897,
																"src": "2967:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 925,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1000,
															"src": "2923:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
															}
														},
														"id": 929,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2923:58:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2896:85:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 931,
												"nodeType": "ExpressionStatement",
												"src": "2896:85:9"
											},
											{
												"expression": {
													"id": 937,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 932,
														"name": "_CACHED_THIS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 873,
														"src": "2991:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 935,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3014:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$1017",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$1017",
																	"typeString": "contract EIP712"
																}
															],
															"id": 934,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3006:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 933,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3006:7:9",
																"typeDescriptions": {}
															}
														},
														"id": 936,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3006:13:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2991:28:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 938,
												"nodeType": "ExpressionStatement",
												"src": "2991:28:9"
											},
											{
												"expression": {
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 939,
														"name": "_TYPE_HASH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 879,
														"src": "3029:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 940,
														"name": "typeHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "3042:8:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3029:21:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "3029:21:9"
											}
										]
									},
									"documentation": {
										"id": 880,
										"nodeType": "StructuredDocumentation",
										"src": "1891:559:9",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 944,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "2481:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "2467:18:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 881,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2467:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2501:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 944,
												"src": "2487:21:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 883,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2487:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2466:43:9"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2510:0:9"
									},
									"scope": 1017,
									"src": "2455:602:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 972,
										"nodeType": "Block",
										"src": "3205:246:9",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 960,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 955,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 952,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3227:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$1017",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$1017",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3219:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 950,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3219:7:9",
																	"typeDescriptions": {}
																}
															},
															"id": 953,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3219:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 954,
															"name": "_CACHED_THIS",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 873,
															"src": "3236:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3219:29:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 956,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3252:5:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3252:13:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 958,
															"name": "_CACHED_CHAIN_ID",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 871,
															"src": "3269:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3252:33:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3219:66:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 970,
													"nodeType": "Block",
													"src": "3349:96:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 965,
																		"name": "_TYPE_HASH",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 879,
																		"src": "3392:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 966,
																		"name": "_HASHED_NAME",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 875,
																		"src": "3404:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 967,
																		"name": "_HASHED_VERSION",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 877,
																		"src": "3418:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 964,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1000,
																	"src": "3370:21:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																		"typeString": "function (bytes32,bytes32,bytes32) view returns (bytes32)"
																	}
																},
																"id": 968,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3370:64:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 949,
															"id": 969,
															"nodeType": "Return",
															"src": "3363:71:9"
														}
													]
												},
												"id": 971,
												"nodeType": "IfStatement",
												"src": "3215:230:9",
												"trueBody": {
													"id": 963,
													"nodeType": "Block",
													"src": "3287:56:9",
													"statements": [
														{
															"expression": {
																"id": 961,
																"name": "_CACHED_DOMAIN_SEPARATOR",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 869,
																"src": "3308:24:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 949,
															"id": 962,
															"nodeType": "Return",
															"src": "3301:31:9"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 945,
										"nodeType": "StructuredDocumentation",
										"src": "3063:75:9",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 973,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3152:18:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3170:2:9"
									},
									"returnParameters": {
										"id": 949,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 948,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 973,
												"src": "3196:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 947,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:9"
									},
									"scope": 1017,
									"src": "3143:308:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 999,
										"nodeType": "Block",
										"src": "3606:108:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 987,
																	"name": "typeHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 975,
																	"src": "3644:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 988,
																	"name": "nameHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 977,
																	"src": "3654:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 989,
																	"name": "versionHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 979,
																	"src": "3664:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 990,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "3677:5:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "3677:13:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 994,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "3700:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$1017",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$1017",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 993,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3692:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 992,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "3692:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 995,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3692:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 985,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "3633:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 986,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "3633:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3633:73:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 984,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "3623:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3623:84:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 983,
												"id": 998,
												"nodeType": "Return",
												"src": "3616:91:9"
											}
										]
									},
									"id": 1000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "3466:21:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "typeHash",
												"nameLocation": "3505:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3497:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 974,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "nameHash",
												"nameLocation": "3531:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3523:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 976,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3523:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 979,
												"mutability": "mutable",
												"name": "versionHash",
												"nameLocation": "3557:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3549:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 978,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3549:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3487:87:9"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "3597:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 981,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3597:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3596:9:9"
									},
									"scope": 1017,
									"src": "3457:257:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1015,
										"nodeType": "Block",
										"src": "4425:79:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1010,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 973,
																"src": "4464:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 1011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4464:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1012,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1003,
															"src": "4486:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1008,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "4442:5:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$863_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1009,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 862,
														"src": "4442:21:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 1013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4442:55:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1007,
												"id": 1014,
												"nodeType": "Return",
												"src": "4435:62:9"
											}
										]
									},
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "3720:614:9",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 1016,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4348:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4373:10:9",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "4365:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4365:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4364:20:9"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1016,
												"src": "4416:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1005,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4416:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4415:9:9"
									},
									"scope": 1017,
									"src": "4339:165:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1018,
							"src": "1295:3211:9",
							"usedErrors": []
						}
					],
					"src": "104:4402:9"
				},
				"id": 9
			},
			"lib/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "lib/ERC20Permit.sol",
					"exportedSymbols": {
						"Context": [
							382
						],
						"Counters": [
							456
						],
						"ECDSA": [
							863
						],
						"EIP712": [
							1017
						],
						"ERC20": [
							2096
						],
						"ERC20Permit": [
							1189
						],
						"IERC20": [
							195
						],
						"IERC20Metadata": [
							220
						],
						"IERC20Permit": [
							256
						],
						"Strings": [
							1502
						]
					},
					"id": 1190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1019,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:10"
						},
						{
							"absolutePath": "interfaces/IERC20Permit.sol",
							"file": "../interfaces/IERC20Permit.sol",
							"id": 1020,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 257,
							"src": "138:40:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "tokens/ERC20.sol",
							"file": "../tokens/ERC20.sol",
							"id": 1021,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 2097,
							"src": "179:29:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/EIP712.sol",
							"file": "./EIP712.sol",
							"id": 1022,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 1018,
							"src": "209:22:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 1023,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 864,
							"src": "232:21:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/Counters.sol",
							"file": "./Counters.sol",
							"id": 1024,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1190,
							"sourceUnit": 457,
							"src": "254:24:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1026,
										"name": "ERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2096,
										"src": "831:5:10"
									},
									"id": 1027,
									"nodeType": "InheritanceSpecifier",
									"src": "831:5:10"
								},
								{
									"baseName": {
										"id": 1028,
										"name": "IERC20Permit",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 256,
										"src": "838:12:10"
									},
									"id": 1029,
									"nodeType": "InheritanceSpecifier",
									"src": "838:12:10"
								},
								{
									"baseName": {
										"id": 1030,
										"name": "EIP712",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1017,
										"src": "852:6:10"
									},
									"id": 1031,
									"nodeType": "InheritanceSpecifier",
									"src": "852:6:10"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1025,
								"nodeType": "StructuredDocumentation",
								"src": "280:517:10",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n _Available since v3.4._"
							},
							"fullyImplemented": false,
							"id": 1189,
							"linearizedBaseContracts": [
								1189,
								1017,
								256,
								2096,
								220,
								195,
								382
							],
							"name": "ERC20Permit",
							"nameLocation": "816:11:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1035,
									"libraryName": {
										"id": 1032,
										"name": "Counters",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 456,
										"src": "871:8:10"
									},
									"nodeType": "UsingForDirective",
									"src": "865:36:10",
									"typeName": {
										"id": 1034,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1033,
											"name": "Counters.Counter",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 388,
											"src": "884:16:10"
										},
										"referencedDeclaration": 388,
										"src": "884:16:10",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
											"typeString": "struct Counters.Counter"
										}
									}
								},
								{
									"constant": false,
									"id": 1040,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "952:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1189,
									"src": "907:52:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$388_storage_$",
										"typeString": "mapping(address => struct Counters.Counter)"
									},
									"typeName": {
										"id": 1039,
										"keyType": {
											"id": 1036,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "915:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "907:36:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$388_storage_$",
											"typeString": "mapping(address => struct Counters.Counter)"
										},
										"valueType": {
											"id": 1038,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 1037,
												"name": "Counters.Counter",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 388,
												"src": "926:16:10"
											},
											"referencedDeclaration": 388,
											"src": "926:16:10",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
												"typeString": "struct Counters.Counter"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1045,
									"mutability": "constant",
									"name": "_PERMIT_TYPEHASH",
									"nameLocation": "1043:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 1189,
									"src": "1018:147:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1041,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1018:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 1043,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1080:84:10",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 1042,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1070:9:10",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1044,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1070:95:10",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1046,
										"nodeType": "StructuredDocumentation",
										"src": "1171:254:10",
										"text": " @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n However, to ensure consistency with the upgradeable transpiler, we will continue\n to reserve a slot.\n @custom:oz-renamed-from _PERMIT_TYPEHASH"
									},
									"id": 1048,
									"mutability": "mutable",
									"name": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
									"nameLocation": "1498:32:10",
									"nodeType": "VariableDeclaration",
									"scope": 1189,
									"src": "1482:48:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1047,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1482:7:10",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1058,
										"nodeType": "Block",
										"src": "1812:2:10",
										"statements": []
									},
									"documentation": {
										"id": 1049,
										"nodeType": "StructuredDocumentation",
										"src": "1537:220:10",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1059,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1054,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1051,
													"src": "1801:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1807:3:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 1056,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1053,
												"name": "EIP712",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1017,
												"src": "1794:6:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "1794:17:10"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1051,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1788:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1059,
												"src": "1774:18:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1050,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1774:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1773:20:10"
									},
									"returnParameters": {
										"id": 1057,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1812:0:10"
									},
									"scope": 1189,
									"src": "1762:52:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										241
									],
									"body": {
										"id": 1131,
										"nodeType": "Block",
										"src": "2073:428:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1082,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1079,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2091:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1080,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2091:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1081,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1068,
																"src": "2110:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2091:27:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a206578706972656420646561646c696e65",
															"id": 1083,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2120:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															},
															"value": "ERC20Permit: expired deadline"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3e89525a63fb9c966b61cf8f5305156de8420bc773a2b60828a2f32c3c5797bd",
																"typeString": "literal_string \"ERC20Permit: expired deadline\""
															}
														],
														"id": 1078,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2083:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2083:69:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1085,
												"nodeType": "ExpressionStatement",
												"src": "2083:69:10"
											},
											{
												"assignments": [
													1087
												],
												"declarations": [
													{
														"constant": false,
														"id": 1087,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "2171:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 1131,
														"src": "2163:18:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1086,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2163:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1101,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1091,
																	"name": "_PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1045,
																	"src": "2205:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1092,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1062,
																	"src": "2223:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1093,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1064,
																	"src": "2230:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1094,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1066,
																	"src": "2239:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1096,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1062,
																			"src": "2256:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1095,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1188,
																		"src": "2246:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1097,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2246:16:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1098,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1068,
																	"src": "2264:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1089,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2194:3:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1090,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2194:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1099,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2194:79:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1088,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2184:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2184:90:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2163:111:10"
											},
											{
												"assignments": [
													1103
												],
												"declarations": [
													{
														"constant": false,
														"id": 1103,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2293:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1131,
														"src": "2285:12:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1102,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2285:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1107,
												"initialValue": {
													"arguments": [
														{
															"id": 1105,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "2317:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1104,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1016,
														"src": "2300:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1106,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2285:43:10"
											},
											{
												"assignments": [
													1109
												],
												"declarations": [
													{
														"constant": false,
														"id": 1109,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2347:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1131,
														"src": "2339:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1108,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2339:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1117,
												"initialValue": {
													"arguments": [
														{
															"id": 1112,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "2370:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1113,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "2376:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1114,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "2379:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1115,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "2382:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1110,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 863,
															"src": "2356:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$863_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1111,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 803,
														"src": "2356:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2356:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2339:45:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1119,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1109,
																"src": "2402:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 1120,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1062,
																"src": "2412:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2402:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332305065726d69743a20696e76616c6964207369676e6174757265",
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2419:32:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															},
															"value": "ERC20Permit: invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_94ca1ab58dfda790a1782ffbb0c0a140ec51d4148dbeecc6c39e37b25ff4b124",
																"typeString": "literal_string \"ERC20Permit: invalid signature\""
															}
														],
														"id": 1118,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2394:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2394:58:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1124,
												"nodeType": "ExpressionStatement",
												"src": "2394:58:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1126,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "2472:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1127,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1064,
															"src": "2479:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1128,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1066,
															"src": "2488:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1125,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "2463:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1129,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2463:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1130,
												"nodeType": "ExpressionStatement",
												"src": "2463:31:10"
											}
										]
									},
									"documentation": {
										"id": 1060,
										"nodeType": "StructuredDocumentation",
										"src": "1820:50:10",
										"text": " @dev See {IERC20Permit-permit}."
									},
									"functionSelector": "d505accf",
									"id": 1132,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1884:6:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1076,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2064:8:10"
									},
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1908:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "1900:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1061,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1900:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1931:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "1923:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1063,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1923:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1066,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1956:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "1948:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1065,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1948:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1068,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1979:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "1971:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1067,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1971:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "2003:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "1997:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1069,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1997:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2022:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "2014:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1071,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "2041:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 1132,
												"src": "2033:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1073,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2033:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1890:158:10"
									},
									"returnParameters": {
										"id": 1077,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2073:0:10"
									},
									"scope": 1189,
									"src": "1875:626:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										249
									],
									"body": {
										"id": 1147,
										"nodeType": "Block",
										"src": "2640:48:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"baseExpression": {
																"id": 1141,
																"name": "_nonces",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1040,
																"src": "2657:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$388_storage_$",
																	"typeString": "mapping(address => struct Counters.Counter storage ref)"
																}
															},
															"id": 1143,
															"indexExpression": {
																"id": 1142,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1135,
																"src": "2665:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "2657:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$388_storage",
																"typeString": "struct Counters.Counter storage ref"
															}
														},
														"id": 1144,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "current",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 400,
														"src": "2657:22:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$388_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$388_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
														}
													},
													"id": 1145,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2657:24:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1140,
												"id": 1146,
												"nodeType": "Return",
												"src": "2650:31:10"
											}
										]
									},
									"documentation": {
										"id": 1133,
										"nodeType": "StructuredDocumentation",
										"src": "2507:50:10",
										"text": " @dev See {IERC20Permit-nonces}."
									},
									"functionSelector": "7ecebe00",
									"id": 1148,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2571:6:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1137,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2613:8:10"
									},
									"parameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1135,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2586:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "2578:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2578:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2577:15:10"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1148,
												"src": "2631:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1138,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2631:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2630:9:10"
									},
									"scope": 1189,
									"src": "2562:126:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										255
									],
									"body": {
										"id": 1158,
										"nodeType": "Block",
										"src": "2881:44:10",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1155,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 973,
														"src": "2898:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:20:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1154,
												"id": 1157,
												"nodeType": "Return",
												"src": "2891:27:10"
											}
										]
									},
									"documentation": {
										"id": 1149,
										"nodeType": "StructuredDocumentation",
										"src": "2694:60:10",
										"text": " @dev See {IERC20Permit-DOMAIN_SEPARATOR}."
									},
									"functionSelector": "3644e515",
									"id": 1159,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2821:16:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1151,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2854:8:10"
									},
									"parameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2837:2:10"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1159,
												"src": "2872:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1152,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2872:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2871:9:10"
									},
									"scope": 1189,
									"src": "2812:113:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1187,
										"nodeType": "Block",
										"src": "3133:126:10",
										"statements": [
											{
												"assignments": [
													1171
												],
												"declarations": [
													{
														"constant": false,
														"id": 1171,
														"mutability": "mutable",
														"name": "nonce",
														"nameLocation": "3168:5:10",
														"nodeType": "VariableDeclaration",
														"scope": 1187,
														"src": "3143:30:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
															"typeString": "struct Counters.Counter"
														},
														"typeName": {
															"id": 1170,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1169,
																"name": "Counters.Counter",
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 388,
																"src": "3143:16:10"
															},
															"referencedDeclaration": 388,
															"src": "3143:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																"typeString": "struct Counters.Counter"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1175,
												"initialValue": {
													"baseExpression": {
														"id": 1172,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "3176:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Counter_$388_storage_$",
															"typeString": "mapping(address => struct Counters.Counter storage ref)"
														}
													},
													"id": 1174,
													"indexExpression": {
														"id": 1173,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1162,
														"src": "3184:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3176:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Counter_$388_storage",
														"typeString": "struct Counters.Counter storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3143:47:10"
											},
											{
												"expression": {
													"id": 1180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1176,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1165,
														"src": "3200:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"expression": {
																"id": 1177,
																"name": "nonce",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1171,
																"src": "3210:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																	"typeString": "struct Counters.Counter storage pointer"
																}
															},
															"id": 1178,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "current",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 400,
															"src": "3210:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_struct$_Counter_$388_storage_ptr_$returns$_t_uint256_$bound_to$_t_struct$_Counter_$388_storage_ptr_$",
																"typeString": "function (struct Counters.Counter storage pointer) view returns (uint256)"
															}
														},
														"id": 1179,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3210:15:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3200:25:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1181,
												"nodeType": "ExpressionStatement",
												"src": "3200:25:10"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 1182,
															"name": "nonce",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "3235:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Counter_$388_storage_ptr",
																"typeString": "struct Counters.Counter storage pointer"
															}
														},
														"id": 1184,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "increment",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 414,
														"src": "3235:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_struct$_Counter_$388_storage_ptr_$returns$__$bound_to$_t_struct$_Counter_$388_storage_ptr_$",
															"typeString": "function (struct Counters.Counter storage pointer)"
														}
													},
													"id": 1185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3235:17:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1186,
												"nodeType": "ExpressionStatement",
												"src": "3235:17:10"
											}
										]
									},
									"documentation": {
										"id": 1160,
										"nodeType": "StructuredDocumentation",
										"src": "2931:120:10",
										"text": " @dev \"Consume a nonce\": return the current value and increment.\n _Available since v4.1._"
									},
									"id": 1188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "3065:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3083:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "3075:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3075:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3074:15:10"
									},
									"returnParameters": {
										"id": 1166,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1165,
												"mutability": "mutable",
												"name": "current",
												"nameLocation": "3124:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1188,
												"src": "3116:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1164,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3116:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3115:17:10"
									},
									"scope": 1189,
									"src": "3056:203:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1190,
							"src": "798:2463:10",
							"usedErrors": []
						}
					],
					"src": "113:3149:10"
				},
				"id": 10
			},
			"lib/SolidDaoManaged.sol": {
				"ast": {
					"absolutePath": "lib/SolidDaoManaged.sol",
					"exportedSymbols": {
						"ISolidDaoManagement": [
							360
						],
						"SolidDaoManaged": [
							1299
						]
					},
					"id": 1300,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1191,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"absolutePath": "interfaces/ISolidDaoManagement.sol",
							"file": "../interfaces/ISolidDaoManagement.sol",
							"id": 1192,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1300,
							"sourceUnit": 361,
							"src": "57:47:11",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "SolidDaoManaged",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1193,
								"nodeType": "StructuredDocumentation",
								"src": "106:155:11",
								"text": " @title Solid Dao Managed\n @author Solid World DAO\n @notice Abstract contratc to implement Solid Dao Management and access control modifiers "
							},
							"fullyImplemented": true,
							"id": 1299,
							"linearizedBaseContracts": [
								1299
							],
							"name": "SolidDaoManaged",
							"nameLocation": "280:15:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1194,
										"nodeType": "StructuredDocumentation",
										"src": "303:118:11",
										"text": " @dev Emitted on setAuthority()\n @param authority Address of Solid Dao Management smart contract*"
									},
									"eventSelector": "2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
									"id": 1199,
									"name": "AuthorityUpdated",
									"nameLocation": "432:16:11",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1198,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"indexed": true,
												"mutability": "mutable",
												"name": "authority",
												"nameLocation": "477:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 1199,
												"src": "449:37:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
													"typeString": "contract ISolidDaoManagement"
												},
												"typeName": {
													"id": 1196,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1195,
														"name": "ISolidDaoManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 360,
														"src": "449:19:11"
													},
													"referencedDeclaration": 360,
													"src": "449:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:39:11"
									},
									"src": "426:62:11"
								},
								{
									"constant": false,
									"id": 1202,
									"mutability": "mutable",
									"name": "UNAUTHORIZED",
									"nameLocation": "501:12:11",
									"nodeType": "VariableDeclaration",
									"scope": 1299,
									"src": "494:36:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1200,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "494:6:11",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"value": {
										"hexValue": "554e415554484f52495a4544",
										"id": 1201,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "516:14:11",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_269df367cd41cace5897a935d0e0858fe4543b5619d45e09af6b124c1bb3d528",
											"typeString": "literal_string \"UNAUTHORIZED\""
										},
										"value": "UNAUTHORIZED"
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "bf7e214f",
									"id": 1205,
									"mutability": "mutable",
									"name": "authority",
									"nameLocation": "564:9:11",
									"nodeType": "VariableDeclaration",
									"scope": 1299,
									"src": "537:36:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
										"typeString": "contract ISolidDaoManagement"
									},
									"typeName": {
										"id": 1204,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1203,
											"name": "ISolidDaoManagement",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 360,
											"src": "537:19:11"
										},
										"referencedDeclaration": 360,
										"src": "537:19:11",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
											"typeString": "contract ISolidDaoManagement"
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1219,
										"nodeType": "Block",
										"src": "624:82:11",
										"statements": [
											{
												"expression": {
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1211,
														"name": "authority",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1205,
														"src": "634:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
															"typeString": "contract ISolidDaoManagement"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1212,
														"name": "_authority",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1208,
														"src": "646:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
															"typeString": "contract ISolidDaoManagement"
														}
													},
													"src": "634:22:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												},
												"id": 1214,
												"nodeType": "ExpressionStatement",
												"src": "634:22:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1216,
															"name": "_authority",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1208,
															"src": "688:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																"typeString": "contract ISolidDaoManagement"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																"typeString": "contract ISolidDaoManagement"
															}
														],
														"id": 1215,
														"name": "AuthorityUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "671:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_contract$_ISolidDaoManagement_$360_$returns$__$",
															"typeString": "function (contract ISolidDaoManagement)"
														}
													},
													"id": 1217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "671:28:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1218,
												"nodeType": "EmitStatement",
												"src": "666:33:11"
											}
										]
									},
									"id": 1220,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1209,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1208,
												"mutability": "mutable",
												"name": "_authority",
												"nameLocation": "612:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "592:30:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
													"typeString": "contract ISolidDaoManagement"
												},
												"typeName": {
													"id": 1207,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1206,
														"name": "ISolidDaoManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 360,
														"src": "592:19:11"
													},
													"referencedDeclaration": 360,
													"src": "592:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "591:32:11"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "624:0:11"
									},
									"scope": 1299,
									"src": "580:126:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1234,
										"nodeType": "Block",
										"src": "906:85:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1224,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "924:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1225,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "924:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1226,
																		"name": "authority",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1205,
																		"src": "938:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																			"typeString": "contract ISolidDaoManagement"
																		}
																	},
																	"id": 1227,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "governor",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 344,
																	"src": "938:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1228,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "938:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "924:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1230,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "960:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 1223,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "916:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1231,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "916:57:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1232,
												"nodeType": "ExpressionStatement",
												"src": "916:57:11"
											},
											{
												"id": 1233,
												"nodeType": "PlaceholderStatement",
												"src": "983:1:11"
											}
										]
									},
									"documentation": {
										"id": 1221,
										"nodeType": "StructuredDocumentation",
										"src": "716:161:11",
										"text": " @notice Function modifier that can be used in other smart contracts\n @dev Only governor address can call functions marked by this modifier*"
									},
									"id": 1235,
									"name": "onlyGovernor",
									"nameLocation": "891:12:11",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1222,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "903:2:11"
									},
									"src": "882:109:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1249,
										"nodeType": "Block",
										"src": "1191:85:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1244,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1239,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1209:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1240,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1209:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1241,
																		"name": "authority",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1205,
																		"src": "1223:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																			"typeString": "contract ISolidDaoManagement"
																		}
																	},
																	"id": 1242,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "guardian",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 349,
																	"src": "1223:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1243,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1223:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1209:34:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1245,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "1245:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 1238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1201:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1201:57:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1247,
												"nodeType": "ExpressionStatement",
												"src": "1201:57:11"
											},
											{
												"id": 1248,
												"nodeType": "PlaceholderStatement",
												"src": "1268:1:11"
											}
										]
									},
									"documentation": {
										"id": 1236,
										"nodeType": "StructuredDocumentation",
										"src": "1001:161:11",
										"text": " @notice Function modifier that can be used in other smart contracts\n @dev Only guardian address can call functions marked by this modifier*"
									},
									"id": 1250,
									"name": "onlyGuardian",
									"nameLocation": "1176:12:11",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1188:2:11"
									},
									"src": "1167:109:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1264,
										"nodeType": "Block",
										"src": "1472:83:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1254,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1490:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1490:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1256,
																		"name": "authority",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1205,
																		"src": "1504:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																			"typeString": "contract ISolidDaoManagement"
																		}
																	},
																	"id": 1257,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "policy",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 354,
																	"src": "1504:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1258,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1504:18:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1490:32:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1260,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "1524:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 1253,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1482:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1482:55:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1262,
												"nodeType": "ExpressionStatement",
												"src": "1482:55:11"
											},
											{
												"id": 1263,
												"nodeType": "PlaceholderStatement",
												"src": "1547:1:11"
											}
										]
									},
									"documentation": {
										"id": 1251,
										"nodeType": "StructuredDocumentation",
										"src": "1286:159:11",
										"text": " @notice Function modifier that can be used in other smart contracts\n @dev Only policy address can call functions marked by this modifier*"
									},
									"id": 1265,
									"name": "onlyPolicy",
									"nameLocation": "1459:10:11",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1469:2:11"
									},
									"src": "1450:105:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1279,
										"nodeType": "Block",
										"src": "1745:82:11",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1274,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1269,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "1763:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "1763:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1271,
																		"name": "authority",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1205,
																		"src": "1777:9:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																			"typeString": "contract ISolidDaoManagement"
																		}
																	},
																	"id": 1272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "vault",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 359,
																	"src": "1777:15:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1777:17:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1763:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1275,
															"name": "UNAUTHORIZED",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1202,
															"src": "1796:12:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"id": 1268,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1755:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1755:54:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "ExpressionStatement",
												"src": "1755:54:11"
											},
											{
												"id": 1278,
												"nodeType": "PlaceholderStatement",
												"src": "1819:1:11"
											}
										]
									},
									"documentation": {
										"id": 1266,
										"nodeType": "StructuredDocumentation",
										"src": "1561:158:11",
										"text": " @notice Function modifier that can be used in other smart contracts\n @dev Only vault address can call functions marked by this modifier*"
									},
									"id": 1280,
									"name": "onlyVault",
									"nameLocation": "1733:9:11",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1267,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1742:2:11"
									},
									"src": "1724:103:11",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1297,
										"nodeType": "Block",
										"src": "2134:88:11",
										"statements": [
											{
												"expression": {
													"id": 1291,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1289,
														"name": "authority",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1205,
														"src": "2144:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
															"typeString": "contract ISolidDaoManagement"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1290,
														"name": "_newAuthority",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1284,
														"src": "2156:13:11",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
															"typeString": "contract ISolidDaoManagement"
														}
													},
													"src": "2144:25:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												},
												"id": 1292,
												"nodeType": "ExpressionStatement",
												"src": "2144:25:11"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1294,
															"name": "_newAuthority",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "2201:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																"typeString": "contract ISolidDaoManagement"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
																"typeString": "contract ISolidDaoManagement"
															}
														],
														"id": 1293,
														"name": "AuthorityUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1199,
														"src": "2184:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_contract$_ISolidDaoManagement_$360_$returns$__$",
															"typeString": "function (contract ISolidDaoManagement)"
														}
													},
													"id": 1295,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2184:31:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1296,
												"nodeType": "EmitStatement",
												"src": "2179:36:11"
											}
										]
									},
									"documentation": {
										"id": 1281,
										"nodeType": "StructuredDocumentation",
										"src": "1833:216:11",
										"text": " @notice Function to set and update Solid Dao Management smart contract address\n @dev Emit AuthorityUpdated event\n @param _newAuthority Address of the new Solid Dao Management smart contract"
									},
									"functionSelector": "7a9e5e4b",
									"id": 1298,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1287,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1286,
												"name": "onlyGovernor",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1235,
												"src": "2121:12:11"
											},
											"nodeType": "ModifierInvocation",
											"src": "2121:12:11"
										}
									],
									"name": "setAuthority",
									"nameLocation": "2064:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "_newAuthority",
												"nameLocation": "2097:13:11",
												"nodeType": "VariableDeclaration",
												"scope": 1298,
												"src": "2077:33:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
													"typeString": "contract ISolidDaoManagement"
												},
												"typeName": {
													"id": 1283,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1282,
														"name": "ISolidDaoManagement",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 360,
														"src": "2077:19:11"
													},
													"referencedDeclaration": 360,
													"src": "2077:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ISolidDaoManagement_$360",
														"typeString": "contract ISolidDaoManagement"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2076:35:11"
									},
									"returnParameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2134:0:11"
									},
									"scope": 1299,
									"src": "2055:167:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1300,
							"src": "262:1962:11",
							"usedErrors": []
						}
					],
					"src": "32:2193:11"
				},
				"id": 11
			},
			"lib/Strings.sol": {
				"ast": {
					"absolutePath": "lib/Strings.sol",
					"exportedSymbols": {
						"Strings": [
							1502
						]
					},
					"id": 1503,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1301,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1302,
								"nodeType": "StructuredDocumentation",
								"src": "111:34:12",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1502,
							"linearizedBaseContracts": [
								1502
							],
							"name": "Strings",
							"nameLocation": "154:7:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1305,
									"mutability": "constant",
									"name": "_HEX_SYMBOLS",
									"nameLocation": "193:12:12",
									"nodeType": "VariableDeclaration",
									"scope": 1502,
									"src": "168:58:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1303,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "168:7:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1304,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "208:18:12",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1383,
										"nodeType": "Block",
										"src": "399:632:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1315,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1313,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "601:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1314,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "610:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "601:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1319,
												"nodeType": "IfStatement",
												"src": "597:51:12",
												"trueBody": {
													"id": 1318,
													"nodeType": "Block",
													"src": "613:35:12",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 1316,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "634:3:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
																	"typeString": "literal_string \"0\""
																},
																"value": "0"
															},
															"functionReturnParameters": 1312,
															"id": 1317,
															"nodeType": "Return",
															"src": "627:10:12"
														}
													]
												}
											},
											{
												"assignments": [
													1321
												],
												"declarations": [
													{
														"constant": false,
														"id": 1321,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "665:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 1383,
														"src": "657:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1320,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "657:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1323,
												"initialValue": {
													"id": 1322,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1308,
													"src": "672:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "657:20:12"
											},
											{
												"assignments": [
													1325
												],
												"declarations": [
													{
														"constant": false,
														"id": 1325,
														"mutability": "mutable",
														"name": "digits",
														"nameLocation": "695:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1383,
														"src": "687:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1324,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "687:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1326,
												"nodeType": "VariableDeclarationStatement",
												"src": "687:14:12"
											},
											{
												"body": {
													"id": 1337,
													"nodeType": "Block",
													"src": "729:57:12",
													"statements": [
														{
															"expression": {
																"id": 1331,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "743:8:12",
																"subExpression": {
																	"id": 1330,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1325,
																	"src": "743:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1332,
															"nodeType": "ExpressionStatement",
															"src": "743:8:12"
														},
														{
															"expression": {
																"id": 1335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1333,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1321,
																	"src": "765:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "773:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "765:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1336,
															"nodeType": "ExpressionStatement",
															"src": "765:10:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1327,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "718:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1328,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "726:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "718:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1338,
												"nodeType": "WhileStatement",
												"src": "711:75:12"
											},
											{
												"assignments": [
													1340
												],
												"declarations": [
													{
														"constant": false,
														"id": 1340,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "808:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1383,
														"src": "795:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1339,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "795:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1345,
												"initialValue": {
													"arguments": [
														{
															"id": 1343,
															"name": "digits",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1325,
															"src": "827:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1342,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "817:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1341,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "821:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "817:17:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "795:39:12"
											},
											{
												"body": {
													"id": 1376,
													"nodeType": "Block",
													"src": "863:131:12",
													"statements": [
														{
															"expression": {
																"id": 1351,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1349,
																	"name": "digits",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1325,
																	"src": "877:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 1350,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "887:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "877:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1352,
															"nodeType": "ExpressionStatement",
															"src": "877:11:12"
														},
														{
															"expression": {
																"id": 1370,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1353,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1340,
																		"src": "902:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1355,
																	"indexExpression": {
																		"id": 1354,
																		"name": "digits",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1325,
																		"src": "909:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "902:14:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1367,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3438",
																						"id": 1360,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "932:2:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_48_by_1",
																							"typeString": "int_const 48"
																						},
																						"value": "48"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "+",
																					"rightExpression": {
																						"arguments": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 1365,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 1363,
																									"name": "value",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 1308,
																									"src": "945:5:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "%",
																								"rightExpression": {
																									"hexValue": "3130",
																									"id": 1364,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "953:2:12",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_10_by_1",
																										"typeString": "int_const 10"
																									},
																									"value": "10"
																								},
																								"src": "945:10:12",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							],
																							"id": 1362,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "937:7:12",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_uint256_$",
																								"typeString": "type(uint256)"
																							},
																							"typeName": {
																								"id": 1361,
																								"name": "uint256",
																								"nodeType": "ElementaryTypeName",
																								"src": "937:7:12",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 1366,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "937:19:12",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "932:24:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1359,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "926:5:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 1358,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "926:5:12",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1368,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "926:31:12",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			}
																		],
																		"id": 1357,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "919:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes1_$",
																			"typeString": "type(bytes1)"
																		},
																		"typeName": {
																			"id": 1356,
																			"name": "bytes1",
																			"nodeType": "ElementaryTypeName",
																			"src": "919:6:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1369,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "919:39:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "902:56:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1371,
															"nodeType": "ExpressionStatement",
															"src": "902:56:12"
														},
														{
															"expression": {
																"id": 1374,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1372,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "972:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "/=",
																"rightHandSide": {
																	"hexValue": "3130",
																	"id": 1373,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "981:2:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"src": "972:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1375,
															"nodeType": "ExpressionStatement",
															"src": "972:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1346,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "851:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1347,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "860:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "851:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1377,
												"nodeType": "WhileStatement",
												"src": "844:150:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1380,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1340,
															"src": "1017:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1379,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1010:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1378,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "1010:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1010:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1312,
												"id": 1382,
												"nodeType": "Return",
												"src": "1003:21:12"
											}
										]
									},
									"documentation": {
										"id": 1306,
										"nodeType": "StructuredDocumentation",
										"src": "233:90:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1384,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "337:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "354:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "346:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1307,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "346:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "345:15:12"
									},
									"returnParameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1384,
												"src": "384:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1310,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "384:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "383:15:12"
									},
									"scope": 1502,
									"src": "328:703:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1424,
										"nodeType": "Block",
										"src": "1210:255:12",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1394,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1392,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1387,
														"src": "1224:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1393,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1233:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1224:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1398,
												"nodeType": "IfStatement",
												"src": "1220:54:12",
												"trueBody": {
													"id": 1397,
													"nodeType": "Block",
													"src": "1236:38:12",
													"statements": [
														{
															"expression": {
																"hexValue": "30783030",
																"id": 1395,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1257:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
																	"typeString": "literal_string \"0x00\""
																},
																"value": "0x00"
															},
															"functionReturnParameters": 1391,
															"id": 1396,
															"nodeType": "Return",
															"src": "1250:13:12"
														}
													]
												}
											},
											{
												"assignments": [
													1400
												],
												"declarations": [
													{
														"constant": false,
														"id": 1400,
														"mutability": "mutable",
														"name": "temp",
														"nameLocation": "1291:4:12",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "1283:12:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1399,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1283:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1402,
												"initialValue": {
													"id": 1401,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1387,
													"src": "1298:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1283:20:12"
											},
											{
												"assignments": [
													1404
												],
												"declarations": [
													{
														"constant": false,
														"id": 1404,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "1321:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1424,
														"src": "1313:14:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1403,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1313:7:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1406,
												"initialValue": {
													"hexValue": "30",
													"id": 1405,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1330:1:12",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1313:18:12"
											},
											{
												"body": {
													"id": 1417,
													"nodeType": "Block",
													"src": "1359:57:12",
													"statements": [
														{
															"expression": {
																"id": 1411,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "1373:8:12",
																"subExpression": {
																	"id": 1410,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1404,
																	"src": "1373:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1412,
															"nodeType": "ExpressionStatement",
															"src": "1373:8:12"
														},
														{
															"expression": {
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1413,
																	"name": "temp",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1400,
																	"src": "1395:4:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "38",
																	"id": 1414,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1404:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "1395:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1416,
															"nodeType": "ExpressionStatement",
															"src": "1395:10:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1407,
														"name": "temp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1400,
														"src": "1348:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1408,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1356:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1348:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1418,
												"nodeType": "WhileStatement",
												"src": "1341:75:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1420,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1387,
															"src": "1444:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1421,
															"name": "length",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1404,
															"src": "1451:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1419,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1425,
															1501
														],
														"referencedDeclaration": 1501,
														"src": "1432:11:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1432:26:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1391,
												"id": 1423,
												"nodeType": "Return",
												"src": "1425:33:12"
											}
										]
									},
									"documentation": {
										"id": 1385,
										"nodeType": "StructuredDocumentation",
										"src": "1037:94:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1425,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1145:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1387,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1165:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "1157:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:15:12"
									},
									"returnParameters": {
										"id": 1391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1390,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1425,
												"src": "1195:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1389,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1195:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1194:15:12"
									},
									"scope": 1502,
									"src": "1136:329:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1500,
										"nodeType": "Block",
										"src": "1678:351:12",
										"statements": [
											{
												"assignments": [
													1436
												],
												"declarations": [
													{
														"constant": false,
														"id": 1436,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "1701:6:12",
														"nodeType": "VariableDeclaration",
														"scope": 1500,
														"src": "1688:19:12",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1435,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1688:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1445,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1441,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1439,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1720:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1440,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1430,
																	"src": "1724:6:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1720:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1442,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1733:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "1720:14:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1438,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "1710:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1437,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1714:5:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1710:25:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1688:47:12"
											},
											{
												"expression": {
													"id": 1450,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1446,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "1745:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1448,
														"indexExpression": {
															"hexValue": "30",
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1752:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1745:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1449,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1757:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "1745:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1451,
												"nodeType": "ExpressionStatement",
												"src": "1745:15:12"
											},
											{
												"expression": {
													"id": 1456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1452,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "1770:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1454,
														"indexExpression": {
															"hexValue": "31",
															"id": 1453,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1777:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1770:9:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1455,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1782:3:12",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "1770:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1457,
												"nodeType": "ExpressionStatement",
												"src": "1770:15:12"
											},
											{
												"body": {
													"id": 1486,
													"nodeType": "Block",
													"src": "1840:87:12",
													"statements": [
														{
															"expression": {
																"id": 1480,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1472,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1436,
																		"src": "1854:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1474,
																	"indexExpression": {
																		"id": 1473,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1459,
																		"src": "1861:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1854:9:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1475,
																		"name": "_HEX_SYMBOLS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1305,
																		"src": "1866:12:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1479,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1476,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1428,
																			"src": "1879:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1887:3:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "1879:11:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "1866:25:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "1854:37:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1481,
															"nodeType": "ExpressionStatement",
															"src": "1854:37:12"
														},
														{
															"expression": {
																"id": 1484,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1482,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1428,
																	"src": "1905:5:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1915:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "1905:11:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1485,
															"nodeType": "ExpressionStatement",
															"src": "1905:11:12"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1466,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1459,
														"src": "1828:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1467,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1832:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "1828:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1487,
												"initializationExpression": {
													"assignments": [
														1459
													],
													"declarations": [
														{
															"constant": false,
															"id": 1459,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "1808:1:12",
															"nodeType": "VariableDeclaration",
															"scope": 1487,
															"src": "1800:9:12",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1458,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1800:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1465,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1464,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1462,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1460,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1812:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1461,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1430,
																"src": "1816:6:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1812:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1463,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1825:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "1812:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "1800:26:12"
												},
												"loopExpression": {
													"expression": {
														"id": 1470,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "1835:3:12",
														"subExpression": {
															"id": 1469,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1459,
															"src": "1837:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1471,
													"nodeType": "ExpressionStatement",
													"src": "1835:3:12"
												},
												"nodeType": "ForStatement",
												"src": "1795:132:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1491,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1489,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1428,
																"src": "1944:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1490,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1953:1:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1944:10:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1956:34:12",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															},
															"value": "Strings: hex length insufficient"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
																"typeString": "literal_string \"Strings: hex length insufficient\""
															}
														],
														"id": 1488,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1936:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1936:55:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1494,
												"nodeType": "ExpressionStatement",
												"src": "1936:55:12"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1497,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1436,
															"src": "2015:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1496,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2008:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1495,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2008:6:12",
															"typeDescriptions": {}
														}
													},
													"id": 1498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2008:14:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1434,
												"id": 1499,
												"nodeType": "Return",
												"src": "2001:21:12"
											}
										]
									},
									"documentation": {
										"id": 1426,
										"nodeType": "StructuredDocumentation",
										"src": "1471:112:12",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1501,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1597:11:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1617:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1609:13:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1427,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1609:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1430,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1632:6:12",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1624:14:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1429,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1624:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1608:31:12"
									},
									"returnParameters": {
										"id": 1434,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1433,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1501,
												"src": "1663:13:12",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1432,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1663:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1662:15:12"
									},
									"scope": 1502,
									"src": "1588:441:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1503,
							"src": "146:1885:12",
							"usedErrors": []
						}
					],
					"src": "86:1945:12"
				},
				"id": 12
			},
			"tokens/ERC20.sol": {
				"ast": {
					"absolutePath": "tokens/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							382
						],
						"ERC20": [
							2096
						],
						"IERC20": [
							195
						],
						"IERC20Metadata": [
							220
						]
					},
					"id": 2097,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1504,
							"literals": [
								"solidity",
								"0.8",
								".13"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:13"
						},
						{
							"absolutePath": "interfaces/IERC20.sol",
							"file": "../interfaces/IERC20.sol",
							"id": 1505,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2097,
							"sourceUnit": 196,
							"src": "130:34:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "interfaces/IERC20Metadata.sol",
							"file": "../interfaces/IERC20Metadata.sol",
							"id": 1506,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2097,
							"sourceUnit": 221,
							"src": "165:42:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/Context.sol",
							"file": "../lib/Context.sol",
							"id": 1507,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2097,
							"sourceUnit": 383,
							"src": "208:28:13",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1509,
										"name": "Context",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 382,
										"src": "1429:7:13"
									},
									"id": 1510,
									"nodeType": "InheritanceSpecifier",
									"src": "1429:7:13"
								},
								{
									"baseName": {
										"id": 1511,
										"name": "IERC20",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 195,
										"src": "1438:6:13"
									},
									"id": 1512,
									"nodeType": "InheritanceSpecifier",
									"src": "1438:6:13"
								},
								{
									"baseName": {
										"id": 1513,
										"name": "IERC20Metadata",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 220,
										"src": "1446:14:13"
									},
									"id": 1514,
									"nodeType": "InheritanceSpecifier",
									"src": "1446:14:13"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1508,
								"nodeType": "StructuredDocumentation",
								"src": "238:1172:13",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 2096,
							"linearizedBaseContracts": [
								2096,
								220,
								195,
								382
							],
							"name": "ERC20",
							"nameLocation": "1420:5:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1518,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1503:9:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1467:45:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1517,
										"keyType": {
											"id": 1515,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1475:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1467:27:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1516,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1486:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1524,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1575:11:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1519:67:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 1523,
										"keyType": {
											"id": 1519,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1527:7:13",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1519:47:13",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 1522,
											"keyType": {
												"id": 1520,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1546:7:13",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1538:27:13",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 1521,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1557:7:13",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1526,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1609:12:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1593:28:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1525,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1593:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1528,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1643:5:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1628:20:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1527,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1628:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1530,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1669:7:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1654:22:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 1529,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1654:6:13",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 1532,
									"mutability": "immutable",
									"name": "_decimals",
									"nameLocation": "1707:9:13",
									"nodeType": "VariableDeclaration",
									"scope": 2096,
									"src": "1682:34:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1531,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "1682:5:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1554,
										"nodeType": "Block",
										"src": "1877:88:13",
										"statements": [
											{
												"expression": {
													"id": 1544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1542,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1528,
														"src": "1887:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1543,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1535,
														"src": "1895:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1887:13:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1545,
												"nodeType": "ExpressionStatement",
												"src": "1887:13:13"
											},
											{
												"expression": {
													"id": 1548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1546,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1530,
														"src": "1910:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1547,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1537,
														"src": "1920:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1910:17:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 1549,
												"nodeType": "ExpressionStatement",
												"src": "1910:17:13"
											},
											{
												"expression": {
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1550,
														"name": "_decimals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1532,
														"src": "1937:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1551,
														"name": "decimals_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1539,
														"src": "1949:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "1937:21:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 1553,
												"nodeType": "ExpressionStatement",
												"src": "1937:21:13"
											}
										]
									},
									"documentation": {
										"id": 1533,
										"nodeType": "StructuredDocumentation",
										"src": "1723:76:13",
										"text": " @dev Sets the values for {name}, {symbol} and {decimals}."
									},
									"id": 1555,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1535,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1830:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1816:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1534,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1816:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1537,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1851:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1837:21:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1536,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1837:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "decimals_",
												"nameLocation": "1866:9:13",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "1860:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1538,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1860:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1815:61:13"
									},
									"returnParameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1877:0:13"
									},
									"scope": 2096,
									"src": "1804:161:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										207
									],
									"body": {
										"id": 1564,
										"nodeType": "Block",
										"src": "2099:29:13",
										"statements": [
											{
												"expression": {
													"id": 1562,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1528,
													"src": "2116:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1561,
												"id": 1563,
												"nodeType": "Return",
												"src": "2109:12:13"
											}
										]
									},
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "1971:54:13",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1565,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2039:4:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1558,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2066:8:13"
									},
									"parameters": {
										"id": 1557,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2043:2:13"
									},
									"returnParameters": {
										"id": 1561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1565,
												"src": "2084:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1559,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2084:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2083:15:13"
									},
									"scope": 2096,
									"src": "2030:98:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										213
									],
									"body": {
										"id": 1574,
										"nodeType": "Block",
										"src": "2312:31:13",
										"statements": [
											{
												"expression": {
													"id": 1572,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1530,
													"src": "2329:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 1571,
												"id": 1573,
												"nodeType": "Return",
												"src": "2322:14:13"
											}
										]
									},
									"documentation": {
										"id": 1566,
										"nodeType": "StructuredDocumentation",
										"src": "2134:102:13",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 1575,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2250:6:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1568,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2279:8:13"
									},
									"parameters": {
										"id": 1567,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2256:2:13"
									},
									"returnParameters": {
										"id": 1571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1575,
												"src": "2297:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1569,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2297:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2296:15:13"
									},
									"scope": 2096,
									"src": "2241:102:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										219
									],
									"body": {
										"id": 1584,
										"nodeType": "Block",
										"src": "3032:33:13",
										"statements": [
											{
												"expression": {
													"id": 1582,
													"name": "_decimals",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1532,
													"src": "3049:9:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"functionReturnParameters": 1581,
												"id": 1583,
												"nodeType": "Return",
												"src": "3042:16:13"
											}
										]
									},
									"documentation": {
										"id": 1576,
										"nodeType": "StructuredDocumentation",
										"src": "2349:613:13",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 1585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2976:8:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1578,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3007:8:13"
									},
									"parameters": {
										"id": 1577,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2984:2:13"
									},
									"returnParameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1585,
												"src": "3025:5:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1579,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3025:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3024:7:13"
									},
									"scope": 2096,
									"src": "2967:98:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										126
									],
									"body": {
										"id": 1594,
										"nodeType": "Block",
										"src": "3195:36:13",
										"statements": [
											{
												"expression": {
													"id": 1592,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1526,
													"src": "3212:12:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1591,
												"id": 1593,
												"nodeType": "Return",
												"src": "3205:19:13"
											}
										]
									},
									"documentation": {
										"id": 1586,
										"nodeType": "StructuredDocumentation",
										"src": "3071:49:13",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 1595,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3134:11:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1588,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3168:8:13"
									},
									"parameters": {
										"id": 1587,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3145:2:13"
									},
									"returnParameters": {
										"id": 1591,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1590,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1595,
												"src": "3186:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3186:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3185:9:13"
									},
									"scope": 2096,
									"src": "3125:106:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										134
									],
									"body": {
										"id": 1608,
										"nodeType": "Block",
										"src": "3372:42:13",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1604,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "3389:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1606,
													"indexExpression": {
														"id": 1605,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1598,
														"src": "3399:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3389:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1603,
												"id": 1607,
												"nodeType": "Return",
												"src": "3382:25:13"
											}
										]
									},
									"documentation": {
										"id": 1596,
										"nodeType": "StructuredDocumentation",
										"src": "3237:47:13",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 1609,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3298:9:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1600,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3345:8:13"
									},
									"parameters": {
										"id": 1599,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1598,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3316:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "3308:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1597,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3307:17:13"
									},
									"returnParameters": {
										"id": 1603,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "3363:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1601,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3363:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3362:9:13"
									},
									"scope": 2096,
									"src": "3289:125:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										144
									],
									"body": {
										"id": 1633,
										"nodeType": "Block",
										"src": "3695:104:13",
										"statements": [
											{
												"assignments": [
													1621
												],
												"declarations": [
													{
														"constant": false,
														"id": 1621,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3713:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1633,
														"src": "3705:13:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1620,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3705:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1624,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1622,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "3721:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1623,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3721:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3705:28:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1626,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1621,
															"src": "3753:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1627,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1612,
															"src": "3760:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1628,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1614,
															"src": "3764:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1625,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1857,
														"src": "3743:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3743:28:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1630,
												"nodeType": "ExpressionStatement",
												"src": "3743:28:13"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1631,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3788:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1619,
												"id": 1632,
												"nodeType": "Return",
												"src": "3781:11:13"
											}
										]
									},
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "3420:185:13",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 1634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1616,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3671:8:13"
									},
									"parameters": {
										"id": 1615,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "3628:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1611,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1614,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3648:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "3640:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1613,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:28:13"
									},
									"returnParameters": {
										"id": 1619,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1618,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1634,
												"src": "3689:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1617,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3689:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3688:6:13"
									},
									"scope": 2096,
									"src": "3610:189:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										154
									],
									"body": {
										"id": 1651,
										"nodeType": "Block",
										"src": "3955:51:13",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 1645,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1524,
															"src": "3972:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 1647,
														"indexExpression": {
															"id": 1646,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1637,
															"src": "3984:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3972:18:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1649,
													"indexExpression": {
														"id": 1648,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1639,
														"src": "3991:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3972:27:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1644,
												"id": 1650,
												"nodeType": "Return",
												"src": "3965:34:13"
											}
										]
									},
									"documentation": {
										"id": 1635,
										"nodeType": "StructuredDocumentation",
										"src": "3805:47:13",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 1652,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3866:9:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1641,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3928:8:13"
									},
									"parameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3884:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "3876:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3876:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3899:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "3891:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1638,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3891:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3875:32:13"
									},
									"returnParameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1652,
												"src": "3946:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3946:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3945:9:13"
									},
									"scope": 2096,
									"src": "3857:149:13",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										164
									],
									"body": {
										"id": 1676,
										"nodeType": "Block",
										"src": "4403:108:13",
										"statements": [
											{
												"assignments": [
													1664
												],
												"declarations": [
													{
														"constant": false,
														"id": 1664,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4421:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1676,
														"src": "4413:13:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1663,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4413:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1667,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1665,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "4429:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1666,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4429:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4413:28:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1669,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1664,
															"src": "4460:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1670,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1655,
															"src": "4467:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1671,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1657,
															"src": "4476:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1668,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "4451:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4451:32:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1673,
												"nodeType": "ExpressionStatement",
												"src": "4451:32:13"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1674,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4500:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1662,
												"id": 1675,
												"nodeType": "Return",
												"src": "4493:11:13"
											}
										]
									},
									"documentation": {
										"id": 1653,
										"nodeType": "StructuredDocumentation",
										"src": "4012:297:13",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 1677,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4323:7:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1659,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4379:8:13"
									},
									"parameters": {
										"id": 1658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1655,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4339:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1677,
												"src": "4331:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1654,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4331:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1657,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4356:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1677,
												"src": "4348:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1656,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4348:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4330:33:13"
									},
									"returnParameters": {
										"id": 1662,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1661,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1677,
												"src": "4397:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1660,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4397:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4396:6:13"
									},
									"scope": 2096,
									"src": "4314:197:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										176
									],
									"body": {
										"id": 1709,
										"nodeType": "Block",
										"src": "5206:153:13",
										"statements": [
											{
												"assignments": [
													1691
												],
												"declarations": [
													{
														"constant": false,
														"id": 1691,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5224:7:13",
														"nodeType": "VariableDeclaration",
														"scope": 1709,
														"src": "5216:15:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1690,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5216:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1694,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1692,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "5234:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5234:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5216:30:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1696,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1680,
															"src": "5272:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1697,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1691,
															"src": "5278:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1698,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1684,
															"src": "5287:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1695,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2073,
														"src": "5256:15:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1699,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5256:38:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1700,
												"nodeType": "ExpressionStatement",
												"src": "5256:38:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1702,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1680,
															"src": "5314:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1703,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1682,
															"src": "5320:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1704,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1684,
															"src": "5324:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1701,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1857,
														"src": "5304:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5304:27:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1706,
												"nodeType": "ExpressionStatement",
												"src": "5304:27:13"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1707,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5348:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1689,
												"id": 1708,
												"nodeType": "Return",
												"src": "5341:11:13"
											}
										]
									},
									"documentation": {
										"id": 1678,
										"nodeType": "StructuredDocumentation",
										"src": "4517:551:13",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 1710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5082:12:13",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1686,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5182:8:13"
									},
									"parameters": {
										"id": 1685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5112:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5104:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1679,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5104:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1682,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5134:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5126:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1681,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5126:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1684,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5154:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5146:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1683,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5146:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5094:72:13"
									},
									"returnParameters": {
										"id": 1689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1710,
												"src": "5200:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1687,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5200:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5199:6:13"
									},
									"scope": 2096,
									"src": "5073:286:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1738,
										"nodeType": "Block",
										"src": "5848:140:13",
										"statements": [
											{
												"assignments": [
													1721
												],
												"declarations": [
													{
														"constant": false,
														"id": 1721,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5866:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1738,
														"src": "5858:13:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1720,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5858:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1724,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1722,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "5874:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1723,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5874:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5858:28:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1726,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1721,
															"src": "5905:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1727,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1713,
															"src": "5912:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1729,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1721,
																		"src": "5931:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1730,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1713,
																		"src": "5938:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1728,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1652,
																	"src": "5921:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 1731,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5921:25:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1732,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1715,
																"src": "5949:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5921:38:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1725,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2030,
														"src": "5896:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5896:64:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1735,
												"nodeType": "ExpressionStatement",
												"src": "5896:64:13"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1736,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5977:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1719,
												"id": 1737,
												"nodeType": "Return",
												"src": "5970:11:13"
											}
										]
									},
									"documentation": {
										"id": 1711,
										"nodeType": "StructuredDocumentation",
										"src": "5365:384:13",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 1739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "5763:17:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1716,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5789:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "5781:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1712,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5781:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1715,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "5806:10:13",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "5798:18:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1714,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5798:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5780:37:13"
									},
									"returnParameters": {
										"id": 1719,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1718,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "5842:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1717,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5842:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5841:6:13"
									},
									"scope": 2096,
									"src": "5754:234:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1779,
										"nodeType": "Block",
										"src": "6574:328:13",
										"statements": [
											{
												"assignments": [
													1750
												],
												"declarations": [
													{
														"constant": false,
														"id": 1750,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6592:5:13",
														"nodeType": "VariableDeclaration",
														"scope": 1779,
														"src": "6584:13:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1749,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6584:7:13",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1753,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1751,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 372,
														"src": "6600:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 1752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6600:12:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6584:28:13"
											},
											{
												"assignments": [
													1755
												],
												"declarations": [
													{
														"constant": false,
														"id": 1755,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "6630:16:13",
														"nodeType": "VariableDeclaration",
														"scope": 1779,
														"src": "6622:24:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1754,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6622:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1760,
												"initialValue": {
													"arguments": [
														{
															"id": 1757,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1750,
															"src": "6659:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1758,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1742,
															"src": "6666:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1756,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1652,
														"src": "6649:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 1759,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6649:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6622:52:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1764,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1762,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1755,
																"src": "6692:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1763,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1744,
																"src": "6712:15:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6692:35:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 1765,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6729:39:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 1761,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6684:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6684:85:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1767,
												"nodeType": "ExpressionStatement",
												"src": "6684:85:13"
											},
											{
												"id": 1776,
												"nodeType": "UncheckedBlock",
												"src": "6779:95:13",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1769,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1750,
																	"src": "6812:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1770,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1742,
																	"src": "6819:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1771,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1755,
																		"src": "6828:16:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1772,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1744,
																		"src": "6847:15:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "6828:34:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1768,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2030,
																"src": "6803:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 1774,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6803:60:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1775,
														"nodeType": "ExpressionStatement",
														"src": "6803:60:13"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1777,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6891:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1748,
												"id": 1778,
												"nodeType": "Return",
												"src": "6884:11:13"
											}
										]
									},
									"documentation": {
										"id": 1740,
										"nodeType": "StructuredDocumentation",
										"src": "5994:476:13",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 1780,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "6484:17:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1745,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6510:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "6502:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1741,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6502:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1744,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "6527:15:13",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "6519:23:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1743,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6519:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6501:42:13"
									},
									"returnParameters": {
										"id": 1748,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1747,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1780,
												"src": "6568:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1746,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6568:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6567:6:13"
									},
									"scope": 2096,
									"src": "6475:427:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1856,
										"nodeType": "Block",
										"src": "7473:543:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1796,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1791,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1783,
																"src": "7491:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1794,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7507:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1793,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7499:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1792,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7499:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1795,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7499:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7491:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 1797,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7511:39:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 1790,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7483:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7483:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1799,
												"nodeType": "ExpressionStatement",
												"src": "7483:68:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1806,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1801,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1785,
																"src": "7569:2:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1804,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7583:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1803,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "7575:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1802,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "7575:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7575:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7569:16:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 1807,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7587:37:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 1800,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7561:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1808,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7561:64:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1809,
												"nodeType": "ExpressionStatement",
												"src": "7561:64:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1811,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1783,
															"src": "7657:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1812,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "7663:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1813,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "7667:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1810,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2084,
														"src": "7636:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7636:38:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1815,
												"nodeType": "ExpressionStatement",
												"src": "7636:38:13"
											},
											{
												"assignments": [
													1817
												],
												"declarations": [
													{
														"constant": false,
														"id": 1817,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "7693:11:13",
														"nodeType": "VariableDeclaration",
														"scope": 1856,
														"src": "7685:19:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1816,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7685:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1821,
												"initialValue": {
													"baseExpression": {
														"id": 1818,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "7707:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1820,
													"indexExpression": {
														"id": 1819,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1783,
														"src": "7717:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7707:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7685:37:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1823,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1817,
																"src": "7740:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1824,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1787,
																"src": "7755:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7740:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 1826,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7763:40:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 1822,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7732:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7732:72:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1828,
												"nodeType": "ExpressionStatement",
												"src": "7732:72:13"
											},
											{
												"id": 1837,
												"nodeType": "UncheckedBlock",
												"src": "7814:73:13",
												"statements": [
													{
														"expression": {
															"id": 1835,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1829,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1518,
																	"src": "7838:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1831,
																"indexExpression": {
																	"id": 1830,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1783,
																	"src": "7848:4:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "7838:15:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1832,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1817,
																	"src": "7856:11:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1833,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1787,
																	"src": "7870:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7856:20:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7838:38:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1836,
														"nodeType": "ExpressionStatement",
														"src": "7838:38:13"
													}
												]
											},
											{
												"expression": {
													"id": 1842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1838,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1518,
															"src": "7896:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1840,
														"indexExpression": {
															"id": 1839,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "7906:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "7896:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1841,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1787,
														"src": "7913:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "7896:23:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1843,
												"nodeType": "ExpressionStatement",
												"src": "7896:23:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1845,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1783,
															"src": "7944:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1846,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "7950:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1847,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "7954:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1844,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "7935:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1848,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7935:26:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1849,
												"nodeType": "EmitStatement",
												"src": "7930:31:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1851,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1783,
															"src": "7992:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1852,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1785,
															"src": "7998:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1853,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1787,
															"src": "8002:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1850,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2095,
														"src": "7972:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1854,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7972:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1855,
												"nodeType": "ExpressionStatement",
												"src": "7972:37:13"
											}
										]
									},
									"documentation": {
										"id": 1781,
										"nodeType": "StructuredDocumentation",
										"src": "6908:452:13",
										"text": " @dev Moves `amount` of tokens from `sender` to `recipient`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 1857,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "7374:9:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1783,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "7401:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "7393:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7393:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1785,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7423:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "7415:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1784,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7415:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1787,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "7443:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1857,
												"src": "7435:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7435:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7383:72:13"
									},
									"returnParameters": {
										"id": 1789,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7473:0:13"
									},
									"scope": 2096,
									"src": "7365:651:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1912,
										"nodeType": "Block",
										"src": "8357:324:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1866,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1860,
																"src": "8375:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1869,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8394:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8386:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1867,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8386:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1870,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8386:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8375:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 1872,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8398:33:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 1865,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8367:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1873,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8367:65:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1874,
												"nodeType": "ExpressionStatement",
												"src": "8367:65:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8472:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1877,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8464:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1876,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8464:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1879,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8464:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1880,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "8476:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1881,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1862,
															"src": "8485:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1875,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2084,
														"src": "8443:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1882,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8443:49:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1883,
												"nodeType": "ExpressionStatement",
												"src": "8443:49:13"
											},
											{
												"expression": {
													"id": 1886,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1884,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "8503:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1885,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1862,
														"src": "8519:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8503:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1887,
												"nodeType": "ExpressionStatement",
												"src": "8503:22:13"
											},
											{
												"expression": {
													"id": 1892,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1888,
															"name": "_balances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1518,
															"src": "8535:9:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1890,
														"indexExpression": {
															"id": 1889,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "8545:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "8535:18:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 1891,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1862,
														"src": "8557:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8535:28:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1893,
												"nodeType": "ExpressionStatement",
												"src": "8535:28:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8595:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1896,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8587:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1895,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8587:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1898,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8587:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1899,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "8599:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1900,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1862,
															"src": "8608:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1894,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "8578:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8578:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1902,
												"nodeType": "EmitStatement",
												"src": "8573:42:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1906,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8654:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1905,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8646:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1904,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8646:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1907,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8646:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1908,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1860,
															"src": "8658:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1909,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1862,
															"src": "8667:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1903,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2095,
														"src": "8626:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1910,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8626:48:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1911,
												"nodeType": "ExpressionStatement",
												"src": "8626:48:13"
											}
										]
									},
									"documentation": {
										"id": 1858,
										"nodeType": "StructuredDocumentation",
										"src": "8022:265:13",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 1913,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "8301:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1860,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8315:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1913,
												"src": "8307:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8307:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8332:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1913,
												"src": "8324:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1861,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8324:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8306:33:13"
									},
									"returnParameters": {
										"id": 1864,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8357:0:13"
									},
									"scope": 2096,
									"src": "8292:389:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1984,
										"nodeType": "Block",
										"src": "9066:511:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1927,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1922,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1916,
																"src": "9084:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1925,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9103:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1924,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9095:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1923,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9095:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1926,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9095:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9084:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 1928,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9107:35:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 1921,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9076:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1929,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9076:67:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1930,
												"nodeType": "ExpressionStatement",
												"src": "9076:67:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1932,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1916,
															"src": "9175:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9192:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1934,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9184:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1933,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9184:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1936,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9184:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1937,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "9196:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1931,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2084,
														"src": "9154:20:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9154:49:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1939,
												"nodeType": "ExpressionStatement",
												"src": "9154:49:13"
											},
											{
												"assignments": [
													1941
												],
												"declarations": [
													{
														"constant": false,
														"id": 1941,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "9222:14:13",
														"nodeType": "VariableDeclaration",
														"scope": 1984,
														"src": "9214:22:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1940,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9214:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1945,
												"initialValue": {
													"baseExpression": {
														"id": 1942,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1518,
														"src": "9239:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1944,
													"indexExpression": {
														"id": 1943,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1916,
														"src": "9249:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9239:18:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9214:43:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1949,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1947,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1941,
																"src": "9275:14:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1948,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1918,
																"src": "9293:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9275:24:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 1950,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9301:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 1946,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9267:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1951,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9267:71:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1952,
												"nodeType": "ExpressionStatement",
												"src": "9267:71:13"
											},
											{
												"id": 1961,
												"nodeType": "UncheckedBlock",
												"src": "9348:79:13",
												"statements": [
													{
														"expression": {
															"id": 1959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 1953,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1518,
																	"src": "9372:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1955,
																"indexExpression": {
																	"id": 1954,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1916,
																	"src": "9382:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9372:18:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1956,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1941,
																	"src": "9393:14:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 1957,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1918,
																	"src": "9410:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "9393:23:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9372:44:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1960,
														"nodeType": "ExpressionStatement",
														"src": "9372:44:13"
													}
												]
											},
											{
												"expression": {
													"id": 1964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1962,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1526,
														"src": "9436:12:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1963,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1918,
														"src": "9452:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9436:22:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1965,
												"nodeType": "ExpressionStatement",
												"src": "9436:22:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1967,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1916,
															"src": "9483:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1970,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9500:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1969,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9492:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1968,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9492:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1971,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9492:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1972,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "9504:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1966,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 185,
														"src": "9474:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9474:37:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1974,
												"nodeType": "EmitStatement",
												"src": "9469:42:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1976,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1916,
															"src": "9542:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9559:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1978,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9551:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1977,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9551:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1980,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9551:10:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1981,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1918,
															"src": "9563:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1975,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2095,
														"src": "9522:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1982,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9522:48:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1983,
												"nodeType": "ExpressionStatement",
												"src": "9522:48:13"
											}
										]
									},
									"documentation": {
										"id": 1914,
										"nodeType": "StructuredDocumentation",
										"src": "8687:309:13",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 1985,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "9010:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1919,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1916,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9024:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "9016:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1915,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9016:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1918,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9041:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1985,
												"src": "9033:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1917,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9033:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9015:33:13"
									},
									"returnParameters": {
										"id": 1920,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9066:0:13"
									},
									"scope": 2096,
									"src": "9001:576:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2029,
										"nodeType": "Block",
										"src": "10113:257:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1996,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1988,
																"src": "10131:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1999,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10148:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1998,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10140:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1997,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10140:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10140:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10131:19:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 2002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10152:38:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 1995,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10123:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2003,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10123:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2004,
												"nodeType": "ExpressionStatement",
												"src": "10123:68:13"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2011,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2006,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1990,
																"src": "10209:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2009,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10228:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2008,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10220:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2007,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10220:7:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10220:10:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10209:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10232:36:13",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 2005,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10201:7:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2013,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10201:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2014,
												"nodeType": "ExpressionStatement",
												"src": "10201:68:13"
											},
											{
												"expression": {
													"id": 2021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2015,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1524,
																"src": "10280:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 2018,
															"indexExpression": {
																"id": 2016,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1988,
																"src": "10292:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10280:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 2019,
														"indexExpression": {
															"id": 2017,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1990,
															"src": "10299:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10280:27:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 2020,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1992,
														"src": "10310:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10280:36:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2022,
												"nodeType": "ExpressionStatement",
												"src": "10280:36:13"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2024,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1988,
															"src": "10340:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2025,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1990,
															"src": "10347:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2026,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1992,
															"src": "10356:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2023,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 194,
														"src": "10331:8:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 2027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10331:32:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2028,
												"nodeType": "EmitStatement",
												"src": "10326:37:13"
											}
										]
									},
									"documentation": {
										"id": 1986,
										"nodeType": "StructuredDocumentation",
										"src": "9583:412:13",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 2030,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "10009:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1988,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10035:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "10027:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1987,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10027:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10058:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "10050:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1989,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10050:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10083:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2030,
												"src": "10075:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10075:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10017:78:13"
									},
									"returnParameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10113:0:13"
									},
									"scope": 2096,
									"src": "10000:370:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2072,
										"nodeType": "Block",
										"src": "10771:321:13",
										"statements": [
											{
												"assignments": [
													2041
												],
												"declarations": [
													{
														"constant": false,
														"id": 2041,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10789:16:13",
														"nodeType": "VariableDeclaration",
														"scope": 2072,
														"src": "10781:24:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2040,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10781:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2046,
												"initialValue": {
													"arguments": [
														{
															"id": 2043,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2033,
															"src": "10818:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2044,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2035,
															"src": "10825:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2042,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1652,
														"src": "10808:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 2045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10808:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10781:52:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2047,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2041,
														"src": "10847:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 2050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10872:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 2049,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10872:7:13",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 2048,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10867:4:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 2051,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10867:13:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 2052,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10867:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10847:37:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2071,
												"nodeType": "IfStatement",
												"src": "10843:243:13",
												"trueBody": {
													"id": 2070,
													"nodeType": "Block",
													"src": "10886:200:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2057,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2055,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2041,
																			"src": "10908:16:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 2056,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2037,
																			"src": "10928:6:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "10908:26:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 2058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10936:31:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 2054,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "10900:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2059,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10900:68:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2060,
															"nodeType": "ExpressionStatement",
															"src": "10900:68:13"
														},
														{
															"id": 2069,
															"nodeType": "UncheckedBlock",
															"src": "10982:94:13",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 2062,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2033,
																				"src": "11019:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 2063,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2035,
																				"src": "11026:7:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2066,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2064,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2041,
																					"src": "11035:16:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 2065,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2037,
																					"src": "11054:6:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11035:25:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2061,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2030,
																			"src": "11010:8:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 2067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11010:51:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2068,
																	"nodeType": "ExpressionStatement",
																	"src": "11010:51:13"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2031,
										"nodeType": "StructuredDocumentation",
										"src": "10376:270:13",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 2073,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10660:15:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2038,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2033,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10693:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "10685:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2032,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10685:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2035,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10716:7:13",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "10708:15:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2034,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10708:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2037,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10741:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "10733:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10733:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10675:78:13"
									},
									"returnParameters": {
										"id": 2039,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10771:0:13"
									},
									"scope": 2096,
									"src": "10651:441:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2083,
										"nodeType": "Block",
										"src": "11795:2:13",
										"statements": []
									},
									"documentation": {
										"id": 2074,
										"nodeType": "StructuredDocumentation",
										"src": "11098:573:13",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 2084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "11685:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2076,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "11723:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "11715:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11715:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11745:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "11737:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2077,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11737:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2080,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11765:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2084,
												"src": "11757:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2079,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11757:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11705:72:13"
									},
									"returnParameters": {
										"id": 2082,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11795:0:13"
									},
									"scope": 2096,
									"src": "11676:121:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2094,
										"nodeType": "Block",
										"src": "12503:2:13",
										"statements": []
									},
									"documentation": {
										"id": 2085,
										"nodeType": "StructuredDocumentation",
										"src": "11803:577:13",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 2095,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "12394:19:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2087,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12431:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "12423:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2086,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12423:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2089,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12453:2:13",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "12445:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2088,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12445:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2091,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12473:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 2095,
												"src": "12465:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2090,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12465:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12413:72:13"
									},
									"returnParameters": {
										"id": 2093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12503:0:13"
									},
									"scope": 2096,
									"src": "12385:120:13",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 2097,
							"src": "1411:11096:13",
							"usedErrors": []
						}
					],
					"src": "105:12402:13"
				},
				"id": 13
			}
		}
	}
}