{
  "address": "0x7e289b1E61863D4D9232e716d37a159A97Aeb96E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_solidStaking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "acquired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "name": "AcquiredSharesLessThanMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GenericSwapError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SweepAmountZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "ZapStake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        }
      ],
      "name": "simulateStakeDoubleSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "denominator",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISolidZapStaker.Fraction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        }
      ],
      "name": "simulateStakeETH",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "denominator",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISolidZapStaker.Fraction",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        }
      ],
      "name": "simulateStakeSingleSwap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isDustless",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "numerator",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "denominator",
              "type": "uint256"
            }
          ],
          "internalType": "struct ISolidZapStaker.Fraction",
          "name": "ratio",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solidStaking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        }
      ],
      "name": "stakeDoubleSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        }
      ],
      "name": "stakeDoubleSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        }
      ],
      "name": "stakeETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap1",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "swap2",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        }
      ],
      "name": "stakeETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        }
      ],
      "name": "stakeSingleSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "inputToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "hypervisor",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "minShares",
          "type": "uint256"
        }
      ],
      "name": "stakeSingleSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1597a388637e00f0e566b735f850f8beaf6688c33d184e64ffeee6ea302b611",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0x7e289b1E61863D4D9232e716d37a159A97Aeb96E",
    "transactionIndex": 76,
    "gasUsed": "1659056",
    "logsBloom": "0x
    "blockHash": "0x70daf48da2379f686322beef6329ca2a8cc98a8f72e62382c5f3c5093898ddfd",
    "transactionHash": "0xf1597a388637e00f0e566b735f850f8beaf6688c33d184e64ffeee6ea302b611",
    "logs": [
      {
        "transactionIndex": 76,
        "blockNumber": 46057767,
        "transactionHash": "0xf1597a388637e00f0e566b735f850f8beaf6688c33d184e64ffeee6ea302b611",
        "address": "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007e289b1e61863d4d9232e716d37a159a97aeb96e",
          "0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 338,
        "blockHash": "0x70daf48da2379f686322beef6329ca2a8cc98a8f72e62382c5f3c5093898ddfd"
      },
      {
        "transactionIndex": 76,
        "blockNumber": 46057767,
        "transactionHash": "0xf1597a388637e00f0e566b735f850f8beaf6688c33d184e64ffeee6ea302b611",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b6b7fb5dd120000000000000000000000000000000000000000000000000001967ccd30e81d2b400000000000000000000000000000000000000000000119f6d2172f638ecf9b000000000000000000000000000000000000000000000000018b114d7b0b0b2b400000000000000000000000000000000000000000000119f6dd82af196be19b0",
        "logIndex": 339,
        "blockHash": "0x70daf48da2379f686322beef6329ca2a8cc98a8f72e62382c5f3c5093898ddfd"
      }
    ],
    "blockNumber": 46057767,
    "cumulativeGasUsed": "15833961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0xaD7Ce5Cf8E594e1EFC6922Ab2c9F81d7a0E14337"
  ],
  "numDeployments": 1,
  "solcInputHash": "1174a45943333910f45a57b5ab85a8f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_solidStaking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"acquired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"name\":\"AcquiredSharesLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GenericSwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SweepAmountZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ZapStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"}],\"name\":\"simulateStakeDoubleSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct ISolidZapStaker.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"}],\"name\":\"simulateStakeETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct ISolidZapStaker.Fraction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"}],\"name\":\"simulateStakeSingleSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isDustless\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"internalType\":\"struct ISolidZapStaker.Fraction\",\"name\":\"ratio\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solidStaking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"}],\"name\":\"stakeDoubleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"}],\"name\":\"stakeDoubleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"}],\"name\":\"stakeETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"swap2\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"}],\"name\":\"stakeETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"}],\"name\":\"stakeSingleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"inputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"hypervisor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"minShares\",\"type\":\"uint256\"}],\"name\":\"stakeSingleSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World\",\"kind\":\"dev\",\"methods\":{\"simulateStakeDoubleSwap(address,uint256,address,bytes,bytes)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"swap1\":\"Encoded swap to partially swap `inputToken` to desired token\",\"swap2\":\"Encoded swap to partially swap `inputToken` to desired token\"},\"returns\":{\"_0\":\"Whether the resulting tokens qualify for a dustless liquidity deployment\",\"_1\":\"The amount of shares minted from the dustless liquidity deployment\",\"_2\":\"The current gamma token ratio, or empty if dustless\"}},\"simulateStakeETH(address,bytes,bytes)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"swap1\":\"Encoded swap to partially swap `WETH` to desired token\",\"swap2\":\"Encoded swap to partially swap `WETH` to desired token\"},\"returns\":{\"_0\":\"Whether the resulting tokens qualify for a dustless liquidity deployment\",\"_1\":\"The amount of shares minted from the dustless liquidity deployment\",\"_2\":\"The current gamma token ratio, or empty if dustless\"}},\"simulateStakeSingleSwap(address,uint256,address,bytes)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"swap\":\"Encoded swap to partially (close to 50%) swap `inputToken` to desired token\"},\"returns\":{\"isDustless\":\"Whether the resulting tokens qualify for a dustless liquidity deployment\",\"ratio\":\"The current gamma token ratio, or empty if dustless\",\"shares\":\"The amount of shares minted from the dustless liquidity deployment\"}},\"stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap1\":\"Encoded swap to partially swap `inputToken` to desired token\",\"swap2\":\"Encoded swap to partially swap `inputToken` to desired token\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}},\"stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256,address)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap1\":\"Encoded swap to partially swap `inputToken` to desired token\",\"swap2\":\"Encoded swap to partially swap `inputToken` to desired token\",\"zapRecipient\":\"The beneficiary of the staked shares\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}},\"stakeETH(address,bytes,bytes,uint256)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap1\":\"Encoded swap to partially swap `WETH` to desired token\",\"swap2\":\"Encoded swap to partially swap `WETH` to desired token\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}},\"stakeETH(address,bytes,bytes,uint256,address)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap1\":\"Encoded swap to partially swap `WETH` to desired token\",\"swap2\":\"Encoded swap to partially swap `WETH` to desired token\",\"zapRecipient\":\"The beneficiary of the staked shares\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}},\"stakeSingleSwap(address,uint256,address,bytes,uint256)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap\":\"Encoded swap to partially swap `inputToken` to desired token\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}},\"stakeSingleSwap(address,uint256,address,bytes,uint256,address)\":{\"params\":{\"hypervisor\":\"The hypervisor used to deploy liquidity\",\"inputAmount\":\"The amount of `inputToken` to use\",\"inputToken\":\"The token used to provide liquidity\",\"minShares\":\"The minimum amount of liquidity shares required for transaction to succeed\",\"swap\":\"Encoded swap to partially swap `inputToken` to desired token\",\"zapRecipient\":\"The beneficiary of the staked shares\"},\"returns\":{\"_0\":\"The amount of shares staked in `solidStaking`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"simulateStakeDoubleSwap(address,uint256,address,bytes,bytes)\":{\"notice\":\"Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returnsThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\"},\"simulateStakeETH(address,bytes,bytes)\":{\"notice\":\"Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returns\"},\"simulateStakeSingleSwap(address,uint256,address,bytes)\":{\"notice\":\"Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 2. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returnsThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1\"},\"stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256)\":{\"notice\":\"Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\"},\"stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256,address)\":{\"notice\":\"Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\"},\"stakeETH(address,bytes,bytes,uint256)\":{\"notice\":\"Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 5. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\"},\"stakeETH(address,bytes,bytes,uint256,address)\":{\"notice\":\"Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 5. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\"},\"stakeSingleSwap(address,uint256,address,bytes,uint256)\":{\"notice\":\"Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1\"},\"stakeSingleSwap(address,uint256,address,bytes,uint256,address)\":{\"notice\":\"Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zap/staking/SolidZapStaker.sol\":\"SolidZapStaker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IHypervisor {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function whitelistedAddress() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2dd95cedcd554cbdc9db45145ca1445da7b401b9a2eadd5021e197957a164020\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IUniProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IUniProxy {\\n    /// @notice Deposit into the given position\\n    /// @param deposit0 Amount of token0 to deposit\\n    /// @param deposit1 Amount of token1 to deposit\\n    /// @param to Address to receive liquidity tokens\\n    /// @param pos Hypervisor Address\\n    /// @param minIn Minimum amount of tokens that should be paid\\n    /// @return shares Amount of liquidity tokens received\\n    function deposit(\\n        uint deposit0,\\n        uint deposit1,\\n        address to,\\n        address pos,\\n        uint[4] memory minIn\\n    ) external returns (uint shares);\\n\\n    /// @notice Get the amount of token to deposit for the given amount of pair token\\n    /// @param pos Hypervisor Address\\n    /// @param token Address of token to deposit\\n    /// @param depositAmount Amount of token to deposit\\n    /// @return amountStart Minimum amounts of the pair token to deposit\\n    /// @return amountEnd Maximum amounts of the pair token to deposit\\n    function getDepositAmount(\\n        address pos,\\n        address token,\\n        uint depositAmount\\n    ) external view returns (uint amountStart, uint amountEnd);\\n}\\n\",\"keccak256\":\"0x0b402f5b8234f1d87a754c3754dae79b112214bae61bc5c66b656fcf8d354282\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ISolidStakingActions_0_8_18.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @title Permissionless state-mutating actions\\n/// @notice Contains state-mutating functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingActions {\\n    /// @dev Stakes tokens for the caller into the staking contract\\n    /// @param token the token to stake\\n    /// @param amount the amount to stake\\n    function stake(address token, uint amount) external;\\n\\n    /// @notice msg.sender stakes tokens for the recipient into the staking contract\\n    /// @dev funds are subtracted from msg.sender, stake is credited to recipient\\n    /// @param token the token to stake\\n    /// @param amount the amount to stake\\n    /// @param recipient the recipient of the stake\\n    function stake(\\n        address token,\\n        uint amount,\\n        address recipient\\n    ) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdraw(address token, uint amount) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @dev Claims all rewards of the incentivized `token` for the caller\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdrawStakeAndClaimRewards(address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0x6754dcdc9e9b77f29dc095c6a1e62b32fd4853f9492f9103732ef1a8a068738f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/staking/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3c5c1ca48db86c8180fd33431a6934a843f6778a56f1cfe26b35be1976c5c026\",\"license\":\"MIT\"},\"contracts/interfaces/zap/ISWManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @author Solid World\\n/// @dev The minimal interface used to interact with SolidWorldManager\\ninterface ISWManager {\\n    function collateralizeBatch(\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) external;\\n\\n    function bulkDecollateralizeTokens(\\n        uint[] calldata batchIds,\\n        uint[] calldata amountsIn,\\n        uint[] calldata amountsOutMin\\n    ) external;\\n\\n    function getBatchCategory(uint batchId) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x78a58d7b460191ad01996d373fe19058fee655e7d9866a4c289317c28b64fb58\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/zap/ISolidZapStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @author Solid World\\ninterface ISolidZapStaker {\\n    error AcquiredSharesLessThanMin(uint acquired, uint min);\\n    error InvalidSwap();\\n\\n    event ZapStake(\\n        address indexed zapRecipient,\\n        address indexed inputToken,\\n        uint indexed inputAmount,\\n        uint shares\\n    );\\n\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n\\n    struct SwapResult {\\n        address _address;\\n        uint balance;\\n    }\\n\\n    struct SwapResults {\\n        SwapResult token0;\\n        SwapResult token1;\\n    }\\n\\n    function router() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function solidStaking() external view returns (address);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares,\\n        address zapRecipient\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 5. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external payable returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 5. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external payable returns (uint shares);\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        payable\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 2. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially (close to 50%) swap `inputToken` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap\\n    )\\n        external\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n}\\n\",\"keccak256\":\"0xac2c8e49c9d706e6d5d862cfc5230d0ca0a576244888585c0cc488fd78275469\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/GPv2SafeERC20_0_8_18.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5957e7cdd5e776533722343b4470d247943950d5a18020d675870292931040d1\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Simply use address for `token` parameter\\nlibrary SafeTransferLib {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x591f3ac809bd1fd8c3e1550e11c63c96430b6d8996c405c530899e5641cff24e\",\"license\":\"AGPL-3.0-only\"},\"contracts/zap/BaseZap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/staking/IWETH.sol\\\";\\nimport \\\"../interfaces/zap/ISolidZapStaker.sol\\\";\\nimport \\\"../interfaces/zap/ISWManager.sol\\\";\\nimport \\\"../libraries/GPv2SafeERC20_0_8_18.sol\\\";\\nimport \\\"../libraries/SafeTransferLib.sol\\\";\\n\\n/// @author Solid World\\nabstract contract BaseZap {\\n    using GPv2SafeERC20 for IERC20;\\n    using SafeTransferLib for address;\\n\\n    error GenericSwapError();\\n    error InvalidInput();\\n    error SweepAmountZero();\\n\\n    function _swapViaRouter(address router, bytes calldata encodedSwap) internal {\\n        (bool success, bytes memory retData) = router.call(encodedSwap);\\n\\n        if (!success) {\\n            _propagateError(retData);\\n        }\\n    }\\n\\n    function _propagateError(bytes memory revertReason) internal pure {\\n        if (revertReason.length == 0) {\\n            revert GenericSwapError();\\n        }\\n\\n        assembly {\\n            revert(add(32, revertReason), mload(revertReason))\\n        }\\n    }\\n\\n    function _wrap(address weth, uint amount) internal {\\n        IWETH(weth).deposit{ value: amount }();\\n    }\\n\\n    function _approveTokenSpendingIfNeeded(address token, address spender) internal {\\n        if (IERC20(token).allowance(address(this), spender) == 0) {\\n            token.safeApprove(spender, type(uint).max);\\n        }\\n    }\\n\\n    function _prepareToSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address _router\\n    ) internal {\\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n        _approveTokenSpendingIfNeeded(inputToken, _router);\\n    }\\n\\n    function _sweepTokensTo(address token, address zapRecipient) internal returns (uint sweptAmount) {\\n        sweptAmount = _sweepTokensTo(token, zapRecipient, false);\\n    }\\n\\n    function _sweepTokensTo(\\n        address token,\\n        address zapRecipient,\\n        bool revertOnSweepAmountZero\\n    ) internal returns (uint sweptAmount) {\\n        sweptAmount = IERC20(token).balanceOf(address(this));\\n        if (sweptAmount == 0 && revertOnSweepAmountZero) {\\n            revert SweepAmountZero();\\n        }\\n\\n        if (sweptAmount > 0) {\\n            IERC20(token).safeTransfer(zapRecipient, sweptAmount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed80506f342328f01ab000176090d593355bdb2ee83474c9993948f0f1811db7\",\"license\":\"BUSL-1.1\"},\"contracts/zap/staking/BaseSolidZapStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../../interfaces/liquidity-deployer/IHypervisor.sol\\\";\\nimport \\\"../../interfaces/liquidity-deployer/IUniProxy.sol\\\";\\nimport \\\"../../interfaces/staking/ISolidStakingActions_0_8_18.sol\\\";\\nimport \\\"../BaseZap.sol\\\";\\n\\n/// @author Solid World\\nabstract contract BaseSolidZapStaker is BaseZap, ISolidZapStaker, ReentrancyGuard {\\n    address public immutable router;\\n    address public immutable weth;\\n    address public immutable solidStaking;\\n\\n    constructor(\\n        address _router,\\n        address _weth,\\n        address _solidStaking\\n    ) {\\n        router = _router;\\n        weth = _weth;\\n        solidStaking = _solidStaking;\\n\\n        IWETH(weth).approve(_router, type(uint).max);\\n    }\\n\\n    function _fetchHypervisorTokens(address hypervisor)\\n        internal\\n        view\\n        returns (address token0, address token1)\\n    {\\n        token0 = IHypervisor(hypervisor).token0();\\n        token1 = IHypervisor(hypervisor).token1();\\n    }\\n\\n    function _fetchTokenBalances(address token0, address token1)\\n        internal\\n        view\\n        returns (uint token0Balance, uint token1Balance)\\n    {\\n        token0Balance = IERC20(token0).balanceOf(address(this));\\n        token1Balance = IERC20(token1).balanceOf(address(this));\\n    }\\n\\n    function _deployLiquidity(SwapResults memory swapResults, address hypervisor)\\n        internal\\n        returns (uint shares)\\n    {\\n        _approveTokenSpendingIfNeeded(swapResults.token0._address, hypervisor);\\n        _approveTokenSpendingIfNeeded(swapResults.token1._address, hypervisor);\\n        shares = IUniProxy(getUniProxy(hypervisor)).deposit(\\n            swapResults.token0.balance,\\n            swapResults.token1.balance,\\n            address(this),\\n            hypervisor,\\n            _uniProxyMinIn()\\n        );\\n    }\\n\\n    function _stakeWithRecipient(\\n        address token,\\n        uint amount,\\n        address zapRecipient\\n    ) internal {\\n        ISolidStakingActions(solidStaking).stake(token, amount, zapRecipient);\\n    }\\n\\n    function _between(\\n        uint x,\\n        uint min,\\n        uint max\\n    ) internal pure returns (bool) {\\n        return x >= min && x <= max;\\n    }\\n\\n    function _uniProxyMinIn() internal pure returns (uint[4] memory) {\\n        return [uint(0), uint(0), uint(0), uint(0)];\\n    }\\n\\n    function getUniProxy(address hypervisor) internal view returns (address) {\\n        return IHypervisor(hypervisor).whitelistedAddress();\\n    }\\n}\\n\",\"keccak256\":\"0x01b3b638cf5fd6aaefb47643d1583609b08ffe0dc45a18f41d001eb8f79c4312\",\"license\":\"BUSL-1.1\"},\"contracts/zap/staking/SolidZapStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"./BaseSolidZapStaker.sol\\\";\\n\\n/// @author Solid World\\ncontract SolidZapStaker is BaseSolidZapStaker {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _router,\\n        address _weth,\\n        address _solidStaking\\n    ) BaseSolidZapStaker(_router, _weth, _solidStaking) {}\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external nonReentrant returns (uint) {\\n        _prepareToSwap(inputToken, inputAmount, router);\\n        return _stakeDoubleSwap(inputToken, inputAmount, hypervisor, swap1, swap2, minShares, zapRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external nonReentrant returns (uint) {\\n        _prepareToSwap(inputToken, inputAmount, router);\\n        return _stakeDoubleSwap(inputToken, inputAmount, hypervisor, swap1, swap2, minShares, msg.sender);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares,\\n        address zapRecipient\\n    ) external nonReentrant returns (uint) {\\n        return _stakeSingleSwap(inputToken, inputAmount, hypervisor, swap, minShares, zapRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares\\n    ) external nonReentrant returns (uint) {\\n        return _stakeSingleSwap(inputToken, inputAmount, hypervisor, swap, minShares, msg.sender);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external payable nonReentrant returns (uint) {\\n        _wrap(weth, msg.value);\\n\\n        return _stakeDoubleSwap(weth, msg.value, hypervisor, swap1, swap2, minShares, zapRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external payable nonReentrant returns (uint) {\\n        _wrap(weth, msg.value);\\n\\n        return _stakeDoubleSwap(weth, msg.value, hypervisor, swap1, swap2, minShares, msg.sender);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function simulateStakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        nonReentrant\\n        returns (\\n            bool,\\n            uint,\\n            Fraction memory\\n        )\\n    {\\n        _prepareToSwap(inputToken, inputAmount, router);\\n\\n        return _simulateStakeDoubleSwap(hypervisor, swap1, swap2);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function simulateStakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        payable\\n        nonReentrant\\n        returns (\\n            bool,\\n            uint,\\n            Fraction memory\\n        )\\n    {\\n        _wrap(weth, msg.value);\\n\\n        return _simulateStakeDoubleSwap(hypervisor, swap1, swap2);\\n    }\\n\\n    /// @inheritdoc ISolidZapStaker\\n    function simulateStakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap\\n    )\\n        external\\n        nonReentrant\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        )\\n    {\\n        SwapResults memory swapResults = _singleSwap(inputToken, inputAmount, hypervisor, swap);\\n\\n        return _simulateLiquidityDeployment(hypervisor, swapResults);\\n    }\\n\\n    function _simulateStakeDoubleSwap(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        private\\n        returns (\\n            bool,\\n            uint,\\n            Fraction memory\\n        )\\n    {\\n        SwapResults memory swapResults = _doubleSwap(hypervisor, swap1, swap2);\\n        return _simulateLiquidityDeployment(hypervisor, swapResults);\\n    }\\n\\n    function _simulateLiquidityDeployment(address hypervisor, SwapResults memory swapResults)\\n        private\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        )\\n    {\\n        (isDustless, ratio) = _checkDustless(hypervisor, swapResults);\\n\\n        if (isDustless) {\\n            shares = _deployLiquidity(swapResults, hypervisor);\\n        }\\n    }\\n\\n    function _stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) private returns (uint) {\\n        SwapResults memory swapResults = _doubleSwap(hypervisor, swap1, swap2);\\n\\n        return _stake(inputToken, inputAmount, hypervisor, minShares, zapRecipient, swapResults);\\n    }\\n\\n    function _stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares,\\n        address zapRecipient\\n    ) private returns (uint) {\\n        SwapResults memory swapResults = _singleSwap(inputToken, inputAmount, hypervisor, swap);\\n\\n        return _stake(inputToken, inputAmount, hypervisor, minShares, zapRecipient, swapResults);\\n    }\\n\\n    function _stake(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        uint minShares,\\n        address zapRecipient,\\n        SwapResults memory swapResults\\n    ) private returns (uint shares) {\\n        shares = _deployLiquidity(swapResults, hypervisor);\\n\\n        if (shares < minShares) {\\n            revert AcquiredSharesLessThanMin(shares, minShares);\\n        }\\n\\n        _approveTokenSpendingIfNeeded(hypervisor, solidStaking);\\n        _stakeWithRecipient(hypervisor, shares, zapRecipient);\\n\\n        emit ZapStake(zapRecipient, inputToken, inputAmount, shares);\\n    }\\n\\n    function _doubleSwap(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    ) private returns (SwapResults memory swapResults) {\\n        (address token0Address, address token1Address) = _fetchHypervisorTokens(hypervisor);\\n        (uint token0BalanceBefore, uint token1BalanceBefore) = _fetchTokenBalances(\\n            token0Address,\\n            token1Address\\n        );\\n\\n        _swapViaRouter(router, swap1);\\n        _swapViaRouter(router, swap2);\\n\\n        (uint token0BalanceAfter, uint token1BalanceAfter) = _fetchTokenBalances(\\n            token0Address,\\n            token1Address\\n        );\\n\\n        if (token0BalanceAfter <= token0BalanceBefore || token1BalanceAfter <= token1BalanceBefore) {\\n            revert InvalidSwap();\\n        }\\n\\n        swapResults.token0._address = token0Address;\\n        swapResults.token0.balance = token0BalanceAfter - token0BalanceBefore;\\n\\n        swapResults.token1._address = token1Address;\\n        swapResults.token1.balance = token1BalanceAfter - token1BalanceBefore;\\n    }\\n\\n    function _singleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap\\n    ) private returns (SwapResults memory swapResults) {\\n        (address token0Address, address token1Address) = _fetchHypervisorTokens(hypervisor);\\n\\n        if (inputToken != token0Address && inputToken != token1Address) {\\n            revert InvalidInput();\\n        }\\n\\n        (uint token0BalanceBefore, uint token1BalanceBefore) = _fetchTokenBalances(\\n            token0Address,\\n            token1Address\\n        );\\n\\n        _prepareToSwap(inputToken, inputAmount, router);\\n        _swapViaRouter(router, swap);\\n\\n        (uint token0BalanceAfter, uint token1BalanceAfter) = _fetchTokenBalances(\\n            token0Address,\\n            token1Address\\n        );\\n\\n        if (token0BalanceAfter <= token0BalanceBefore || token1BalanceAfter <= token1BalanceBefore) {\\n            revert InvalidSwap();\\n        }\\n\\n        swapResults.token0._address = token0Address;\\n        swapResults.token0.balance = token0BalanceAfter - token0BalanceBefore;\\n\\n        swapResults.token1._address = token1Address;\\n        swapResults.token1.balance = token1BalanceAfter - token1BalanceBefore;\\n    }\\n\\n    function _checkDustless(address hypervisor, SwapResults memory swapResults)\\n        private\\n        view\\n        returns (bool isDustless, Fraction memory actualRatio)\\n    {\\n        (uint amountStart, uint amountEnd) = IUniProxy(getUniProxy(hypervisor)).getDepositAmount(\\n            hypervisor,\\n            swapResults.token0._address,\\n            swapResults.token0.balance\\n        );\\n\\n        isDustless = _between(swapResults.token1.balance, amountStart, amountEnd);\\n\\n        if (!isDustless) {\\n            actualRatio = Fraction(swapResults.token0.balance, Math.average(amountStart, amountEnd));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb914447e006286b7c7a6ad0002313ab4ef38edd1b1e725bcee6be40c645d7f87\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001e2d38038062001e2d8339810160408190526200003491620000f4565b60016000556001600160a01b03838116608081905283821660a081905291831660c05260405163095ea7b360e01b8152600481019190915260001960248201528491849184919063095ea7b3906044016020604051808303816000875af1158015620000a4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ca91906200013e565b5050505050505062000169565b80516001600160a01b0381168114620000ef57600080fd5b919050565b6000806000606084860312156200010a57600080fd5b6200011584620000d7565b92506200012560208501620000d7565b91506200013560408501620000d7565b90509250925092565b6000602082840312156200015157600080fd5b815180151581146200016257600080fd5b9392505050565b60805160a05160c051611c39620001f4600039600081816101e401528181610c8d01526113a501526000818161018b0152818161032d015281816103570152818161048c015281816104e8015261051201526000818161027e015281816102d1015281816103c9015281816105a301528181610895015281816108be0152610c0f0152611c396000f3fe6080604052600436106100c75760003560e01c80634d93907211610074578063c0dd9c2f1161004e578063c0dd9c2f1461024c578063f887ea401461026c578063fbe522d4146102a057600080fd5b80634d939072146102065780637ead4aa414610226578063b998ef0e1461023957600080fd5b806310241b93116100a557806310241b93146101595780633fc8cef314610179578063452b7724146101d257600080fd5b806303df8699146100cc57806307e1761a146100ff5780630e8807dc14610112575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004611596565b6102c0565b6040519081526020015b60405180910390f35b6100ec61010d36600461163c565b61031e565b34801561011e57600080fd5b5061013261012d3660046116dc565b61039a565b604080519315158452602080850193909352815190840152015160608201526080016100f6565b34801561016557600080fd5b506100ec61017436600461177b565b610417565b34801561018557600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f6565b3480156101de57600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021257600080fd5b506100ec6102213660046117fb565b610430565b610132610234366004611876565b61045f565b6100ec6102473660046118f9565b6104d9565b34801561025857600080fd5b50610132610267366004611984565b61053e565b34801561027857600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ac57600080fd5b506100ec6102bb3660046119e6565b610592565b60006102ca6105f1565b6102f589897f0000000000000000000000000000000000000000000000000000000000000000610669565b61030689898989898989893361069a565b90506103126001600055565b98975050505050505050565b60006103286105f1565b6103527f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6103837f0000000000000000000000000000000000000000000000000000000000000000348a8a8a8a8a8a8a61069a565b905061038f6001600055565b979650505050505050565b6000806103ba604051806040016040528060008152602001600081525090565b6103c26105f1565b6103ed8a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6103fa888888888861072e565b92509250925061040a6001600055565b9750975097945050505050565b60006104216105f1565b6103838888888888888861077b565b600061043a6105f1565b6104498787878787873361077b565b90506104556001600055565b9695505050505050565b60008061047f604051806040016040528060008152602001600081525090565b6104876105f1565b6104b17f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6104be888888888861072e565b9250925092506104ce6001600055565b955095509592505050565b60006104e36105f1565b61050d7f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6104497f0000000000000000000000000000000000000000000000000000000000000000348989898989893361069a565b60008061055e604051806040016040528060008152602001600081525090565b6105666105f1565b6000610575898989898961079b565b905061058187826109a9565b935093509350506104ce6001600055565b600061059c6105f1565b6105c78a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6105d88a8a8a8a8a8a8a8a8a61069a565b90506105e46001600055565b9998505050505050505050565b600260005403610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b61068b73ffffffffffffffffffffffffffffffffffffffff84163330856109f2565b6106958382610ad4565b505050565b6000806106aa8989898989610bb6565b90506106ba8b8b8b878786610c35565b9b9a5050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b50505050505050565b60008061074e604051806040016040528060008152602001600081525090565b600061075d8989898989610bb6565b905061076989826109a9565b93509350935050955095509592505050565b60008061078b898989898961079b565b90506105e4898989878786610c35565b6040805160808101825260008183018181526060830182905282528251808401909352808352602080840182905282019290925290806107da86610d2e565b915091508173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415801561084657508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b1561087d576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061088a8484610e18565b915091506108b98a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6108e47f00000000000000000000000000000000000000000000000000000000000000008888610f45565b6000806108f18686610e18565b9150915083821115806109045750828111155b1561093b576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b865173ffffffffffffffffffffffffffffffffffffffff871690526109608483611ad0565b875160209081019190915287015173ffffffffffffffffffffffffffffffffffffffff861690526109918382611ad0565b602080890151015250949a9950505050505050505050565b6000806109c9604051806040016040528060008152602001600081525090565b6109d38585610fc4565b909350905082156109eb576109e884866110e7565b91505b9250925092565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af1610a5d573d6000803e3d6000fd5b50610a67856111b1565b610acd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610659565b5050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a9190611ae3565b600003610bb257610bb273ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61127c565b5050565b604080516080810182526000818301818152606083018290528252825180840190935280835260208084018290528201929092529080610bf588610d2e565b91509150600080610c068484610e18565b915091506108b97f00000000000000000000000000000000000000000000000000000000000000008a8a610f45565b6000610c4182866110e7565b905083811015610c87576040517f19a6c71a0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610659565b610cb1857f0000000000000000000000000000000000000000000000000000000000000000610ad4565b610cbc858285611351565b858773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f7602444f1556ffa1306aa87f177d86fbfe2b5088a5306c38bd2d223ed1de707584604051610d1c91815260200190565b60405180910390a49695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190611afc565b91508273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611afc565b9050915091565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190611ae3565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290925073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c9190611ae3565b90509250929050565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610f6f929190611b19565b6000604051808303816000865af19150503d8060008114610fac576040519150601f19603f3d011682016040523d82523d6000602084013e610fb1565b606091505b509150915081610acd57610acd816113e9565b6000610fe3604051806040016040528060008152602001600081525090565b600080610fef8661142c565b855180516020909101516040517f5ccfb71d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015292831660248201526044810191909152911690635ccfb71d906064016040805180830381865afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611b29565b915091506110af85602001516020015183836114a3565b9350836110de57604051806040016040528086600001516020015181526020016110d984846114bd565b905292505b50509250929050565b8151516000906110f79083610ad4565b6020830151516111079083610ad4565b6111108261142c565b73ffffffffffffffffffffffffffffffffffffffff16638e3c92e484600001516020015185602001516020015130866111476114d8565b6040518663ffffffff1660e01b8152600401611167959493929190611b4d565b6020604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190611ae3565b9392505050565b60006111f0565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d801561122f57602081146112695761122a7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6111b8565b611276565b823b611260576112607f475076323a206e6f74206120636f6e747261637400000000000000000000000060146111b8565b60019150611276565b3d6000803e600051151591505b50919050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610659565b50505050565b6040517f294091cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063294091cd90606401600060405180830381600087803b15801561071157600080fd5b8051600003611424576040517f67e1b70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b60008173ffffffffffffffffffffffffffffffffffffffff166386a290816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190611afc565b92915050565b60008284101580156114b55750818411155b949350505050565b60006114cc6002848418611bb5565b6111aa90848416611bf0565b6114e061150a565b60405180608001604052806000815260200160008152602001600081526020016000815250905090565b60405180608001604052806004906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461154a57600080fd5b50565b60008083601f84011261155f57600080fd5b50813567ffffffffffffffff81111561157757600080fd5b60208301915083602082850101111561158f57600080fd5b9250929050565b60008060008060008060008060c0898b0312156115b257600080fd5b88356115bd81611528565b97506020890135965060408901356115d481611528565b9550606089013567ffffffffffffffff808211156115f157600080fd5b6115fd8c838d0161154d565b909750955060808b013591508082111561161657600080fd5b506116238b828c0161154d565b999c989b50969995989497949560a00135949350505050565b600080600080600080600060a0888a03121561165757600080fd5b873561166281611528565b9650602088013567ffffffffffffffff8082111561167f57600080fd5b61168b8b838c0161154d565b909850965060408a01359150808211156116a457600080fd5b506116b18a828b0161154d565b9095509350506060880135915060808801356116cc81611528565b8091505092959891949750929550565b600080600080600080600060a0888a0312156116f757600080fd5b873561170281611528565b965060208801359550604088013561171981611528565b9450606088013567ffffffffffffffff8082111561173657600080fd5b6117428b838c0161154d565b909650945060808a013591508082111561175b57600080fd5b506117688a828b0161154d565b989b979a50959850939692959293505050565b600080600080600080600060c0888a03121561179657600080fd5b87356117a181611528565b96506020880135955060408801356117b881611528565b9450606088013567ffffffffffffffff8111156117d457600080fd5b6117e08a828b0161154d565b9095509350506080880135915060a08801356116cc81611528565b60008060008060008060a0878903121561181457600080fd5b863561181f81611528565b955060208701359450604087013561183681611528565b9350606087013567ffffffffffffffff81111561185257600080fd5b61185e89828a0161154d565b979a9699509497949695608090950135949350505050565b60008060008060006060868803121561188e57600080fd5b853561189981611528565b9450602086013567ffffffffffffffff808211156118b657600080fd5b6118c289838a0161154d565b909650945060408801359150808211156118db57600080fd5b506118e88882890161154d565b969995985093965092949392505050565b6000806000806000806080878903121561191257600080fd5b863561191d81611528565b9550602087013567ffffffffffffffff8082111561193a57600080fd5b6119468a838b0161154d565b9097509550604089013591508082111561195f57600080fd5b5061196c89828a0161154d565b979a9699509497949695606090950135949350505050565b60008060008060006080868803121561199c57600080fd5b85356119a781611528565b94506020860135935060408601356119be81611528565b9250606086013567ffffffffffffffff8111156119da57600080fd5b6118e88882890161154d565b600080600080600080600080600060e08a8c031215611a0457600080fd5b8935611a0f81611528565b985060208a0135975060408a0135611a2681611528565b965060608a013567ffffffffffffffff80821115611a4357600080fd5b611a4f8d838e0161154d565b909850965060808c0135915080821115611a6857600080fd5b50611a758c828d0161154d565b90955093505060a08a0135915060c08a0135611a9081611528565b809150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561149d5761149d611aa1565b600060208284031215611af557600080fd5b5051919050565b600060208284031215611b0e57600080fd5b81516111aa81611528565b8183823760009101908152919050565b60008060408385031215611b3c57600080fd5b505080516020909101519092909150565b858152602080820186905273ffffffffffffffffffffffffffffffffffffffff858116604084015284166060830152610100820190608083018460005b6004811015611ba757815183529183019190830190600101611b8a565b505050509695505050505050565b600082611beb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561149d5761149d611aa156fea2646970667358221220f1bc86db457c1cbe43bcb11b7a861fa4adf000938b5a18965119ccec7b95822264736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c75760003560e01c80634d93907211610074578063c0dd9c2f1161004e578063c0dd9c2f1461024c578063f887ea401461026c578063fbe522d4146102a057600080fd5b80634d939072146102065780637ead4aa414610226578063b998ef0e1461023957600080fd5b806310241b93116100a557806310241b93146101595780633fc8cef314610179578063452b7724146101d257600080fd5b806303df8699146100cc57806307e1761a146100ff5780630e8807dc14610112575b600080fd5b3480156100d857600080fd5b506100ec6100e7366004611596565b6102c0565b6040519081526020015b60405180910390f35b6100ec61010d36600461163c565b61031e565b34801561011e57600080fd5b5061013261012d3660046116dc565b61039a565b604080519315158452602080850193909352815190840152015160608201526080016100f6565b34801561016557600080fd5b506100ec61017436600461177b565b610417565b34801561018557600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100f6565b3480156101de57600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021257600080fd5b506100ec6102213660046117fb565b610430565b610132610234366004611876565b61045f565b6100ec6102473660046118f9565b6104d9565b34801561025857600080fd5b50610132610267366004611984565b61053e565b34801561027857600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ac57600080fd5b506100ec6102bb3660046119e6565b610592565b60006102ca6105f1565b6102f589897f0000000000000000000000000000000000000000000000000000000000000000610669565b61030689898989898989893361069a565b90506103126001600055565b98975050505050505050565b60006103286105f1565b6103527f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6103837f0000000000000000000000000000000000000000000000000000000000000000348a8a8a8a8a8a8a61069a565b905061038f6001600055565b979650505050505050565b6000806103ba604051806040016040528060008152602001600081525090565b6103c26105f1565b6103ed8a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6103fa888888888861072e565b92509250925061040a6001600055565b9750975097945050505050565b60006104216105f1565b6103838888888888888861077b565b600061043a6105f1565b6104498787878787873361077b565b90506104556001600055565b9695505050505050565b60008061047f604051806040016040528060008152602001600081525090565b6104876105f1565b6104b17f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6104be888888888861072e565b9250925092506104ce6001600055565b955095509592505050565b60006104e36105f1565b61050d7f0000000000000000000000000000000000000000000000000000000000000000346106c9565b6104497f0000000000000000000000000000000000000000000000000000000000000000348989898989893361069a565b60008061055e604051806040016040528060008152602001600081525090565b6105666105f1565b6000610575898989898961079b565b905061058187826109a9565b935093509350506104ce6001600055565b600061059c6105f1565b6105c78a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6105d88a8a8a8a8a8a8a8a8a61069a565b90506105e46001600055565b9998505050505050505050565b600260005403610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b61068b73ffffffffffffffffffffffffffffffffffffffff84163330856109f2565b6106958382610ad4565b505050565b6000806106aa8989898989610bb6565b90506106ba8b8b8b878786610c35565b9b9a5050505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561071157600080fd5b505af1158015610725573d6000803e3d6000fd5b50505050505050565b60008061074e604051806040016040528060008152602001600081525090565b600061075d8989898989610bb6565b905061076989826109a9565b93509350935050955095509592505050565b60008061078b898989898961079b565b90506105e4898989878786610c35565b6040805160808101825260008183018181526060830182905282528251808401909352808352602080840182905282019290925290806107da86610d2e565b915091508173ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415801561084657508073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614155b1561087d576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061088a8484610e18565b915091506108b98a8a7f0000000000000000000000000000000000000000000000000000000000000000610669565b6108e47f00000000000000000000000000000000000000000000000000000000000000008888610f45565b6000806108f18686610e18565b9150915083821115806109045750828111155b1561093b576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b865173ffffffffffffffffffffffffffffffffffffffff871690526109608483611ad0565b875160209081019190915287015173ffffffffffffffffffffffffffffffffffffffff861690526109918382611ad0565b602080890151015250949a9950505050505050505050565b6000806109c9604051806040016040528060008152602001600081525090565b6109d38585610fc4565b909350905082156109eb576109e884866110e7565b91505b9250925092565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff8581166004840152841660248301526044820183905290600080606483828a5af1610a5d573d6000803e3d6000fd5b50610a67856111b1565b610acd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610659565b5050505050565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a9190611ae3565b600003610bb257610bb273ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61127c565b5050565b604080516080810182526000818301818152606083018290528252825180840190935280835260208084018290528201929092529080610bf588610d2e565b91509150600080610c068484610e18565b915091506108b97f00000000000000000000000000000000000000000000000000000000000000008a8a610f45565b6000610c4182866110e7565b905083811015610c87576040517f19a6c71a0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610659565b610cb1857f0000000000000000000000000000000000000000000000000000000000000000610ad4565b610cbc858285611351565b858773ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f7602444f1556ffa1306aa87f177d86fbfe2b5088a5306c38bd2d223ed1de707584604051610d1c91815260200190565b60405180910390a49695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da09190611afc565b91508273ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e119190611afc565b9050915091565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610e87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190611ae3565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290925073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c9190611ae3565b90509250929050565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610f6f929190611b19565b6000604051808303816000865af19150503d8060008114610fac576040519150601f19603f3d011682016040523d82523d6000602084013e610fb1565b606091505b509150915081610acd57610acd816113e9565b6000610fe3604051806040016040528060008152602001600081525090565b600080610fef8661142c565b855180516020909101516040517f5ccfb71d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015292831660248201526044810191909152911690635ccfb71d906064016040805180830381865afa158015611074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110989190611b29565b915091506110af85602001516020015183836114a3565b9350836110de57604051806040016040528086600001516020015181526020016110d984846114bd565b905292505b50509250929050565b8151516000906110f79083610ad4565b6020830151516111079083610ad4565b6111108261142c565b73ffffffffffffffffffffffffffffffffffffffff16638e3c92e484600001516020015185602001516020015130866111476114d8565b6040518663ffffffff1660e01b8152600401611167959493929190611b4d565b6020604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111aa9190611ae3565b9392505050565b60006111f0565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d801561122f57602081146112695761122a7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6111b8565b611276565b823b611260576112607f475076323a206e6f74206120636f6e747261637400000000000000000000000060146111b8565b60019150611276565b3d6000803e600051151591505b50919050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061134b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610659565b50505050565b6040517f294091cd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905282811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063294091cd90606401600060405180830381600087803b15801561071157600080fd5b8051600003611424576040517f67e1b70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b60008173ffffffffffffffffffffffffffffffffffffffff166386a290816040518163ffffffff1660e01b8152600401602060405180830381865afa158015611479573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149d9190611afc565b92915050565b60008284101580156114b55750818411155b949350505050565b60006114cc6002848418611bb5565b6111aa90848416611bf0565b6114e061150a565b60405180608001604052806000815260200160008152602001600081526020016000815250905090565b60405180608001604052806004906020820280368337509192915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461154a57600080fd5b50565b60008083601f84011261155f57600080fd5b50813567ffffffffffffffff81111561157757600080fd5b60208301915083602082850101111561158f57600080fd5b9250929050565b60008060008060008060008060c0898b0312156115b257600080fd5b88356115bd81611528565b97506020890135965060408901356115d481611528565b9550606089013567ffffffffffffffff808211156115f157600080fd5b6115fd8c838d0161154d565b909750955060808b013591508082111561161657600080fd5b506116238b828c0161154d565b999c989b50969995989497949560a00135949350505050565b600080600080600080600060a0888a03121561165757600080fd5b873561166281611528565b9650602088013567ffffffffffffffff8082111561167f57600080fd5b61168b8b838c0161154d565b909850965060408a01359150808211156116a457600080fd5b506116b18a828b0161154d565b9095509350506060880135915060808801356116cc81611528565b8091505092959891949750929550565b600080600080600080600060a0888a0312156116f757600080fd5b873561170281611528565b965060208801359550604088013561171981611528565b9450606088013567ffffffffffffffff8082111561173657600080fd5b6117428b838c0161154d565b909650945060808a013591508082111561175b57600080fd5b506117688a828b0161154d565b989b979a50959850939692959293505050565b600080600080600080600060c0888a03121561179657600080fd5b87356117a181611528565b96506020880135955060408801356117b881611528565b9450606088013567ffffffffffffffff8111156117d457600080fd5b6117e08a828b0161154d565b9095509350506080880135915060a08801356116cc81611528565b60008060008060008060a0878903121561181457600080fd5b863561181f81611528565b955060208701359450604087013561183681611528565b9350606087013567ffffffffffffffff81111561185257600080fd5b61185e89828a0161154d565b979a9699509497949695608090950135949350505050565b60008060008060006060868803121561188e57600080fd5b853561189981611528565b9450602086013567ffffffffffffffff808211156118b657600080fd5b6118c289838a0161154d565b909650945060408801359150808211156118db57600080fd5b506118e88882890161154d565b969995985093965092949392505050565b6000806000806000806080878903121561191257600080fd5b863561191d81611528565b9550602087013567ffffffffffffffff8082111561193a57600080fd5b6119468a838b0161154d565b9097509550604089013591508082111561195f57600080fd5b5061196c89828a0161154d565b979a9699509497949695606090950135949350505050565b60008060008060006080868803121561199c57600080fd5b85356119a781611528565b94506020860135935060408601356119be81611528565b9250606086013567ffffffffffffffff8111156119da57600080fd5b6118e88882890161154d565b600080600080600080600080600060e08a8c031215611a0457600080fd5b8935611a0f81611528565b985060208a0135975060408a0135611a2681611528565b965060608a013567ffffffffffffffff80821115611a4357600080fd5b611a4f8d838e0161154d565b909850965060808c0135915080821115611a6857600080fd5b50611a758c828d0161154d565b90955093505060a08a0135915060c08a0135611a9081611528565b809150509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561149d5761149d611aa1565b600060208284031215611af557600080fd5b5051919050565b600060208284031215611b0e57600080fd5b81516111aa81611528565b8183823760009101908152919050565b60008060408385031215611b3c57600080fd5b505080516020909101519092909150565b858152602080820186905273ffffffffffffffffffffffffffffffffffffffff858116604084015284166060830152610100820190608083018460005b6004811015611ba757815183529183019190830190600101611b8a565b505050509695505050505050565b600082611beb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561149d5761149d611aa156fea2646970667358221220f1bc86db457c1cbe43bcb11b7a861fa4adf000938b5a18965119ccec7b95822264736f6c63430008120033",
  "devdoc": {
    "author": "Solid World",
    "kind": "dev",
    "methods": {
      "simulateStakeDoubleSwap(address,uint256,address,bytes,bytes)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "swap1": "Encoded swap to partially swap `inputToken` to desired token",
          "swap2": "Encoded swap to partially swap `inputToken` to desired token"
        },
        "returns": {
          "_0": "Whether the resulting tokens qualify for a dustless liquidity deployment",
          "_1": "The amount of shares minted from the dustless liquidity deployment",
          "_2": "The current gamma token ratio, or empty if dustless"
        }
      },
      "simulateStakeETH(address,bytes,bytes)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "swap1": "Encoded swap to partially swap `WETH` to desired token",
          "swap2": "Encoded swap to partially swap `WETH` to desired token"
        },
        "returns": {
          "_0": "Whether the resulting tokens qualify for a dustless liquidity deployment",
          "_1": "The amount of shares minted from the dustless liquidity deployment",
          "_2": "The current gamma token ratio, or empty if dustless"
        }
      },
      "simulateStakeSingleSwap(address,uint256,address,bytes)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "swap": "Encoded swap to partially (close to 50%) swap `inputToken` to desired token"
        },
        "returns": {
          "isDustless": "Whether the resulting tokens qualify for a dustless liquidity deployment",
          "ratio": "The current gamma token ratio, or empty if dustless",
          "shares": "The amount of shares minted from the dustless liquidity deployment"
        }
      },
      "stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap1": "Encoded swap to partially swap `inputToken` to desired token",
          "swap2": "Encoded swap to partially swap `inputToken` to desired token"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      },
      "stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256,address)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap1": "Encoded swap to partially swap `inputToken` to desired token",
          "swap2": "Encoded swap to partially swap `inputToken` to desired token",
          "zapRecipient": "The beneficiary of the staked shares"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      },
      "stakeETH(address,bytes,bytes,uint256)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap1": "Encoded swap to partially swap `WETH` to desired token",
          "swap2": "Encoded swap to partially swap `WETH` to desired token"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      },
      "stakeETH(address,bytes,bytes,uint256,address)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap1": "Encoded swap to partially swap `WETH` to desired token",
          "swap2": "Encoded swap to partially swap `WETH` to desired token",
          "zapRecipient": "The beneficiary of the staked shares"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      },
      "stakeSingleSwap(address,uint256,address,bytes,uint256)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap": "Encoded swap to partially swap `inputToken` to desired token"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      },
      "stakeSingleSwap(address,uint256,address,bytes,uint256,address)": {
        "params": {
          "hypervisor": "The hypervisor used to deploy liquidity",
          "inputAmount": "The amount of `inputToken` to use",
          "inputToken": "The token used to provide liquidity",
          "minShares": "The minimum amount of liquidity shares required for transaction to succeed",
          "swap": "Encoded swap to partially swap `inputToken` to desired token",
          "zapRecipient": "The beneficiary of the staked shares"
        },
        "returns": {
          "_0": "The amount of shares staked in `solidStaking`"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "simulateStakeDoubleSwap(address,uint256,address,bytes,bytes)": {
        "notice": "Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returnsThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`"
      },
      "simulateStakeETH(address,bytes,bytes)": {
        "notice": "Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returns"
      },
      "simulateStakeSingleSwap(address,uint256,address,bytes)": {
        "notice": "Function is meant to be called off-chain with _staticCall_.Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 2. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns     * if not dustless, the function computes the current gamma token ratio and returnsThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1"
      },
      "stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256)": {
        "notice": "Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`"
      },
      "stakeDoubleSwap(address,uint256,address,bytes,bytes,uint256,address)": {
        "notice": "Zap function that achieves the following: 1. Partially swaps `inputToken` to desired token via encoded swap1 2. Partially swaps `inputToken` to desired token via encoded swap2 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken`"
      },
      "stakeETH(address,bytes,bytes,uint256)": {
        "notice": "Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 5. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares"
      },
      "stakeETH(address,bytes,bytes,uint256,address)": {
        "notice": "Zap function that achieves the following: 1. Wraps `msg.value` to WETH 2. Partially swaps `WETH` to desired token via encoded swap1 3. Partially swaps `WETH` to desired token via encoded swap2 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 5. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares"
      },
      "stakeSingleSwap(address,uint256,address,bytes,uint256)": {
        "notice": "Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1"
      },
      "stakeSingleSwap(address,uint256,address,bytes,uint256,address)": {
        "notice": "Zap function that achieves the following: 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor` 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked sharesThe msg.sender must own `inputAmount` and approve this contract to spend `inputToken``inputToken` must be one of hypervisor's token0 or token1"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2179,
        "contract": "contracts/zap/staking/SolidZapStaker.sol:SolidZapStaker",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}