{
  "address": "0xF378201B81927D41BA659a3f3Ed84A5FEb2f3BA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gammaVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "conversionRateDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientLpTokenBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "InvalidFraction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token0Liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Liquidity",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughAvailableLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token0DeployedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token1DeployedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lpTokensReceived",
          "type": "uint256"
        }
      ],
      "name": "LiquidityDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LpTokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConversionRateDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGammaVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLPTokensOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastGammaAdjustmentFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastToken0AvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLastToken0LiquidityDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastDeployedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastToken1AvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLastToken1LiquidityDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastDeployedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTotalDeployedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinConvertibleToken0Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenDepositors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenDepositors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "token0BalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "token1BalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x456a13be1164664673aaca1894b48658b3decbd1cd3121e7fc65635d4845811a",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0xF378201B81927D41BA659a3f3Ed84A5FEb2f3BA9",
    "transactionIndex": 41,
    "gasUsed": "2016517",
    "logsBloom": "0x
    "blockHash": "0x4378687ec1361545713714922ab2357ee00836056fbe165dbd7624a95a86b893",
    "transactionHash": "0x456a13be1164664673aaca1894b48658b3decbd1cd3121e7fc65635d4845811a",
    "logs": [
      {
        "transactionIndex": 41,
        "blockNumber": 47763448,
        "transactionHash": "0x456a13be1164664673aaca1894b48658b3decbd1cd3121e7fc65635d4845811a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ec6a616276320000000000000000000000000000000000000000000000000064af9bc34c01916e00000000000000000000000000000000000000000000363fdababadf999d32fd00000000000000000000000000000000000000000000000063c33161e98b5f6e00000000000000000000000000000000000000000000363fdba72540fc1364fd",
        "logIndex": 182,
        "blockHash": "0x4378687ec1361545713714922ab2357ee00836056fbe165dbd7624a95a86b893"
      }
    ],
    "blockNumber": 47763448,
    "cumulativeGasUsed": "8912469",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x672688c6ee3e750dfaa4874743ef693a6f2538ed",
    "0x27420e641CE96a6C0191dbFA0A9500eaCe33531d",
    "0xe339ecc9deef6b69dbc394abf6fbff19450faeb6",
    "93015987",
    "9"
  ],
  "numDeployments": 1,
  "solcInputHash": "97b17749aa3f202c6fa7446a0a6ca1f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gammaVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"conversionRateDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientLpTokenBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"InvalidFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Liquidity\",\"type\":\"uint256\"}],\"name\":\"NotEnoughAvailableLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token0DeployedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token1DeployedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokensReceived\",\"type\":\"uint256\"}],\"name\":\"LiquidityDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpTokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRateDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGammaVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLPTokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastGammaAdjustmentFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastToken0AvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLastToken0LiquidityDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDeployedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastToken1AvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLastToken1LiquidityDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDeployedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTotalDeployedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinConvertibleToken0Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenDepositors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token0BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token1BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World\",\"kind\":\"dev\",\"methods\":{\"getConversionRate()\":{\"returns\":{\"_0\":\"1 token0 = ? token1\"}},\"getConversionRateDecimals()\":{\"returns\":{\"_0\":\"Number of decimals of the conversion rate e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6\"}},\"getGammaVault()\":{\"returns\":{\"_0\":\"Gamma Vault address the UniProxy contract will deposit tokens to\"}},\"getLastGammaAdjustmentFactor()\":{\"returns\":{\"_0\":\"the output amount of token1 that was received for the given amount of token0\",\"_1\":\"the input amount of token0 to receive amount of token1\"}},\"getLastToken0AvailableLiquidity()\":{\"details\":\"returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)\"},\"getLastToken0LiquidityDeployed(address)\":{\"params\":{\"liquidityProvider\":\"account that contributed liquidity\"},\"returns\":{\"lastDeployedAmount\":\"amount of token0 liquidity that was deployed by the liquidity provider during the last deployment\"}},\"getLastToken1AvailableLiquidity()\":{\"details\":\"returns the total amount of token1 that was available to be deployed\"},\"getLastToken1LiquidityDeployed(address)\":{\"params\":{\"liquidityProvider\":\"account that contributed liquidity\"},\"returns\":{\"lastDeployedAmount\":\"amount of token1 liquidity that was last deployed by the liquidity provider during the last deployment\"}},\"getMinConvertibleToken0Amount()\":{\"details\":\"Returns the minimum amount of token0 that can be converted to token1\"},\"getUniProxy()\":{\"returns\":{\"_0\":\"UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault, and returns LP tokens\"}}},\"stateVariables\":{\"lPTokensOwed\":{\"details\":\"Account => Amount\"},\"lastAvailableLiquidity\":{\"details\":\"Token => Amount\"},\"lastDeployedLiquidity\":{\"details\":\"Token => Account => Amount\"},\"lastTotalDeployedLiquidity\":{\"details\":\"Token => Amount\"},\"totalDeposits\":{\"details\":\"Token => Amount\"},\"userTokenBalance\":{\"details\":\"Account => Token => Balance\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployLiquidity()\":{\"notice\":\"Looks at the current configuration and state of the contract, deploys the available liquidity to the Gamma Vault, and distributes the LP tokens to the depositors proportionally\"},\"depositToken0(uint256)\":{\"notice\":\"The caller must approve the contract to spend `amount` of token0\"},\"depositToken1(uint256)\":{\"notice\":\"The caller must approve the contract to spend `amount` of token1\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityDeployer.sol\":\"LiquidityDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/LiquidityDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/ILiquidityDeployer.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/IUniProxy.sol\\\";\\nimport \\\"./libraries/liquidity-deployer/LiquidityDeployerDataTypes.sol\\\";\\nimport \\\"./libraries/liquidity-deployer/LiquidityDeployerMath.sol\\\";\\nimport \\\"./libraries/GPv2SafeERC20.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/IHypervisor.sol\\\";\\n\\n/// @author Solid World\\ncontract LiquidityDeployer is ILiquidityDeployer, ReentrancyGuard {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    LiquidityDeployerDataTypes.Config internal config;\\n    LiquidityDeployerDataTypes.Depositors internal depositors;\\n    LiquidityDeployerDataTypes.Fraction internal lastGammaAdjustmentFactor;\\n\\n    /// @dev Account => Token => Balance\\n    mapping(address => mapping(address => uint)) internal userTokenBalance;\\n\\n    /// @dev Token => Account => Amount\\n    mapping(address => mapping(address => uint)) internal lastDeployedLiquidity;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal lastTotalDeployedLiquidity;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal lastAvailableLiquidity;\\n    /// @dev Account => Amount\\n    mapping(address => uint) internal lPTokensOwed;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal totalDeposits;\\n\\n    modifier validTokenAmount(uint amount) {\\n        if (amount == 0) {\\n            revert InvalidInput();\\n        }\\n        _;\\n    }\\n\\n    modifier tokensMatch(\\n        address token0,\\n        address token1,\\n        address _gammaVault\\n    ) {\\n        IHypervisor gammaVault = IHypervisor(_gammaVault);\\n\\n        if (token0 != gammaVault.token0() || token1 != gammaVault.token1()) {\\n            revert TokensMismatch();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address token0,\\n        address token1,\\n        address gammaVault,\\n        address uniProxy,\\n        uint conversionRate,\\n        uint8 conversionRateDecimals\\n    ) tokensMatch(token0, token1, gammaVault) {\\n        config.token0 = token0;\\n        config.token1 = token1;\\n        config.gammaVault = gammaVault;\\n        config.uniProxy = uniProxy;\\n        config.conversionRate = conversionRate;\\n        config.conversionRateDecimals = conversionRateDecimals;\\n        config.token0Decimals = IERC20Metadata(token0).decimals();\\n        config.token1Decimals = IERC20Metadata(token1).decimals();\\n        config.minConvertibleToken0Amount = LiquidityDeployerMath.minConvertibleToken0Amount(\\n            config.token0Decimals,\\n            config.token1Decimals,\\n            conversionRate,\\n            conversionRateDecimals\\n        );\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function depositToken0(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _depositToken(config.token0, amount);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function depositToken1(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _depositToken(config.token1, amount);\\n    }\\n\\n    function withdrawToken0(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _withdrawToken(config.token0, amount);\\n    }\\n\\n    function withdrawToken1(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _withdrawToken(config.token1, amount);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function deployLiquidity() external nonReentrant {\\n        (\\n            lastAvailableLiquidity[config.token0],\\n            lastAvailableLiquidity[config.token1]\\n        ) = _computeAvailableLiquidity();\\n\\n        (\\n            lastTotalDeployedLiquidity[config.token0],\\n            lastTotalDeployedLiquidity[config.token1]\\n        ) = _computeTotalDeployableLiquidity();\\n\\n        _prepareDeployment();\\n\\n        _allowUniProxyToSpendDeployableLiquidity();\\n        uint lpTokens = _depositToUniProxy();\\n\\n        _prepareLPTokensOwed(lpTokens);\\n\\n        emit LiquidityDeployed(\\n            lastTotalDeployedLiquidity[config.token0],\\n            lastTotalDeployedLiquidity[config.token1],\\n            lpTokens\\n        );\\n    }\\n\\n    function withdrawLpTokens() external nonReentrant {\\n        _withdrawLpTokens(lPTokensOwed[msg.sender]);\\n    }\\n\\n    function withdrawLpTokens(uint amount) external nonReentrant {\\n        _withdrawLpTokens(amount);\\n    }\\n\\n    function getToken0() external view returns (address) {\\n        return config.token0;\\n    }\\n\\n    function getToken1() external view returns (address) {\\n        return config.token1;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getGammaVault() external view returns (address) {\\n        return config.gammaVault;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getUniProxy() external view returns (address) {\\n        return address(config.uniProxy);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getConversionRate() external view returns (uint) {\\n        return config.conversionRate;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getConversionRateDecimals() external view returns (uint8) {\\n        return config.conversionRateDecimals;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getMinConvertibleToken0Amount() external view returns (uint) {\\n        return config.minConvertibleToken0Amount;\\n    }\\n\\n    function token0BalanceOf(address account) external view returns (uint) {\\n        return userTokenBalance[account][config.token0];\\n    }\\n\\n    function token1BalanceOf(address account) external view returns (uint) {\\n        return userTokenBalance[account][config.token1];\\n    }\\n\\n    function getTotalDeposits() external view returns (uint token0Amount, uint token1Amount) {\\n        token0Amount = totalDeposits[config.token0];\\n        token1Amount = totalDeposits[config.token1];\\n    }\\n\\n    function getTokenDepositors() external view returns (address[] memory tokenDepositors) {\\n        tokenDepositors = new address[](depositors.tokenDepositors.length);\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            tokenDepositors[i] = depositors.tokenDepositors[i];\\n        }\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken0AvailableLiquidity() external view returns (uint) {\\n        return lastAvailableLiquidity[config.token0];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken1AvailableLiquidity() external view returns (uint) {\\n        return lastAvailableLiquidity[config.token1];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken0LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount)\\n    {\\n        lastDeployedAmount = lastDeployedLiquidity[config.token0][liquidityProvider];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken1LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount)\\n    {\\n        lastDeployedAmount = lastDeployedLiquidity[config.token1][liquidityProvider];\\n    }\\n\\n    function getLastTotalDeployedLiquidity() external view returns (uint, uint) {\\n        return (lastTotalDeployedLiquidity[config.token0], lastTotalDeployedLiquidity[config.token1]);\\n    }\\n\\n    function getLPTokensOwed(address liquidityProvider) external view returns (uint) {\\n        return lPTokensOwed[liquidityProvider];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastGammaAdjustmentFactor() external view returns (uint, uint) {\\n        return (lastGammaAdjustmentFactor.numerator, lastGammaAdjustmentFactor.denominator);\\n    }\\n\\n    /// @dev Fetches how many token1 tokens are needed if token0 amount is 10^token0Decimals\\n    /// @dev and stores token1amount/token0amount as a fraction for later computation\\n    function _loadGammaAdjustmentFactor() internal {\\n        uint token0Amount = 10**config.token0Decimals;\\n        (uint amountStart, uint amountEnd) = IUniProxy(config.uniProxy).getDepositAmount(\\n            config.gammaVault,\\n            config.token0,\\n            token0Amount\\n        );\\n\\n        uint token1Amount = (amountStart + amountEnd) / 2;\\n\\n        lastGammaAdjustmentFactor.numerator = token1Amount;\\n        lastGammaAdjustmentFactor.denominator = token0Amount;\\n    }\\n\\n    function _computeAvailableLiquidity()\\n        internal\\n        view\\n        returns (uint token0AvailableLiquidity, uint token1AvailableLiquidity)\\n    {\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address depositor = depositors.tokenDepositors[i];\\n            uint token0Balance = userTokenBalance[depositor][config.token0];\\n            uint token1Balance = userTokenBalance[depositor][config.token1];\\n\\n            if (token0Balance >= config.minConvertibleToken0Amount) {\\n                token0AvailableLiquidity += token0Balance;\\n            }\\n            if (token1Balance > 0) {\\n                token1AvailableLiquidity += token1Balance;\\n            }\\n        }\\n    }\\n\\n    function _computeTotalDeployableLiquidity()\\n        internal\\n        returns (uint token0TotalDeployableLiquidity, uint token1TotalDeployableLiquidity)\\n    {\\n        if (\\n            _convertToken0ToToken1(lastAvailableLiquidity[config.token0]) == 0 ||\\n            lastAvailableLiquidity[config.token1] == 0\\n        ) {\\n            revert NotEnoughAvailableLiquidity(\\n                lastAvailableLiquidity[config.token0],\\n                lastAvailableLiquidity[config.token1]\\n            );\\n        }\\n\\n        _loadGammaAdjustmentFactor();\\n\\n        uint maxToken1DepositAmount = LiquidityDeployerMath.adjustTokenAmount(\\n            lastAvailableLiquidity[config.token0],\\n            lastGammaAdjustmentFactor\\n        );\\n\\n        if (maxToken1DepositAmount <= lastAvailableLiquidity[config.token1]) {\\n            token0TotalDeployableLiquidity = lastAvailableLiquidity[config.token0];\\n            token1TotalDeployableLiquidity = maxToken1DepositAmount;\\n        } else {\\n            token0TotalDeployableLiquidity = LiquidityDeployerMath.adjustTokenAmount(\\n                lastAvailableLiquidity[config.token1],\\n                LiquidityDeployerMath.inverseFraction(lastGammaAdjustmentFactor)\\n            );\\n            token1TotalDeployableLiquidity = lastAvailableLiquidity[config.token1];\\n        }\\n    }\\n\\n    function _prepareDeployment() internal {\\n        LiquidityDeployerDataTypes.Fraction memory token0AdjustmentFactor = LiquidityDeployerDataTypes\\n            .Fraction(lastTotalDeployedLiquidity[config.token0], lastAvailableLiquidity[config.token0]);\\n\\n        LiquidityDeployerDataTypes.Fraction memory token1AdjustmentFactor = LiquidityDeployerDataTypes\\n            .Fraction(lastTotalDeployedLiquidity[config.token1], lastAvailableLiquidity[config.token1]);\\n\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address tokenDepositor = depositors.tokenDepositors[i];\\n            uint token0DeployableLiquidity = _computeToken0DeployableLiquidity(\\n                userTokenBalance[tokenDepositor][config.token0],\\n                token0AdjustmentFactor\\n            );\\n            lastDeployedLiquidity[config.token0][tokenDepositor] = token0DeployableLiquidity;\\n            if (token0DeployableLiquidity > 0) {\\n                userTokenBalance[tokenDepositor][config.token0] -= token0DeployableLiquidity;\\n                totalDeposits[config.token0] -= token0DeployableLiquidity;\\n            }\\n\\n            uint token1DeployableLiquidity = _computeDeployableLiquidity(\\n                userTokenBalance[tokenDepositor][config.token1],\\n                token1AdjustmentFactor\\n            );\\n            lastDeployedLiquidity[config.token1][tokenDepositor] = token1DeployableLiquidity;\\n            if (token1DeployableLiquidity > 0) {\\n                userTokenBalance[tokenDepositor][config.token1] -= token1DeployableLiquidity;\\n                totalDeposits[config.token1] -= token1DeployableLiquidity;\\n            }\\n        }\\n    }\\n\\n    function _computeToken0DeployableLiquidity(\\n        uint tokenDepositorBalance,\\n        LiquidityDeployerDataTypes.Fraction memory adjustmentFactor\\n    ) internal view returns (uint) {\\n        if (tokenDepositorBalance < config.minConvertibleToken0Amount) {\\n            return 0;\\n        }\\n\\n        return _computeDeployableLiquidity(tokenDepositorBalance, adjustmentFactor);\\n    }\\n\\n    function _computeDeployableLiquidity(\\n        uint tokenDepositorBalance,\\n        LiquidityDeployerDataTypes.Fraction memory adjustmentFactor\\n    ) internal pure returns (uint) {\\n        if (tokenDepositorBalance == 0) {\\n            return 0;\\n        }\\n\\n        return LiquidityDeployerMath.adjustTokenAmount(tokenDepositorBalance, adjustmentFactor);\\n    }\\n\\n    function _depositToken(address token, uint amount) internal {\\n        userTokenBalance[msg.sender][token] += amount;\\n        totalDeposits[token] += amount;\\n\\n        if (!depositors.isDepositor[msg.sender]) {\\n            depositors.isDepositor[msg.sender] = true;\\n            depositors.tokenDepositors.push(msg.sender);\\n        }\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit TokenDeposited(token, msg.sender, amount);\\n    }\\n\\n    function _withdrawToken(address token, uint amount) internal {\\n        if (userTokenBalance[msg.sender][token] < amount) {\\n            revert InsufficientTokenBalance(token, msg.sender, userTokenBalance[msg.sender][token], amount);\\n        }\\n\\n        userTokenBalance[msg.sender][token] -= amount;\\n        totalDeposits[token] -= amount;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit TokenWithdrawn(token, msg.sender, amount);\\n    }\\n\\n    function _withdrawLpTokens(uint amount) internal validTokenAmount(amount) {\\n        if (amount > lPTokensOwed[msg.sender]) {\\n            revert InsufficientLpTokenBalance(msg.sender, lPTokensOwed[msg.sender], amount);\\n        }\\n\\n        lPTokensOwed[msg.sender] -= amount;\\n        IERC20(config.gammaVault).safeTransfer(msg.sender, amount);\\n\\n        emit LpTokenWithdrawn(msg.sender, amount);\\n    }\\n\\n    function _allowUniProxyToSpendDeployableLiquidity() internal {\\n        IERC20(config.token0).approve(config.gammaVault, lastTotalDeployedLiquidity[config.token0]);\\n        IERC20(config.token1).approve(config.gammaVault, lastTotalDeployedLiquidity[config.token1]);\\n    }\\n\\n    function _depositToUniProxy() internal returns (uint lpTokens) {\\n        return\\n            IUniProxy(config.uniProxy).deposit(\\n                lastTotalDeployedLiquidity[config.token0],\\n                lastTotalDeployedLiquidity[config.token1],\\n                address(this),\\n                config.gammaVault,\\n                _uniProxyMinIn()\\n            );\\n    }\\n\\n    function _prepareLPTokensOwed(uint lpTokens) internal {\\n        uint remainingLpTokens = lpTokens;\\n        uint totalLiquidityInToken1 = _totalToken0DeployedLiquidityInToken1() +\\n            lastTotalDeployedLiquidity[config.token1];\\n\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address tokenDepositor = depositors.tokenDepositors[i];\\n            uint totalLiquidityInToken1ForDepositor = _totalDeployableLiquidityInToken1ForDepositor(\\n                tokenDepositor\\n            );\\n\\n            if (totalLiquidityInToken1ForDepositor == 0) {\\n                continue;\\n            }\\n\\n            uint lpTokensOwed = LiquidityDeployerMath.adjustTokenAmount(\\n                lpTokens,\\n                LiquidityDeployerDataTypes.Fraction(\\n                    totalLiquidityInToken1ForDepositor,\\n                    totalLiquidityInToken1\\n                )\\n            );\\n\\n            lPTokensOwed[tokenDepositor] += lpTokensOwed;\\n            remainingLpTokens -= lpTokensOwed;\\n        }\\n\\n        if (remainingLpTokens > 0) {\\n            // distribute dust to first depositor\\n            lPTokensOwed[depositors.tokenDepositors[0]] += remainingLpTokens;\\n        }\\n    }\\n\\n    function _totalDeployableLiquidityInToken1ForDepositor(address depositor) internal view returns (uint) {\\n        uint token0DeployableLiquidity = lastDeployedLiquidity[config.token0][depositor];\\n        uint token1DeployableLiquidity = lastDeployedLiquidity[config.token1][depositor];\\n        uint token0DeployableLiquidityInToken1 = _convertToken0ToToken1(token0DeployableLiquidity);\\n\\n        return token0DeployableLiquidityInToken1 + token1DeployableLiquidity;\\n    }\\n\\n    function _totalToken0DeployedLiquidityInToken1() internal view returns (uint) {\\n        return _convertToken0ToToken1(lastTotalDeployedLiquidity[config.token0]);\\n    }\\n\\n    function _convertToken0ToToken1(uint token0Amount) internal view returns (uint) {\\n        if (token0Amount < config.minConvertibleToken0Amount) {\\n            return 0;\\n        }\\n\\n        return\\n            LiquidityDeployerMath.convertTokenValue(\\n                config.token0Decimals,\\n                config.token1Decimals,\\n                config.conversionRate,\\n                config.conversionRateDecimals,\\n                token0Amount\\n            );\\n    }\\n\\n    function _uniProxyMinIn() internal pure returns (uint[4] memory) {\\n        return [uint(0), uint(0), uint(0), uint(0)];\\n    }\\n}\\n\",\"keccak256\":\"0xa86ecaeac0ff746f3ea19d5c9cba822cc4b1ec6d527f45a1f75da3212bc569ac\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IHypervisor {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function whitelistedAddress() external view returns (address);\\n\\n    function pool() external view returns (address);\\n}\\n\",\"keccak256\":\"0x2dd95cedcd554cbdc9db45145ca1445da7b401b9a2eadd5021e197957a164020\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/ILiquidityDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface ILiquidityDeployer {\\n    error InvalidInput();\\n    error TokensMismatch();\\n    error InsufficientTokenBalance(address token, address account, uint balance, uint withdrawAmount);\\n    error NotEnoughAvailableLiquidity(uint token0Liquidity, uint token1Liquidity);\\n    error InsufficientLpTokenBalance(address account, uint balance, uint withdrawAmount);\\n\\n    event TokenDeposited(address indexed token, address indexed depositor, uint indexed amount);\\n    event TokenWithdrawn(address indexed token, address indexed withdrawer, uint indexed amount);\\n    event LpTokenWithdrawn(address indexed withdrawer, uint indexed amount);\\n    event LiquidityDeployed(\\n        uint indexed token0DeployedAmount,\\n        uint indexed token1DeployedAmount,\\n        uint indexed lpTokensReceived\\n    );\\n\\n    /// @notice The caller must approve the contract to spend `amount` of token0\\n    function depositToken0(uint amount) external;\\n\\n    /// @notice The caller must approve the contract to spend `amount` of token1\\n    function depositToken1(uint amount) external;\\n\\n    function withdrawToken0(uint amount) external;\\n\\n    function withdrawToken1(uint amount) external;\\n\\n    /// @notice Looks at the current configuration and state of the contract, deploys\\n    /// the available liquidity to the Gamma Vault, and distributes the LP tokens to\\n    /// the depositors proportionally\\n    function deployLiquidity() external;\\n\\n    function withdrawLpTokens(uint amount) external;\\n\\n    function withdrawLpTokens() external;\\n\\n    function getToken0() external view returns (address);\\n\\n    function getToken1() external view returns (address);\\n\\n    /// @return Gamma Vault address the UniProxy contract will deposit tokens to\\n    function getGammaVault() external view returns (address);\\n\\n    /// @return UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault,\\n    /// and returns LP tokens\\n    function getUniProxy() external view returns (address);\\n\\n    /// @return 1 token0 = ? token1\\n    function getConversionRate() external view returns (uint);\\n\\n    /// @return Number of decimals of the conversion rate\\n    /// e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6\\n    function getConversionRateDecimals() external view returns (uint8);\\n\\n    /// @dev Returns the minimum amount of token0 that can be converted to token1\\n    function getMinConvertibleToken0Amount() external view returns (uint);\\n\\n    function token0BalanceOf(address account) external view returns (uint);\\n\\n    function token1BalanceOf(address account) external view returns (uint);\\n\\n    function getTotalDeposits() external view returns (uint token0Amount, uint token1Amount);\\n\\n    function getTokenDepositors() external view returns (address[] memory);\\n\\n    /// @dev returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)\\n    function getLastToken0AvailableLiquidity() external view returns (uint);\\n\\n    /// @dev returns the total amount of token1 that was available to be deployed\\n    function getLastToken1AvailableLiquidity() external view returns (uint);\\n\\n    /// @param liquidityProvider account that contributed liquidity\\n    /// @return lastDeployedAmount amount of token0 liquidity that was\\n    /// deployed by the liquidity provider during the last deployment\\n    function getLastToken0LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount);\\n\\n    /// @param liquidityProvider account that contributed liquidity\\n    /// @return lastDeployedAmount amount of token1 liquidity that was\\n    /// last deployed by the liquidity provider during the last deployment\\n    function getLastToken1LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount);\\n\\n    function getLastTotalDeployedLiquidity() external view returns (uint, uint);\\n\\n    function getLPTokensOwed(address liquidityProvider) external view returns (uint);\\n\\n    /// @return numerator the output amount of token1 that was received for the given amount of token0\\n    /// @return denominator the input amount of token0 to receive amount of token1\\n    function getLastGammaAdjustmentFactor() external view returns (uint numerator, uint denominator);\\n}\\n\",\"keccak256\":\"0xc711b6dbd007db0b9f03929b7f3b6d2e9275401053d21bb444d716d6c2fe3ea2\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IUniProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IUniProxy {\\n    /// @notice Deposit into the given position\\n    /// @param deposit0 Amount of token0 to deposit\\n    /// @param deposit1 Amount of token1 to deposit\\n    /// @param to Address to receive liquidity tokens\\n    /// @param pos Hypervisor Address\\n    /// @param minIn Minimum amount of tokens that should be paid\\n    /// @return shares Amount of liquidity tokens received\\n    function deposit(\\n        uint deposit0,\\n        uint deposit1,\\n        address to,\\n        address pos,\\n        uint[4] memory minIn\\n    ) external returns (uint shares);\\n\\n    /// @notice Get the amount of token to deposit for the given amount of pair token\\n    /// @param pos Hypervisor Address\\n    /// @param token Address of token to deposit\\n    /// @param depositAmount Amount of token to deposit\\n    /// @return amountStart Minimum amounts of the pair token to deposit\\n    /// @return amountEnd Maximum amounts of the pair token to deposit\\n    function getDepositAmount(\\n        address pos,\\n        address token,\\n        uint depositAmount\\n    ) external view returns (uint amountStart, uint amountEnd);\\n}\\n\",\"keccak256\":\"0x0b402f5b8234f1d87a754c3754dae79b112214bae61bc5c66b656fcf8d354282\",\"license\":\"MIT\"},\"contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76a64a698224ac465712446431e6ad26cbe8e2bff8e2d09400f546ba5a667280\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/liquidity-deployer/LiquidityDeployerDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nlibrary LiquidityDeployerDataTypes {\\n    struct Config {\\n        address token0;\\n        address token1;\\n        address gammaVault;\\n        address uniProxy;\\n        /// @dev 1 token0 = ? token1\\n        uint conversionRate;\\n        uint minConvertibleToken0Amount;\\n        uint8 conversionRateDecimals;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n    }\\n\\n    struct Depositors {\\n        address[] tokenDepositors;\\n        /// @dev Depositor => IsDepositor\\n        mapping(address => bool) isDepositor;\\n    }\\n\\n    /// @dev used to adjust deployable liquidity to maintain proportionality\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n}\\n\",\"keccak256\":\"0xf533cc696b2e8991b596498dc3ed0890b934bf42861540653ff6c6ee9b86d28d\",\"license\":\"MIT\"},\"contracts/libraries/liquidity-deployer/LiquidityDeployerMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./LiquidityDeployerDataTypes.sol\\\";\\n\\n/// @author Solid World\\nlibrary LiquidityDeployerMath {\\n    error InvalidFraction(uint numerator, uint denominator);\\n\\n    function convertTokenValue(\\n        uint currentDecimals,\\n        uint newDecimals,\\n        uint conversionRate,\\n        uint conversionRateDecimals,\\n        uint tokenAmount\\n    ) internal pure returns (uint tokenConverted) {\\n        if (tokenAmount == 0) {\\n            return 0;\\n        }\\n\\n        tokenConverted = Math.mulDiv(\\n            tokenAmount,\\n            10**newDecimals * conversionRate,\\n            10**(currentDecimals + conversionRateDecimals)\\n        );\\n    }\\n\\n    /// @dev Returns the minimum amount of token0 that can be converted to token1\\n    function minConvertibleToken0Amount(\\n        uint currentDecimals,\\n        uint newDecimals,\\n        uint conversionRate,\\n        uint conversionRateDecimals\\n    ) internal pure returns (uint) {\\n        return\\n            1 +\\n            Math.mulDiv(1, 10**(currentDecimals + conversionRateDecimals), 10**newDecimals * conversionRate);\\n    }\\n\\n    function neutralFraction() internal pure returns (LiquidityDeployerDataTypes.Fraction memory) {\\n        return LiquidityDeployerDataTypes.Fraction(1, 1);\\n    }\\n\\n    function inverseFraction(LiquidityDeployerDataTypes.Fraction memory fraction)\\n        internal\\n        pure\\n        returns (LiquidityDeployerDataTypes.Fraction memory)\\n    {\\n        if (fraction.denominator == 0) {\\n            revert InvalidFraction(fraction.numerator, fraction.denominator);\\n        }\\n\\n        return LiquidityDeployerDataTypes.Fraction(fraction.denominator, fraction.numerator);\\n    }\\n\\n    function adjustTokenAmount(uint amount, LiquidityDeployerDataTypes.Fraction memory adjustmentFactor)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        if (adjustmentFactor.denominator == 0) {\\n            revert InvalidFraction(adjustmentFactor.numerator, adjustmentFactor.denominator);\\n        }\\n\\n        if (_isNeutralFraction(adjustmentFactor)) {\\n            return amount;\\n        }\\n\\n        return Math.mulDiv(amount, adjustmentFactor.numerator, adjustmentFactor.denominator);\\n    }\\n\\n    function _isNeutralFraction(LiquidityDeployerDataTypes.Fraction memory adjustmentFactor)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return adjustmentFactor.numerator == adjustmentFactor.denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x8658e7da18bfe399e7e78af05f52784be13328c875ddc8298fc44514b409203f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80636f26a710116100ee578063a5c0fd0511610097578063c5acb69011610071578063c5acb69014610406578063e68c471314610440578063f3143f8a14610448578063f36089ec1461048557600080fd5b8063a5c0fd05146103cd578063a9be8944146103e0578063ba94a315146103f557600080fd5b806384c5a67a116100c857806384c5a67a146103895780638eae2d221461039a578063971e3c43146103ba57600080fd5b80636f26a7101461032857806371210a0d146103395780637fb9e9121461034c57600080fd5b80632fb05b651161015057806344276f1e1161012a57806344276f1e146102cd5780635d71ebf2146102f257806367e3d15b146102fa57600080fd5b80632fb05b65146102765780633bd7a701146102b05780634086bf89146102c557600080fd5b806311e8416c1161018157806311e8416c14610215578063168a48221461022857806320b3cac21461025657600080fd5b806305bba6bd146101a8578063080a415d146101bd5780630cce4119146101f9575b600080fd5b6101bb6101b6366004611b42565b61048d565b005b6101e66101cb366004611b5b565b6001600160a01b031660009081526010602052604090205490565b6040519081526020015b60405180910390f35b600a54600b545b604080519283526020830191909152016101f0565b6101bb610223366004611b42565b6104ab565b6001546001600160a01b03908116600090815260116020526040808220546002549093168252902054610200565b6002546001600160a01b03166000908152600f60205260409020546101e6565b6101e6610284366004611b5b565b6001600160a01b039081166000908152600c602090815260408083206002549094168352929052205490565b60075460405160ff90911681526020016101f0565b6101bb61050f565b6004546001600160a01b03165b6040516001600160a01b0390911681526020016101f0565b6101bb610603565b6001546001600160a01b039081166000908152600e6020526040808220546002549093168252902054610200565b6002546001600160a01b03166102da565b6101bb610347366004611b42565b61062e565b6101e661035a366004611b5b565b6002546001600160a01b039081166000908152600d602090815260408083209490931682529290925290205490565b6003546001600160a01b03166102da565b6001546001600160a01b03166000908152600f60205260409020546101e6565b6101bb6103c8366004611b42565b610687565b6101bb6103db366004611b42565b6106e0565b6103e8610739565b6040516101f09190611b84565b6001546001600160a01b03166102da565b6101e6610414366004611b5b565b6001600160a01b039081166000908152600c602090815260408083206001549094168352929052205490565b6006546101e6565b6101e6610456366004611b5b565b6001546001600160a01b039081166000908152600d602090815260408083209490931682529290925290205490565b6005546101e6565b610495610920565b61049e81610998565b6104a86001600055565b50565b6104b3610920565b80806000036104ee576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154610504906001600160a01b031683610aa9565b506104a86001600055565b610517610920565b61051f610bf9565b6001546001600160a01b039081166000908152600f6020526040808220600254909316825290209190915555610553610caa565b6001546001600160a01b039081166000908152600e6020526040808220600254909316825290209190915555610587610e59565b61058f6110b2565b60006105996111fd565b90506105a4816112aa565b6002546001600160a01b039081166000908152600e60205260408082205460015490931682528082205490518493927f27ef04f3eee6365ec57cc96b0ca6c817697868d1f05670199c789ca05b26979291a4506106016001600055565b565b61060b610920565b3360009081526010602052604090205461062490610998565b6106016001600055565b610636610920565b8080600003610671576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610504906001600160a01b031683611407565b61068f610920565b80806000036106ca576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154610504906001600160a01b031683611407565b6106e8610920565b8080600003610723576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254610504906001600160a01b031683610aa9565b60085460609067ffffffffffffffff81111561075757610757611bd1565b604051908082528060200260200182016040528015610780578160200160208202803683370190505b50905060005b6008548110156107fe5760088054829081106107a4576107a4611c00565b9060005260206000200160009054906101000a90046001600160a01b03168282815181106107d4576107d4611c00565b6001600160a01b0390921660209283029190910190910152806107f681611c5e565b915050610786565b5090565b600061083960016108138488611c96565b61081e90600a611dc9565b8561082a88600a611dc9565b6108349190611dd5565b61084d565b610844906001611c96565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858709858702925082811083820303915050806000036108a55783828161089b5761089b611e12565b0492505050610919565b8084116108b157600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b600260005403610991576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b80806000036109d3576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b33600090815260106020526040902054821115610a3d5733600081815260106020526040908190205490517f1a8470c70000000000000000000000000000000000000000000000000000000081526004810192909252602482015260448101839052606401610988565b3360009081526010602052604081208054849290610a5c908490611e41565b9091555050600354610a78906001600160a01b03163384611567565b604051829033907f0b68af39d2b2f165a1280cac62c3a28685e96801c9a077e2b13bad6a31f1d44290600090a35050565b336000908152600c602090815260408083206001600160a01b0386168452909152902054811115610b4357336000818152600c602090815260408083206001600160a01b0387168085529252918290205491517fe4bc506800000000000000000000000000000000000000000000000000000000815260048101919091526024810192909252604482015260648101829052608401610988565b336000908152600c602090815260408083206001600160a01b038616845290915281208054839290610b76908490611e41565b90915550506001600160a01b03821660009081526011602052604081208054839290610ba3908490611e41565b90915550610bbd90506001600160a01b0383163383611567565b604051819033906001600160a01b038516907f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562090600090a45050565b60008060005b600854811015610ca557600060086000018281548110610c2157610c21611c00565b6000918252602080832091909101546001600160a01b03908116808452600c83526040808520600154841686529093528284205460025490921684529190922054600654919350908210610c7c57610c798287611c96565b95505b8015610c8f57610c8c8186611c96565b94505b5050508080610c9d90611c5e565b915050610bff565b509091565b6001546001600160a01b03166000908152600f60205260408120548190610cd090611633565b1580610cf457506002546001600160a01b03166000908152600f6020526040902054155b15610d5e576001546001600160a01b039081166000908152600f6020526040808220546002549093168252908190205490517f931eb8e000000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610988565b610d66611674565b6001546001600160a01b03166000908152600f60209081526040808320548151808301909252600a548252600b5492820192909252610da59190611759565b6002546001600160a01b03166000908152600f60205260409020549091508111610dec576001546001600160a01b03166000908152600f6020526040902054925090509091565b6002546001600160a01b03166000908152600f6020908152604091829020548251808401909352600a548352600b5491830191909152610e3491610e2f906117cf565b611759565b6002546001600160a01b03166000908152600f60205260409020549093509150509091565b6040805180820182526001546001600160a01b039081166000818152600e6020818152868320548652928252600f8084528683205484870152865180880188526002549095168084529184528683205485529082528252938420549082015290915b6008548110156110ad57600060086000018281548110610edd57610edd611c00565b60009182526020808320909101546001600160a01b03908116808452600c83526040808520600154909316855291909252822054909250610f1e9086611850565b6001546001600160a01b039081166000908152600d6020908152604080832093871683529290522081905590508015610fc0576001600160a01b038083166000908152600c6020908152604080832060015490941683529290529081208054839290610f8b908490611e41565b90915550506001546001600160a01b031660009081526011602052604081208054839290610fba908490611e41565b90915550505b6001600160a01b038083166000908152600c60209081526040808320600254909416835292905290812054610ff5908661186b565b6002546001600160a01b039081166000908152600d6020908152604080832093881683529290522081905590508015611097576001600160a01b038084166000908152600c6020908152604080832060025490941683529290529081208054839290611062908490611e41565b90915550506002546001600160a01b031660009081526011602052604081208054839290611091908490611e41565b90915550505b50505080806110a590611c5e565b915050610ebb565b505050565b6001546003546001600160a01b039182166000818152600e6020526040908190205490517f095ea7b300000000000000000000000000000000000000000000000000000000815293909216600484015260248301919091529063095ea7b3906044016020604051808303816000875af1158015611133573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111579190611e54565b506002546003546001600160a01b039182166000818152600e6020526040908190205490517f095ea7b300000000000000000000000000000000000000000000000000000000815293909216600484015260248301919091529063095ea7b3906044016020604051808303816000875af11580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a89190611e54565b6004546001546001600160a01b039081166000908152600e60205260408082205460025484168352908220546003549294841693638e3c92e493309116611242611887565b6040518663ffffffff1660e01b8152600401611262959493929190611e76565b6020604051808303816000875af1158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a59190611ed1565b905090565b6002546001600160a01b03166000908152600e60205260408120548291906112d06118b9565b6112da9190611c96565b905060005b6008548110156113a65760006008600001828154811061130157611301611c00565b60009182526020822001546001600160a01b03169150611320826118dd565b905080600003611331575050611394565b600061135187604051806040016040528085815260200188815250611759565b6001600160a01b03841660009081526010602052604081208054929350839290919061137e908490611c96565b9091555061138e90508187611e41565b95505050505b8061139e81611c5e565b9150506112df565b5081156110ad57816010600060086000016000815481106113c9576113c9611c00565b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906113fd908490611c96565b9091555050505050565b336000908152600c602090815260408083206001600160a01b03861684529091528120805483929061143a908490611c96565b90915550506001600160a01b03821660009081526011602052604081208054839290611467908490611c96565b90915550503360009081526009602052604090205460ff166115165733600081815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556008805491820181559091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b61152b6001600160a01b038316333084611939565b604051819033906001600160a01b038516907ff1444b5cad7ce70cb018d1b8edc8618fe303f3c7f034d8d572a6e27facbf2bef90600090a45050565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008082526001600160a01b0384166004830152602482018390529060008060448382895af16115bd573d6000803e3d6000fd5b506115c784611a0e565b61162d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e7366657200000000000000000000006044820152606401610988565b50505050565b60065460009082101561164857506000919050565b60075460055461166e9160ff610100820481169262010000830482169290911686611ad9565b92915050565b60075460009061168d90610100900460ff16600a611eea565b600480546003546001546040517f5ccfb71d0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169481019490945281166024840152604483018490529293506000928392911690635ccfb71d906064016040805180830381865afa15801561170d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117319190611ef9565b9092509050600060026117448385611c96565b61174e9190611f1d565b600a55505050600b55565b600081602001516000036117a957815160208301516040517f60c1ae3900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610988565b60208201518251036117bc57508161166e565b610919838360000151846020015161084d565b6040805180820190915260008082526020820152816020015160000361183157815160208301516040517f60c1ae3900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610988565b5060408051808201909152602080830151825291519181019190915290565b6006546000908310156118655750600061166e565b61091983835b60008260000361187d5750600061166e565b6109198383611759565b61188f611b24565b60405180608001604052806000815260200160008152602001600081526020016000815250905090565b6001546001600160a01b03166000908152600e60205260408120546112a590611633565b6001546001600160a01b039081166000908152600d602081815260408084208686168086529083528185205460025490961685529282528084209284529190528120549091908261192d83611633565b90506108448282611c96565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1611997573d6000803e3d6000fd5b506119a185611a0e565b611a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610988565b5050505050565b6000611a4d565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d8015611a8c5760208114611ac657611a877f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f611a15565b611ad3565b823b611abd57611abd7f475076323a206e6f74206120636f6e74726163740000000000000000000000006014611a15565b60019150611ad3565b3d6000803e600051151591505b50919050565b600081600003611aeb57506000610844565b611b1a8285611afb88600a611dc9565b611b059190611dd5565b611b0f868a611c96565b61083490600a611dc9565b9695505050505050565b60405180608001604052806004906020820280368337509192915050565b600060208284031215611b5457600080fd5b5035919050565b600060208284031215611b6d57600080fd5b81356001600160a01b038116811461091957600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611bc55783516001600160a01b031683529284019291840191600101611ba0565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611c8f57611c8f611c2f565b5060010190565b8082018082111561166e5761166e611c2f565b600181815b80851115611d0257817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611ce857611ce8611c2f565b80851615611cf557918102915b93841c9390800290611cae565b509250929050565b600082611d195750600161166e565b81611d265750600061166e565b8160018114611d3c5760028114611d4657611d62565b600191505061166e565b60ff841115611d5757611d57611c2f565b50506001821b61166e565b5060208310610133831016604e8410600b8410161715611d85575081810a61166e565b611d8f8383611ca9565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611dc157611dc1611c2f565b029392505050565b60006109198383611d0a565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e0d57611e0d611c2f565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8181038181111561166e5761166e611c2f565b600060208284031215611e6657600080fd5b8151801515811461091957600080fd5b85815260208082018690526001600160a01b03858116604084015284166060830152610100820190608083018460005b6004811015611ec357815183529183019190830190600101611ea6565b505050509695505050505050565b600060208284031215611ee357600080fd5b5051919050565b600061091960ff841683611d0a565b60008060408385031215611f0c57600080fd5b505080516020909101519092909150565b600082611f53577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220a762632e40357bf68314cdcedcc81dbbf49c7fc67fc65837a72de0b4ac6a15c264736f6c63430008100033",
  "devdoc": {
    "author": "Solid World",
    "kind": "dev",
    "methods": {
      "getConversionRate()": {
        "returns": {
          "_0": "1 token0 = ? token1"
        }
      },
      "getConversionRateDecimals()": {
        "returns": {
          "_0": "Number of decimals of the conversion rate e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6"
        }
      },
      "getGammaVault()": {
        "returns": {
          "_0": "Gamma Vault address the UniProxy contract will deposit tokens to"
        }
      },
      "getLastGammaAdjustmentFactor()": {
        "returns": {
          "_0": "the output amount of token1 that was received for the given amount of token0",
          "_1": "the input amount of token0 to receive amount of token1"
        }
      },
      "getLastToken0AvailableLiquidity()": {
        "details": "returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)"
      },
      "getLastToken0LiquidityDeployed(address)": {
        "params": {
          "liquidityProvider": "account that contributed liquidity"
        },
        "returns": {
          "lastDeployedAmount": "amount of token0 liquidity that was deployed by the liquidity provider during the last deployment"
        }
      },
      "getLastToken1AvailableLiquidity()": {
        "details": "returns the total amount of token1 that was available to be deployed"
      },
      "getLastToken1LiquidityDeployed(address)": {
        "params": {
          "liquidityProvider": "account that contributed liquidity"
        },
        "returns": {
          "lastDeployedAmount": "amount of token1 liquidity that was last deployed by the liquidity provider during the last deployment"
        }
      },
      "getMinConvertibleToken0Amount()": {
        "details": "Returns the minimum amount of token0 that can be converted to token1"
      },
      "getUniProxy()": {
        "returns": {
          "_0": "UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault, and returns LP tokens"
        }
      }
    },
    "stateVariables": {
      "lPTokensOwed": {
        "details": "Account => Amount"
      },
      "lastAvailableLiquidity": {
        "details": "Token => Amount"
      },
      "lastDeployedLiquidity": {
        "details": "Token => Account => Amount"
      },
      "lastTotalDeployedLiquidity": {
        "details": "Token => Amount"
      },
      "totalDeposits": {
        "details": "Token => Amount"
      },
      "userTokenBalance": {
        "details": "Account => Token => Balance"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployLiquidity()": {
        "notice": "Looks at the current configuration and state of the contract, deploys the available liquidity to the Gamma Vault, and distributes the LP tokens to the depositors proportionally"
      },
      "depositToken0(uint256)": {
        "notice": "The caller must approve the contract to spend `amount` of token0"
      },
      "depositToken1(uint256)": {
        "notice": "The caller must approve the contract to spend `amount` of token1"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2179,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8194,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Config)16277_storage"
      },
      {
        "astId": 8197,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "depositors",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Depositors)16286_storage"
      },
      {
        "astId": 8200,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastGammaAdjustmentFactor",
        "offset": 0,
        "slot": "10",
        "type": "t_struct(Fraction)16291_storage"
      },
      {
        "astId": 8207,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "userTokenBalance",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8214,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastDeployedLiquidity",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8219,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastTotalDeployedLiquidity",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8224,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastAvailableLiquidity",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8229,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lPTokensOwed",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8234,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Config)16277_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityDeployerDataTypes.Config",
        "members": [
          {
            "astId": 16259,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16261,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 16263,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "gammaVault",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 16265,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "uniProxy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 16268,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "conversionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16270,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "minConvertibleToken0Amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16272,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "conversionRateDecimals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 16274,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token0Decimals",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 16276,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token1Decimals",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Depositors)16286_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityDeployerDataTypes.Depositors",
        "members": [
          {
            "astId": 16280,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "tokenDepositors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 16285,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "isDepositor",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Fraction)16291_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityDeployerDataTypes.Fraction",
        "members": [
          {
            "astId": 16288,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "numerator",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16290,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "denominator",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}