{
  "address": "0x68b3E248bf5AdBA452d63dD40C2fCe7d7714900e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVerificationRegistry",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "subject",
          "type": "address"
        }
      ],
      "name": "NotRegulatoryCompliant",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAlreadyAdded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "kycRequired",
          "type": "bool"
        }
      ],
      "name": "KYCRequiredSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Stake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "verificationRegistry",
          "type": "address"
        }
      ],
      "name": "VerificationRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVerificationRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isKYCRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "counterparty",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_kycRequired",
          "type": "bool"
        }
      ],
      "name": "isValidCounterparty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsController",
      "outputs": [
        {
          "internalType": "contract IRewardsController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_kycRequired",
          "type": "bool"
        }
      ],
      "name": "setKYCRequired",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verificationRegistry",
          "type": "address"
        }
      ],
      "name": "setVerificationRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRewardsController",
          "name": "_rewardsController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawStakeAndClaimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x58768e1da6adb256ed5d1598316c8b69e52d5329dfec41d258e2241b62a57a53",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0x68b3E248bf5AdBA452d63dD40C2fCe7d7714900e",
    "transactionIndex": 1,
    "gasUsed": "1498551",
    "logsBloom": "0x
    "blockHash": "0xefe9b397467960e1d39557dd95dd79488be02366d847c1fcbe1917ce08e97202",
    "transactionHash": "0x58768e1da6adb256ed5d1598316c8b69e52d5329dfec41d258e2241b62a57a53",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18589215,
        "transactionHash": "0x58768e1da6adb256ed5d1598316c8b69e52d5329dfec41d258e2241b62a57a53",
        "address": "0x68b3E248bf5AdBA452d63dD40C2fCe7d7714900e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xefe9b397467960e1d39557dd95dd79488be02366d847c1fcbe1917ce08e97202"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 18589215,
        "transactionHash": "0x58768e1da6adb256ed5d1598316c8b69e52d5329dfec41d258e2241b62a57a53",
        "address": "0x68b3E248bf5AdBA452d63dD40C2fCe7d7714900e",
        "topics": [
          "0xcedf55f14e39eab9ea6df1b72eeb9a4ce7f42a669be00a2d94fc9eaccbe06373",
          "0x00000000000000000000000093ab310eb10ae72255e26e858cb4c1ed7d115c59"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xefe9b397467960e1d39557dd95dd79488be02366d847c1fcbe1917ce08e97202"
      }
    ],
    "blockNumber": 18589215,
    "cumulativeGasUsed": "3152487",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93Ab310eB10aE72255E26E858Cb4c1Ed7d115c59"
  ],
  "numDeployments": 1,
  "solcInputHash": "257cb75acc9591f4e17fa59e949f2f9e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVerificationRegistry\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subject\",\"type\":\"address\"}],\"name\":\"NotRegulatoryCompliant\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyAdded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"kycRequired\",\"type\":\"bool\"}],\"name\":\"KYCRequiredSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"verificationRegistry\",\"type\":\"address\"}],\"name\":\"VerificationRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVerificationRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isKYCRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"counterparty\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_kycRequired\",\"type\":\"bool\"}],\"name\":\"isValidCounterparty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_kycRequired\",\"type\":\"bool\"}],\"name\":\"setKYCRequired\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verificationRegistry\",\"type\":\"address\"}],\"name\":\"setVerificationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"_rewardsController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStakeAndClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World\",\"kind\":\"dev\",\"methods\":{\"addToken(address)\":{\"details\":\"Adds a new token to the staking contract\",\"params\":{\"token\":\"the token to add\"}},\"balanceOf(address,address)\":{\"details\":\"Computes the amount of tokens that the `account` has staked\",\"params\":{\"account\":\"the account to check\",\"token\":\"the token to check\"},\"returns\":{\"_0\":\"the amount of `token` tokens that the `account` has staked\"}},\"getTokens()\":{\"details\":\"Returns the list of tokens that can be staked\",\"returns\":{\"_tokens\":\"the list of tokens that can be staked\"}},\"isKYCRequired(address)\":{\"returns\":{\"_0\":\"whether the specified token requires msg.sender to be KYCed before staking\"}},\"isValidCounterparty(address,bool)\":{\"returns\":{\"_0\":\"true if the counterparty is compliant according to the current verification registry, taking into account the KYC requirement.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setKYCRequired(address,bool)\":{\"params\":{\"kycRequired\":\"whether the specified token requires msg.sender to be KYCed before staking\",\"token\":\"to set KYC requirement for\"}},\"stake(address,uint256)\":{\"details\":\"Stakes tokens for the caller into the staking contract\",\"params\":{\"amount\":\"the amount to stake\",\"token\":\"the token to stake\"}},\"totalStaked(address)\":{\"details\":\"Computes the total amount of tokens that have been staked\",\"params\":{\"token\":\"the token to check\"},\"returns\":{\"_0\":\"the total amount of `token` tokens that have been staked\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Withdraws tokens for the caller from the staking contract\",\"params\":{\"amount\":\"the amount to withdraw\",\"token\":\"the token to withdraw\"}},\"withdrawStakeAndClaimRewards(address,uint256)\":{\"details\":\"Withdraws tokens for the caller from the staking contractClaims all rewards of the incentivized `token` for the caller\",\"params\":{\"amount\":\"the amount to withdraw\",\"token\":\"the token to withdraw\"}}},\"stateVariables\":{\"kycRequired\":{\"details\":\"token => requires KYC\"},\"rewardsController\":{\"details\":\"Main contract used for interacting with rewards mechanism.\"},\"tokens\":{\"details\":\"All stakable lp tokens.\"},\"userStake\":{\"details\":\"Mapping with the staked amount of each account for each token.token => user => amount\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolidStaking.sol\":\"SolidStaking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PostConstruct.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @notice Simple contract exposing a modifier used on setup functions\\n/// to prevent them from being called more than once\\n/// @author Solid World DAO\\nabstract contract PostConstruct {\\n    error AlreadyInitialized();\\n\\n    bool private _initialized;\\n\\n    modifier postConstruct() {\\n        if (_initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbe1b6db97ce26a7e5c4332133fc911d26edd608943a40c886c923efb8993fdb2\",\"license\":\"BUSL-1.1\"},\"contracts/SolidStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./interfaces/ISolidStaking.sol\\\";\\nimport \\\"./interfaces/rewards/IRewardsController.sol\\\";\\nimport \\\"./PostConstruct.sol\\\";\\nimport \\\"./libraries/GPv2SafeERC20.sol\\\";\\nimport \\\"./compliance/RegulatoryCompliant.sol\\\";\\n\\n/// @author Solid World\\ncontract SolidStaking is ISolidStaking, ReentrancyGuard, Ownable, PostConstruct, RegulatoryCompliant {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    /// @dev All stakable lp tokens.\\n    address[] public tokens;\\n\\n    mapping(address => bool) public tokenAdded;\\n\\n    /// @dev Mapping with the staked amount of each account for each token.\\n    /// @dev token => user => amount\\n    mapping(address => mapping(address => uint)) public userStake;\\n\\n    /// @dev token => requires KYC\\n    mapping(address => bool) private kycRequired;\\n\\n    /// @dev Main contract used for interacting with rewards mechanism.\\n    IRewardsController public rewardsController;\\n\\n    modifier validToken(address token) {\\n        if (!tokenAdded[token]) {\\n            revert InvalidTokenAddress(token);\\n        }\\n        _;\\n    }\\n\\n    modifier regulatoryCompliant(address token, address subject) {\\n        if (!isValidCounterparty(subject, kycRequired[token])) {\\n            revert NotRegulatoryCompliant(token, subject);\\n        }\\n        _;\\n    }\\n\\n    constructor(address _verificationRegistry) RegulatoryCompliant(_verificationRegistry) {}\\n\\n    function setup(IRewardsController _rewardsController, address owner) external postConstruct {\\n        rewardsController = _rewardsController;\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc ISolidStakingOwnerActions\\n    function addToken(address token) external onlyOwner {\\n        if (tokenAdded[token]) {\\n            revert TokenAlreadyAdded(token);\\n        }\\n\\n        tokens.push(token);\\n        tokenAdded[token] = true;\\n\\n        emit TokenAdded(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingOwnerActions\\n    function setKYCRequired(address token, bool _kycRequired) external onlyOwner {\\n        kycRequired[token] = _kycRequired;\\n\\n        emit KYCRequiredSet(token, _kycRequired);\\n    }\\n\\n    function setVerificationRegistry(address _verificationRegistry) public override onlyOwner {\\n        super.setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function stake(address token, uint amount)\\n        external\\n        nonReentrant\\n        validToken(token)\\n        regulatoryCompliant(token, msg.sender)\\n    {\\n        uint oldUserStake = _balanceOf(token, msg.sender);\\n        uint oldTotalStake = _totalStaked(token);\\n\\n        userStake[token][msg.sender] = oldUserStake + amount;\\n\\n        rewardsController.handleUserStakeChanged(token, msg.sender, oldUserStake, oldTotalStake);\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Stake(msg.sender, token, amount);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function withdraw(address token, uint amount) external nonReentrant validToken(token) {\\n        _withdraw(token, amount);\\n    }\\n\\n    /// @inheritdoc ISolidStakingActions\\n    function withdrawStakeAndClaimRewards(address token, uint amount)\\n        external\\n        nonReentrant\\n        validToken(token)\\n        regulatoryCompliant(token, msg.sender)\\n    {\\n        _withdraw(token, amount);\\n        _claimRewards(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function balanceOf(address token, address account) external view validToken(token) returns (uint) {\\n        return _balanceOf(token, account);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function totalStaked(address token) external view validToken(token) returns (uint) {\\n        return _totalStaked(token);\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function getTokens() external view returns (address[] memory _tokens) {\\n        _tokens = tokens;\\n    }\\n\\n    /// @inheritdoc ISolidStakingViewActions\\n    function isKYCRequired(address token) external view returns (bool) {\\n        return kycRequired[token];\\n    }\\n\\n    function _balanceOf(address token, address account) internal view returns (uint) {\\n        return userStake[token][account];\\n    }\\n\\n    function _totalStaked(address token) internal view returns (uint) {\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _withdraw(address token, uint amount) internal {\\n        uint oldUserStake = _balanceOf(token, msg.sender);\\n        uint oldTotalStake = _totalStaked(token);\\n\\n        userStake[token][msg.sender] = oldUserStake - amount;\\n\\n        rewardsController.handleUserStakeChanged(token, msg.sender, oldUserStake, oldTotalStake);\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit Withdraw(msg.sender, token, amount);\\n    }\\n\\n    function _claimRewards(address token) internal {\\n        address[] memory assets = new address[](1);\\n        assets[0] = token;\\n        rewardsController.claimAllRewardsOnBehalf(assets, msg.sender, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xa5b553ba87eca1fd01bf70a44f8c3e9a2c0903d0bc12a3398a822ac3df592e05\",\"license\":\"BUSL-1.1\"},\"contracts/compliance/RegulatoryCompliant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/compliance/IRegulatoryCompliant.sol\\\";\\nimport \\\"../interfaces/compliance/IVerificationRegistry.sol\\\";\\n\\n/// @author Solid World\\n/// @notice A contract that can integrate a verification registry, and offer a uniform way to\\n/// validate counterparties against the current registry.\\n/// @dev Function restrictions should be implemented by derived contracts.\\nabstract contract RegulatoryCompliant is IRegulatoryCompliant {\\n    address private verificationRegistry;\\n\\n    modifier validVerificationRegistry(address _verificationRegistry) {\\n        if (_verificationRegistry == address(0)) {\\n            revert InvalidVerificationRegistry();\\n        }\\n\\n        _;\\n    }\\n\\n    constructor(address _verificationRegistry) validVerificationRegistry(_verificationRegistry) {\\n        _setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    function setVerificationRegistry(address _verificationRegistry)\\n        public\\n        virtual\\n        validVerificationRegistry(_verificationRegistry)\\n    {\\n        _setVerificationRegistry(_verificationRegistry);\\n    }\\n\\n    function getVerificationRegistry() public view returns (address) {\\n        return verificationRegistry;\\n    }\\n\\n    /// @inheritdoc IRegulatoryCompliant\\n    function isValidCounterparty(address counterparty, bool _kycRequired) public view returns (bool) {\\n        IVerificationRegistry registry = IVerificationRegistry(verificationRegistry);\\n        if (_kycRequired) {\\n            return registry.isVerifiedAndNotBlacklisted(counterparty);\\n        }\\n\\n        return !registry.isBlacklisted(counterparty);\\n    }\\n\\n    function _setVerificationRegistry(address _verificationRegistry) internal {\\n        verificationRegistry = _verificationRegistry;\\n\\n        emit VerificationRegistryUpdated(_verificationRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x641479a77135f8b663955bff9f1b0b1fcd93af3a9cac6b085c14a40ebed5431f\",\"license\":\"MIT\"},\"contracts/interfaces/ISolidStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"./staking/ISolidStakingOwnerActions.sol\\\";\\nimport \\\"./staking/ISolidStakingEvents.sol\\\";\\nimport \\\"./staking/ISolidStakingActions.sol\\\";\\nimport \\\"./staking/ISolidStakingViewActions.sol\\\";\\nimport \\\"./staking/ISolidStakingErrors.sol\\\";\\n\\n/// @title The interface for the Solid World staking contract\\n/// @notice The staking contract facilitates (un)staking of ERC20 tokens\\n/// @author Solid World DAO\\n/// @dev The interface is broken up into smaller pieces\\ninterface ISolidStaking is\\n    ISolidStakingActions,\\n    ISolidStakingEvents,\\n    ISolidStakingOwnerActions,\\n    ISolidStakingViewActions,\\n    ISolidStakingErrors\\n{\\n\\n}\\n\",\"keccak256\":\"0x95766724c13be33317a70e4deb8cf1d452534c8441c2b5c8c900489600c47d0d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/compliance/IBlacklist.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IBlacklist {\\n    error InvalidBlacklister();\\n    error BlacklistingNotAuthorized(address caller);\\n\\n    event BlacklisterUpdated(address indexed oldBlacklister, address indexed newBlacklister);\\n    event Blacklisted(address indexed subject);\\n    event UnBlacklisted(address indexed subject);\\n\\n    function setBlacklister(address newBlacklister) external;\\n\\n    function blacklist(address subject) external;\\n\\n    function unBlacklist(address subject) external;\\n\\n    function getBlacklister() external view returns (address);\\n\\n    function isBlacklisted(address subject) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf53150e4a8d504a94611a63592b0b42d7c0e97b8d278feaeb5b0f1ff15fe6f79\",\"license\":\"MIT\"},\"contracts/interfaces/compliance/IKYCRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IKYCRegistry {\\n    error InvalidVerifier();\\n    error VerificationNotAuthorized(address caller);\\n\\n    event VerifierUpdated(address indexed oldVerifier, address indexed newVerifier);\\n    event Verified(address indexed subject);\\n    event VerificationRevoked(address indexed subject);\\n\\n    function setVerifier(address newVerifier) external;\\n\\n    function registerVerification(address subject) external;\\n\\n    function revokeVerification(address subject) external;\\n\\n    function getVerifier() external view returns (address);\\n\\n    function isVerified(address subject) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xad8f92fc446fb57c5c08eb898edef83f0e686a78e2a2034ddaa6579c9e5462e5\",\"license\":\"MIT\"},\"contracts/interfaces/compliance/IRegulatoryCompliant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface IRegulatoryCompliant {\\n    error InvalidVerificationRegistry();\\n\\n    event VerificationRegistryUpdated(address indexed verificationRegistry);\\n\\n    function setVerificationRegistry(address _verificationRegistry) external;\\n\\n    function getVerificationRegistry() external view returns (address);\\n\\n    /// @return true if the counterparty is compliant according to the current verification registry,\\n    /// taking into account the KYC requirement.\\n    function isValidCounterparty(address counterparty, bool _kycRequired) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x69cb84dcbc2b954bd85452da069c020f0c8a63959e760c9c8912d4e2eb39e8f0\",\"license\":\"MIT\"},\"contracts/interfaces/compliance/IVerificationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IBlacklist.sol\\\";\\nimport \\\"./IKYCRegistry.sol\\\";\\n\\n/// @author Solid World\\ninterface IVerificationRegistry is IBlacklist, IKYCRegistry {\\n    function isVerifiedAndNotBlacklisted(address subject) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd509a5ab861382c250122887c9a0f307d712e3c8183a3b262766e055e69e8552\",\"license\":\"MIT\"},\"contracts/interfaces/rewards/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\ninterface IEACAggregatorProxy {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int);\\n}\\n\",\"keccak256\":\"0x190ff54e0c11988b791a534cb3faeca1585dd74a9ded7d9fc2b6bf0ed0e8f36e\",\"license\":\"MIT\"},\"contracts/interfaces/rewards/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"../../libraries/RewardsDataTypes.sol\\\";\\n\\n/// @title IRewardsController\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Controller.\\ninterface IRewardsController is IRewardsDistributor {\\n    error UnauthorizedClaimer(address claimer, address user);\\n    error NotSolidStaking(address sender);\\n    error InvalidRewardOracle(address reward, address rewardOracle);\\n\\n    /// @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /// @dev Emitted when rewards are claimed\\n    /// @param user The address of the user rewards has been claimed on behalf of\\n    /// @param reward The address of the token reward is claimed\\n    /// @param to The address of the receiver of the rewards\\n    /// @param claimer The address of the claimer\\n    /// @param amount The amount of rewards claimed\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    /// @dev Emitted when the reward oracle is updated\\n    /// @param reward The address of the token reward\\n    /// @param rewardOracle The address of oracle\\n    event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    event RewardsVaultUpdated(address indexed rewardsVault);\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    event SolidStakingUpdated(address indexed solidStaking);\\n\\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    function setClaimer(address user, address claimer) external;\\n\\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n    /// This check is enforced for integrators to be able to show incentives at\\n    /// the current Aave UI without the need to setup an external price registry\\n    /// @param reward The address of the reward to set the price aggregator\\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    function setRewardsVault(address rewardsVault) external;\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    function setSolidStaking(address solidStaking) external;\\n\\n    /// @dev Get the price aggregator oracle address\\n    /// @param reward The address of the reward\\n    /// @return The price oracle of the reward\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /// @return Account that secures ERC20 rewards.\\n    function getRewardsVault() external view returns (address);\\n\\n    /// @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n    /// @param user The address of the user\\n    /// @return The claimer address\\n    function getClaimer(address user) external view returns (address);\\n\\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n    /// @param config The assets configuration input, the list of structs contains the following fields:\\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n    ///   uint256 totalStaked: The total amount staked of the asset\\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n    ///   address asset: The asset address to incentivize\\n    ///   address reward: The reward token address\\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\\n\\n    /// @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n    /// @param asset The incentivized asset address\\n    /// @param user The address of the user whose asset balance has changed\\n    /// @param oldUserStake The amount of assets staked by the user, prior to stake change\\n    /// @param oldTotalStaked The total amount staked of the asset, prior to stake change\\n    function handleUserStakeChanged(\\n        address asset,\\n        address user,\\n        uint oldUserStake,\\n        uint oldTotalStaked\\n    ) external;\\n\\n    /// @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n    /// be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param user The address to check and claim rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsToSelf(address[] calldata assets)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xf195a30c7fcf1187a87edbe7dbd02b3dfff46fa3bc1441234a3bb414b7373442\",\"license\":\"MIT\"},\"contracts/interfaces/rewards/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title IRewardsDistributor\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Distributor.\\ninterface IRewardsDistributor {\\n    error NotEmissionManager(address sender);\\n    error InvalidInput();\\n    error InvalidAssetDecimals(address asset);\\n    error IndexOverflow(uint newIndex);\\n    error DistributionNonExistent(address asset, address reward);\\n\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    error UpdateDistributionNotApplicable(address asset, address reward);\\n\\n    /// @dev Emitted when the configuration of the rewards of an asset is updated.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param oldEmission The old emissions per second value of the reward distribution\\n    /// @param newEmission The new emissions per second value of the reward distribution\\n    /// @param oldDistributionEnd The old end timestamp of the reward distribution\\n    /// @param newDistributionEnd The new end timestamp of the reward distribution\\n    /// @param assetIndex The index of the asset distribution\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint oldEmission,\\n        uint newEmission,\\n        uint oldDistributionEnd,\\n        uint newDistributionEnd,\\n        uint assetIndex\\n    );\\n\\n    /// @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param user The address of the user that rewards are accrued on behalf of\\n    /// @param assetIndex The index of the asset distribution\\n    /// @param userIndex The index of the asset distribution on behalf of the user\\n    /// @param rewardsAccrued The amount of rewards accrued\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint assetIndex,\\n        uint userIndex,\\n        uint rewardsAccrued\\n    );\\n\\n    /// @dev Emitted when the emission manager address is updated.\\n    /// @param oldEmissionManager The address of the old emission manager\\n    /// @param newEmissionManager The address of the new emission manager\\n    event EmissionManagerUpdated(address indexed oldEmissionManager, address indexed newEmissionManager);\\n\\n    /// @dev Sets the end date for the distribution\\n    /// @param asset The asset to incentivize\\n    /// @param reward The reward token that incentives the asset\\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /// @dev Sets the emission per second of a set of reward distributions\\n    /// @param asset The asset is being incentivized\\n    /// @param rewards List of reward addresses are being distributed\\n    /// @param newEmissionsPerSecond List of new reward emissions per second\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /// @dev Updates weekly reward distributions\\n    /// @param assets List of incentivized assets getting updated\\n    /// @param rewards List of reward tokens getting updated\\n    /// @param rewardAmounts List of carbon reward amounts getting distributed\\n    function updateCarbonRewardDistribution(\\n        address[] calldata assets,\\n        address[] calldata rewards,\\n        uint[] calldata rewardAmounts\\n    ) external;\\n\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return true, if distribution can be updated for the asset - reward pair\\n    function canUpdateCarbonRewardDistribution(address asset, address reward) external view returns (bool);\\n\\n    /// @dev Gets the end date for the distribution\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The timestamp with the end of the distribution, in unix time format\\n    function getDistributionEnd(address asset, address reward) external view returns (uint);\\n\\n    /// @dev Returns the index of a user on a reward distribution\\n    /// @param user Address of the user\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The current user asset index, not including new distributions\\n    function getUserIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns the configuration of the distribution reward for a certain asset\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The index of the asset distribution\\n    /// @return The emission per second of the reward distribution\\n    /// @return The timestamp of the last update of the index\\n    /// @return The timestamp of the distribution end\\n    function getRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        );\\n\\n    /// @dev Returns the list of available reward token addresses of an incentivized asset\\n    /// @param asset The incentivized asset\\n    /// @return List of rewards addresses of the input asset\\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n    /// @dev Returns the list of available reward addresses\\n    /// @return List of rewards supported in this contract\\n    function getAllRewards() external view returns (address[] memory);\\n\\n    /// @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return Unclaimed rewards, not including new distributions\\n    function getAccruedRewardAmountForUser(address user, address reward) external view returns (uint);\\n\\n    /// @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return The rewards amount\\n    function getUnclaimedRewardAmountForUserAndAssets(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @return The list of reward addresses\\n    /// @return The list of unclaimed amount of rewards\\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory, uint[] memory);\\n\\n    /// @dev Returns the decimals of an asset to calculate the distribution delta\\n    /// @param asset The address to retrieve decimals\\n    /// @return The decimals of an underlying asset\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /// @dev Returns the address of the emission manager\\n    /// @return The address of the EmissionManager\\n    function getEmissionManager() external view returns (address);\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0x3a23160c6771e0f367ca4a507e02f8002c64fa4db87cf82e80743c2f45473c90\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ISolidStakingActions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissionless state-mutating actions\\n/// @notice Contains state-mutating functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingActions {\\n    /// @dev Stakes tokens for the caller into the staking contract\\n    /// @param token the token to stake\\n    /// @param amount the amount to stake\\n    function stake(address token, uint amount) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdraw(address token, uint amount) external;\\n\\n    /// @dev Withdraws tokens for the caller from the staking contract\\n    /// @dev Claims all rewards of the incentivized `token` for the caller\\n    /// @param token the token to withdraw\\n    /// @param amount the amount to withdraw\\n    function withdrawStakeAndClaimRewards(address token, uint amount) external;\\n}\\n\",\"keccak256\":\"0xc9eb50f2f07606efede509dea80638ef8b6077ff546af806f3cf4416cbcc7058\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/staking/ISolidStakingErrors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Errors thrown by the staking contract\\n/// @author Solid World DAO\\ninterface ISolidStakingErrors {\\n    error InvalidTokenAddress(address token);\\n    error TokenAlreadyAdded(address token);\\n    error NotRegulatoryCompliant(address token, address subject);\\n}\\n\",\"keccak256\":\"0x4ff7d3b40647584bc7d03f9706d50d6b7b1c048e14c1ddba04d1b8c5b151a628\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/staking/ISolidStakingEvents.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Events emitted by the staking contract\\n/// @notice Contains all events emitted by the staking contract\\n/// @author Solid World DAO\\ninterface ISolidStakingEvents {\\n    /// @dev Emitted when an account stakes tokens\\n    /// @param account the account that staked tokens\\n    /// @param token the token that was staked\\n    /// @param amount the amount of tokens that were staked\\n    event Stake(address indexed account, address indexed token, uint indexed amount);\\n\\n    /// @dev Emitted when an account un-stakes tokens\\n    /// @param account the account that withdrew tokens\\n    /// @param token the token that was withdrawn\\n    /// @param amount the amount of tokens that were withdrawn\\n    event Withdraw(address indexed account, address indexed token, uint indexed amount);\\n\\n    /// @dev Emitted when a new token is added to the staking contract\\n    /// @param token the token that was added\\n    event TokenAdded(address indexed token);\\n\\n    event KYCRequiredSet(address indexed token, bool indexed kycRequired);\\n}\\n\",\"keccak256\":\"0xbd497ce878747a2dfe079562f3e4317a18b33dd75b832975eca9bb46c9b523c9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/staking/ISolidStakingOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissioned staking actions\\n/// @notice Contains staking methods may only be called by the owner\\n/// @author Solid World DAO\\ninterface ISolidStakingOwnerActions {\\n    /// @dev Adds a new token to the staking contract\\n    /// @param token the token to add\\n    function addToken(address token) external;\\n\\n    /// @param token to set KYC requirement for\\n    /// @param kycRequired whether the specified token requires msg.sender to be KYCed before staking\\n    function setKYCRequired(address token, bool kycRequired) external;\\n}\\n\",\"keccak256\":\"0xa60fe18f0c958f6b183bd461904bde06778acd31e2be9435ae352d82cb62ced0\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/staking/ISolidStakingViewActions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissionless view actions\\n/// @notice Contains view functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingViewActions {\\n    /// @dev Computes the amount of tokens that the `account` has staked\\n    /// @param token the token to check\\n    /// @param account the account to check\\n    /// @return the amount of `token` tokens that the `account` has staked\\n    function balanceOf(address token, address account) external view returns (uint);\\n\\n    /// @dev Computes the total amount of tokens that have been staked\\n    /// @param token the token to check\\n    /// @return the total amount of `token` tokens that have been staked\\n    function totalStaked(address token) external view returns (uint);\\n\\n    /// @dev Returns the list of tokens that can be staked\\n    /// @return the list of tokens that can be staked\\n    function getTokens() external view returns (address[] memory);\\n\\n    /// @return whether the specified token requires msg.sender to be KYCed before staking\\n    function isKYCRequired(address token) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x83b3a51d053bd6c0a965dd00d1940f9f72d796d98c924cba847d3d479a7ae48f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76a64a698224ac465712446431e6ad26cbe8e2bff8e2d09400f546ba5a667280\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/rewards/IEACAggregatorProxy.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct DistributionConfig {\\n        uint88 emissionPerSecond;\\n        uint totalStaked;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        IEACAggregatorProxy rewardOracle;\\n    }\\n\\n    struct AssetStakedAmounts {\\n        address asset;\\n        uint userStake;\\n        uint totalStaked;\\n    }\\n\\n    struct AssetData {\\n        mapping(address => RewardDistribution) rewardDistribution;\\n        mapping(uint128 => address) availableRewards;\\n        uint128 availableRewardsCount;\\n        uint8 decimals;\\n    }\\n\\n    struct RewardDistribution {\\n        uint104 index;\\n        uint88 emissionPerSecond;\\n        uint32 lastUpdateTimestamp;\\n        uint32 distributionEnd;\\n        mapping(address => UserReward) userReward;\\n    }\\n\\n    struct UserReward {\\n        uint104 index;\\n        uint128 accrued;\\n    }\\n}\\n\",\"keccak256\":\"0x68cc26c7dd839b997ff0eb0c5daa0c27e0d739454d0ee8bf73c343447f956286\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a7338038062001a7383398101604081905262000034916200011e565b600160005580620000453362000082565b806001600160a01b0381166200006e5760405163161a968360e01b815260040160405180910390fd5b6200007982620000d4565b50505062000150565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fcedf55f14e39eab9ea6df1b72eeb9a4ce7f42a669be00a2d94fc9eaccbe0637390600090a250565b6000602082840312156200013157600080fd5b81516001600160a01b03811681146200014957600080fd5b9392505050565b61191380620001606000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c806387664f91116100cd578063d48bfca711610081578063f3fef3a311610066578063f3fef3a314610321578063f773f31114610334578063f7888aec1461034757600080fd5b8063d48bfca7146102fb578063f2fde38b1461030e57600080fd5b80639bfd8d61116100b25780639bfd8d61146102c0578063aa6ca808146102d3578063adc9772e146102e857600080fd5b806387664f911461029c5780638da5cb5b146102af57600080fd5b806351bdca3e116101245780636dfeb12f116101095780636dfeb12f14610245578063715018a6146102685780637c7a0cbf1461027057600080fd5b806351bdca3e146101f95780636bb65f531461023257600080fd5b80631ab71eaa116101555780631ab71eaa146101b05780632d34ba79146101d35780634f64b2be146101e657600080fd5b80630aabe439146101715780630c96a12c14610186575b600080fd5b61018461017f3660046114f7565b61035a565b005b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6101c36101be3660046114f7565b6103d4565b60405190151581526020016101a7565b6101846101e1366004611530565b610502565b6101936101f436600461155e565b6105d8565b610224610207366004611530565b600560209081526000928352604080842090915290825290205481565b6040519081526020016101a7565b600754610193906001600160a01b031681565b6101c3610253366004611577565b60046020526000908152604090205460ff1681565b610184610602565b6101c361027e366004611577565b6001600160a01b031660009081526006602052604090205460ff1690565b6101846102aa366004611577565b610616565b6001546001600160a01b0316610193565b6102246102ce366004611577565b61062a565b6102db6106a0565b6040516101a791906115df565b6101846102f63660046115f2565b610702565b610184610309366004611577565b610989565b61018461031c366004611577565b610ab4565b61018461032f3660046115f2565b610b5b565b6101846103423660046115f2565b610c3e565b610224610355366004611530565b610da0565b610362610e2c565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f852fc2e2378d86df920dabb5bed82e3da45e8b39ae319c0f6501b1c2f843880491a35050565b6002546000906001600160a01b03168215610474576040517f825115770000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152821690638251157790602401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c919061161e565b9150506104fc565b6040517ffe575a870000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015282169063fe575a8790602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f7919061161e565b159150505b92915050565b60015474010000000000000000000000000000000000000000900460ff1615610557576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055600780546001600160a01b0384167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556105d481610ab4565b5050565b600381815481106105e857600080fd5b6000918252602090912001546001600160a01b0316905081565b61060a610e2c565b6106146000610ea0565b565b61061e610e2c565b61062781610f0a565b50565b6001600160a01b038116600090815260046020526040812054829060ff1661068e576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b61069783610f54565b91505b50919050565b606060038054806020026020016040519081016040528092919081815260200182805480156106f857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106da575b5050505050905090565b60026000540361076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff166107d1576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6001600160a01b038316600090815260066020526040902054839033906107fc90829060ff166103d4565b610845576040517fc3da7c210000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152604401610685565b6001600160a01b03851660009081526005602090815260408083203384529091528120549061087387610f54565b905061087f868361166a565b6001600160a01b038881166000818152600560209081526040808320338085529252918290209490945560075490517f184dde8700000000000000000000000000000000000000000000000000000000815260048101929092526024820193909352604481018590526064810184905291169063184dde8790608401600060405180830381600087803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b50610943925050506001600160a01b038816333089610fd8565b60405186906001600160a01b0389169033907f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f790600090a4505060016000555050505050565b610991610e2c565b6001600160a01b03811660009081526004602052604090205460ff16156109ef576040517f13501a510000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909417909355915190917f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a491a250565b610abc610e2c565b6001600160a01b038116610b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610685565b61062781610ea0565b600260005403610bc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff16610c2a576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b610c3483836110ad565b5050600160005550565b600260005403610caa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff16610d0d576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6001600160a01b03831660009081526006602052604090205483903390610d3890829060ff166103d4565b610d81576040517fc3da7c210000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152604401610685565b610d8b85856110ad565b610d94856111e8565b50506001600055505050565b6001600160a01b038216600090815260046020526040812054839060ff16610dff576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b50506001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6001546001600160a01b03163314610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610685565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b038116610f4b576040517f161a968300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d4826112e3565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc919061167d565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1611036573d6000803e3d6000fd5b5061104085611345565b6110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610685565b5050505050565b6001600160a01b0382166000908152600560209081526040808320338452909152812054906110db84610f54565b90506110e78383611696565b6001600160a01b038581166000818152600560209081526040808320338085529252918290209490945560075490517f184dde8700000000000000000000000000000000000000000000000000000000815260048101929092526024820193909352604481018590526064810184905291169063184dde8790608401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b506111aa925050506001600160a01b038516338561140e565b60405183906001600160a01b0386169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb90600090a450505050565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061121e5761121e6116d8565b6001600160a01b0392831660209182029290920101526007546040517f9ff55db9000000000000000000000000000000000000000000000000000000008152911690639ff55db99061127890849033908190600401611707565b6000604051808303816000875af1158015611297573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112dd9190810190611818565b50505050565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fcedf55f14e39eab9ea6df1b72eeb9a4ce7f42a669be00a2d94fc9eaccbe0637390600090a250565b6000611384565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156113c357602081146113fd576113be7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61134c565b61069a565b823b6113f4576113f47f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461134c565b6001915061069a565b3d6000803e50506000511515919050565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008082526001600160a01b0384166004830152602482018390529060008060448382895af1611464573d6000803e3d6000fd5b5061146e84611345565b6112dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e7366657200000000000000000000006044820152606401610685565b6001600160a01b038116811461062757600080fd5b801515811461062757600080fd5b6000806040838503121561150a57600080fd5b8235611515816114d4565b91506020830135611525816114e9565b809150509250929050565b6000806040838503121561154357600080fd5b823561154e816114d4565b91506020830135611525816114d4565b60006020828403121561157057600080fd5b5035919050565b60006020828403121561158957600080fd5b8135611594816114d4565b9392505050565b600081518084526020808501945080840160005b838110156115d45781516001600160a01b0316875295820195908201906001016115af565b509495945050505050565b602081526000611594602083018461159b565b6000806040838503121561160557600080fd5b8235611610816114d4565b946020939093013593505050565b60006020828403121561163057600080fd5b8151611594816114e9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104fc576104fc61163b565b60006020828403121561168f57600080fd5b5051919050565b818103818111156104fc576104fc61163b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60608152600061171a606083018661159b565b6001600160a01b0394851660208401529290931660409091015292915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611781576117816116a9565b604052919050565b600067ffffffffffffffff8211156117a3576117a36116a9565b5060051b60200190565b600082601f8301126117be57600080fd5b815160206117d36117ce83611789565b61173a565b82815260059290921b840181019181810190868411156117f257600080fd5b8286015b8481101561180d57805183529183019183016117f6565b509695505050505050565b6000806040838503121561182b57600080fd5b825167ffffffffffffffff8082111561184357600080fd5b818501915085601f83011261185757600080fd5b815160206118676117ce83611789565b82815260059290921b8401810191818101908984111561188657600080fd5b948201945b838610156118ad57855161189e816114d4565b8252948201949082019061188b565b918801519196509093505050808211156118c657600080fd5b506118d3858286016117ad565b915050925092905056fea2646970667358221220d4b2fce3fffd6abf4ea73eb1da069ddb8d263c90c91ceb300eac3771790b9cf564736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c806387664f91116100cd578063d48bfca711610081578063f3fef3a311610066578063f3fef3a314610321578063f773f31114610334578063f7888aec1461034757600080fd5b8063d48bfca7146102fb578063f2fde38b1461030e57600080fd5b80639bfd8d61116100b25780639bfd8d61146102c0578063aa6ca808146102d3578063adc9772e146102e857600080fd5b806387664f911461029c5780638da5cb5b146102af57600080fd5b806351bdca3e116101245780636dfeb12f116101095780636dfeb12f14610245578063715018a6146102685780637c7a0cbf1461027057600080fd5b806351bdca3e146101f95780636bb65f531461023257600080fd5b80631ab71eaa116101555780631ab71eaa146101b05780632d34ba79146101d35780634f64b2be146101e657600080fd5b80630aabe439146101715780630c96a12c14610186575b600080fd5b61018461017f3660046114f7565b61035a565b005b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6101c36101be3660046114f7565b6103d4565b60405190151581526020016101a7565b6101846101e1366004611530565b610502565b6101936101f436600461155e565b6105d8565b610224610207366004611530565b600560209081526000928352604080842090915290825290205481565b6040519081526020016101a7565b600754610193906001600160a01b031681565b6101c3610253366004611577565b60046020526000908152604090205460ff1681565b610184610602565b6101c361027e366004611577565b6001600160a01b031660009081526006602052604090205460ff1690565b6101846102aa366004611577565b610616565b6001546001600160a01b0316610193565b6102246102ce366004611577565b61062a565b6102db6106a0565b6040516101a791906115df565b6101846102f63660046115f2565b610702565b610184610309366004611577565b610989565b61018461031c366004611577565b610ab4565b61018461032f3660046115f2565b610b5b565b6101846103423660046115f2565b610c3e565b610224610355366004611530565b610da0565b610362610e2c565b6001600160a01b03821660008181526006602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917f852fc2e2378d86df920dabb5bed82e3da45e8b39ae319c0f6501b1c2f843880491a35050565b6002546000906001600160a01b03168215610474576040517f825115770000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152821690638251157790602401602060405180830381865afa158015610448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046c919061161e565b9150506104fc565b6040517ffe575a870000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015282169063fe575a8790602401602060405180830381865afa1580156104d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f7919061161e565b159150505b92915050565b60015474010000000000000000000000000000000000000000900460ff1615610557576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055600780546001600160a01b0384167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790556105d481610ab4565b5050565b600381815481106105e857600080fd5b6000918252602090912001546001600160a01b0316905081565b61060a610e2c565b6106146000610ea0565b565b61061e610e2c565b61062781610f0a565b50565b6001600160a01b038116600090815260046020526040812054829060ff1661068e576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024015b60405180910390fd5b61069783610f54565b91505b50919050565b606060038054806020026020016040519081016040528092919081815260200182805480156106f857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106da575b5050505050905090565b60026000540361076e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff166107d1576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6001600160a01b038316600090815260066020526040902054839033906107fc90829060ff166103d4565b610845576040517fc3da7c210000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152604401610685565b6001600160a01b03851660009081526005602090815260408083203384529091528120549061087387610f54565b905061087f868361166a565b6001600160a01b038881166000818152600560209081526040808320338085529252918290209490945560075490517f184dde8700000000000000000000000000000000000000000000000000000000815260048101929092526024820193909352604481018590526064810184905291169063184dde8790608401600060405180830381600087803b15801561091557600080fd5b505af1158015610929573d6000803e3d6000fd5b50610943925050506001600160a01b038816333089610fd8565b60405186906001600160a01b0389169033907f99039fcf0a98f484616c5196ee8b2ecfa971babf0b519848289ea4db381f85f790600090a4505060016000555050505050565b610991610e2c565b6001600160a01b03811660009081526004602052604090205460ff16156109ef576040517f13501a510000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6003805460018082019092557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03841690811790915560008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016909417909355915190917f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a491a250565b610abc610e2c565b6001600160a01b038116610b52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610685565b61062781610ea0565b600260005403610bc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff16610c2a576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b610c3483836110ad565b5050600160005550565b600260005403610caa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610685565b600260009081556001600160a01b038316815260046020526040902054829060ff16610d0d576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b6001600160a01b03831660009081526006602052604090205483903390610d3890829060ff166103d4565b610d81576040517fc3da7c210000000000000000000000000000000000000000000000000000000081526001600160a01b03808416600483015282166024820152604401610685565b610d8b85856110ad565b610d94856111e8565b50506001600055505050565b6001600160a01b038216600090815260046020526040812054839060ff16610dff576040517f733068030000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602401610685565b50506001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6001546001600160a01b03163314610614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610685565b600180546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b038116610f4b576040517f161a968300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d4826112e3565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610fb4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc919061167d565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1611036573d6000803e3d6000fd5b5061104085611345565b6110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610685565b5050505050565b6001600160a01b0382166000908152600560209081526040808320338452909152812054906110db84610f54565b90506110e78383611696565b6001600160a01b038581166000818152600560209081526040808320338085529252918290209490945560075490517f184dde8700000000000000000000000000000000000000000000000000000000815260048101929092526024820193909352604481018590526064810184905291169063184dde8790608401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b506111aa925050506001600160a01b038516338561140e565b60405183906001600160a01b0386169033907f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb90600090a450505050565b60408051600180825281830190925260009160208083019080368337019050509050818160008151811061121e5761121e6116d8565b6001600160a01b0392831660209182029290920101526007546040517f9ff55db9000000000000000000000000000000000000000000000000000000008152911690639ff55db99061127890849033908190600401611707565b6000604051808303816000875af1158015611297573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526112dd9190810190611818565b50505050565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fcedf55f14e39eab9ea6df1b72eeb9a4ce7f42a669be00a2d94fc9eaccbe0637390600090a250565b6000611384565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156113c357602081146113fd576113be7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61134c565b61069a565b823b6113f4576113f47f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461134c565b6001915061069a565b3d6000803e50506000511515919050565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008082526001600160a01b0384166004830152602482018390529060008060448382895af1611464573d6000803e3d6000fd5b5061146e84611345565b6112dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e7366657200000000000000000000006044820152606401610685565b6001600160a01b038116811461062757600080fd5b801515811461062757600080fd5b6000806040838503121561150a57600080fd5b8235611515816114d4565b91506020830135611525816114e9565b809150509250929050565b6000806040838503121561154357600080fd5b823561154e816114d4565b91506020830135611525816114d4565b60006020828403121561157057600080fd5b5035919050565b60006020828403121561158957600080fd5b8135611594816114d4565b9392505050565b600081518084526020808501945080840160005b838110156115d45781516001600160a01b0316875295820195908201906001016115af565b509495945050505050565b602081526000611594602083018461159b565b6000806040838503121561160557600080fd5b8235611610816114d4565b946020939093013593505050565b60006020828403121561163057600080fd5b8151611594816114e9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104fc576104fc61163b565b60006020828403121561168f57600080fd5b5051919050565b818103818111156104fc576104fc61163b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60608152600061171a606083018661159b565b6001600160a01b0394851660208401529290931660409091015292915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611781576117816116a9565b604052919050565b600067ffffffffffffffff8211156117a3576117a36116a9565b5060051b60200190565b600082601f8301126117be57600080fd5b815160206117d36117ce83611789565b61173a565b82815260059290921b840181019181810190868411156117f257600080fd5b8286015b8481101561180d57805183529183019183016117f6565b509695505050505050565b6000806040838503121561182b57600080fd5b825167ffffffffffffffff8082111561184357600080fd5b818501915085601f83011261185757600080fd5b815160206118676117ce83611789565b82815260059290921b8401810191818101908984111561188657600080fd5b948201945b838610156118ad57855161189e816114d4565b8252948201949082019061188b565b918801519196509093505050808211156118c657600080fd5b506118d3858286016117ad565b915050925092905056fea2646970667358221220d4b2fce3fffd6abf4ea73eb1da069ddb8d263c90c91ceb300eac3771790b9cf564736f6c63430008100033",
  "devdoc": {
    "author": "Solid World",
    "kind": "dev",
    "methods": {
      "addToken(address)": {
        "details": "Adds a new token to the staking contract",
        "params": {
          "token": "the token to add"
        }
      },
      "balanceOf(address,address)": {
        "details": "Computes the amount of tokens that the `account` has staked",
        "params": {
          "account": "the account to check",
          "token": "the token to check"
        },
        "returns": {
          "_0": "the amount of `token` tokens that the `account` has staked"
        }
      },
      "getTokens()": {
        "details": "Returns the list of tokens that can be staked",
        "returns": {
          "_tokens": "the list of tokens that can be staked"
        }
      },
      "isKYCRequired(address)": {
        "returns": {
          "_0": "whether the specified token requires msg.sender to be KYCed before staking"
        }
      },
      "isValidCounterparty(address,bool)": {
        "returns": {
          "_0": "true if the counterparty is compliant according to the current verification registry, taking into account the KYC requirement."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setKYCRequired(address,bool)": {
        "params": {
          "kycRequired": "whether the specified token requires msg.sender to be KYCed before staking",
          "token": "to set KYC requirement for"
        }
      },
      "stake(address,uint256)": {
        "details": "Stakes tokens for the caller into the staking contract",
        "params": {
          "amount": "the amount to stake",
          "token": "the token to stake"
        }
      },
      "totalStaked(address)": {
        "details": "Computes the total amount of tokens that have been staked",
        "params": {
          "token": "the token to check"
        },
        "returns": {
          "_0": "the total amount of `token` tokens that have been staked"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "Withdraws tokens for the caller from the staking contract",
        "params": {
          "amount": "the amount to withdraw",
          "token": "the token to withdraw"
        }
      },
      "withdrawStakeAndClaimRewards(address,uint256)": {
        "details": "Withdraws tokens for the caller from the staking contractClaims all rewards of the incentivized `token` for the caller",
        "params": {
          "amount": "the amount to withdraw",
          "token": "the token to withdraw"
        }
      }
    },
    "stateVariables": {
      "kycRequired": {
        "details": "token => requires KYC"
      },
      "rewardsController": {
        "details": "Main contract used for interacting with rewards mechanism."
      },
      "tokens": {
        "details": "All stakable lp tokens."
      },
      "userStake": {
        "details": "Mapping with the staked amount of each account for each token.token => user => amount"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 803,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 687,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8458,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "_initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 10277,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "verificationRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8502,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8506,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "tokenAdded",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8513,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "userStake",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 8518,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "kycRequired",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8522,
        "contract": "contracts/SolidStaking.sol:SolidStaking",
        "label": "rewardsController",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IRewardsController)11640"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRewardsController)11640": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}