{
  "address": "0x70b12af7571a8b0701f4bdE6465919032DC27e4D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forwardContractBatch",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GenericSwapError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SweepAmountZero",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "outputAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dust",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "dustRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "ZapCollateralize",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "forwardContractBatch",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crispToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "dustRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        }
      ],
      "name": "zapCollateralize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "crispToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "dustRecipient",
          "type": "address"
        }
      ],
      "name": "zapCollateralize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crispToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "dustRecipient",
          "type": "address"
        }
      ],
      "name": "zapCollateralizeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "crispToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "swap",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "dustRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "zapRecipient",
          "type": "address"
        }
      ],
      "name": "zapCollateralizeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xee26b39b2933b50e6cafc969306a10cd10c47ab9761a07aa21221c5ce0b8bf89",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0x70b12af7571a8b0701f4bdE6465919032DC27e4D",
    "transactionIndex": 65,
    "gasUsed": "1403834",
    "logsBloom": "0x
    "blockHash": "0xab0f694b4844a4fbaafbf15c4daa3cd550e15185b0414d58a2e5044b64813537",
    "transactionHash": "0xee26b39b2933b50e6cafc969306a10cd10c47ab9761a07aa21221c5ce0b8bf89",
    "logs": [
      {
        "transactionIndex": 65,
        "blockNumber": 48898297,
        "transactionHash": "0xee26b39b2933b50e6cafc969306a10cd10c47ab9761a07aa21221c5ce0b8bf89",
        "address": "0x0C4fdD1e34603AF7E1e9Ce49a2a798719bDD9392",
        "topics": [
          "0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
          "0x00000000000000000000000070b12af7571a8b0701f4bde6465919032dc27e4d",
          "0x0000000000000000000000002465e7f8a91a4e766566b3a529492ad34a9e6c54"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 280,
        "blockHash": "0xab0f694b4844a4fbaafbf15c4daa3cd550e15185b0414d58a2e5044b64813537"
      },
      {
        "transactionIndex": 65,
        "blockNumber": 48898297,
        "transactionHash": "0xee26b39b2933b50e6cafc969306a10cd10c47ab9761a07aa21221c5ce0b8bf89",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c",
          "0x0000000000000000000000007c7379531b2aee82e4ca06d4175d13b9cbeafd49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000879fee031619f800000000000000000000000000000000000000000000000039a6be838c3a9fd0000000000000000000000000000000000000000000026afd26ccca14d5ab7432000000000000000000000000000000000000000000000000391f1e95892485d8000000000000000000000000000000000000000000026afd27546a02d8c18e2a",
        "logIndex": 281,
        "blockHash": "0xab0f694b4844a4fbaafbf15c4daa3cd550e15185b0414d58a2e5044b64813537"
      }
    ],
    "blockNumber": 48898297,
    "cumulativeGasUsed": "10627152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0x2465E7F8A91a4e766566B3a529492AD34A9e6c54",
    "0x0C4fdD1e34603AF7E1e9Ce49a2a798719bDD9392"
  ],
  "numDeployments": 1,
  "solcInputHash": "bbba5fd6b9009c7d13f755a900ac7c26",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwardContractBatch\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GenericSwapError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SweepAmountZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"ZapCollateralize\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"forwardContractBatch\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crispToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"}],\"name\":\"zapCollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crispToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"}],\"name\":\"zapCollateralize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crispToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"}],\"name\":\"zapCollateralizeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"crispToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"swap\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"dustRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapRecipient\",\"type\":\"address\"}],\"name\":\"zapCollateralizeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Solid World\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"accept transfers from this contract only\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"accept transfers from this contract only\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"zapCollateralize(address,address,uint256,uint256,uint256,bytes,address)\":{\"params\":{\"amountIn\":\"The amounts of forward credits to collateralize\",\"amountOutMin\":\"The minimum amounts of `crispToken` to receive from collateralization\",\"batchId\":\"The batch id of the forward credits to collateralize\",\"crispToken\":\"The intermediate token received for collateralizing forward credits\",\"dustRecipient\":\"Address to receive any remaining `crispToken` dust\",\"outputToken\":\"The actual token received for collateralizing forward credits\",\"swap\":\"Encoded swap from `crispToken` to `outputToken`\"}},\"zapCollateralize(address,address,uint256,uint256,uint256,bytes,address,address)\":{\"params\":{\"amountIn\":\"The amounts of forward credits to collateralize\",\"amountOutMin\":\"The minimum amounts of `crispToken` to receive from collateralization\",\"batchId\":\"The batch id of the forward credits to collateralize\",\"crispToken\":\"The intermediate token received for collateralizing forward credits\",\"dustRecipient\":\"Address to receive any remaining `crispToken` dust\",\"outputToken\":\"The actual token received for collateralizing forward credits\",\"swap\":\"Encoded swap from `crispToken` to `outputToken`\",\"zapRecipient\":\"Address to receive the resulting `outputToken` amount\"}},\"zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address)\":{\"params\":{\"amountIn\":\"The amounts of forward credits to collateralize\",\"amountOutMin\":\"The minimum amounts of `crispToken` to receive from collateralization\",\"batchId\":\"The batch id of the forward credits to collateralize\",\"crispToken\":\"The intermediate token received for collateralizing forward credits\",\"dustRecipient\":\"Address to receive any remaining `crispToken` dust\",\"swap\":\"Encoded swap from `crispToken` to WETH\"}},\"zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address,address)\":{\"params\":{\"amountIn\":\"The amounts of forward credits to collateralize\",\"amountOutMin\":\"The minimum amounts of `crispToken` to receive from collateralization\",\"batchId\":\"The batch id of the forward credits to collateralize\",\"crispToken\":\"The intermediate token received for collateralizing forward credits\",\"dustRecipient\":\"Address to receive any remaining `crispToken` dust\",\"swap\":\"Encoded swap from `crispToken` to WETH\",\"zapRecipient\":\"Address to receive the resulting ETH amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"zapCollateralize(address,address,uint256,uint256,uint256,bytes,address)\":{\"notice\":\"Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for `outputToken` via encoded swap 4. Transfers the `outputToken` balance of SolidZapCollateralize to `msg.sender` 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits\"},\"zapCollateralize(address,address,uint256,uint256,uint256,bytes,address,address)\":{\"notice\":\"Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for `outputToken` via encoded swap 4. Transfers the `outputToken` balance of SolidZapCollateralize to `zapRecipient` 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits\"},\"zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address)\":{\"notice\":\"Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for WETH via encoded swap 4. Unwraps WETH to ETH 5. Transfers the ETH balance of SolidZapCollateralize to `msg.sender` 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits\"},\"zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address,address)\":{\"notice\":\"Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for WETH via encoded swap 4. Unwraps WETH to ETH 5. Transfers the ETH balance of SolidZapCollateralize to `zapRecipient` 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/zap/collateralize/SolidZapCollateralize.sol\":\"SolidZapCollateralize\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/staking/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.16;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n\\n    function approve(address spender, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3c5c1ca48db86c8180fd33431a6934a843f6778a56f1cfe26b35be1976c5c026\",\"license\":\"MIT\"},\"contracts/interfaces/zap/ISWManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @author Solid World\\n/// @dev The minimal interface used to interact with SolidWorldManager\\ninterface ISWManager {\\n    function collateralizeBatch(\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) external;\\n\\n    function bulkDecollateralizeTokens(\\n        uint[] calldata batchIds,\\n        uint[] calldata amountsIn,\\n        uint[] calldata amountsOutMin\\n    ) external;\\n\\n    function getBatchCategory(uint batchId) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x78a58d7b460191ad01996d373fe19058fee655e7d9866a4c289317c28b64fb58\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/zap/ISolidZapCollateralize.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @author Solid World\\ninterface ISolidZapCollateralize {\\n    event ZapCollateralize(\\n        address indexed receiver,\\n        address indexed outputToken,\\n        uint indexed outputAmount,\\n        uint dust,\\n        address dustRecipient,\\n        uint categoryId\\n    );\\n\\n    function router() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function swManager() external view returns (address);\\n\\n    function forwardContractBatch() external view returns (address);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract\\n    /// 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken`\\n    /// 3. Swaps `crispToken` for `outputToken` via encoded swap\\n    /// 4. Transfers the `outputToken` balance of SolidZapCollateralize to `msg.sender`\\n    /// 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`\\n    /// @notice The `msg.sender` must approve this contract to spend the forward credits\\n    /// @param outputToken The actual token received for collateralizing forward credits\\n    /// @param crispToken The intermediate token received for collateralizing forward credits\\n    /// @param batchId The batch id of the forward credits to collateralize\\n    /// @param amountIn The amounts of forward credits to collateralize\\n    /// @param amountOutMin The minimum amounts of `crispToken` to receive from collateralization\\n    /// @param swap Encoded swap from `crispToken` to `outputToken`\\n    /// @param dustRecipient Address to receive any remaining `crispToken` dust\\n    function zapCollateralize(\\n        address outputToken,\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient\\n    ) external;\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract\\n    /// 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken`\\n    /// 3. Swaps `crispToken` for `outputToken` via encoded swap\\n    /// 4. Transfers the `outputToken` balance of SolidZapCollateralize to `zapRecipient`\\n    /// 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`\\n    /// @notice The `msg.sender` must approve this contract to spend the forward credits\\n    /// @param outputToken The actual token received for collateralizing forward credits\\n    /// @param crispToken The intermediate token received for collateralizing forward credits\\n    /// @param batchId The batch id of the forward credits to collateralize\\n    /// @param amountIn The amounts of forward credits to collateralize\\n    /// @param amountOutMin The minimum amounts of `crispToken` to receive from collateralization\\n    /// @param swap Encoded swap from `crispToken` to `outputToken`\\n    /// @param dustRecipient Address to receive any remaining `crispToken` dust\\n    /// @param zapRecipient Address to receive the resulting `outputToken` amount\\n    function zapCollateralize(\\n        address outputToken,\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient,\\n        address zapRecipient\\n    ) external;\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract\\n    /// 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken`\\n    /// 3. Swaps `crispToken` for WETH via encoded swap\\n    /// 4. Unwraps WETH to ETH\\n    /// 5. Transfers the ETH balance of SolidZapCollateralize to `msg.sender`\\n    /// 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`\\n    /// @notice The `msg.sender` must approve this contract to spend the forward credits\\n    /// @param crispToken The intermediate token received for collateralizing forward credits\\n    /// @param batchId The batch id of the forward credits to collateralize\\n    /// @param amountIn The amounts of forward credits to collateralize\\n    /// @param amountOutMin The minimum amounts of `crispToken` to receive from collateralization\\n    /// @param swap Encoded swap from `crispToken` to WETH\\n    /// @param dustRecipient Address to receive any remaining `crispToken` dust\\n    function zapCollateralizeETH(\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient\\n    ) external;\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract\\n    /// 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken`\\n    /// 3. Swaps `crispToken` for WETH via encoded swap\\n    /// 4. Unwraps WETH to ETH\\n    /// 5. Transfers the ETH balance of SolidZapCollateralize to `zapRecipient`\\n    /// 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`\\n    /// @notice The `msg.sender` must approve this contract to spend the forward credits\\n    /// @param crispToken The intermediate token received for collateralizing forward credits\\n    /// @param batchId The batch id of the forward credits to collateralize\\n    /// @param amountIn The amounts of forward credits to collateralize\\n    /// @param amountOutMin The minimum amounts of `crispToken` to receive from collateralization\\n    /// @param swap Encoded swap from `crispToken` to WETH\\n    /// @param dustRecipient Address to receive any remaining `crispToken` dust\\n    /// @param zapRecipient Address to receive the resulting ETH amount\\n    function zapCollateralizeETH(\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient,\\n        address zapRecipient\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0aacae06b2deba71539f808edaf6d0acc16bfd34f780ca9066351815a105af4c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/zap/ISolidZapStaker.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\n/// @author Solid World\\ninterface ISolidZapStaker {\\n    error AcquiredSharesLessThanMin(uint acquired, uint min);\\n    error InvalidSwap();\\n\\n    event ZapStake(\\n        address indexed zapRecipient,\\n        address indexed inputToken,\\n        uint indexed inputAmount,\\n        uint shares\\n    );\\n\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n\\n    struct SwapResult {\\n        address _address;\\n        uint balance;\\n    }\\n\\n    struct SwapResults {\\n        SwapResult token0;\\n        SwapResult token1;\\n    }\\n\\n    function router() external view returns (address);\\n\\n    function weth() external view returns (address);\\n\\n    function solidStaking() external view returns (address);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares,\\n        address zapRecipient\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 3. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 4. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially swap `inputToken` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap,\\n        uint minShares\\n    ) external returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 5. Shares of the deployed liquidity are staked in `solidStaking`. `zapRecipient` is the beneficiary of the staked shares\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @param zapRecipient The beneficiary of the staked shares\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares,\\n        address zapRecipient\\n    ) external payable returns (uint shares);\\n\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are deployed as liquidity via IUniProxy & `hypervisor`\\n    /// 5. Shares of the deployed liquidity are staked in `solidStaking`. `msg.sender` is the beneficiary of the staked shares\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @param minShares The minimum amount of liquidity shares required for transaction to succeed\\n    /// @return shares The amount of shares staked in `solidStaking`\\n    function stakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2,\\n        uint minShares\\n    ) external payable returns (uint shares);\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially swaps `inputToken` to desired token via encoded swap1\\n    /// 2. Partially swaps `inputToken` to desired token via encoded swap2\\n    /// 3. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `inputToken` to desired token\\n    /// @param swap2 Encoded swap to partially swap `inputToken` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeDoubleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Wraps `msg.value` to WETH\\n    /// 2. Partially swaps `WETH` to desired token via encoded swap1\\n    /// 3. Partially swaps `WETH` to desired token via encoded swap2\\n    /// 4. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap1 Encoded swap to partially swap `WETH` to desired token\\n    /// @param swap2 Encoded swap to partially swap `WETH` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeETH(\\n        address hypervisor,\\n        bytes calldata swap1,\\n        bytes calldata swap2\\n    )\\n        external\\n        payable\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n\\n    /// @notice Function is meant to be called off-chain with _staticCall_.\\n    /// @notice Zap function that achieves the following:\\n    /// 1. Partially (close to 50%) swaps `inputToken` to desired token via encoded swap\\n    /// 2. Resulting tokens are checked against Gamma Vault to determine if they qualify for a dustless liquidity deployment\\n    ///     * if dustless, the function deploys the liquidity to obtain the amounts of shares getting minted and returns\\n    ///     * if not dustless, the function computes the current gamma token ratio and returns\\n    /// @notice The msg.sender must own `inputAmount` and approve this contract to spend `inputToken`\\n    /// @notice `inputToken` must be one of hypervisor's token0 or token1\\n    /// @param inputToken The token used to provide liquidity\\n    /// @param inputAmount The amount of `inputToken` to use\\n    /// @param hypervisor The hypervisor used to deploy liquidity\\n    /// @param swap Encoded swap to partially (close to 50%) swap `inputToken` to desired token\\n    /// @return isDustless Whether the resulting tokens qualify for a dustless liquidity deployment\\n    /// @return shares The amount of shares minted from the dustless liquidity deployment\\n    /// @return ratio The current gamma token ratio, or empty if dustless\\n    function simulateStakeSingleSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address hypervisor,\\n        bytes calldata swap\\n    )\\n        external\\n        returns (\\n            bool isDustless,\\n            uint shares,\\n            Fraction memory ratio\\n        );\\n}\\n\",\"keccak256\":\"0xac2c8e49c9d706e6d5d862cfc5230d0ca0a576244888585c0cc488fd78275469\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/GPv2SafeERC20_0_8_18.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5957e7cdd5e776533722343b4470d247943950d5a18020d675870292931040d1\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Simply use address for `token` parameter\\nlibrary SafeTransferLib {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x591f3ac809bd1fd8c3e1550e11c63c96430b6d8996c405c530899e5641cff24e\",\"license\":\"AGPL-3.0-only\"},\"contracts/zap/BaseZap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/staking/IWETH.sol\\\";\\nimport \\\"../interfaces/zap/ISolidZapStaker.sol\\\";\\nimport \\\"../interfaces/zap/ISWManager.sol\\\";\\nimport \\\"../libraries/GPv2SafeERC20_0_8_18.sol\\\";\\nimport \\\"../libraries/SafeTransferLib.sol\\\";\\n\\n/// @author Solid World\\nabstract contract BaseZap {\\n    using GPv2SafeERC20 for IERC20;\\n    using SafeTransferLib for address;\\n\\n    error GenericSwapError();\\n    error InvalidInput();\\n    error SweepAmountZero();\\n    error ETHTransferFailed();\\n\\n    function _swapViaRouter(address router, bytes calldata encodedSwap) internal {\\n        (bool success, bytes memory retData) = router.call(encodedSwap);\\n\\n        if (!success) {\\n            _propagateError(retData);\\n        }\\n    }\\n\\n    function _propagateError(bytes memory revertReason) internal pure {\\n        if (revertReason.length == 0) {\\n            revert GenericSwapError();\\n        }\\n\\n        assembly {\\n            revert(add(32, revertReason), mload(revertReason))\\n        }\\n    }\\n\\n    function _wrap(address weth, uint amount) internal {\\n        IWETH(weth).deposit{ value: amount }();\\n    }\\n\\n    function _approveTokenSpendingIfNeeded(address token, address spender) internal {\\n        if (IERC20(token).allowance(address(this), spender) == 0) {\\n            token.safeApprove(spender, type(uint).max);\\n        }\\n    }\\n\\n    function _prepareToSwap(\\n        address inputToken,\\n        uint inputAmount,\\n        address _router\\n    ) internal {\\n        IERC20(inputToken).safeTransferFrom(msg.sender, address(this), inputAmount);\\n        _approveTokenSpendingIfNeeded(inputToken, _router);\\n    }\\n\\n    function _sweepTokens(address token, address recipient) internal returns (uint sweptAmount) {\\n        sweptAmount = _safeSweepTokens(token, recipient, false);\\n    }\\n\\n    function _safeSweepTokens(\\n        address token,\\n        address recipient,\\n        bool revertOnSweepAmountZero\\n    ) internal returns (uint sweptAmount) {\\n        sweptAmount = IERC20(token).balanceOf(address(this));\\n        if (sweptAmount == 0 && revertOnSweepAmountZero) {\\n            revert SweepAmountZero();\\n        }\\n\\n        if (sweptAmount > 0) {\\n            IERC20(token).safeTransfer(recipient, sweptAmount);\\n        }\\n    }\\n\\n    function _sweepETH(address weth, address recipient) internal returns (uint sweptAmount) {\\n        sweptAmount = _safeSweepETH(weth, recipient, false);\\n    }\\n\\n    function _safeSweepETH(\\n        address weth,\\n        address recipient,\\n        bool revertOnSweepAmountZero\\n    ) internal returns (uint sweptAmount) {\\n        sweptAmount = IERC20(weth).balanceOf(address(this));\\n        if (sweptAmount == 0 && revertOnSweepAmountZero) {\\n            revert SweepAmountZero();\\n        }\\n\\n        if (sweptAmount > 0) {\\n            IWETH(weth).withdraw(sweptAmount);\\n            (bool success, ) = payable(recipient).call{ value: sweptAmount }(\\\"\\\");\\n            if (!success) {\\n                revert ETHTransferFailed();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x896dc35db725acc76dc9d7d9258ed472a3a89e4fb5416f9309921b7ee8e9c8ef\",\"license\":\"BUSL-1.1\"},\"contracts/zap/collateralize/BaseSolidZapCollateralize.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"../../interfaces/zap/ISolidZapCollateralize.sol\\\";\\nimport \\\"../../interfaces/staking/IWETH.sol\\\";\\nimport \\\"../BaseZap.sol\\\";\\n\\n/// @author Solid World\\nabstract contract BaseSolidZapCollateralize is\\n    BaseZap,\\n    ISolidZapCollateralize,\\n    IERC1155Receiver,\\n    ReentrancyGuard\\n{\\n    address public immutable router;\\n    address public immutable weth;\\n    address public immutable swManager;\\n    address public immutable forwardContractBatch;\\n\\n    constructor(\\n        address _router,\\n        address _weth,\\n        address _swManager,\\n        address _forwardContractBatch\\n    ) {\\n        router = _router;\\n        weth = _weth;\\n        swManager = _swManager;\\n        forwardContractBatch = _forwardContractBatch;\\n\\n        IERC1155(forwardContractBatch).setApprovalForAll(swManager, true);\\n    }\\n\\n    /// @dev accept transfers from this contract only\\n    function onERC1155Received(\\n        address operator,\\n        address,\\n        uint,\\n        uint,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        if (operator != address(this)) {\\n            return bytes4(0);\\n        }\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /// @dev accept transfers from this contract only\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address,\\n        uint[] memory,\\n        uint[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        if (operator != address(this)) {\\n            return bytes4(0);\\n        }\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        // ERC165 && ERC1155TokenReceiver support\\n        return interfaceId == 0x01ffc9a7 || interfaceId == 0x4e2312e0;\\n    }\\n\\n    receive() external payable {\\n        if (msg.sender != weth) {\\n            revert ETHTransferFailed();\\n        }\\n    }\\n\\n    fallback() external payable {\\n        if (msg.sender != weth) {\\n            revert ETHTransferFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf4d0d790a626a197b95c0840b36531d725352130c2665cc0f35645ad05df86d\",\"license\":\"BUSL-1.1\"},\"contracts/zap/collateralize/SolidZapCollateralize.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport \\\"./BaseSolidZapCollateralize.sol\\\";\\n\\n/// @author Solid World\\ncontract SolidZapCollateralize is BaseSolidZapCollateralize {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    constructor(\\n        address _router,\\n        address _weth,\\n        address _swManager,\\n        address _forwardContractBatch\\n    ) BaseSolidZapCollateralize(_router, _weth, _swManager, _forwardContractBatch) {}\\n\\n    /// @inheritdoc ISolidZapCollateralize\\n    function zapCollateralize(\\n        address outputToken,\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient\\n    ) external nonReentrant {\\n        _collateralizeToOutputToken(crispToken, batchId, amountIn, amountOutMin, swap);\\n        uint outputAmount = _safeSweepTokens(outputToken, msg.sender, true);\\n        uint dust = _sweepTokens(crispToken, dustRecipient);\\n\\n        _emitZapEvent(msg.sender, batchId, outputToken, outputAmount, dust, dustRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapCollateralize\\n    function zapCollateralize(\\n        address outputToken,\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient,\\n        address zapRecipient\\n    ) external nonReentrant {\\n        _collateralizeToOutputToken(crispToken, batchId, amountIn, amountOutMin, swap);\\n        uint outputAmount = _safeSweepTokens(outputToken, zapRecipient, true);\\n        uint dust = _sweepTokens(crispToken, dustRecipient);\\n\\n        _emitZapEvent(zapRecipient, batchId, outputToken, outputAmount, dust, dustRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapCollateralize\\n    function zapCollateralizeETH(\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient\\n    ) external nonReentrant {\\n        _collateralizeToOutputToken(crispToken, batchId, amountIn, amountOutMin, swap);\\n        uint outputAmount = _safeSweepETH(weth, msg.sender, true);\\n        uint dust = _sweepTokens(crispToken, dustRecipient);\\n\\n        _emitZapEvent(msg.sender, batchId, weth, outputAmount, dust, dustRecipient);\\n    }\\n\\n    /// @inheritdoc ISolidZapCollateralize\\n    function zapCollateralizeETH(\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap,\\n        address dustRecipient,\\n        address zapRecipient\\n    ) external nonReentrant {\\n        _collateralizeToOutputToken(crispToken, batchId, amountIn, amountOutMin, swap);\\n        uint outputAmount = _safeSweepETH(weth, zapRecipient, true);\\n        uint dust = _sweepTokens(crispToken, dustRecipient);\\n\\n        _emitZapEvent(zapRecipient, batchId, weth, outputAmount, dust, dustRecipient);\\n    }\\n\\n    function _collateralizeToOutputToken(\\n        address crispToken,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin,\\n        bytes calldata swap\\n    ) private {\\n        _transferOverTheForwardCredits(batchId, amountIn);\\n        _collateralize(batchId, amountIn, amountOutMin);\\n        _approveTokenSpendingIfNeeded(crispToken, router);\\n        _swapViaRouter(router, swap);\\n    }\\n\\n    function _transferOverTheForwardCredits(uint batchId, uint amountIn) private {\\n        IERC1155(forwardContractBatch).safeTransferFrom(msg.sender, address(this), batchId, amountIn, \\\"\\\");\\n    }\\n\\n    function _collateralize(\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) private {\\n        ISWManager(swManager).collateralizeBatch(batchId, amountIn, amountOutMin);\\n    }\\n\\n    function _emitZapEvent(\\n        address receiver,\\n        uint batchId,\\n        address outputToken,\\n        uint outputAmount,\\n        uint dust,\\n        address dustRecipient\\n    ) private {\\n        emit ZapCollateralize(\\n            receiver,\\n            outputToken,\\n            outputAmount,\\n            dust,\\n            dustRecipient,\\n            ISWManager(swManager).getBatchCategory(batchId)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xb8105a0a454f00cdb4e5a472f0f811d13a19649781a89d9e6dbfd63063c8bfd5\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001926380380620019268339810160408190526200003591620000ed565b600160008190556001600160a01b0385811660805284811660a05283811660c081905290831660e081905260405163a22cb46560e01b815260048101929092526024820192909252859185918591859163a22cb46590604401600060405180830381600087803b158015620000a957600080fd5b505af1158015620000be573d6000803e3d6000fd5b5050505050505050505050506200014a565b80516001600160a01b0381168114620000e857600080fd5b919050565b600080600080608085870312156200010457600080fd5b6200010f85620000d0565b93506200011f60208601620000d0565b92506200012f60408601620000d0565b91506200013f60608601620000d0565b905092959194509250565b60805160a05160c05160e051611756620001d06000396000818161039e0152610c39015260008181610285015281816109170152610ce301526000818160dd0152818161014e0152818161020c015281816104cf0152818161050d0152818161066301526106a101526000818161036a0152818161075b015261078401526117566000f3fe6080604052600436106100c05760003560e01c806391ef00ea11610074578063f726024f1161004e578063f726024f14610338578063f887ea4014610358578063fb5ba8eb1461038c57610136565b806391ef00ea146102a7578063bc197c81146102c7578063f23a6e611461031857610136565b80633fc8cef3116100a55780633fc8cef3146101fa5780634a5020df1461025357806373d0eb6b1461027357610136565b8063014007d2146101a557806301ffc9a7146101c557610136565b36610136573373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610134576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610134576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156101b157600080fd5b506101346101c03660046111e0565b6103c0565b3480156101d157600080fd5b506101e56101e0366004611283565b610419565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b34801561025f57600080fd5b5061013461026e3660046112c5565b6104b2565b34801561027f57600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b357600080fd5b506101346102c2366004611347565b610549565b3480156102d357600080fd5b506102e76102e2366004611565565b6105a1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101f1565b34801561032457600080fd5b506102e761033336600461160f565b6105f4565b34801561034457600080fd5b50610134610353366004611674565b610646565b34801561036457600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039857600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b6103c86106c8565b6103d6888888888888610740565b60006103e48a8360016107b2565b905060006103f28a856108b5565b9050610402838a8d8585896108c3565b505061040e6001600055565b505050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104ac57507f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6104ba6106c8565b6104c8878787878787610740565b60006104f67f00000000000000000000000000000000000000000000000000000000000000003360016109ec565b9050600061050489846108b5565b905061053433897f00000000000000000000000000000000000000000000000000000000000000008585886108c3565b50506105406001600055565b50505050505050565b6105516106c8565b61055f878787878787610740565b600061056d893360016107b2565b9050600061057b89846108b5565b905061058b33898c8585886108c3565b50506105976001600055565b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff861630146105c8575060006105eb565b507fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8616301461061b575060006105eb565b507ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b61064e6106c8565b61065c888888888888610740565b600061068a7f00000000000000000000000000000000000000000000000000000000000000008360016109ec565b905060006106988a856108b5565b905061058b838a7f00000000000000000000000000000000000000000000000000000000000000008585896108c3565b600260005403610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b61074a8585610be9565b610755858585610ca6565b61077f867f0000000000000000000000000000000000000000000000000000000000000000610d50565b6107aa7f00000000000000000000000000000000000000000000000000000000000000008383610e32565b505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084391906116f7565b9050801580156108505750815b15610887576040517ff2035b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156108ae576108ae73ffffffffffffffffffffffffffffffffffffffff85168483610eb8565b9392505050565b60006108ae838360006107b2565b828473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fbe71403e09bb5b80d1b3f9939bbb759c5d3fb5407b428889fbab5726ae90d64685857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a88fd94a8c6040518263ffffffff1660e01b815260040161097091815260200190565b602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906116f7565b6040805193845273ffffffffffffffffffffffffffffffffffffffff90921660208401529082015260600160405180910390a4505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d91906116f7565b905080158015610a8a5750815b15610ac1576040517ff2035b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156108ae576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b158015610b2f57600080fd5b505af1158015610b43573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610ba1576040519150601f19603f3d011682016040523d82523d6000602084013e610ba6565b606091505b5050905080610be1576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509392505050565b6040517ff242432a000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526064810182905260a06084820152600060a48201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f242432a9060c401600060405180830381600087803b158015610c9257600080fd5b505af11580156107aa573d6000803e3d6000fd5b6040517fb505ab860000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b505ab8690606401600060405180830381600087803b158015610d3c57600080fd5b505af1158015610540573d6000803e3d6000fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de691906116f7565b600003610e2e57610e2e73ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f91565b5050565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610e5c929190611710565b6000604051808303816000865af19150503d8060008114610e99576040519150601f19603f3d011682016040523d82523d6000602084013e610e9e565b606091505b509150915081610eb157610eb181611060565b5050505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff84166004830152602482018390529060008060448382895af1610f1b573d6000803e3d6000fd5b50610f25846110a3565b610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e7366657200000000000000000000006044820152606401610730565b50505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610730565b805160000361109b576040517f67e1b70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b60006110e2565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d8015611121576020811461115b5761111c7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6110aa565b611168565b823b611152576111527f475076323a206e6f74206120636f6e747261637400000000000000000000000060146110aa565b60019150611168565b3d6000803e600051151591505b50919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461119257600080fd5b919050565b60008083601f8401126111a957600080fd5b50813567ffffffffffffffff8111156111c157600080fd5b6020830191508360208285010111156111d957600080fd5b9250929050565b60008060008060008060008060006101008a8c0312156111ff57600080fd5b6112088a61116e565b985061121660208b0161116e565b975060408a0135965060608a0135955060808a0135945060a08a013567ffffffffffffffff81111561124757600080fd5b6112538c828d01611197565b9095509350611266905060c08b0161116e565b915061127460e08b0161116e565b90509295985092959850929598565b60006020828403121561129557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108ae57600080fd5b600080600080600080600060c0888a0312156112e057600080fd5b6112e98861116e565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff81111561131a57600080fd5b6113268a828b01611197565b9094509250611339905060a0890161116e565b905092959891949750929550565b60008060008060008060008060e0898b03121561136357600080fd5b61136c8961116e565b975061137a60208a0161116e565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff8111156113ab57600080fd5b6113b78b828c01611197565b90945092506113ca905060c08a0161116e565b90509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561144f5761144f6113d9565b604052919050565b600082601f83011261146857600080fd5b8135602067ffffffffffffffff821115611484576114846113d9565b8160051b611493828201611408565b92835284810182019282810190878511156114ad57600080fd5b83870192505b848310156114cc578235825291830191908301906114b3565b979650505050505050565b600082601f8301126114e857600080fd5b813567ffffffffffffffff811115611502576115026113d9565b61153360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611408565b81815284602083860101111561154857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561157d57600080fd5b6115868661116e565b94506115946020870161116e565b9350604086013567ffffffffffffffff808211156115b157600080fd5b6115bd89838a01611457565b945060608801359150808211156115d357600080fd5b6115df89838a01611457565b935060808801359150808211156115f557600080fd5b50611602888289016114d7565b9150509295509295909350565b600080600080600060a0868803121561162757600080fd5b6116308661116e565b945061163e6020870161116e565b93506040860135925060608601359150608086013567ffffffffffffffff81111561166857600080fd5b611602888289016114d7565b60008060008060008060008060e0898b03121561169057600080fd5b6116998961116e565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff8111156116ca57600080fd5b6116d68b828c01611197565b90955093506116e9905060a08a0161116e565b91506113ca60c08a0161116e565b60006020828403121561170957600080fd5b5051919050565b818382376000910190815291905056fea264697066735822122092e64f2daf7c7cd9b7beecaab3e82e6f07d8ca5a0cfba29a46c9dac77e1ec51964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c806391ef00ea11610074578063f726024f1161004e578063f726024f14610338578063f887ea4014610358578063fb5ba8eb1461038c57610136565b806391ef00ea146102a7578063bc197c81146102c7578063f23a6e611461031857610136565b80633fc8cef3116100a55780633fc8cef3146101fa5780634a5020df1461025357806373d0eb6b1461027357610136565b8063014007d2146101a557806301ffc9a7146101c557610136565b36610136573373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610134576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610134576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3480156101b157600080fd5b506101346101c03660046111e0565b6103c0565b3480156101d157600080fd5b506101e56101e0366004611283565b610419565b60405190151581526020015b60405180910390f35b34801561020657600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f1565b34801561025f57600080fd5b5061013461026e3660046112c5565b6104b2565b34801561027f57600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102b357600080fd5b506101346102c2366004611347565b610549565b3480156102d357600080fd5b506102e76102e2366004611565565b6105a1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101f1565b34801561032457600080fd5b506102e761033336600461160f565b6105f4565b34801561034457600080fd5b50610134610353366004611674565b610646565b34801561036457600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039857600080fd5b5061022e7f000000000000000000000000000000000000000000000000000000000000000081565b6103c86106c8565b6103d6888888888888610740565b60006103e48a8360016107b2565b905060006103f28a856108b5565b9050610402838a8d8585896108c3565b505061040e6001600055565b505050505050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614806104ac57507f4e2312e0000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6104ba6106c8565b6104c8878787878787610740565b60006104f67f00000000000000000000000000000000000000000000000000000000000000003360016109ec565b9050600061050489846108b5565b905061053433897f00000000000000000000000000000000000000000000000000000000000000008585886108c3565b50506105406001600055565b50505050505050565b6105516106c8565b61055f878787878787610740565b600061056d893360016107b2565b9050600061057b89846108b5565b905061058b33898c8585886108c3565b50506105976001600055565b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff861630146105c8575060006105eb565b507fbc197c81000000000000000000000000000000000000000000000000000000005b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8616301461061b575060006105eb565b507ff23a6e610000000000000000000000000000000000000000000000000000000095945050505050565b61064e6106c8565b61065c888888888888610740565b600061068a7f00000000000000000000000000000000000000000000000000000000000000008360016109ec565b905060006106988a856108b5565b905061058b838a7f00000000000000000000000000000000000000000000000000000000000000008585896108c3565b600260005403610739576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b61074a8585610be9565b610755858585610ca6565b61077f867f0000000000000000000000000000000000000000000000000000000000000000610d50565b6107aa7f00000000000000000000000000000000000000000000000000000000000000008383610e32565b505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa15801561081f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084391906116f7565b9050801580156108505750815b15610887576040517ff2035b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156108ae576108ae73ffffffffffffffffffffffffffffffffffffffff85168483610eb8565b9392505050565b60006108ae838360006107b2565b828473ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fbe71403e09bb5b80d1b3f9939bbb759c5d3fb5407b428889fbab5726ae90d64685857f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a88fd94a8c6040518263ffffffff1660e01b815260040161097091815260200190565b602060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906116f7565b6040805193845273ffffffffffffffffffffffffffffffffffffffff90921660208401529082015260600160405180910390a4505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d91906116f7565b905080158015610a8a5750815b15610ac1576040517ff2035b6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80156108ae576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b158015610b2f57600080fd5b505af1158015610b43573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114610ba1576040519150601f19603f3d011682016040523d82523d6000602084013e610ba6565b606091505b5050905080610be1576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509392505050565b6040517ff242432a000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018390526064810182905260a06084820152600060a48201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f242432a9060c401600060405180830381600087803b158015610c9257600080fd5b505af11580156107aa573d6000803e3d6000fd5b6040517fb505ab860000000000000000000000000000000000000000000000000000000081526004810184905260248101839052604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b505ab8690606401600060405180830381600087803b158015610d3c57600080fd5b505af1158015610540573d6000803e3d6000fd5b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff828116602483015283169063dd62ed3e90604401602060405180830381865afa158015610dc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de691906116f7565b600003610e2e57610e2e73ffffffffffffffffffffffffffffffffffffffff8316827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610f91565b5050565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051610e5c929190611710565b6000604051808303816000865af19150503d8060008114610e99576040519150601f19603f3d011682016040523d82523d6000602084013e610e9e565b606091505b509150915081610eb157610eb181611060565b5050505050565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000080825273ffffffffffffffffffffffffffffffffffffffff84166004830152602482018390529060008060448382895af1610f1b573d6000803e3d6000fd5b50610f25846110a3565b610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e7366657200000000000000000000006044820152606401610730565b50505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610f8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f415050524f56455f4641494c45440000000000000000000000000000000000006044820152606401610730565b805160000361109b576040517f67e1b70700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b60006110e2565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d8015611121576020811461115b5761111c7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6110aa565b611168565b823b611152576111527f475076323a206e6f74206120636f6e747261637400000000000000000000000060146110aa565b60019150611168565b3d6000803e600051151591505b50919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461119257600080fd5b919050565b60008083601f8401126111a957600080fd5b50813567ffffffffffffffff8111156111c157600080fd5b6020830191508360208285010111156111d957600080fd5b9250929050565b60008060008060008060008060006101008a8c0312156111ff57600080fd5b6112088a61116e565b985061121660208b0161116e565b975060408a0135965060608a0135955060808a0135945060a08a013567ffffffffffffffff81111561124757600080fd5b6112538c828d01611197565b9095509350611266905060c08b0161116e565b915061127460e08b0161116e565b90509295985092959850929598565b60006020828403121561129557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146108ae57600080fd5b600080600080600080600060c0888a0312156112e057600080fd5b6112e98861116e565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff81111561131a57600080fd5b6113268a828b01611197565b9094509250611339905060a0890161116e565b905092959891949750929550565b60008060008060008060008060e0898b03121561136357600080fd5b61136c8961116e565b975061137a60208a0161116e565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff8111156113ab57600080fd5b6113b78b828c01611197565b90945092506113ca905060c08a0161116e565b90509295985092959890939650565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561144f5761144f6113d9565b604052919050565b600082601f83011261146857600080fd5b8135602067ffffffffffffffff821115611484576114846113d9565b8160051b611493828201611408565b92835284810182019282810190878511156114ad57600080fd5b83870192505b848310156114cc578235825291830191908301906114b3565b979650505050505050565b600082601f8301126114e857600080fd5b813567ffffffffffffffff811115611502576115026113d9565b61153360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611408565b81815284602083860101111561154857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561157d57600080fd5b6115868661116e565b94506115946020870161116e565b9350604086013567ffffffffffffffff808211156115b157600080fd5b6115bd89838a01611457565b945060608801359150808211156115d357600080fd5b6115df89838a01611457565b935060808801359150808211156115f557600080fd5b50611602888289016114d7565b9150509295509295909350565b600080600080600060a0868803121561162757600080fd5b6116308661116e565b945061163e6020870161116e565b93506040860135925060608601359150608086013567ffffffffffffffff81111561166857600080fd5b611602888289016114d7565b60008060008060008060008060e0898b03121561169057600080fd5b6116998961116e565b9750602089013596506040890135955060608901359450608089013567ffffffffffffffff8111156116ca57600080fd5b6116d68b828c01611197565b90955093506116e9905060a08a0161116e565b91506113ca60c08a0161116e565b60006020828403121561170957600080fd5b5051919050565b818382376000910190815291905056fea264697066735822122092e64f2daf7c7cd9b7beecaab3e82e6f07d8ca5a0cfba29a46c9dac77e1ec51964736f6c63430008120033",
  "devdoc": {
    "author": "Solid World",
    "kind": "dev",
    "methods": {
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "details": "accept transfers from this contract only"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "details": "accept transfers from this contract only"
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "zapCollateralize(address,address,uint256,uint256,uint256,bytes,address)": {
        "params": {
          "amountIn": "The amounts of forward credits to collateralize",
          "amountOutMin": "The minimum amounts of `crispToken` to receive from collateralization",
          "batchId": "The batch id of the forward credits to collateralize",
          "crispToken": "The intermediate token received for collateralizing forward credits",
          "dustRecipient": "Address to receive any remaining `crispToken` dust",
          "outputToken": "The actual token received for collateralizing forward credits",
          "swap": "Encoded swap from `crispToken` to `outputToken`"
        }
      },
      "zapCollateralize(address,address,uint256,uint256,uint256,bytes,address,address)": {
        "params": {
          "amountIn": "The amounts of forward credits to collateralize",
          "amountOutMin": "The minimum amounts of `crispToken` to receive from collateralization",
          "batchId": "The batch id of the forward credits to collateralize",
          "crispToken": "The intermediate token received for collateralizing forward credits",
          "dustRecipient": "Address to receive any remaining `crispToken` dust",
          "outputToken": "The actual token received for collateralizing forward credits",
          "swap": "Encoded swap from `crispToken` to `outputToken`",
          "zapRecipient": "Address to receive the resulting `outputToken` amount"
        }
      },
      "zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address)": {
        "params": {
          "amountIn": "The amounts of forward credits to collateralize",
          "amountOutMin": "The minimum amounts of `crispToken` to receive from collateralization",
          "batchId": "The batch id of the forward credits to collateralize",
          "crispToken": "The intermediate token received for collateralizing forward credits",
          "dustRecipient": "Address to receive any remaining `crispToken` dust",
          "swap": "Encoded swap from `crispToken` to WETH"
        }
      },
      "zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address,address)": {
        "params": {
          "amountIn": "The amounts of forward credits to collateralize",
          "amountOutMin": "The minimum amounts of `crispToken` to receive from collateralization",
          "batchId": "The batch id of the forward credits to collateralize",
          "crispToken": "The intermediate token received for collateralizing forward credits",
          "dustRecipient": "Address to receive any remaining `crispToken` dust",
          "swap": "Encoded swap from `crispToken` to WETH",
          "zapRecipient": "Address to receive the resulting ETH amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "zapCollateralize(address,address,uint256,uint256,uint256,bytes,address)": {
        "notice": "Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for `outputToken` via encoded swap 4. Transfers the `outputToken` balance of SolidZapCollateralize to `msg.sender` 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits"
      },
      "zapCollateralize(address,address,uint256,uint256,uint256,bytes,address,address)": {
        "notice": "Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for `outputToken` via encoded swap 4. Transfers the `outputToken` balance of SolidZapCollateralize to `zapRecipient` 5. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits"
      },
      "zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address)": {
        "notice": "Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for WETH via encoded swap 4. Unwraps WETH to ETH 5. Transfers the ETH balance of SolidZapCollateralize to `msg.sender` 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits"
      },
      "zapCollateralizeETH(address,uint256,uint256,uint256,bytes,address,address)": {
        "notice": "Zap function that achieves the following: 1. Transfers `amountIn` forward credits with batch id `batchId` to this contract 2. Collateralizes the transferred forward credits via SolidWorldManager, receives `crispToken` 3. Swaps `crispToken` for WETH via encoded swap 4. Unwraps WETH to ETH 5. Transfers the ETH balance of SolidZapCollateralize to `zapRecipient` 6. Transfers remaining `crispToken` balance of SolidZapCollateralize to the `dustRecipient`The `msg.sender` must approve this contract to spend the forward credits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2179,
        "contract": "contracts/zap/collateralize/SolidZapCollateralize.sol:SolidZapCollateralize",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}