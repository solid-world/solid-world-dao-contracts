{
  "address": "0x0A4944bc8700265CcD33d11A25aF7A9BE6f58F79",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "DistributionNonExistent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newIndex",
          "type": "uint256"
        }
      ],
      "name": "IndexOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "InvalidAssetDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "InvalidRewardOracle",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotEmissionManager",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NotSolidStaking",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "UnauthorizedClaimer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "UpdateDistributionNotApplicable",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsAccrued",
          "type": "uint256"
        }
      ],
      "name": "Accrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldEmission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEmission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldDistributionEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDistributionEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetIndex",
          "type": "uint256"
        }
      ],
      "name": "AssetConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "ClaimerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldEmissionManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEmissionManager",
          "type": "address"
        }
      ],
      "name": "EmissionManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "RewardOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "RewardsVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "solidStaking",
          "type": "address"
        }
      ],
      "name": "SolidStakingUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "canUpdateCarbonRewardDistribution",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimAllRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimAllRewardsOnBehalf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "claimAllRewardsToSelf",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "claimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "emissionPerSecond",
              "type": "uint88"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "distributionEnd",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "contract IEACAggregatorProxy",
              "name": "rewardOracle",
              "type": "address"
            }
          ],
          "internalType": "struct RewardsDataTypes.DistributionConfig[]",
          "name": "config",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getAccruedRewardAmountForUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAllUnclaimedRewardAmountsForUserAndAssets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "rewardsList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "unclaimedAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getClaimer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getDistributionEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEmissionManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getRewardDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getRewardOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getRewardsByAsset",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getUnclaimedRewardAmountForUserAndAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unclaimedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getUserIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "oldUserStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oldTotalStaked",
          "type": "uint256"
        }
      ],
      "name": "handleUserStakeChanged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newDistributionEnd",
          "type": "uint32"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "name": "setEmissionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "uint88[]",
          "name": "newEmissionsPerSecond",
          "type": "uint88[]"
        }
      ],
      "name": "setEmissionPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract IEACAggregatorProxy",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "setRewardOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "setRewardsVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "solidStaking",
          "type": "address"
        }
      ],
      "name": "setSolidStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_solidStakingViewActions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "solidStakingViewActions",
      "outputs": [
        {
          "internalType": "contract ISolidStakingViewActions",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "updateCarbonRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x77c331e808b89effc65e0c627f752f851d8efc5aaf1d5a872a13838f18a87e7e",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0x0A4944bc8700265CcD33d11A25aF7A9BE6f58F79",
    "transactionIndex": 52,
    "gasUsed": "3720815",
    "logsBloom": "0x
    "blockHash": "0xcd41be4aea5c00e2856be5f7fb0fdcb260087f2a41f5e403fe8f89c11ebb310e",
    "transactionHash": "0x77c331e808b89effc65e0c627f752f851d8efc5aaf1d5a872a13838f18a87e7e",
    "logs": [
      {
        "transactionIndex": 52,
        "blockNumber": 41402960,
        "transactionHash": "0x77c331e808b89effc65e0c627f752f851d8efc5aaf1d5a872a13838f18a87e7e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c",
          "0x000000000000000000000000794e44d1334a56fea7f4df12633b88820d0c5888"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001b43a07cb8c56000000000000000000000000000000000000000000000000002108f2d35d944134000000000000000000000000000000000000000000000213bb06e61a96a809010000000000000000000000000000000000000000000000001f54b8cb9207eb34000000000000000000000000000000000000000000000213bcbb202262345f01",
        "logIndex": 227,
        "blockHash": "0xcd41be4aea5c00e2856be5f7fb0fdcb260087f2a41f5e403fe8f89c11ebb310e"
      }
    ],
    "blockNumber": 41402960,
    "cumulativeGasUsed": "12956189",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "b1a051599c5b6ab9b7b860a2784f151b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"DistributionNonExistent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex\",\"type\":\"uint256\"}],\"name\":\"IndexOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"InvalidAssetDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"InvalidRewardOracle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotEmissionManager\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NotSolidStaking\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UnauthorizedClaimer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"UpdateDistributionNotApplicable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsAccrued\",\"type\":\"uint256\"}],\"name\":\"Accrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEmission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDistributionEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributionEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetIndex\",\"type\":\"uint256\"}],\"name\":\"AssetConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"ClaimerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldEmissionManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmissionManager\",\"type\":\"address\"}],\"name\":\"EmissionManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"RewardOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"RewardsVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"solidStaking\",\"type\":\"address\"}],\"name\":\"SolidStakingUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"canUpdateCarbonRewardDistribution\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimAllRewardsOnBehalf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"claimAllRewardsToSelf\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"claimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint88\",\"name\":\"emissionPerSecond\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"distributionEnd\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"internalType\":\"struct RewardsDataTypes.DistributionConfig[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getAccruedRewardAmountForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllUnclaimedRewardAmountsForUserAndAssets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardsList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unclaimedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getClaimer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEmissionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewardDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewardOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getRewardsByAsset\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getUnclaimedRewardAmountForUserAndAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getUserIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldUserStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldTotalStaked\",\"type\":\"uint256\"}],\"name\":\"handleUserStakeChanged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDistributionEnd\",\"type\":\"uint32\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"name\":\"setEmissionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint88[]\",\"name\":\"newEmissionsPerSecond\",\"type\":\"uint88[]\"}],\"name\":\"setEmissionPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"setRewardOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"setRewardsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"solidStaking\",\"type\":\"address\"}],\"name\":\"setSolidStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_solidStakingViewActions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"solidStakingViewActions\",\"outputs\":[{\"internalType\":\"contract ISolidStakingViewActions\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"name\":\"updateCarbonRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"UpdateDistributionNotApplicable(address,address)\":[{\"params\":{\"asset\":\"The address of the incentivized asset\",\"reward\":\"The address of the reward token\"}}]},\"kind\":\"dev\",\"methods\":{\"canUpdateCarbonRewardDistribution(address,address)\":{\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"true, if distribution can be updated for the asset - reward pair\"}},\"claimAllRewards(address[],address)\":{\"details\":\"Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"to\":\"The address that will be receiving the rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"claimAllRewardsOnBehalf(address[],address,address)\":{\"details\":\"Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\",\"to\":\"The address that will be receiving the rewards\",\"user\":\"The address to check and claim rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"claimAllRewardsToSelf(address[])\":{\"details\":\"Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\",\"params\":{\"assets\":\"The list of assets to check eligible distributions before claiming rewards\"},\"returns\":{\"claimedAmounts\":\"List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\",\"rewardsList\":\"List of addresses of the reward tokens\"}},\"configureAssets((uint88,uint256,uint32,address,address,address)[])\":{\"details\":\"Configure assets to incentivize with an emission of rewards per second until the end of distribution.\",\"params\":{\"config\":\"The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalStaked: The total amount staked of the asset   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\"}},\"getAccruedRewardAmountForUser(address,address)\":{\"details\":\"Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\",\"params\":{\"reward\":\"The address of the reward token\",\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"Unclaimed rewards, not including new distributions\"}},\"getAllRewards()\":{\"details\":\"Returns the list of available reward addresses\",\"returns\":{\"_0\":\"List of rewards supported in this contract\"}},\"getAllUnclaimedRewardAmountsForUserAndAssets(address[],address)\":{\"details\":\"Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\",\"params\":{\"assets\":\"List of incentivized assets to check eligible distributions\",\"user\":\"The address of the user\"},\"returns\":{\"rewardsList\":\"The list of reward addresses\",\"unclaimedAmounts\":\"The list of unclaimed amount of rewards\"}},\"getAssetDecimals(address)\":{\"details\":\"Returns the decimals of an asset to calculate the distribution delta\",\"params\":{\"asset\":\"The address to retrieve decimals\"},\"returns\":{\"_0\":\"The decimals of an underlying asset\"}},\"getClaimer(address)\":{\"details\":\"Returns the whitelisted claimer for a certain address (0x0 if not set)\",\"params\":{\"user\":\"The address of the user\"},\"returns\":{\"_0\":\"The claimer address\"}},\"getDistributionEnd(address,address)\":{\"details\":\"Gets the end date for the distribution\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"The timestamp with the end of the distribution, in unix time format\"}},\"getEmissionManager()\":{\"details\":\"Returns the address of the emission manager\",\"returns\":{\"_0\":\"The address of the EmissionManager\"}},\"getRewardDistribution(address,address)\":{\"details\":\"Returns the configuration of the distribution reward for a certain asset\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\"},\"returns\":{\"_0\":\"The index of the asset distribution\",\"_1\":\"The emission per second of the reward distribution\",\"_2\":\"The timestamp of the last update of the index\",\"_3\":\"The timestamp of the distribution end\"}},\"getRewardOracle(address)\":{\"details\":\"Get the price aggregator oracle address\",\"params\":{\"reward\":\"The address of the reward\"},\"returns\":{\"_0\":\"The price oracle of the reward\"}},\"getRewardsByAsset(address)\":{\"details\":\"Returns the list of available reward token addresses of an incentivized asset\",\"params\":{\"asset\":\"The incentivized asset\"},\"returns\":{\"_0\":\"List of rewards addresses of the input asset\"}},\"getRewardsVault()\":{\"returns\":{\"_0\":\"Account that secures ERC20 rewards.\"}},\"getUnclaimedRewardAmountForUserAndAssets(address[],address,address)\":{\"details\":\"Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\",\"params\":{\"assets\":\"List of incentivized assets to check eligible distributions\",\"reward\":\"The address of the reward token\",\"user\":\"The address of the user\"},\"returns\":{\"unclaimedAmount\":\"The rewards amount\"}},\"getUserIndex(address,address,address)\":{\"details\":\"Returns the index of a user on a reward distribution\",\"params\":{\"asset\":\"The incentivized asset\",\"reward\":\"The reward token of the incentivized asset\",\"user\":\"Address of the user\"},\"returns\":{\"_0\":\"The current user asset index, not including new distributions\"}},\"handleUserStakeChanged(address,address,uint256,uint256)\":{\"details\":\"Called by the corresponding asset on transfer hook in order to update the rewards distribution.\",\"params\":{\"asset\":\"The incentivized asset address\",\"oldTotalStaked\":\"The total amount staked of the asset, prior to stake change\",\"oldUserStake\":\"The amount of assets staked by the user, prior to stake change\",\"user\":\"The address of the user whose asset balance has changed\"}},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another address\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(address,address,uint32)\":{\"details\":\"Sets the end date for the distribution\",\"params\":{\"asset\":\"The asset to incentivize\",\"newDistributionEnd\":\"The end date of the incentivization, in unix time format\",\"reward\":\"The reward token that incentives the asset\"}},\"setEmissionManager(address)\":{\"details\":\"Updates the address of the emission manager\",\"params\":{\"emissionManager\":\"The address of the new EmissionManager\"}},\"setEmissionPerSecond(address,address[],uint88[])\":{\"details\":\"Sets the emission per second of a set of reward distributions\",\"params\":{\"asset\":\"The asset is being incentivized\",\"newEmissionsPerSecond\":\"List of new reward emissions per second\",\"rewards\":\"List of reward addresses are being distributed\"}},\"setRewardOracle(address,address)\":{\"details\":\"Sets an Aave Oracle contract to enforce rewards with a source of value.\",\"params\":{\"reward\":\"The address of the reward to set the price aggregator\",\"rewardOracle\":\"The address of price aggregator that follows IEACAggregatorProxy interface\"}},\"setRewardsVault(address)\":{\"params\":{\"rewardsVault\":\"The address of the account that secures ERC20 rewards.\"}},\"setSolidStaking(address)\":{\"params\":{\"solidStaking\":\"Used to fetch the total amount staked and the stake of an user for a given asset\"}},\"updateCarbonRewardDistribution(address[],address[],uint256[])\":{\"details\":\"Updates weekly reward distributions\",\"params\":{\"assets\":\"List of incentivized assets getting updated\",\"rewardAmounts\":\"List of carbon reward amounts getting distributed\",\"rewards\":\"List of reward tokens getting updated\"}}},\"stateVariables\":{\"REWARDS_VAULT\":{\"details\":\"Account that secures ERC20 rewards.It must approve `RewardsController` to spend the rewards it holds.\"},\"_authorizedClaimers\":{\"details\":\"user => claimer\"},\"_rewardOracle\":{\"details\":\"reward => rewardOracle\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRewardOracle(address,address)\":{\"notice\":\"At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/RewardsController.sol\":\"RewardsController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/PostConstruct.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @notice Simple contract exposing a modifier used on setup functions\\n/// to prevent them from being called more than once\\n/// @author Solid World DAO\\nabstract contract PostConstruct {\\n    error AlreadyInitialized();\\n\\n    bool private _initialized;\\n\\n    modifier postConstruct() {\\n        if (_initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xbe1b6db97ce26a7e5c4332133fc911d26edd608943a40c886c923efb8993fdb2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/rewards/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.6 <0.9.0;\\n\\ninterface IEACAggregatorProxy {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int);\\n}\\n\",\"keccak256\":\"0x190ff54e0c11988b791a534cb3faeca1585dd74a9ded7d9fc2b6bf0ed0e8f36e\",\"license\":\"MIT\"},\"contracts/interfaces/rewards/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"../../libraries/RewardsDataTypes.sol\\\";\\n\\n/// @title IRewardsController\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Controller.\\ninterface IRewardsController is IRewardsDistributor {\\n    error UnauthorizedClaimer(address claimer, address user);\\n    error NotSolidStaking(address sender);\\n    error InvalidRewardOracle(address reward, address rewardOracle);\\n\\n    /// @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /// @dev Emitted when rewards are claimed\\n    /// @param user The address of the user rewards has been claimed on behalf of\\n    /// @param reward The address of the token reward is claimed\\n    /// @param to The address of the receiver of the rewards\\n    /// @param claimer The address of the claimer\\n    /// @param amount The amount of rewards claimed\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    /// @dev Emitted when the reward oracle is updated\\n    /// @param reward The address of the token reward\\n    /// @param rewardOracle The address of oracle\\n    event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    event RewardsVaultUpdated(address indexed rewardsVault);\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    event SolidStakingUpdated(address indexed solidStaking);\\n\\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    function setClaimer(address user, address claimer) external;\\n\\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n    /// This check is enforced for integrators to be able to show incentives at\\n    /// the current Aave UI without the need to setup an external price registry\\n    /// @param reward The address of the reward to set the price aggregator\\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    function setRewardsVault(address rewardsVault) external;\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    function setSolidStaking(address solidStaking) external;\\n\\n    /// @dev Get the price aggregator oracle address\\n    /// @param reward The address of the reward\\n    /// @return The price oracle of the reward\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /// @return Account that secures ERC20 rewards.\\n    function getRewardsVault() external view returns (address);\\n\\n    /// @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n    /// @param user The address of the user\\n    /// @return The claimer address\\n    function getClaimer(address user) external view returns (address);\\n\\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n    /// @param config The assets configuration input, the list of structs contains the following fields:\\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n    ///   uint256 totalStaked: The total amount staked of the asset\\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n    ///   address asset: The asset address to incentivize\\n    ///   address reward: The reward token address\\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\\n\\n    /// @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n    /// @param asset The incentivized asset address\\n    /// @param user The address of the user whose asset balance has changed\\n    /// @param oldUserStake The amount of assets staked by the user, prior to stake change\\n    /// @param oldTotalStaked The total amount staked of the asset, prior to stake change\\n    function handleUserStakeChanged(\\n        address asset,\\n        address user,\\n        uint oldUserStake,\\n        uint oldTotalStaked\\n    ) external;\\n\\n    /// @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n    /// be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param user The address to check and claim rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsToSelf(address[] calldata assets)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0xf195a30c7fcf1187a87edbe7dbd02b3dfff46fa3bc1441234a3bb414b7373442\",\"license\":\"MIT\"},\"contracts/interfaces/rewards/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @title IRewardsDistributor\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Distributor.\\ninterface IRewardsDistributor {\\n    error NotEmissionManager(address sender);\\n    error InvalidInput();\\n    error InvalidAssetDecimals(address asset);\\n    error IndexOverflow(uint newIndex);\\n    error DistributionNonExistent(address asset, address reward);\\n\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    error UpdateDistributionNotApplicable(address asset, address reward);\\n\\n    /// @dev Emitted when the configuration of the rewards of an asset is updated.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param oldEmission The old emissions per second value of the reward distribution\\n    /// @param newEmission The new emissions per second value of the reward distribution\\n    /// @param oldDistributionEnd The old end timestamp of the reward distribution\\n    /// @param newDistributionEnd The new end timestamp of the reward distribution\\n    /// @param assetIndex The index of the asset distribution\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint oldEmission,\\n        uint newEmission,\\n        uint oldDistributionEnd,\\n        uint newDistributionEnd,\\n        uint assetIndex\\n    );\\n\\n    /// @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param user The address of the user that rewards are accrued on behalf of\\n    /// @param assetIndex The index of the asset distribution\\n    /// @param userIndex The index of the asset distribution on behalf of the user\\n    /// @param rewardsAccrued The amount of rewards accrued\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint assetIndex,\\n        uint userIndex,\\n        uint rewardsAccrued\\n    );\\n\\n    /// @dev Emitted when the emission manager address is updated.\\n    /// @param oldEmissionManager The address of the old emission manager\\n    /// @param newEmissionManager The address of the new emission manager\\n    event EmissionManagerUpdated(address indexed oldEmissionManager, address indexed newEmissionManager);\\n\\n    /// @dev Sets the end date for the distribution\\n    /// @param asset The asset to incentivize\\n    /// @param reward The reward token that incentives the asset\\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /// @dev Sets the emission per second of a set of reward distributions\\n    /// @param asset The asset is being incentivized\\n    /// @param rewards List of reward addresses are being distributed\\n    /// @param newEmissionsPerSecond List of new reward emissions per second\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /// @dev Updates weekly reward distributions\\n    /// @param assets List of incentivized assets getting updated\\n    /// @param rewards List of reward tokens getting updated\\n    /// @param rewardAmounts List of carbon reward amounts getting distributed\\n    function updateCarbonRewardDistribution(\\n        address[] calldata assets,\\n        address[] calldata rewards,\\n        uint[] calldata rewardAmounts\\n    ) external;\\n\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return true, if distribution can be updated for the asset - reward pair\\n    function canUpdateCarbonRewardDistribution(address asset, address reward) external view returns (bool);\\n\\n    /// @dev Gets the end date for the distribution\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The timestamp with the end of the distribution, in unix time format\\n    function getDistributionEnd(address asset, address reward) external view returns (uint);\\n\\n    /// @dev Returns the index of a user on a reward distribution\\n    /// @param user Address of the user\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The current user asset index, not including new distributions\\n    function getUserIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns the configuration of the distribution reward for a certain asset\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The index of the asset distribution\\n    /// @return The emission per second of the reward distribution\\n    /// @return The timestamp of the last update of the index\\n    /// @return The timestamp of the distribution end\\n    function getRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        );\\n\\n    /// @dev Returns the list of available reward token addresses of an incentivized asset\\n    /// @param asset The incentivized asset\\n    /// @return List of rewards addresses of the input asset\\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n    /// @dev Returns the list of available reward addresses\\n    /// @return List of rewards supported in this contract\\n    function getAllRewards() external view returns (address[] memory);\\n\\n    /// @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return Unclaimed rewards, not including new distributions\\n    function getAccruedRewardAmountForUser(address user, address reward) external view returns (uint);\\n\\n    /// @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return The rewards amount\\n    function getUnclaimedRewardAmountForUserAndAssets(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @return The list of reward addresses\\n    /// @return The list of unclaimed amount of rewards\\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory, uint[] memory);\\n\\n    /// @dev Returns the decimals of an asset to calculate the distribution delta\\n    /// @param asset The address to retrieve decimals\\n    /// @return The decimals of an underlying asset\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /// @dev Returns the address of the emission manager\\n    /// @return The address of the EmissionManager\\n    function getEmissionManager() external view returns (address);\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0x3a23160c6771e0f367ca4a507e02f8002c64fa4db87cf82e80743c2f45473c90\",\"license\":\"MIT\"},\"contracts/interfaces/staking/ISolidStakingViewActions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\n/// @title Permissionless view actions\\n/// @notice Contains view functions that can be called by anyone\\n/// @author Solid World DAO\\ninterface ISolidStakingViewActions {\\n    /// @dev Computes the amount of tokens that the `account` has staked\\n    /// @param token the token to check\\n    /// @param account the account to check\\n    /// @return the amount of `token` tokens that the `account` has staked\\n    function balanceOf(address token, address account) external view returns (uint);\\n\\n    /// @dev Computes the total amount of tokens that have been staked\\n    /// @param token the token to check\\n    /// @return the total amount of `token` tokens that have been staked\\n    function totalStaked(address token) external view returns (uint);\\n\\n    /// @dev Returns the list of tokens that can be staked\\n    /// @return the list of tokens that can be staked\\n    function getTokens() external view returns (address[] memory);\\n\\n    /// @return whether the specified token requires msg.sender to be KYCed before staking\\n    function isKYCRequired(address token) external view returns (bool);\\n\\n    /// @return The address controlling timelocked functions (e.g. KYC requirement changes)\\n    function getTimelockController() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6a9352c78ea0c7bf993006a197e06513f498277ba5264cdcf63df847d3d1dafe\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76a64a698224ac465712446431e6ad26cbe8e2bff8e2d09400f546ba5a667280\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/rewards/IEACAggregatorProxy.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct DistributionConfig {\\n        uint88 emissionPerSecond;\\n        uint totalStaked;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        IEACAggregatorProxy rewardOracle;\\n    }\\n\\n    struct AssetStakedAmounts {\\n        address asset;\\n        uint userStake;\\n        uint totalStaked;\\n    }\\n\\n    struct AssetData {\\n        mapping(address => RewardDistribution) rewardDistribution;\\n        mapping(uint128 => address) availableRewards;\\n        uint128 availableRewardsCount;\\n        uint8 decimals;\\n    }\\n\\n    struct RewardDistribution {\\n        uint104 index;\\n        uint88 emissionPerSecond;\\n        uint32 lastUpdateTimestamp;\\n        uint32 distributionEnd;\\n        mapping(address => UserReward) userReward;\\n    }\\n\\n    struct UserReward {\\n        uint104 index;\\n        uint128 accrued;\\n    }\\n}\\n\",\"keccak256\":\"0x68cc26c7dd839b997ff0eb0c5daa0c27e0d739454d0ee8bf73c343447f956286\",\"license\":\"MIT\"},\"contracts/rewards/RewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport \\\"./RewardsDistributor.sol\\\";\\nimport \\\"../interfaces/rewards/IRewardsController.sol\\\";\\nimport \\\"../PostConstruct.sol\\\";\\nimport \\\"../libraries/GPv2SafeERC20.sol\\\";\\n\\ncontract RewardsController is IRewardsController, RewardsDistributor, PostConstruct {\\n    /// @dev user => claimer\\n    mapping(address => address) internal _authorizedClaimers;\\n\\n    /// @dev reward => rewardOracle\\n    mapping(address => IEACAggregatorProxy) internal _rewardOracle;\\n\\n    /// @dev Account that secures ERC20 rewards.\\n    /// @dev It must approve `RewardsController` to spend the rewards it holds.\\n    address internal REWARDS_VAULT;\\n\\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\\n        if (_authorizedClaimers[user] != claimer && address(solidStakingViewActions) != claimer) {\\n            revert UnauthorizedClaimer(claimer, user);\\n        }\\n        _;\\n    }\\n\\n    function setup(\\n        address _solidStakingViewActions,\\n        address rewardsVault,\\n        address emissionManager\\n    ) external postConstruct {\\n        _setSolidStaking(_solidStakingViewActions);\\n        _setRewardsVault(rewardsVault);\\n        _setEmissionManager(emissionManager);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function getRewardsVault() external view returns (address) {\\n        return REWARDS_VAULT;\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function getClaimer(address user) external view returns (address) {\\n        return _authorizedClaimers[user];\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function getRewardOracle(address reward) external view returns (address) {\\n        return address(_rewardOracle[reward]);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config)\\n        external\\n        onlyEmissionManager\\n    {\\n        for (uint i; i < config.length; i++) {\\n            config[i].totalStaked = solidStakingViewActions.totalStaked(config[i].asset);\\n            _setRewardOracle(config[i].reward, config[i].rewardOracle);\\n        }\\n        _configureAssets(config);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external onlyEmissionManager {\\n        _setRewardOracle(reward, rewardOracle);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function setClaimer(address user, address caller) external onlyEmissionManager {\\n        _authorizedClaimers[user] = caller;\\n        emit ClaimerSet(user, caller);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function setRewardsVault(address rewardsVault) external onlyEmissionManager {\\n        _setRewardsVault(rewardsVault);\\n    }\\n\\n    function setSolidStaking(address solidStaking) external onlyEmissionManager {\\n        _setSolidStaking(solidStaking);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function handleUserStakeChanged(\\n        address asset,\\n        address user,\\n        uint oldUserStake,\\n        uint oldTotalStaked\\n    ) external {\\n        if (msg.sender != address(solidStakingViewActions)) {\\n            revert NotSolidStaking(msg.sender);\\n        }\\n\\n        _updateAllRewardDistributionsAndUserRewardsForAsset(asset, user, oldUserStake, oldTotalStaked);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\\n    {\\n        if (to == address(0)) {\\n            revert InvalidInput();\\n        }\\n\\n        return _claimAllRewards(assets, msg.sender, msg.sender, to);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    )\\n        external\\n        onlyAuthorizedClaimers(msg.sender, user)\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\\n    {\\n        if (to == address(0) || user == address(0)) {\\n            revert InvalidInput();\\n        }\\n\\n        return _claimAllRewards(assets, msg.sender, user, to);\\n    }\\n\\n    /// @inheritdoc IRewardsController\\n    function claimAllRewardsToSelf(address[] calldata assets)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\\n    {\\n        return _claimAllRewards(assets, msg.sender, msg.sender, msg.sender);\\n    }\\n\\n    /// @inheritdoc RewardsDistributor\\n    function _getAssetStakedAmounts(address[] calldata assets, address user)\\n        internal\\n        view\\n        override\\n        returns (RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts)\\n    {\\n        assetStakedAmounts = new RewardsDataTypes.AssetStakedAmounts[](assets.length);\\n        for (uint i; i < assets.length; i++) {\\n            assetStakedAmounts[i].asset = assets[i];\\n            assetStakedAmounts[i].userStake = solidStakingViewActions.balanceOf(assets[i], user);\\n            assetStakedAmounts[i].totalStaked = solidStakingViewActions.totalStaked(assets[i]);\\n        }\\n        return assetStakedAmounts;\\n    }\\n\\n    /// @dev Claims all accrued rewards for a user on behalf, for the specified asset, accumulating the pending rewards.\\n    /// @param assets List of assets to check eligible distributions before claiming rewards\\n    /// @param claimer Address of the claimer on behalf of user\\n    /// @param user Address to check and claim rewards\\n    /// @param to Address that will be receiving the rewards\\n    /// @return\\n    ///   rewardsList List of reward addresses\\n    ///   claimedAmount List of claimed amounts, follows \\\"rewardsList\\\" items order\\n    function _claimAllRewards(\\n        address[] calldata assets,\\n        address claimer,\\n        address user,\\n        address to\\n    ) internal returns (address[] memory rewardsList, uint[] memory claimedAmounts) {\\n        uint rewardsListLength = _rewardsList.length;\\n        rewardsList = new address[](rewardsListLength);\\n        claimedAmounts = new uint[](rewardsListLength);\\n\\n        _updateAllRewardDistributionsAndUserRewardsForAssets(user, _getAssetStakedAmounts(assets, user));\\n\\n        for (uint i; i < assets.length; i++) {\\n            address asset = assets[i];\\n            for (uint j; j < rewardsListLength; j++) {\\n                if (rewardsList[j] == address(0)) {\\n                    rewardsList[j] = _rewardsList[j];\\n                }\\n                uint rewardAmount = _assetData[asset]\\n                    .rewardDistribution[rewardsList[j]]\\n                    .userReward[user]\\n                    .accrued;\\n                if (rewardAmount != 0) {\\n                    claimedAmounts[j] += rewardAmount;\\n                    _assetData[asset].rewardDistribution[rewardsList[j]].userReward[user].accrued = 0;\\n                }\\n            }\\n        }\\n        for (uint i; i < rewardsListLength; i++) {\\n            _transferRewards(to, rewardsList[i], claimedAmounts[i]);\\n            emit RewardsClaimed(user, rewardsList[i], to, claimer, claimedAmounts[i]);\\n        }\\n        return (rewardsList, claimedAmounts);\\n    }\\n\\n    /// @dev Function to transfer rewards to the desired account\\n    /// @param to Account address to send the rewards\\n    /// @param reward Address of the reward token\\n    /// @param amount Amount of rewards to transfer\\n    function _transferRewards(\\n        address to,\\n        address reward,\\n        uint amount\\n    ) internal {\\n        GPv2SafeERC20.safeTransferFrom(IERC20(reward), REWARDS_VAULT, to, amount);\\n    }\\n\\n    /// @dev Update the Price Oracle of a reward token. The Price Oracle must follow Chainlink IEACAggregatorProxy interface.\\n    /// @notice The Price Oracle of a reward is used for displaying correct data about the incentives at the UI frontend.\\n    /// @param reward The address of the reward token\\n    /// @param rewardOracle The address of the price oracle\\n    function _setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) internal {\\n        if (rewardOracle.latestAnswer() <= 0) {\\n            revert InvalidRewardOracle(reward, address(rewardOracle));\\n        }\\n\\n        _rewardOracle[reward] = rewardOracle;\\n        emit RewardOracleUpdated(reward, address(rewardOracle));\\n    }\\n\\n    function _setRewardsVault(address rewardsVault) internal {\\n        REWARDS_VAULT = rewardsVault;\\n        emit RewardsVaultUpdated(rewardsVault);\\n    }\\n\\n    function _setSolidStaking(address solidStaking) internal {\\n        solidStakingViewActions = ISolidStakingViewActions(solidStaking);\\n        emit SolidStakingUpdated(solidStaking);\\n    }\\n}\\n\",\"keccak256\":\"0x9437de9f08bcf04821420c3bc52f76edf88dcdb6b2bc14e0ac8c784bd7b34ca6\",\"license\":\"MIT\"},\"contracts/rewards/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../interfaces/rewards/IRewardsDistributor.sol\\\";\\nimport \\\"../libraries/RewardsDataTypes.sol\\\";\\nimport \\\"../interfaces/staking/ISolidStakingViewActions.sol\\\";\\n\\nabstract contract RewardsDistributor is IRewardsDistributor {\\n    using SafeCast for uint;\\n\\n    // asset => AssetData\\n    mapping(address => RewardsDataTypes.AssetData) internal _assetData;\\n    // reward => enabled\\n    mapping(address => bool) internal _isRewardEnabled;\\n\\n    address[] internal _rewardsList;\\n    address[] internal _assetsList;\\n    address internal _emissionManager;\\n\\n    /// @dev Used to fetch the total amount staked and the stake of an user for a given asset\\n    ISolidStakingViewActions public solidStakingViewActions;\\n\\n    modifier onlyEmissionManager() {\\n        if (msg.sender != _emissionManager) {\\n            revert NotEmissionManager(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    modifier distributionExists(address asset, address reward) {\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset].rewardDistribution[\\n            reward\\n        ];\\n        uint decimals = _assetData[asset].decimals;\\n        if (decimals == 0 || rewardDistribution.lastUpdateTimestamp == 0) {\\n            revert DistributionNonExistent(asset, reward);\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getRewardDistribution(address asset, address reward)\\n        public\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        return (\\n            _assetData[asset].rewardDistribution[reward].index,\\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\\n            _assetData[asset].rewardDistribution[reward].lastUpdateTimestamp,\\n            _assetData[asset].rewardDistribution[reward].distributionEnd\\n        );\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getDistributionEnd(address asset, address reward) external view returns (uint) {\\n        return _assetData[asset].rewardDistribution[reward].distributionEnd;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getRewardsByAsset(address asset) external view returns (address[] memory) {\\n        uint128 rewardsCount = _assetData[asset].availableRewardsCount;\\n        address[] memory rewards = new address[](rewardsCount);\\n\\n        for (uint128 i; i < rewardsCount; i++) {\\n            rewards[i] = _assetData[asset].availableRewards[i];\\n        }\\n        return rewards;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getAllRewards() external view returns (address[] memory) {\\n        return _rewardsList;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getUserIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) public view returns (uint) {\\n        return _assetData[asset].rewardDistribution[reward].userReward[user].index;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getAccruedRewardAmountForUser(address user, address reward) external view returns (uint) {\\n        uint totalAccrued;\\n        for (uint i; i < _assetsList.length; i++) {\\n            totalAccrued += _assetData[_assetsList[i]].rewardDistribution[reward].userReward[user].accrued;\\n        }\\n\\n        return totalAccrued;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getUnclaimedRewardAmountForUserAndAssets(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint unclaimedAmount) {\\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts = _getAssetStakedAmounts(\\n            assets,\\n            user\\n        );\\n\\n        for (uint i; i < assetStakedAmounts.length; i++) {\\n            if (assetStakedAmounts[i].userStake == 0) {\\n                unclaimedAmount += _assetData[assetStakedAmounts[i].asset]\\n                    .rewardDistribution[reward]\\n                    .userReward[user]\\n                    .accrued;\\n            } else {\\n                unclaimedAmount +=\\n                    _computePendingRewardAmountForUser(user, reward, assetStakedAmounts[i]) +\\n                    _assetData[assetStakedAmounts[i].asset]\\n                        .rewardDistribution[reward]\\n                        .userReward[user]\\n                        .accrued;\\n            }\\n        }\\n\\n        return unclaimedAmount;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory rewardsList, uint[] memory unclaimedAmounts)\\n    {\\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts = _getAssetStakedAmounts(\\n            assets,\\n            user\\n        );\\n        rewardsList = new address[](_rewardsList.length);\\n        unclaimedAmounts = new uint[](rewardsList.length);\\n\\n        for (uint i; i < assetStakedAmounts.length; i++) {\\n            for (uint r; r < rewardsList.length; r++) {\\n                rewardsList[r] = _rewardsList[r];\\n                unclaimedAmounts[r] += _assetData[assetStakedAmounts[i].asset]\\n                    .rewardDistribution[rewardsList[r]]\\n                    .userReward[user]\\n                    .accrued;\\n\\n                if (assetStakedAmounts[i].userStake == 0) {\\n                    continue;\\n                }\\n                unclaimedAmounts[r] += _computePendingRewardAmountForUser(\\n                    user,\\n                    rewardsList[r],\\n                    assetStakedAmounts[i]\\n                );\\n            }\\n        }\\n        return (rewardsList, unclaimedAmounts);\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external onlyEmissionManager distributionExists(asset, reward) {\\n        uint oldDistributionEnd = _setDistributionEnd(asset, reward, newDistributionEnd);\\n        uint index = _assetData[asset].rewardDistribution[reward].index;\\n\\n        emit AssetConfigUpdated(\\n            asset,\\n            reward,\\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\\n            oldDistributionEnd,\\n            newDistributionEnd,\\n            index\\n        );\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external onlyEmissionManager {\\n        if (rewards.length != newEmissionsPerSecond.length) {\\n            revert InvalidInput();\\n        }\\n\\n        for (uint i; i < rewards.length; i++) {\\n            (uint oldEmissionPerSecond, uint newIndex, uint distributionEnd) = _setEmissionPerSecond(\\n                asset,\\n                rewards[i],\\n                newEmissionsPerSecond[i]\\n            );\\n\\n            emit AssetConfigUpdated(\\n                asset,\\n                rewards[i],\\n                oldEmissionPerSecond,\\n                newEmissionsPerSecond[i],\\n                distributionEnd,\\n                distributionEnd,\\n                newIndex\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function updateCarbonRewardDistribution(\\n        address[] calldata assets,\\n        address[] calldata rewards,\\n        uint[] calldata rewardAmounts\\n    ) external onlyEmissionManager {\\n        if (assets.length != rewards.length || rewards.length != rewardAmounts.length) {\\n            revert InvalidInput();\\n        }\\n\\n        for (uint i; i < assets.length; i++) {\\n            if (!_canUpdateCarbonRewardDistribution(assets[i], rewards[i])) {\\n                revert UpdateDistributionNotApplicable(assets[i], rewards[i]);\\n            }\\n\\n            uint32 newDistributionEnd = _computeNewCarbonRewardDistributionEnd(assets[i], rewards[i]);\\n            uint88 newEmissionsPerSecond = uint88(rewardAmounts[i] / (newDistributionEnd - block.timestamp));\\n\\n            (uint oldEmissionPerSecond, uint newIndex, ) = _setEmissionPerSecond(\\n                assets[i],\\n                rewards[i],\\n                newEmissionsPerSecond\\n            );\\n            uint oldDistributionEnd = _setDistributionEnd(assets[i], rewards[i], newDistributionEnd);\\n            emit AssetConfigUpdated(\\n                assets[i],\\n                rewards[i],\\n                oldEmissionPerSecond,\\n                newEmissionsPerSecond,\\n                oldDistributionEnd,\\n                newDistributionEnd,\\n                newIndex\\n            );\\n        }\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getAssetDecimals(address asset) external view returns (uint8) {\\n        return _assetData[asset].decimals;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function getEmissionManager() external view returns (address) {\\n        return _emissionManager;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function setEmissionManager(address emissionManager) external onlyEmissionManager {\\n        _setEmissionManager(emissionManager);\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function canUpdateCarbonRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        distributionExists(asset, reward)\\n        returns (bool)\\n    {\\n        return _canUpdateCarbonRewardDistribution(asset, reward);\\n    }\\n\\n    function _canUpdateCarbonRewardDistribution(address asset, address reward) internal view returns (bool) {\\n        uint32 currentDistributionEnd = _assetData[asset].rewardDistribution[reward].distributionEnd;\\n        uint32 nextDistributionEnd = _computeNewCarbonRewardDistributionEnd(asset, reward);\\n\\n        bool isInitializedDistribution = currentDistributionEnd != 0;\\n        bool isBetweenDistributions = block.timestamp >= currentDistributionEnd &&\\n            block.timestamp < nextDistributionEnd;\\n\\n        return isInitializedDistribution && isBetweenDistributions;\\n    }\\n\\n    function _computeNewCarbonRewardDistributionEnd(address asset, address reward)\\n        internal\\n        view\\n        returns (uint32 newDistributionEnd)\\n    {\\n        uint32 currentDistributionEnd = _assetData[asset].rewardDistribution[reward].distributionEnd;\\n\\n        newDistributionEnd = currentDistributionEnd + 1 weeks;\\n    }\\n\\n    /// @dev Configure the _assetData for a specific emission\\n    /// @param distributionConfig The array of each asset configuration\\n    function _configureAssets(RewardsDataTypes.DistributionConfig[] memory distributionConfig) internal {\\n        for (uint i; i < distributionConfig.length; i++) {\\n            uint8 decimals = IERC20Metadata(distributionConfig[i].asset).decimals();\\n\\n            if (decimals == 0) {\\n                revert InvalidAssetDecimals(distributionConfig[i].asset);\\n            }\\n\\n            if (_assetData[distributionConfig[i].asset].decimals == 0) {\\n                _assetsList.push(distributionConfig[i].asset);\\n            }\\n\\n            _assetData[distributionConfig[i].asset].decimals = decimals;\\n\\n            RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[\\n                distributionConfig[i].asset\\n            ].rewardDistribution[distributionConfig[i].reward];\\n\\n            if (rewardDistribution.lastUpdateTimestamp == 0) {\\n                uint128 rewardCount = _assetData[distributionConfig[i].asset].availableRewardsCount;\\n                _assetData[distributionConfig[i].asset].availableRewards[rewardCount] = distributionConfig[i]\\n                    .reward;\\n                _assetData[distributionConfig[i].asset].availableRewardsCount++;\\n            }\\n\\n            if (_isRewardEnabled[distributionConfig[i].reward] == false) {\\n                _isRewardEnabled[distributionConfig[i].reward] = true;\\n                _rewardsList.push(distributionConfig[i].reward);\\n            }\\n\\n            (uint newAssetIndex, ) = _updateRewardDistribution(\\n                rewardDistribution,\\n                distributionConfig[i].totalStaked,\\n                10**decimals\\n            );\\n\\n            uint88 oldEmissionsPerSecond = rewardDistribution.emissionPerSecond;\\n            uint32 oldDistributionEnd = rewardDistribution.distributionEnd;\\n            rewardDistribution.emissionPerSecond = distributionConfig[i].emissionPerSecond;\\n            rewardDistribution.distributionEnd = distributionConfig[i].distributionEnd;\\n\\n            emit AssetConfigUpdated(\\n                distributionConfig[i].asset,\\n                distributionConfig[i].reward,\\n                oldEmissionsPerSecond,\\n                distributionConfig[i].emissionPerSecond,\\n                oldDistributionEnd,\\n                distributionConfig[i].distributionEnd,\\n                newAssetIndex\\n            );\\n        }\\n    }\\n\\n    /// @dev Updates rewards distribution and user rewards for all rewards configured for the specified assets\\n    /// @param user The address of the user\\n    /// @param assetStakedAmounts List of structs with the user stake and total staked of a set of assets\\n    function _updateAllRewardDistributionsAndUserRewardsForAssets(\\n        address user,\\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts\\n    ) internal {\\n        for (uint i; i < assetStakedAmounts.length; i++) {\\n            _updateAllRewardDistributionsAndUserRewardsForAsset(\\n                assetStakedAmounts[i].asset,\\n                user,\\n                assetStakedAmounts[i].userStake,\\n                assetStakedAmounts[i].totalStaked\\n            );\\n        }\\n    }\\n\\n    /// @dev Updates rewards distribution and user rewards for all rewards configured for the specified asset\\n    /// @dev When call origin is (un)staking, `userStake` and `totalStaked` are prior to the (un)stake action\\n    /// @dev When call origin is rewards claiming, `userStake` and `totalStaked` are current values\\n    /// @param asset The address of the incentivized asset\\n    /// @param user The user address\\n    /// @param userStake The amount of assets staked by the user\\n    /// @param totalStaked The total amount staked of the asset\\n    function _updateAllRewardDistributionsAndUserRewardsForAsset(\\n        address asset,\\n        address user,\\n        uint userStake,\\n        uint totalStaked\\n    ) internal {\\n        uint assetUnit;\\n        uint numAvailableRewards = _assetData[asset].availableRewardsCount;\\n        unchecked {\\n            assetUnit = 10**_assetData[asset].decimals;\\n        }\\n\\n        if (numAvailableRewards == 0) {\\n            return;\\n        }\\n        unchecked {\\n            for (uint128 r; r < numAvailableRewards; r++) {\\n                address reward = _assetData[asset].availableRewards[r];\\n                RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset]\\n                    .rewardDistribution[reward];\\n\\n                (uint newAssetIndex, bool rewardDistributionUpdated) = _updateRewardDistribution(\\n                    rewardDistribution,\\n                    totalStaked,\\n                    assetUnit\\n                );\\n\\n                (uint rewardsAccrued, bool userRewardUpdated) = _updateUserReward(\\n                    rewardDistribution,\\n                    user,\\n                    userStake,\\n                    newAssetIndex,\\n                    assetUnit\\n                );\\n\\n                if (rewardDistributionUpdated || userRewardUpdated) {\\n                    emit Accrued(asset, reward, user, newAssetIndex, newAssetIndex, rewardsAccrued);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Updates the state of the distribution for the specified reward\\n    /// @param rewardDistribution Storage pointer to the distribution reward config\\n    /// @param totalStaked The total amount staked of the asset\\n    /// @param assetUnit One unit of asset (10**decimals)\\n    /// @return The new distribution index\\n    /// @return True if the index was updated, false otherwise\\n    function _updateRewardDistribution(\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\\n        uint totalStaked,\\n        uint assetUnit\\n    ) internal returns (uint, bool) {\\n        (uint oldIndex, uint newIndex) = _computeNewAssetIndex(rewardDistribution, totalStaked, assetUnit);\\n        bool indexUpdated;\\n        if (newIndex != oldIndex) {\\n            if (newIndex > type(uint104).max) {\\n                revert IndexOverflow(newIndex);\\n            }\\n\\n            indexUpdated = true;\\n\\n            rewardDistribution.index = uint104(newIndex);\\n            rewardDistribution.lastUpdateTimestamp = block.timestamp.toUint32();\\n        } else {\\n            rewardDistribution.lastUpdateTimestamp = block.timestamp.toUint32();\\n        }\\n\\n        return (newIndex, indexUpdated);\\n    }\\n\\n    /// @dev Updates the state of the distribution for the specific user\\n    /// @param rewardDistribution Storage pointer to the distribution reward config\\n    /// @param user The address of the user\\n    /// @param userStake The amount of assets staked by the user\\n    /// @param newAssetIndex The new index of the asset distribution\\n    /// @param assetUnit One unit of asset (10**decimals)\\n    /// @return The rewards accrued since the last update\\n    function _updateUserReward(\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\\n        address user,\\n        uint userStake,\\n        uint newAssetIndex,\\n        uint assetUnit\\n    ) internal returns (uint, bool) {\\n        uint userIndex = rewardDistribution.userReward[user].index;\\n        uint rewardsAccrued;\\n        bool dataUpdated;\\n        if ((dataUpdated = userIndex != newAssetIndex)) {\\n            if (newAssetIndex > type(uint104).max) {\\n                revert IndexOverflow(newAssetIndex);\\n            }\\n\\n            rewardDistribution.userReward[user].index = uint104(newAssetIndex);\\n            if (userStake != 0) {\\n                rewardsAccrued = _computeAccruedRewardAmount(userStake, newAssetIndex, userIndex, assetUnit);\\n\\n                rewardDistribution.userReward[user].accrued += rewardsAccrued.toUint128();\\n            }\\n        }\\n        return (rewardsAccrued, dataUpdated);\\n    }\\n\\n    /// @dev Calculates the pending (not yet accrued) reward amount since the last user action\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @param assetStakedAmounts struct with the user stake and total staked of the incentivized asset\\n    /// @return The pending rewards for the user since the last user action\\n    function _computePendingRewardAmountForUser(\\n        address user,\\n        address reward,\\n        RewardsDataTypes.AssetStakedAmounts memory assetStakedAmounts\\n    ) internal view returns (uint) {\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[assetStakedAmounts.asset]\\n            .rewardDistribution[reward];\\n        uint assetUnit = 10**_assetData[assetStakedAmounts.asset].decimals;\\n        (, uint nextIndex) = _computeNewAssetIndex(\\n            rewardDistribution,\\n            assetStakedAmounts.totalStaked,\\n            assetUnit\\n        );\\n\\n        return\\n            _computeAccruedRewardAmount(\\n                assetStakedAmounts.userStake,\\n                nextIndex,\\n                rewardDistribution.userReward[user].index,\\n                assetUnit\\n            );\\n    }\\n\\n    /// @dev Internal function for the calculation of user's rewards on a distribution\\n    /// @param userStake The amount of assets staked by the user on a distribution\\n    /// @param assetIndex Current index of the asset reward distribution\\n    /// @param userIndex Index stored for the user, representing his staking moment\\n    /// @param assetUnit One unit of asset (10**decimals)\\n    /// @return accruedRewardAmount The accrued reward amount\\n    function _computeAccruedRewardAmount(\\n        uint userStake,\\n        uint assetIndex,\\n        uint userIndex,\\n        uint assetUnit\\n    ) internal pure returns (uint accruedRewardAmount) {\\n        accruedRewardAmount = userStake * (assetIndex - userIndex);\\n\\n        assembly {\\n            accruedRewardAmount := div(accruedRewardAmount, assetUnit)\\n        }\\n    }\\n\\n    /// @dev Calculates the next value of an specific distribution index, with validations\\n    /// @param totalStaked The total amount staked of the asset\\n    /// @param assetUnit One unit of asset (10**decimals)\\n    /// @return The new index.\\n    function _computeNewAssetIndex(\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\\n        uint totalStaked,\\n        uint assetUnit\\n    ) internal view returns (uint, uint) {\\n        uint oldIndex = rewardDistribution.index;\\n        uint distributionEnd = rewardDistribution.distributionEnd;\\n        uint emissionPerSecond = rewardDistribution.emissionPerSecond;\\n        uint lastUpdateTimestamp = rewardDistribution.lastUpdateTimestamp;\\n\\n        if (\\n            emissionPerSecond == 0 ||\\n            totalStaked == 0 ||\\n            lastUpdateTimestamp == block.timestamp ||\\n            lastUpdateTimestamp >= distributionEnd\\n        ) {\\n            return (oldIndex, oldIndex);\\n        }\\n\\n        uint currentTimestamp = block.timestamp > distributionEnd ? distributionEnd : block.timestamp;\\n        uint timeDelta = currentTimestamp - lastUpdateTimestamp;\\n        uint firstTerm = emissionPerSecond * timeDelta * assetUnit;\\n        assembly {\\n            firstTerm := div(firstTerm, totalStaked)\\n        }\\n        return (oldIndex, (firstTerm + oldIndex));\\n    }\\n\\n    /// @dev Get user stake and total staked of all the assets specified by the assets parameter\\n    /// @param assets List of assets to retrieve user stake and total staked\\n    /// @param user Address of the user\\n    /// @return assetStakedAmounts contains a list of structs with user stake and total staked of the given assets\\n    function _getAssetStakedAmounts(address[] calldata assets, address user)\\n        internal\\n        view\\n        virtual\\n        returns (RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts);\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function _setEmissionManager(address emissionManager) internal {\\n        address previousEmissionManager = _emissionManager;\\n        _emissionManager = emissionManager;\\n        emit EmissionManagerUpdated(previousEmissionManager, emissionManager);\\n    }\\n\\n    function _setEmissionPerSecond(\\n        address asset,\\n        address reward,\\n        uint88 newEmissionsPerSecond\\n    )\\n        internal\\n        returns (\\n            uint oldEmissionPerSecond,\\n            uint newIndex,\\n            uint distributionEnd\\n        )\\n    {\\n        RewardsDataTypes.AssetData storage assetConfig = _assetData[asset];\\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset].rewardDistribution[\\n            reward\\n        ];\\n        uint decimals = assetConfig.decimals;\\n        if (decimals == 0 || rewardDistribution.lastUpdateTimestamp == 0) {\\n            revert DistributionNonExistent(asset, reward);\\n        }\\n\\n        distributionEnd = rewardDistribution.distributionEnd;\\n\\n        (newIndex, ) = _updateRewardDistribution(\\n            rewardDistribution,\\n            solidStakingViewActions.totalStaked(asset),\\n            10**decimals\\n        );\\n\\n        oldEmissionPerSecond = rewardDistribution.emissionPerSecond;\\n        rewardDistribution.emissionPerSecond = newEmissionsPerSecond;\\n    }\\n\\n    function _setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) internal returns (uint oldDistributionEnd) {\\n        oldDistributionEnd = _assetData[asset].rewardDistribution[reward].distributionEnd;\\n        _assetData[asset].rewardDistribution[reward].distributionEnd = newDistributionEnd;\\n    }\\n}\\n\",\"keccak256\":\"0x43811f43102ebaeed753a2db1b1fd17b6b1c5548f49899ac0b6635ae8b0c12f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506142bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806388ffcf6111610104578063c040af69116100a2578063ef85093611610071578063ef85093614610569578063f5bb3e021461057c578063f5cf673b1461058f578063f996868b146105a257600080fd5b8063c040af6914610465578063c5a7b53814610478578063e23ddec51461048b578063e3887a4b1461049c57600080fd5b80639ff55db9116100de5780639ff55db91461040b578063ad9f8b2f1461042c578063bb492bf51461043f578063bf90f63a1461045257600080fd5b806388ffcf611461034f57806392074b08146103a55780639efd6f72146103b657600080fd5b80634f7459d511610171578063707199e51161014b578063707199e5146102ea57806374d945ec146102fd57806377b8b1c7146103295780638549f3fd1461033c57600080fd5b80634f7459d5146102b15780635453ba10146102c45780636657732f146102d757600080fd5b806338be719f116101ad57806338be719f1461025357806345b35f56146102665780634a6a60f11461027b5780634e18cced1461028e57600080fd5b8063184dde87146101d45780631b839c77146101e95780632a17bf601461020f575b600080fd5b6101e76101e2366004613916565b6105b5565b005b6101fc6101f736600461395c565b610612565b6040519081526020015b60405180910390f35b61023b61021d366004613995565b6001600160a01b039081166000908152600760205260409020541690565b6040516001600160a01b039091168152602001610206565b6101e76102613660046139fe565b610663565b61026e610a8b565b6040516102069190613adc565b60055461023b906001600160a01b031681565b6102a161029c36600461395c565b610aed565b6040519015158152602001610206565b6101e76102bf366004613995565b610bc5565b6101e76102d236600461395c565b610c17565b61026e6102e5366004613995565b610c6b565b6101e76102f8366004613bca565b610d97565b61023b61030b366004613995565b6001600160a01b039081166000908152600660205260409020541690565b6101e7610337366004613ce5565b610f0c565b6101fc61034a366004613d30565b610fc0565b6101fc61035d366004613ce5565b6001600160a01b038083166000908152602081815260408083208585168452825280832093871683526001909301905220546cffffffffffffffffffffffffff169392505050565b6004546001600160a01b031661023b565b6103f96103c4366004613995565b6001600160a01b0316600090815260208190526040902060020154700100000000000000000000000000000000900460ff1690565b60405160ff9091168152602001610206565b61041e610419366004613d30565b611168565b604051610206929190613d98565b6101fc61043a36600461395c565b611263565b61041e61044d366004613def565b61130e565b61041e610460366004613e3b565b61136b565b6101e7610473366004613995565b611387565b6101e7610486366004613e7d565b6113d6565b6008546001600160a01b031661023b565b6105496104aa36600461395c565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546cffffffffffffffffffffffffff8116916affffffffffffffffffffff6d01000000000000000000000000008304169163ffffffff780100000000000000000000000000000000000000000000000082048116927c01000000000000000000000000000000000000000000000000000000009092041690565b604080519485526020850193909352918301526060820152608001610206565b61041e610577366004613def565b6115ec565b6101e761058a366004613995565b6118b9565b6101e761059d36600461395c565b611908565b6101e76105b0366004613ec4565b6119bd565b6005546001600160a01b03163314610600576040517f4c4365b70000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b61060c84848484611b83565b50505050565b6001600160a01b03828116600090815260208181526040808320938516835292905220547c0100000000000000000000000000000000000000000000000000000000900463ffffffff165b92915050565b6004546001600160a01b031633146106a9576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b84831415806106b85750828114155b156106ef576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85811015610a825761075087878381811061070f5761070f613f47565b90506020020160208101906107249190613995565b86868481811061073657610736613f47565b905060200201602081019061074b9190613995565b611cef565b6107e75786868281811061076657610766613f47565b905060200201602081019061077b9190613995565b85858381811061078d5761078d613f47565b90506020020160208101906107a29190613995565b6040517f9d0f304c0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044016105f7565b600061083f8888848181106107fe576107fe613f47565b90506020020160208101906108139190613995565b87878581811061082557610825613f47565b905060200201602081019061083a9190613995565b611d7e565b905060006108534263ffffffff8416613fa5565b85858581811061086557610865613f47565b905060200201356108769190613fb8565b90506000806108d28b8b8781811061089057610890613f47565b90506020020160208101906108a59190613995565b8a8a888181106108b7576108b7613f47565b90506020020160208101906108cc9190613995565b85611ddf565b509150915060006109a48c8c888181106108ee576108ee613f47565b90506020020160208101906109039190613995565b8b8b8981811061091557610915613f47565b905060200201602081019061092a9190613995565b6001600160a01b039182166000908152602081815260408083209390941682529190915220805463ffffffff8881167c01000000000000000000000000000000000000000000000000000000009081027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416179093559190041690565b90508989878181106109b8576109b8613f47565b90506020020160208101906109cd9190613995565b6001600160a01b03168c8c888181106109e8576109e8613f47565b90506020020160208101906109fd9190613995565b604080518681526affffffffffffffffffffff8816602082015290810184905263ffffffff88166060820152608081018590526001600160a01b0391909116907fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59060a00160405180910390a350505050508080610a7a90613ff3565b9150506106f2565b50505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ae357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ac5575b5050505050905090565b6001600160a01b038281166000818152602081815260408083209486168352848252822092825281905260029092015484918491700100000000000000000000000000000000900460ff16801580610b66575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b15610bb0576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201526044016105f7565b610bba8787611cef565b979650505050505050565b6004546001600160a01b03163314610c0b576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c1481611fc7565b50565b6004546001600160a01b03163314610c5d576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c678282612031565b5050565b6001600160a01b0381166000908152602081905260408120600201546060916fffffffffffffffffffffffffffffffff909116908167ffffffffffffffff811115610cb857610cb8613aef565b604051908082528060200260200182016040528015610ce1578160200160208202803683370190505b50905060005b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610d8f576001600160a01b038086166000908152602081815260408083206fffffffffffffffffffffffffffffffff861680855260019091019092529091205484519216918491908110610d6557610d65613f47565b6001600160a01b039092166020928302919091019091015280610d878161402b565b915050610ce7565b509392505050565b6004546001600160a01b03163314610ddd576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b60005b8151811015610f025760055482516001600160a01b0390911690639bfd8d6190849084908110610e1257610e12613f47565b6020026020010151606001516040518263ffffffff1660e01b8152600401610e4991906001600160a01b0391909116815260200190565b602060405180830381865afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a919061405a565b828281518110610e9c57610e9c613f47565b60200260200101516020018181525050610ef0828281518110610ec157610ec1613f47565b602002602001015160800151838381518110610edf57610edf613f47565b602002602001015160a00151612031565b80610efa81613ff3565b915050610de0565b50610c148161214e565b60055474010000000000000000000000000000000000000000900460ff1615610f61576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055610fa98361294c565b610fb2826129ae565b610fbb81611fc7565b505050565b600080610fce868686612a10565b905060005b815181101561115e57818181518110610fee57610fee613f47565b60200260200101516020015160000361108e5760008083838151811061101657611016613f47565b602090810291909101810151516001600160a01b039081168352828201939093526040918201600090812088851682528252828120938916815260019093019052902054611087906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1684614073565b925061114c565b6000808383815181106110a3576110a3613f47565b602090810291909101810151516001600160a01b03908116835282820193909352604091820160009081208885168252825282812093891681526001909301905290205482516d01000000000000000000000000009091046fffffffffffffffffffffffffffffffff1690611135908790879086908690811061112857611128613f47565b6020026020010151612cab565b61113f9190614073565b6111499084614073565b92505b8061115681613ff3565b915050610fd3565b5050949350505050565b6001600160a01b038083166000908152600660205260409020546060918291339186911682148015906111a957506005546001600160a01b03838116911614155b156111f3576040517f3ebd5fe50000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152821660248201526044016105f7565b6001600160a01b038516158061121057506001600160a01b038616155b15611247576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112548888338989612d5e565b93509350505094509492505050565b60008060005b600354811015610d8f576000806003838154811061128957611289613f47565b6000918252602080832091909101546001600160a01b039081168452838201949094526040928301822088851683528152828220938916825260019093019092529020546112fa906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1683614073565b91508061130681613ff3565b915050611269565b6060806001600160a01b038316611351576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61135e8585333387612d5e565b915091505b935093915050565b60608061137b8484333333612d5e565b915091505b9250929050565b6004546001600160a01b031633146113cd576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c148161294c565b6004546001600160a01b0316331461141c576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b6001600160a01b03838116600081815260208181526040808320948716835284825282209282525260029091015484918491700100000000000000000000000000000000900460ff16801580611493575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b156114dd576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201526044016105f7565b6001600160a01b03878116600081815260208181526040808320948b1680845294825291829020805463ffffffff8b81167c01000000000000000000000000000000000000000000000000000000008181027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff851681179586905587516d01000000000000000000000000009096046affffffffffffffffffffff1680875296860196909652830490911683860181905260608401919091526cffffffffffffffffffffffffff918216919093161760808201819052925191949293917fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59160a0908290030190a3505050505050505050565b60608060006115fc868686612a10565b60025490915067ffffffffffffffff81111561161a5761161a613aef565b604051908082528060200260200182016040528015611643578160200160208202803683370190505b509250825167ffffffffffffffff81111561166057611660613aef565b604051908082528060200260200182016040528015611689578160200160208202803683370190505b50915060005b81518110156118af5760005b845181101561189c57600281815481106116b7576116b7613f47565b9060005260206000200160009054906101000a90046001600160a01b03168582815181106116e7576116e7613f47565b60200260200101906001600160a01b031690816001600160a01b03168152505060008084848151811061171c5761171c613f47565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600001600086838151811061175f5761175f613f47565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206001016000876001600160a01b03166001600160a01b03168152602001908152602001600020600001600d9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168482815181106117f1576117f1613f47565b602002602001018181516118059190614073565b905250825183908390811061181c5761181c613f47565b6020026020010151602001516000031561188a576118608686838151811061184657611846613f47565b602002602001015185858151811061112857611128613f47565b84828151811061187257611872613f47565b602002602001018181516118869190614073565b9052505b8061189481613ff3565b91505061169b565b50806118a781613ff3565b91505061168f565b5050935093915050565b6004546001600160a01b031633146118ff576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c14816129ae565b6004546001600160a01b0316331461194e576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b6001600160a01b0382811660008181526006602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b6004546001600160a01b03163314611a03576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b828114611a3c576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015611b7b576000806000611aa389898987818110611a6257611a62613f47565b9050602002016020810190611a779190613995565b888888818110611a8957611a89613f47565b9050602002016020810190611a9e9190614086565b611ddf565b925092509250878785818110611abb57611abb613f47565b9050602002016020810190611ad09190613995565b6001600160a01b0316896001600160a01b03167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc585898989818110611b1757611b17613f47565b9050602002016020810190611b2c9190614086565b604080519283526affffffffffffffffffffff90911660208301528101859052606081018590526080810186905260a00160405180910390a35050508080611b7390613ff3565b915050611a3f565b505050505050565b6001600160a01b03841660009081526020819052604081206002015460ff700100000000000000000000000000000000820416600a0a916fffffffffffffffffffffffffffffffff90911690819003611bdd57505061060c565b60005b81816fffffffffffffffffffffffffffffffff161015610a82576001600160a01b038088166000908152602081815260408083206fffffffffffffffffffffffffffffffff86168452600181018352818420549094168084529390915281209080611c4c83898961317a565b91509150600080611c60858d8d878d6132db565b915091508280611c6d5750805b15611cdd578b6001600160a01b0316866001600160a01b03168e6001600160a01b03167f3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8878887604051611cd4939291909283526020830191909152604082015260600190565b60405180910390a45b505060019094019350611be092505050565b6001600160a01b038281166000908152602081815260408083209385168352929052908120547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681611d468585611d7e565b905063ffffffff8216801515906000904210801590611d6a57508263ffffffff1642105b9050818015610bba57509695505050505050565b6001600160a01b038281166000908152602081815260408083209385168352929052908120547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16611dd78162093a806140a1565b949350505050565b6001600160a01b038381166000908152602081815260408083209386168352908390528120600283015491928392839290700100000000000000000000000000000000900460ff16801580611e55575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b15611e9f576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808b166004830152891660248201526044016105f7565b81546005546040517f9bfd8d610000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301527c010000000000000000000000000000000000000000000000000000000090930463ffffffff169650611f659285921690639bfd8d6190602401602060405180830381865afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f55919061405a565b611f6084600a6141e5565b61317a565b5082546affffffffffffffffffffff9889166d01000000000000000000000000009081027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff831617909455929092049690961698909750919550909350505050565b600480546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f53271355c244f99d37f622c90fe574eb7c35c7b3548ea276cf9b5b11c601605e90600090a35050565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612071573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612095919061405a565b136120df576040517f4f79ac5c0000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152821660248201526044016105f7565b6001600160a01b0382811660008181526007602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f1a1cd5483e52e60b9ff7f3b9d1db3bbd9e9d21c6324ad3a8c79dba9b75e62f4d9190a35050565b60005b8151811015610c6757600082828151811061216e5761216e613f47565b6020026020010151606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121db91906141f1565b90508060ff16600003612248578282815181106121fa576121fa613f47565b6020026020010151606001516040517f8f0b74150000000000000000000000000000000000000000000000000000000081526004016105f791906001600160a01b0391909116815260200190565b60008084848151811061225d5761225d613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160109054906101000a900460ff1660ff166000036123105760038383815181106122b8576122b8613f47565b6020908102919091018101516060015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555b8060008085858151811061232657612326613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160106101000a81548160ff021916908360ff160217905550600080600085858151811061238457612384613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060000160008585815181106123c7576123c7613f47565b6020026020010151608001516001600160a01b03166001600160a01b0316815260200190815260200160002090508060000160189054906101000a900463ffffffff1663ffffffff166000036125cf57600080600086868151811061242e5761242e613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff16905084848151811061248e5761248e613f47565b6020026020010151608001516000808787815181106124af576124af613f47565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020016000206001016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008086868151811061254c5761254c613f47565b602090810291909101810151606001516001600160a01b03168252810191909152604001600090812060020180546fffffffffffffffffffffffffffffffff16916125968361402b565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505b600160008585815181106125e5576125e5613f47565b602090810291909101810151608001516001600160a01b0316825281019190915260400160009081205460ff16151590036126e057600180600086868151811061263157612631613f47565b6020026020010151608001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600284848151811061268857612688613f47565b6020908102919091018101516080015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555b6000612711828686815181106126f8576126f8613f47565b60200260200101516020015185600a611f609190614214565b50825486519192506d010000000000000000000000000081046affffffffffffffffffffff16917c010000000000000000000000000000000000000000000000000000000090910463ffffffff169087908790811061277257612772613f47565b60209081029190910101515184546affffffffffffffffffffff9091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff90911617845586518790879081106127da576127da613f47565b602090810291909101015160400151845463ffffffff9091167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178455865187908790811061284957612849613f47565b6020026020010151608001516001600160a01b031687878151811061287057612870613f47565b6020026020010151606001516001600160a01b03167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5848a8a815181106128b9576128b9613f47565b602002602001015160000151858c8c815181106128d8576128d8613f47565b6020026020010151604001518960405161292c9594939291906affffffffffffffffffffff958616815293909416602084015263ffffffff9182166040840152166060820152608081019190915260a00190565b60405180910390a35050505050808061294490613ff3565b915050612151565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f56ca898af8c1c9c8321dc2ddb32e363c6cd2f38e679340e14a67c810100ce7b790600090a250565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a250565b60608267ffffffffffffffff811115612a2b57612a2b613aef565b604051908082528060200260200182016040528015612a8957816020015b612a76604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081612a495790505b50905060005b83811015610d8f57848482818110612aa957612aa9613f47565b9050602002016020810190612abe9190613995565b828281518110612ad057612ad0613f47565b60209081029190910101516001600160a01b0391821690526005541663f7888aec868684818110612b0357612b03613f47565b9050602002016020810190612b189190613995565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0391821660048201529086166024820152604401602060405180830381865afa158015612b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba0919061405a565b828281518110612bb257612bb2613f47565b60209081029190910181015101526005546001600160a01b0316639bfd8d61868684818110612be357612be3613f47565b9050602002016020810190612bf89190613995565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c78919061405a565b828281518110612c8a57612c8a613f47565b60209081029190910101516040015280612ca381613ff3565b915050612a8f565b80516001600160a01b039081166000908152602081815260408083208685168452825280832085519094168352908290528120600201549091908290612d0990700100000000000000000000000000000000900460ff16600a614214565b90506000612d1c8386604001518461345d565b6020808801516001600160a01b038b16600090815260018801909252604090912054919350610bba92509083906cffffffffffffffffffffffffff1685613569565b60025460609081908067ffffffffffffffff811115612d7f57612d7f613aef565b604051908082528060200260200182016040528015612da8578160200160208202803683370190505b5092508067ffffffffffffffff811115612dc457612dc4613aef565b604051908082528060200260200182016040528015612ded578160200160208202803683370190505b509150612e0485612dff8a8a89612a10565b61358b565b60005b87811015613076576000898983818110612e2357612e23613f47565b9050602002016020810190612e389190613995565b905060005b838110156130615760006001600160a01b0316868281518110612e6257612e62613f47565b60200260200101516001600160a01b031603612edc5760028181548110612e8b57612e8b613f47565b9060005260206000200160009054906101000a90046001600160a01b0316868281518110612ebb57612ebb613f47565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6001600160a01b038216600090815260208190526040812087518290899085908110612f0a57612f0a613f47565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938d168152600190930190529020546d010000000000000000000000000090046fffffffffffffffffffffffffffffffff169050801561304e5780868381518110612f8157612f81613f47565b60200260200101818151612f959190614073565b9052506001600160a01b0383166000908152602081905260408120885182908a9086908110612fc657612fc6613f47565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160008b6001600160a01b03166001600160a01b03168152602001908152602001600020600001600d6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b508061305981613ff3565b915050612e3d565b5050808061306e90613ff3565b915050612e07565b5060005b8181101561316e576130bf8585838151811061309857613098613f47565b60200260200101518584815181106130b2576130b2613f47565b602002602001015161360c565b846001600160a01b03168482815181106130db576130db613f47565b60200260200101516001600160a01b0316876001600160a01b03167fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f0048a87868151811061312a5761312a613f47565b60200260200101516040516131549291906001600160a01b03929092168252602082015260400190565b60405180910390a48061316681613ff3565b91505061307a565b50509550959350505050565b60008060008061318b87878761345d565b915091506000828214613277576cffffffffffffffffffffffffff8211156131e2576040517fc6c74120000000000000000000000000000000000000000000000000000000008152600481018390526024016105f7565b5086547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8216178755600161322542613625565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788556132ce565b61328042613625565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788555b9097909650945050505050565b6001600160a01b038416600090815260018601602052604081205481906cffffffffffffffffffffffffff168185821480159061344e576cffffffffffffffffffffffffff87111561335c576040517fc6c74120000000000000000000000000000000000000000000000000000000008152600481018890526024016105f7565b6001600160a01b038916600090815260018b016020526040902080547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8916179055871561344e576133bf88888589613569565b91506133ca826136bf565b6001600160a01b038a16600090815260018c01602052604090208054600d906134179084906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16614223565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b90999098509650505050505050565b825460009081906cffffffffffffffffffffffffff81169063ffffffff7c010000000000000000000000000000000000000000000000000000000082048116916affffffffffffffffffffff6d0100000000000000000000000000820416917801000000000000000000000000000000000000000000000000909104168115806134e5575087155b806134ef57504281145b806134fa5750828110155b1561350e5783849550955050505050611363565b600083421161351d574261351f565b835b9050600061352d8383613fa5565b905060008961353c838761424c565b613546919061424c565b8b90049050866135568183614073565b9850985050505050505050935093915050565b60006135758385613fa5565b61357f908661424c565b91909104949350505050565b60005b8151811015610fbb576135fa8282815181106135ac576135ac613f47565b602002602001015160000151848484815181106135cb576135cb613f47565b6020026020010151602001518585815181106135e9576135e9613f47565b602002602001015160400151611b83565b8061360481613ff3565b91505061358e565b600854610fbb9083906001600160a01b03168584613761565b600063ffffffff8211156136bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016105f7565b5090565b60006fffffffffffffffffffffffffffffffff8211156136bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016105f7565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16137bf573d6000803e3d6000fd5b506137c985613836565b61382f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016105f7565b5050505050565b6000613875565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156138b457602081146138ee576138af7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61383d565b6138fb565b823b6138e5576138e57f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461383d565b600191506138fb565b3d6000803e600051151591505b50919050565b6001600160a01b0381168114610c1457600080fd5b6000806000806080858703121561392c57600080fd5b843561393781613901565b9350602085013561394781613901565b93969395505050506040820135916060013590565b6000806040838503121561396f57600080fd5b823561397a81613901565b9150602083013561398a81613901565b809150509250929050565b6000602082840312156139a757600080fd5b81356139b281613901565b9392505050565b60008083601f8401126139cb57600080fd5b50813567ffffffffffffffff8111156139e357600080fd5b6020830191508360208260051b850101111561138057600080fd5b60008060008060008060608789031215613a1757600080fd5b863567ffffffffffffffff80821115613a2f57600080fd5b613a3b8a838b016139b9565b90985096506020890135915080821115613a5457600080fd5b613a608a838b016139b9565b90965094506040890135915080821115613a7957600080fd5b50613a8689828a016139b9565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b83811015613ad15781516001600160a01b031687529582019590820190600101613aac565b509495945050505050565b6020815260006139b26020830184613a98565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613b4157613b41613aef565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613b8e57613b8e613aef565b604052919050565b80356affffffffffffffffffffff81168114613bb157600080fd5b919050565b803563ffffffff81168114613bb157600080fd5b60006020808385031215613bdd57600080fd5b823567ffffffffffffffff80821115613bf557600080fd5b818501915085601f830112613c0957600080fd5b813581811115613c1b57613c1b613aef565b613c29848260051b01613b47565b818152848101925060c0918202840185019188831115613c4857600080fd5b938501935b82851015613cd95780858a031215613c655760008081fd5b613c6d613b1e565b613c7686613b96565b815286860135878201526040613c8d818801613bb6565b90820152606086810135613ca081613901565b90820152608086810135613cb381613901565b9082015260a086810135613cc681613901565b9082015284529384019392850192613c4d565b50979650505050505050565b600080600060608486031215613cfa57600080fd5b8335613d0581613901565b92506020840135613d1581613901565b91506040840135613d2581613901565b809150509250925092565b60008060008060608587031215613d4657600080fd5b843567ffffffffffffffff811115613d5d57600080fd5b613d69878288016139b9565b9095509350506020850135613d7d81613901565b91506040850135613d8d81613901565b939692955090935050565b604081526000613dab6040830185613a98565b82810360208481019190915284518083528582019282019060005b81811015613de257845183529383019391830191600101613dc6565b5090979650505050505050565b600080600060408486031215613e0457600080fd5b833567ffffffffffffffff811115613e1b57600080fd5b613e27868287016139b9565b9094509250506020840135613d2581613901565b60008060208385031215613e4e57600080fd5b823567ffffffffffffffff811115613e6557600080fd5b613e71858286016139b9565b90969095509350505050565b600080600060608486031215613e9257600080fd5b8335613e9d81613901565b92506020840135613ead81613901565b9150613ebb60408501613bb6565b90509250925092565b600080600080600060608688031215613edc57600080fd5b8535613ee781613901565b9450602086013567ffffffffffffffff80821115613f0457600080fd5b613f1089838a016139b9565b90965094506040880135915080821115613f2957600080fd5b50613f36888289016139b9565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561065d5761065d613f76565b600082613fee577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361402457614024613f76565b5060010190565b60006fffffffffffffffffffffffffffffffff80831681810361405057614050613f76565b6001019392505050565b60006020828403121561406c57600080fd5b5051919050565b8082018082111561065d5761065d613f76565b60006020828403121561409857600080fd5b6139b282613b96565b63ffffffff8181168382160190808211156140be576140be613f76565b5092915050565b600181815b8085111561411e57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561410457614104613f76565b8085161561411157918102915b93841c93908002906140ca565b509250929050565b6000826141355750600161065d565b816141425750600061065d565b816001811461415857600281146141625761417e565b600191505061065d565b60ff84111561417357614173613f76565b50506001821b61065d565b5060208310610133831016604e8410600b84101617156141a1575081810a61065d565b6141ab83836140c5565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156141dd576141dd613f76565b029392505050565b60006139b28383614126565b60006020828403121561420357600080fd5b815160ff811681146139b257600080fd5b60006139b260ff841683614126565b6fffffffffffffffffffffffffffffffff8181168382160190808211156140be576140be613f76565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561428457614284613f76565b50029056fea26469706673582212204924bea7361fc80e6c58984d72fb7cfd8f717a298b58dfaab3653cb8b31f634064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806388ffcf6111610104578063c040af69116100a2578063ef85093611610071578063ef85093614610569578063f5bb3e021461057c578063f5cf673b1461058f578063f996868b146105a257600080fd5b8063c040af6914610465578063c5a7b53814610478578063e23ddec51461048b578063e3887a4b1461049c57600080fd5b80639ff55db9116100de5780639ff55db91461040b578063ad9f8b2f1461042c578063bb492bf51461043f578063bf90f63a1461045257600080fd5b806388ffcf611461034f57806392074b08146103a55780639efd6f72146103b657600080fd5b80634f7459d511610171578063707199e51161014b578063707199e5146102ea57806374d945ec146102fd57806377b8b1c7146103295780638549f3fd1461033c57600080fd5b80634f7459d5146102b15780635453ba10146102c45780636657732f146102d757600080fd5b806338be719f116101ad57806338be719f1461025357806345b35f56146102665780634a6a60f11461027b5780634e18cced1461028e57600080fd5b8063184dde87146101d45780631b839c77146101e95780632a17bf601461020f575b600080fd5b6101e76101e2366004613916565b6105b5565b005b6101fc6101f736600461395c565b610612565b6040519081526020015b60405180910390f35b61023b61021d366004613995565b6001600160a01b039081166000908152600760205260409020541690565b6040516001600160a01b039091168152602001610206565b6101e76102613660046139fe565b610663565b61026e610a8b565b6040516102069190613adc565b60055461023b906001600160a01b031681565b6102a161029c36600461395c565b610aed565b6040519015158152602001610206565b6101e76102bf366004613995565b610bc5565b6101e76102d236600461395c565b610c17565b61026e6102e5366004613995565b610c6b565b6101e76102f8366004613bca565b610d97565b61023b61030b366004613995565b6001600160a01b039081166000908152600660205260409020541690565b6101e7610337366004613ce5565b610f0c565b6101fc61034a366004613d30565b610fc0565b6101fc61035d366004613ce5565b6001600160a01b038083166000908152602081815260408083208585168452825280832093871683526001909301905220546cffffffffffffffffffffffffff169392505050565b6004546001600160a01b031661023b565b6103f96103c4366004613995565b6001600160a01b0316600090815260208190526040902060020154700100000000000000000000000000000000900460ff1690565b60405160ff9091168152602001610206565b61041e610419366004613d30565b611168565b604051610206929190613d98565b6101fc61043a36600461395c565b611263565b61041e61044d366004613def565b61130e565b61041e610460366004613e3b565b61136b565b6101e7610473366004613995565b611387565b6101e7610486366004613e7d565b6113d6565b6008546001600160a01b031661023b565b6105496104aa36600461395c565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546cffffffffffffffffffffffffff8116916affffffffffffffffffffff6d01000000000000000000000000008304169163ffffffff780100000000000000000000000000000000000000000000000082048116927c01000000000000000000000000000000000000000000000000000000009092041690565b604080519485526020850193909352918301526060820152608001610206565b61041e610577366004613def565b6115ec565b6101e761058a366004613995565b6118b9565b6101e761059d36600461395c565b611908565b6101e76105b0366004613ec4565b6119bd565b6005546001600160a01b03163314610600576040517f4c4365b70000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b61060c84848484611b83565b50505050565b6001600160a01b03828116600090815260208181526040808320938516835292905220547c0100000000000000000000000000000000000000000000000000000000900463ffffffff165b92915050565b6004546001600160a01b031633146106a9576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b84831415806106b85750828114155b156106ef576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85811015610a825761075087878381811061070f5761070f613f47565b90506020020160208101906107249190613995565b86868481811061073657610736613f47565b905060200201602081019061074b9190613995565b611cef565b6107e75786868281811061076657610766613f47565b905060200201602081019061077b9190613995565b85858381811061078d5761078d613f47565b90506020020160208101906107a29190613995565b6040517f9d0f304c0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152911660248201526044016105f7565b600061083f8888848181106107fe576107fe613f47565b90506020020160208101906108139190613995565b87878581811061082557610825613f47565b905060200201602081019061083a9190613995565b611d7e565b905060006108534263ffffffff8416613fa5565b85858581811061086557610865613f47565b905060200201356108769190613fb8565b90506000806108d28b8b8781811061089057610890613f47565b90506020020160208101906108a59190613995565b8a8a888181106108b7576108b7613f47565b90506020020160208101906108cc9190613995565b85611ddf565b509150915060006109a48c8c888181106108ee576108ee613f47565b90506020020160208101906109039190613995565b8b8b8981811061091557610915613f47565b905060200201602081019061092a9190613995565b6001600160a01b039182166000908152602081815260408083209390941682529190915220805463ffffffff8881167c01000000000000000000000000000000000000000000000000000000009081027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8416179093559190041690565b90508989878181106109b8576109b8613f47565b90506020020160208101906109cd9190613995565b6001600160a01b03168c8c888181106109e8576109e8613f47565b90506020020160208101906109fd9190613995565b604080518681526affffffffffffffffffffff8816602082015290810184905263ffffffff88166060820152608081018590526001600160a01b0391909116907fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59060a00160405180910390a350505050508080610a7a90613ff3565b9150506106f2565b50505050505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ae357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ac5575b5050505050905090565b6001600160a01b038281166000818152602081815260408083209486168352848252822092825281905260029092015484918491700100000000000000000000000000000000900460ff16801580610b66575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b15610bb0576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201526044016105f7565b610bba8787611cef565b979650505050505050565b6004546001600160a01b03163314610c0b576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c1481611fc7565b50565b6004546001600160a01b03163314610c5d576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c678282612031565b5050565b6001600160a01b0381166000908152602081905260408120600201546060916fffffffffffffffffffffffffffffffff909116908167ffffffffffffffff811115610cb857610cb8613aef565b604051908082528060200260200182016040528015610ce1578160200160208202803683370190505b50905060005b826fffffffffffffffffffffffffffffffff16816fffffffffffffffffffffffffffffffff161015610d8f576001600160a01b038086166000908152602081815260408083206fffffffffffffffffffffffffffffffff861680855260019091019092529091205484519216918491908110610d6557610d65613f47565b6001600160a01b039092166020928302919091019091015280610d878161402b565b915050610ce7565b509392505050565b6004546001600160a01b03163314610ddd576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b60005b8151811015610f025760055482516001600160a01b0390911690639bfd8d6190849084908110610e1257610e12613f47565b6020026020010151606001516040518263ffffffff1660e01b8152600401610e4991906001600160a01b0391909116815260200190565b602060405180830381865afa158015610e66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8a919061405a565b828281518110610e9c57610e9c613f47565b60200260200101516020018181525050610ef0828281518110610ec157610ec1613f47565b602002602001015160800151838381518110610edf57610edf613f47565b602002602001015160a00151612031565b80610efa81613ff3565b915050610de0565b50610c148161214e565b60055474010000000000000000000000000000000000000000900460ff1615610f61576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055610fa98361294c565b610fb2826129ae565b610fbb81611fc7565b505050565b600080610fce868686612a10565b905060005b815181101561115e57818181518110610fee57610fee613f47565b60200260200101516020015160000361108e5760008083838151811061101657611016613f47565b602090810291909101810151516001600160a01b039081168352828201939093526040918201600090812088851682528252828120938916815260019093019052902054611087906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1684614073565b925061114c565b6000808383815181106110a3576110a3613f47565b602090810291909101810151516001600160a01b03908116835282820193909352604091820160009081208885168252825282812093891681526001909301905290205482516d01000000000000000000000000009091046fffffffffffffffffffffffffffffffff1690611135908790879086908690811061112857611128613f47565b6020026020010151612cab565b61113f9190614073565b6111499084614073565b92505b8061115681613ff3565b915050610fd3565b5050949350505050565b6001600160a01b038083166000908152600660205260409020546060918291339186911682148015906111a957506005546001600160a01b03838116911614155b156111f3576040517f3ebd5fe50000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152821660248201526044016105f7565b6001600160a01b038516158061121057506001600160a01b038616155b15611247576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112548888338989612d5e565b93509350505094509492505050565b60008060005b600354811015610d8f576000806003838154811061128957611289613f47565b6000918252602080832091909101546001600160a01b039081168452838201949094526040928301822088851683528152828220938916825260019093019092529020546112fa906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff1683614073565b91508061130681613ff3565b915050611269565b6060806001600160a01b038316611351576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61135e8585333387612d5e565b915091505b935093915050565b60608061137b8484333333612d5e565b915091505b9250929050565b6004546001600160a01b031633146113cd576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c148161294c565b6004546001600160a01b0316331461141c576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b6001600160a01b03838116600081815260208181526040808320948716835284825282209282525260029091015484918491700100000000000000000000000000000000900460ff16801580611493575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b156114dd576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b038086166004830152841660248201526044016105f7565b6001600160a01b03878116600081815260208181526040808320948b1680845294825291829020805463ffffffff8b81167c01000000000000000000000000000000000000000000000000000000008181027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff851681179586905587516d01000000000000000000000000009096046affffffffffffffffffffff1680875296860196909652830490911683860181905260608401919091526cffffffffffffffffffffffffff918216919093161760808201819052925191949293917fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc59160a0908290030190a3505050505050505050565b60608060006115fc868686612a10565b60025490915067ffffffffffffffff81111561161a5761161a613aef565b604051908082528060200260200182016040528015611643578160200160208202803683370190505b509250825167ffffffffffffffff81111561166057611660613aef565b604051908082528060200260200182016040528015611689578160200160208202803683370190505b50915060005b81518110156118af5760005b845181101561189c57600281815481106116b7576116b7613f47565b9060005260206000200160009054906101000a90046001600160a01b03168582815181106116e7576116e7613f47565b60200260200101906001600160a01b031690816001600160a01b03168152505060008084848151811061171c5761171c613f47565b6020026020010151600001516001600160a01b03166001600160a01b03168152602001908152602001600020600001600086838151811061175f5761175f613f47565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206001016000876001600160a01b03166001600160a01b03168152602001908152602001600020600001600d9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168482815181106117f1576117f1613f47565b602002602001018181516118059190614073565b905250825183908390811061181c5761181c613f47565b6020026020010151602001516000031561188a576118608686838151811061184657611846613f47565b602002602001015185858151811061112857611128613f47565b84828151811061187257611872613f47565b602002602001018181516118869190614073565b9052505b8061189481613ff3565b91505061169b565b50806118a781613ff3565b91505061168f565b5050935093915050565b6004546001600160a01b031633146118ff576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b610c14816129ae565b6004546001600160a01b0316331461194e576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b6001600160a01b0382811660008181526006602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f4925eafc82d0c4d67889898eeed64b18488ab19811e61620f387026dec126a289190a35050565b6004546001600160a01b03163314611a03576040517f59afb3390000000000000000000000000000000000000000000000000000000081523360048201526024016105f7565b828114611a3c576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015611b7b576000806000611aa389898987818110611a6257611a62613f47565b9050602002016020810190611a779190613995565b888888818110611a8957611a89613f47565b9050602002016020810190611a9e9190614086565b611ddf565b925092509250878785818110611abb57611abb613f47565b9050602002016020810190611ad09190613995565b6001600160a01b0316896001600160a01b03167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc585898989818110611b1757611b17613f47565b9050602002016020810190611b2c9190614086565b604080519283526affffffffffffffffffffff90911660208301528101859052606081018590526080810186905260a00160405180910390a35050508080611b7390613ff3565b915050611a3f565b505050505050565b6001600160a01b03841660009081526020819052604081206002015460ff700100000000000000000000000000000000820416600a0a916fffffffffffffffffffffffffffffffff90911690819003611bdd57505061060c565b60005b81816fffffffffffffffffffffffffffffffff161015610a82576001600160a01b038088166000908152602081815260408083206fffffffffffffffffffffffffffffffff86168452600181018352818420549094168084529390915281209080611c4c83898961317a565b91509150600080611c60858d8d878d6132db565b915091508280611c6d5750805b15611cdd578b6001600160a01b0316866001600160a01b03168e6001600160a01b03167f3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8878887604051611cd4939291909283526020830191909152604082015260600190565b60405180910390a45b505060019094019350611be092505050565b6001600160a01b038281166000908152602081815260408083209385168352929052908120547c0100000000000000000000000000000000000000000000000000000000900463ffffffff1681611d468585611d7e565b905063ffffffff8216801515906000904210801590611d6a57508263ffffffff1642105b9050818015610bba57509695505050505050565b6001600160a01b038281166000908152602081815260408083209385168352929052908120547c0100000000000000000000000000000000000000000000000000000000900463ffffffff16611dd78162093a806140a1565b949350505050565b6001600160a01b038381166000908152602081815260408083209386168352908390528120600283015491928392839290700100000000000000000000000000000000900460ff16801580611e55575081547801000000000000000000000000000000000000000000000000900463ffffffff16155b15611e9f576040517fc8bed79e0000000000000000000000000000000000000000000000000000000081526001600160a01b03808b166004830152891660248201526044016105f7565b81546005546040517f9bfd8d610000000000000000000000000000000000000000000000000000000081526001600160a01b038c811660048301527c010000000000000000000000000000000000000000000000000000000090930463ffffffff169650611f659285921690639bfd8d6190602401602060405180830381865afa158015611f31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f55919061405a565b611f6084600a6141e5565b61317a565b5082546affffffffffffffffffffff9889166d01000000000000000000000000009081027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff831617909455929092049690961698909750919550909350505050565b600480546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f53271355c244f99d37f622c90fe574eb7c35c7b3548ea276cf9b5b11c601605e90600090a35050565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612071573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612095919061405a565b136120df576040517f4f79ac5c0000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152821660248201526044016105f7565b6001600160a01b0382811660008181526007602052604080822080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169486169485179055517f1a1cd5483e52e60b9ff7f3b9d1db3bbd9e9d21c6324ad3a8c79dba9b75e62f4d9190a35050565b60005b8151811015610c6757600082828151811061216e5761216e613f47565b6020026020010151606001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121db91906141f1565b90508060ff16600003612248578282815181106121fa576121fa613f47565b6020026020010151606001516040517f8f0b74150000000000000000000000000000000000000000000000000000000081526004016105f791906001600160a01b0391909116815260200190565b60008084848151811061225d5761225d613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160109054906101000a900460ff1660ff166000036123105760038383815181106122b8576122b8613f47565b6020908102919091018101516060015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555b8060008085858151811061232657612326613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160106101000a81548160ff021916908360ff160217905550600080600085858151811061238457612384613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060000160008585815181106123c7576123c7613f47565b6020026020010151608001516001600160a01b03166001600160a01b0316815260200190815260200160002090508060000160189054906101000a900463ffffffff1663ffffffff166000036125cf57600080600086868151811061242e5761242e613f47565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060020160009054906101000a90046fffffffffffffffffffffffffffffffff16905084848151811061248e5761248e613f47565b6020026020010151608001516000808787815181106124af576124af613f47565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020016000206001016000836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060008086868151811061254c5761254c613f47565b602090810291909101810151606001516001600160a01b03168252810191909152604001600090812060020180546fffffffffffffffffffffffffffffffff16916125968361402b565b91906101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050505b600160008585815181106125e5576125e5613f47565b602090810291909101810151608001516001600160a01b0316825281019190915260400160009081205460ff16151590036126e057600180600086868151811061263157612631613f47565b6020026020010151608001516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600284848151811061268857612688613f47565b6020908102919091018101516080015182546001810184556000938452919092200180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039092169190911790555b6000612711828686815181106126f8576126f8613f47565b60200260200101516020015185600a611f609190614214565b50825486519192506d010000000000000000000000000081046affffffffffffffffffffff16917c010000000000000000000000000000000000000000000000000000000090910463ffffffff169087908790811061277257612772613f47565b60209081029190910101515184546affffffffffffffffffffff9091166d0100000000000000000000000000027fffffffffffffffff0000000000000000000000ffffffffffffffffffffffffff90911617845586518790879081106127da576127da613f47565b602090810291909101015160400151845463ffffffff9091167c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff909116178455865187908790811061284957612849613f47565b6020026020010151608001516001600160a01b031687878151811061287057612870613f47565b6020026020010151606001516001600160a01b03167fac1777479f07f3e7c34da8402139d54027a6a260caaae168bdee825ca5580dc5848a8a815181106128b9576128b9613f47565b602002602001015160000151858c8c815181106128d8576128d8613f47565b6020026020010151604001518960405161292c9594939291906affffffffffffffffffffff958616815293909416602084015263ffffffff9182166040840152166060820152608081019190915260a00190565b60405180910390a35050505050808061294490613ff3565b915050612151565b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f56ca898af8c1c9c8321dc2ddb32e363c6cd2f38e679340e14a67c810100ce7b790600090a250565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f28a48cbce43190d77247f342cf319b1607bff4ef716cf26b76cf7bb71baebaa590600090a250565b60608267ffffffffffffffff811115612a2b57612a2b613aef565b604051908082528060200260200182016040528015612a8957816020015b612a76604051806060016040528060006001600160a01b0316815260200160008152602001600081525090565b815260200190600190039081612a495790505b50905060005b83811015610d8f57848482818110612aa957612aa9613f47565b9050602002016020810190612abe9190613995565b828281518110612ad057612ad0613f47565b60209081029190910101516001600160a01b0391821690526005541663f7888aec868684818110612b0357612b03613f47565b9050602002016020810190612b189190613995565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0391821660048201529086166024820152604401602060405180830381865afa158015612b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba0919061405a565b828281518110612bb257612bb2613f47565b60209081029190910181015101526005546001600160a01b0316639bfd8d61868684818110612be357612be3613f47565b9050602002016020810190612bf89190613995565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015612c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c78919061405a565b828281518110612c8a57612c8a613f47565b60209081029190910101516040015280612ca381613ff3565b915050612a8f565b80516001600160a01b039081166000908152602081815260408083208685168452825280832085519094168352908290528120600201549091908290612d0990700100000000000000000000000000000000900460ff16600a614214565b90506000612d1c8386604001518461345d565b6020808801516001600160a01b038b16600090815260018801909252604090912054919350610bba92509083906cffffffffffffffffffffffffff1685613569565b60025460609081908067ffffffffffffffff811115612d7f57612d7f613aef565b604051908082528060200260200182016040528015612da8578160200160208202803683370190505b5092508067ffffffffffffffff811115612dc457612dc4613aef565b604051908082528060200260200182016040528015612ded578160200160208202803683370190505b509150612e0485612dff8a8a89612a10565b61358b565b60005b87811015613076576000898983818110612e2357612e23613f47565b9050602002016020810190612e389190613995565b905060005b838110156130615760006001600160a01b0316868281518110612e6257612e62613f47565b60200260200101516001600160a01b031603612edc5760028181548110612e8b57612e8b613f47565b9060005260206000200160009054906101000a90046001600160a01b0316868281518110612ebb57612ebb613f47565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6001600160a01b038216600090815260208190526040812087518290899085908110612f0a57612f0a613f47565b6020908102919091018101516001600160a01b0390811683528282019390935260409182016000908120938d168152600190930190529020546d010000000000000000000000000090046fffffffffffffffffffffffffffffffff169050801561304e5780868381518110612f8157612f81613f47565b60200260200101818151612f959190614073565b9052506001600160a01b0383166000908152602081905260408120885182908a9086908110612fc657612fc6613f47565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060010160008b6001600160a01b03166001600160a01b03168152602001908152602001600020600001600d6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b508061305981613ff3565b915050612e3d565b5050808061306e90613ff3565b915050612e07565b5060005b8181101561316e576130bf8585838151811061309857613098613f47565b60200260200101518584815181106130b2576130b2613f47565b602002602001015161360c565b846001600160a01b03168482815181106130db576130db613f47565b60200260200101516001600160a01b0316876001600160a01b03167fc052130bc4ef84580db505783484b067ea8b71b3bca78a7e12db7aea8658f0048a87868151811061312a5761312a613f47565b60200260200101516040516131549291906001600160a01b03929092168252602082015260400190565b60405180910390a48061316681613ff3565b91505061307a565b50509550959350505050565b60008060008061318b87878761345d565b915091506000828214613277576cffffffffffffffffffffffffff8211156131e2576040517fc6c74120000000000000000000000000000000000000000000000000000000008152600481018390526024016105f7565b5086547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8216178755600161322542613625565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788556132ce565b61328042613625565b885463ffffffff919091167801000000000000000000000000000000000000000000000000027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff9091161788555b9097909650945050505050565b6001600160a01b038416600090815260018601602052604081205481906cffffffffffffffffffffffffff168185821480159061344e576cffffffffffffffffffffffffff87111561335c576040517fc6c74120000000000000000000000000000000000000000000000000000000008152600481018890526024016105f7565b6001600160a01b038916600090815260018b016020526040902080547fffffffffffffffffffffffffffffffffffffff00000000000000000000000000166cffffffffffffffffffffffffff8916179055871561344e576133bf88888589613569565b91506133ca826136bf565b6001600160a01b038a16600090815260018c01602052604090208054600d906134179084906d010000000000000000000000000090046fffffffffffffffffffffffffffffffff16614223565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b90999098509650505050505050565b825460009081906cffffffffffffffffffffffffff81169063ffffffff7c010000000000000000000000000000000000000000000000000000000082048116916affffffffffffffffffffff6d0100000000000000000000000000820416917801000000000000000000000000000000000000000000000000909104168115806134e5575087155b806134ef57504281145b806134fa5750828110155b1561350e5783849550955050505050611363565b600083421161351d574261351f565b835b9050600061352d8383613fa5565b905060008961353c838761424c565b613546919061424c565b8b90049050866135568183614073565b9850985050505050505050935093915050565b60006135758385613fa5565b61357f908661424c565b91909104949350505050565b60005b8151811015610fbb576135fa8282815181106135ac576135ac613f47565b602002602001015160000151848484815181106135cb576135cb613f47565b6020026020010151602001518585815181106135e9576135e9613f47565b602002602001015160400151611b83565b8061360481613ff3565b91505061358e565b600854610fbb9083906001600160a01b03168584613761565b600063ffffffff8211156136bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f322062697473000000000000000000000000000000000000000000000000000060648201526084016105f7565b5090565b60006fffffffffffffffffffffffffffffffff8211156136bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602760248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203160448201527f323820626974730000000000000000000000000000000000000000000000000060648201526084016105f7565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af16137bf573d6000803e3d6000fd5b506137c985613836565b61382f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016105f7565b5050505050565b6000613875565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d80156138b457602081146138ee576138af7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f61383d565b6138fb565b823b6138e5576138e57f475076323a206e6f74206120636f6e7472616374000000000000000000000000601461383d565b600191506138fb565b3d6000803e600051151591505b50919050565b6001600160a01b0381168114610c1457600080fd5b6000806000806080858703121561392c57600080fd5b843561393781613901565b9350602085013561394781613901565b93969395505050506040820135916060013590565b6000806040838503121561396f57600080fd5b823561397a81613901565b9150602083013561398a81613901565b809150509250929050565b6000602082840312156139a757600080fd5b81356139b281613901565b9392505050565b60008083601f8401126139cb57600080fd5b50813567ffffffffffffffff8111156139e357600080fd5b6020830191508360208260051b850101111561138057600080fd5b60008060008060008060608789031215613a1757600080fd5b863567ffffffffffffffff80821115613a2f57600080fd5b613a3b8a838b016139b9565b90985096506020890135915080821115613a5457600080fd5b613a608a838b016139b9565b90965094506040890135915080821115613a7957600080fd5b50613a8689828a016139b9565b979a9699509497509295939492505050565b600081518084526020808501945080840160005b83811015613ad15781516001600160a01b031687529582019590820190600101613aac565b509495945050505050565b6020815260006139b26020830184613a98565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715613b4157613b41613aef565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613b8e57613b8e613aef565b604052919050565b80356affffffffffffffffffffff81168114613bb157600080fd5b919050565b803563ffffffff81168114613bb157600080fd5b60006020808385031215613bdd57600080fd5b823567ffffffffffffffff80821115613bf557600080fd5b818501915085601f830112613c0957600080fd5b813581811115613c1b57613c1b613aef565b613c29848260051b01613b47565b818152848101925060c0918202840185019188831115613c4857600080fd5b938501935b82851015613cd95780858a031215613c655760008081fd5b613c6d613b1e565b613c7686613b96565b815286860135878201526040613c8d818801613bb6565b90820152606086810135613ca081613901565b90820152608086810135613cb381613901565b9082015260a086810135613cc681613901565b9082015284529384019392850192613c4d565b50979650505050505050565b600080600060608486031215613cfa57600080fd5b8335613d0581613901565b92506020840135613d1581613901565b91506040840135613d2581613901565b809150509250925092565b60008060008060608587031215613d4657600080fd5b843567ffffffffffffffff811115613d5d57600080fd5b613d69878288016139b9565b9095509350506020850135613d7d81613901565b91506040850135613d8d81613901565b939692955090935050565b604081526000613dab6040830185613a98565b82810360208481019190915284518083528582019282019060005b81811015613de257845183529383019391830191600101613dc6565b5090979650505050505050565b600080600060408486031215613e0457600080fd5b833567ffffffffffffffff811115613e1b57600080fd5b613e27868287016139b9565b9094509250506020840135613d2581613901565b60008060208385031215613e4e57600080fd5b823567ffffffffffffffff811115613e6557600080fd5b613e71858286016139b9565b90969095509350505050565b600080600060608486031215613e9257600080fd5b8335613e9d81613901565b92506020840135613ead81613901565b9150613ebb60408501613bb6565b90509250925092565b600080600080600060608688031215613edc57600080fd5b8535613ee781613901565b9450602086013567ffffffffffffffff80821115613f0457600080fd5b613f1089838a016139b9565b90965094506040880135915080821115613f2957600080fd5b50613f36888289016139b9565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561065d5761065d613f76565b600082613fee577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361402457614024613f76565b5060010190565b60006fffffffffffffffffffffffffffffffff80831681810361405057614050613f76565b6001019392505050565b60006020828403121561406c57600080fd5b5051919050565b8082018082111561065d5761065d613f76565b60006020828403121561409857600080fd5b6139b282613b96565b63ffffffff8181168382160190808211156140be576140be613f76565b5092915050565b600181815b8085111561411e57817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561410457614104613f76565b8085161561411157918102915b93841c93908002906140ca565b509250929050565b6000826141355750600161065d565b816141425750600061065d565b816001811461415857600281146141625761417e565b600191505061065d565b60ff84111561417357614173613f76565b50506001821b61065d565b5060208310610133831016604e8410600b84101617156141a1575081810a61065d565b6141ab83836140c5565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156141dd576141dd613f76565b029392505050565b60006139b28383614126565b60006020828403121561420357600080fd5b815160ff811681146139b257600080fd5b60006139b260ff841683614126565b6fffffffffffffffffffffffffffffffff8181168382160190808211156140be576140be613f76565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561428457614284613f76565b50029056fea26469706673582212204924bea7361fc80e6c58984d72fb7cfd8f717a298b58dfaab3653cb8b31f634064736f6c63430008100033",
  "devdoc": {
    "errors": {
      "UpdateDistributionNotApplicable(address,address)": [
        {
          "params": {
            "asset": "The address of the incentivized asset",
            "reward": "The address of the reward token"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "canUpdateCarbonRewardDistribution(address,address)": {
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "true, if distribution can be updated for the asset - reward pair"
        }
      },
      "claimAllRewards(address[],address)": {
        "details": "Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "to": "The address that will be receiving the rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardList\"",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "claimAllRewardsOnBehalf(address[],address,address)": {
        "details": "Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards",
          "to": "The address that will be receiving the rewards",
          "user": "The address to check and claim rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardsList\"",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "claimAllRewardsToSelf(address[])": {
        "details": "Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards",
        "params": {
          "assets": "The list of assets to check eligible distributions before claiming rewards"
        },
        "returns": {
          "claimedAmounts": "List that contains the claimed amount per reward, following same order as \"rewardsList\"",
          "rewardsList": "List of addresses of the reward tokens"
        }
      },
      "configureAssets((uint88,uint256,uint32,address,address,address)[])": {
        "details": "Configure assets to incentivize with an emission of rewards per second until the end of distribution.",
        "params": {
          "config": "The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalStaked: The total amount staked of the asset   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible."
        }
      },
      "getAccruedRewardAmountForUser(address,address)": {
        "details": "Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.",
        "params": {
          "reward": "The address of the reward token",
          "user": "The address of the user"
        },
        "returns": {
          "_0": "Unclaimed rewards, not including new distributions"
        }
      },
      "getAllRewards()": {
        "details": "Returns the list of available reward addresses",
        "returns": {
          "_0": "List of rewards supported in this contract"
        }
      },
      "getAllUnclaimedRewardAmountsForUserAndAssets(address[],address)": {
        "details": "Returns a list all rewards of a user, including already accrued and unrealized claimable rewards",
        "params": {
          "assets": "List of incentivized assets to check eligible distributions",
          "user": "The address of the user"
        },
        "returns": {
          "rewardsList": "The list of reward addresses",
          "unclaimedAmounts": "The list of unclaimed amount of rewards"
        }
      },
      "getAssetDecimals(address)": {
        "details": "Returns the decimals of an asset to calculate the distribution delta",
        "params": {
          "asset": "The address to retrieve decimals"
        },
        "returns": {
          "_0": "The decimals of an underlying asset"
        }
      },
      "getClaimer(address)": {
        "details": "Returns the whitelisted claimer for a certain address (0x0 if not set)",
        "params": {
          "user": "The address of the user"
        },
        "returns": {
          "_0": "The claimer address"
        }
      },
      "getDistributionEnd(address,address)": {
        "details": "Gets the end date for the distribution",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "The timestamp with the end of the distribution, in unix time format"
        }
      },
      "getEmissionManager()": {
        "details": "Returns the address of the emission manager",
        "returns": {
          "_0": "The address of the EmissionManager"
        }
      },
      "getRewardDistribution(address,address)": {
        "details": "Returns the configuration of the distribution reward for a certain asset",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset"
        },
        "returns": {
          "_0": "The index of the asset distribution",
          "_1": "The emission per second of the reward distribution",
          "_2": "The timestamp of the last update of the index",
          "_3": "The timestamp of the distribution end"
        }
      },
      "getRewardOracle(address)": {
        "details": "Get the price aggregator oracle address",
        "params": {
          "reward": "The address of the reward"
        },
        "returns": {
          "_0": "The price oracle of the reward"
        }
      },
      "getRewardsByAsset(address)": {
        "details": "Returns the list of available reward token addresses of an incentivized asset",
        "params": {
          "asset": "The incentivized asset"
        },
        "returns": {
          "_0": "List of rewards addresses of the input asset"
        }
      },
      "getRewardsVault()": {
        "returns": {
          "_0": "Account that secures ERC20 rewards."
        }
      },
      "getUnclaimedRewardAmountForUserAndAssets(address[],address,address)": {
        "details": "Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.",
        "params": {
          "assets": "List of incentivized assets to check eligible distributions",
          "reward": "The address of the reward token",
          "user": "The address of the user"
        },
        "returns": {
          "unclaimedAmount": "The rewards amount"
        }
      },
      "getUserIndex(address,address,address)": {
        "details": "Returns the index of a user on a reward distribution",
        "params": {
          "asset": "The incentivized asset",
          "reward": "The reward token of the incentivized asset",
          "user": "Address of the user"
        },
        "returns": {
          "_0": "The current user asset index, not including new distributions"
        }
      },
      "handleUserStakeChanged(address,address,uint256,uint256)": {
        "details": "Called by the corresponding asset on transfer hook in order to update the rewards distribution.",
        "params": {
          "asset": "The incentivized asset address",
          "oldTotalStaked": "The total amount staked of the asset, prior to stake change",
          "oldUserStake": "The amount of assets staked by the user, prior to stake change",
          "user": "The address of the user whose asset balance has changed"
        }
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another address",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(address,address,uint32)": {
        "details": "Sets the end date for the distribution",
        "params": {
          "asset": "The asset to incentivize",
          "newDistributionEnd": "The end date of the incentivization, in unix time format",
          "reward": "The reward token that incentives the asset"
        }
      },
      "setEmissionManager(address)": {
        "details": "Updates the address of the emission manager",
        "params": {
          "emissionManager": "The address of the new EmissionManager"
        }
      },
      "setEmissionPerSecond(address,address[],uint88[])": {
        "details": "Sets the emission per second of a set of reward distributions",
        "params": {
          "asset": "The asset is being incentivized",
          "newEmissionsPerSecond": "List of new reward emissions per second",
          "rewards": "List of reward addresses are being distributed"
        }
      },
      "setRewardOracle(address,address)": {
        "details": "Sets an Aave Oracle contract to enforce rewards with a source of value.",
        "params": {
          "reward": "The address of the reward to set the price aggregator",
          "rewardOracle": "The address of price aggregator that follows IEACAggregatorProxy interface"
        }
      },
      "setRewardsVault(address)": {
        "params": {
          "rewardsVault": "The address of the account that secures ERC20 rewards."
        }
      },
      "setSolidStaking(address)": {
        "params": {
          "solidStaking": "Used to fetch the total amount staked and the stake of an user for a given asset"
        }
      },
      "updateCarbonRewardDistribution(address[],address[],uint256[])": {
        "details": "Updates weekly reward distributions",
        "params": {
          "assets": "List of incentivized assets getting updated",
          "rewardAmounts": "List of carbon reward amounts getting distributed",
          "rewards": "List of reward tokens getting updated"
        }
      }
    },
    "stateVariables": {
      "REWARDS_VAULT": {
        "details": "Account that secures ERC20 rewards.It must approve `RewardsController` to spend the rewards it holds."
      },
      "_authorizedClaimers": {
        "details": "user => claimer"
      },
      "_rewardOracle": {
        "details": "reward => rewardOracle"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRewardOracle(address,address)": {
        "notice": "At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19123,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_assetData",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(AssetData)14508_storage)"
      },
      {
        "astId": 19127,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_isRewardEnabled",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19130,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_rewardsList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19133,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_assetsList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 19135,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_emissionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19139,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "solidStakingViewActions",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ISolidStakingViewActions)12299"
      },
      {
        "astId": 8632,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_initialized",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 18411,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_authorizedClaimers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 18417,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "_rewardOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_contract(IEACAggregatorProxy)11605)"
      },
      {
        "astId": 18420,
        "contract": "contracts/rewards/RewardsController.sol:RewardsController",
        "label": "REWARDS_VAULT",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEACAggregatorProxy)11605": {
        "encoding": "inplace",
        "label": "contract IEACAggregatorProxy",
        "numberOfBytes": "20"
      },
      "t_contract(ISolidStakingViewActions)12299": {
        "encoding": "inplace",
        "label": "contract ISolidStakingViewActions",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(IEACAggregatorProxy)11605)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IEACAggregatorProxy)",
        "numberOfBytes": "32",
        "value": "t_contract(IEACAggregatorProxy)11605"
      },
      "t_mapping(t_address,t_struct(AssetData)14508_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.AssetData)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetData)14508_storage"
      },
      "t_mapping(t_address,t_struct(RewardDistribution)14522_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.RewardDistribution)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardDistribution)14522_storage"
      },
      "t_mapping(t_address,t_struct(UserReward)14527_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDataTypes.UserReward)",
        "numberOfBytes": "32",
        "value": "t_struct(UserReward)14527_storage"
      },
      "t_mapping(t_uint128,t_address)": {
        "encoding": "mapping",
        "key": "t_uint128",
        "label": "mapping(uint128 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(AssetData)14508_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.AssetData",
        "members": [
          {
            "astId": 14499,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "rewardDistribution",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(RewardDistribution)14522_storage)"
          },
          {
            "astId": 14503,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "availableRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint128,t_address)"
          },
          {
            "astId": 14505,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "availableRewardsCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 14507,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "decimals",
            "offset": 16,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardDistribution)14522_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.RewardDistribution",
        "members": [
          {
            "astId": 14510,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 14512,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "emissionPerSecond",
            "offset": 13,
            "slot": "0",
            "type": "t_uint88"
          },
          {
            "astId": 14514,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "lastUpdateTimestamp",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14516,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "distributionEnd",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 14521,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "userReward",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(UserReward)14527_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserReward)14527_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDataTypes.UserReward",
        "members": [
          {
            "astId": 14524,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint104"
          },
          {
            "astId": 14526,
            "contract": "contracts/rewards/RewardsController.sol:RewardsController",
            "label": "accrued",
            "offset": 13,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint104": {
        "encoding": "inplace",
        "label": "uint104",
        "numberOfBytes": "13"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint88": {
        "encoding": "inplace",
        "label": "uint88",
        "numberOfBytes": "11"
      }
    }
  }
}