{
  "address": "0x70C46db6dc1719E814060e75205f94eCcFEB1731",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gammaVault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "uniProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "conversionRate",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "conversionRateDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientLpTokenBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientTokenBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "InvalidFraction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "token0Liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Liquidity",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughAvailableLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokensMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token0DeployedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "token1DeployedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "lpTokensReceived",
          "type": "uint256"
        }
      ],
      "name": "LiquidityDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LpTokenWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConversionRateDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGammaVault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLPTokensOwed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastToken0AvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLastToken0LiquidityDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastDeployedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastToken1AvailableLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLastToken1LiquidityDeployed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastDeployedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTotalDeployedLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinConvertibleToken0Amount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenDepositors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenDepositors",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "token0Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token1Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "token0BalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "token1BalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLpTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken0",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fde5a6e211199a92322671adc13c10070262c730ad755a9f11b2b10951db7f6",
  "receipt": {
    "to": null,
    "from": "0x0CD61abdd7985eF9Baa84A9a8B48E2F75212040C",
    "contractAddress": "0x70C46db6dc1719E814060e75205f94eCcFEB1731",
    "transactionIndex": 37,
    "gasUsed": "2018376",
    "logsBloom": "0x
    "blockHash": "0x72e36fde592b0e797594228f74bdaf7d010299fdd700c47085d924430c54c033",
    "transactionHash": "0x4fde5a6e211199a92322671adc13c10070262c730ad755a9f11b2b10951db7f6",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 40405286,
        "transactionHash": "0x4fde5a6e211199a92322671adc13c10070262c730ad755a9f11b2b10951db7f6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000cd61abdd7985ef9baa84a9a8b48e2f75212040c",
          "0x000000000000000000000000e7e2cb8c81c10ff191a73fe266788c9ce62ec754"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001022548321d4000000000000000000000000000000000000000000000000000a45fc156dc801f4b000000000000000000000000000000000000000000000f0afa8b07d35742ea43000000000000000000000000000000000000000000000000a35d9c0eaa62df4b000000000000000000000000000000000000000000000f0afb8d2d1b89602a43",
        "logIndex": 144,
        "blockHash": "0x72e36fde592b0e797594228f74bdaf7d010299fdd700c47085d924430c54c033"
      }
    ],
    "blockNumber": 40405286,
    "cumulativeGasUsed": "7412575",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2791bca1f2de4661ed88a30c99a7a9449aa84174",
    "0x7ceb23fd6bc0add59e62ac25578270cff1b9f619",
    "0x8b6E73f17B613ce189Be413f5DC435139F5fd45c",
    "0xE339ecc9deEf6B69Dbc394ABf6fBFf19450fAEb6",
    "6",
    "4"
  ],
  "numDeployments": 1,
  "solcInputHash": "b24f545e2b5cbc25685d944ad419dc9c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gammaVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"conversionRate\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"conversionRateDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientLpTokenBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientTokenBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"InvalidFraction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Liquidity\",\"type\":\"uint256\"}],\"name\":\"NotEnoughAvailableLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokensMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token0DeployedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"token1DeployedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"lpTokensReceived\",\"type\":\"uint256\"}],\"name\":\"LiquidityDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LpTokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConversionRateDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGammaVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLPTokensOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastToken0AvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLastToken0LiquidityDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDeployedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastToken1AvailableLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLastToken1LiquidityDeployed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastDeployedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTotalDeployedLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinConvertibleToken0Amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDepositors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenDepositors\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"token0Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token0BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"token1BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLpTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken0\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World\",\"kind\":\"dev\",\"methods\":{\"getConversionRate()\":{\"returns\":{\"_0\":\"1 token0 = ? token1\"}},\"getConversionRateDecimals()\":{\"returns\":{\"_0\":\"Number of decimals of the conversion rate e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6\"}},\"getGammaVault()\":{\"returns\":{\"_0\":\"Gamma Vault address the UniProxy contract will deposit tokens to\"}},\"getLastToken0AvailableLiquidity()\":{\"details\":\"returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)\"},\"getLastToken0LiquidityDeployed(address)\":{\"params\":{\"liquidityProvider\":\"account that contributed liquidity\"},\"returns\":{\"lastDeployedAmount\":\"amount of token0 liquidity that was deployed by the liquidity provider during the last deployment\"}},\"getLastToken1AvailableLiquidity()\":{\"details\":\"returns the total amount of token1 that was available to be deployed\"},\"getLastToken1LiquidityDeployed(address)\":{\"params\":{\"liquidityProvider\":\"account that contributed liquidity\"},\"returns\":{\"lastDeployedAmount\":\"amount of token1 liquidity that was last deployed by the liquidity provider during the last deployment\"}},\"getMinConvertibleToken0Amount()\":{\"details\":\"Returns the minimum amount of token0 that can be converted to token1\"},\"getUniProxy()\":{\"returns\":{\"_0\":\"UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault, and returns LP tokens\"}}},\"stateVariables\":{\"lPTokensOwed\":{\"details\":\"Account => Amount\"},\"lastAvailableLiquidity\":{\"details\":\"Token => Amount\"},\"lastDeployedLiquidity\":{\"details\":\"Token => Account => Amount\"},\"lastTotalDeployedLiquidity\":{\"details\":\"Token => Amount\"},\"totalDeposits\":{\"details\":\"Token => Amount\"},\"userTokenBalance\":{\"details\":\"Account => Token => Balance\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deployLiquidity()\":{\"notice\":\"Looks at the current configuration and state of the contract, deploys the available liquidity to the Gamma Vault, and distributes the LP tokens to the depositors proportionally\"},\"depositToken0(uint256)\":{\"notice\":\"The caller must approve the contract to spend `amount` of token0\"},\"depositToken1(uint256)\":{\"notice\":\"The caller must approve the contract to spend `amount` of token1\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityDeployer.sol\":\"LiquidityDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/LiquidityDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/ILiquidityDeployer.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/IUniProxy.sol\\\";\\nimport \\\"./libraries/liquidity-deployer/LiquidityDeployerDataTypes.sol\\\";\\nimport \\\"./libraries/liquidity-deployer/LiquidityDeployerMath.sol\\\";\\nimport \\\"./libraries/GPv2SafeERC20.sol\\\";\\nimport \\\"./interfaces/liquidity-deployer/IHypervisor.sol\\\";\\n\\n/// @author Solid World\\ncontract LiquidityDeployer is ILiquidityDeployer, ReentrancyGuard {\\n    using GPv2SafeERC20 for IERC20;\\n\\n    LiquidityDeployerDataTypes.Config internal config;\\n    LiquidityDeployerDataTypes.Depositors internal depositors;\\n\\n    /// @dev Account => Token => Balance\\n    mapping(address => mapping(address => uint)) internal userTokenBalance;\\n\\n    /// @dev Token => Account => Amount\\n    mapping(address => mapping(address => uint)) internal lastDeployedLiquidity;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal lastTotalDeployedLiquidity;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal lastAvailableLiquidity;\\n    /// @dev Account => Amount\\n    mapping(address => uint) internal lPTokensOwed;\\n    /// @dev Token => Amount\\n    mapping(address => uint) internal totalDeposits;\\n\\n    modifier validTokenAmount(uint amount) {\\n        if (amount == 0) {\\n            revert InvalidInput();\\n        }\\n        _;\\n    }\\n\\n    modifier tokensMatch(\\n        address token0,\\n        address token1,\\n        address _gammaVault\\n    ) {\\n        IHypervisor gammaVault = IHypervisor(_gammaVault);\\n\\n        if (token0 != gammaVault.token0() || token1 != gammaVault.token1()) {\\n            revert TokensMismatch();\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address token0,\\n        address token1,\\n        address gammaVault,\\n        address uniProxy,\\n        uint conversionRate,\\n        uint8 conversionRateDecimals\\n    ) tokensMatch(token0, token1, gammaVault) {\\n        config.token0 = token0;\\n        config.token1 = token1;\\n        config.gammaVault = gammaVault;\\n        config.uniProxy = uniProxy;\\n        config.conversionRate = conversionRate;\\n        config.conversionRateDecimals = conversionRateDecimals;\\n        config.token0Decimals = IERC20Metadata(token0).decimals();\\n        config.token1Decimals = IERC20Metadata(token1).decimals();\\n        config.minConvertibleToken0Amount = LiquidityDeployerMath.minConvertibleToken0Amount(\\n            config.token0Decimals,\\n            config.token1Decimals,\\n            conversionRate,\\n            conversionRateDecimals\\n        );\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function depositToken0(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _depositToken(config.token0, amount);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function depositToken1(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _depositToken(config.token1, amount);\\n    }\\n\\n    function withdrawToken0(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _withdrawToken(config.token0, amount);\\n    }\\n\\n    function withdrawToken1(uint amount) external nonReentrant validTokenAmount(amount) {\\n        _withdrawToken(config.token1, amount);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function deployLiquidity() external nonReentrant {\\n        (\\n            lastAvailableLiquidity[config.token0],\\n            lastAvailableLiquidity[config.token1]\\n        ) = _computeAvailableLiquidity();\\n\\n        (\\n            lastTotalDeployedLiquidity[config.token0],\\n            lastTotalDeployedLiquidity[config.token1]\\n        ) = _prepareDeployableLiquidity();\\n\\n        _allowUniProxyToSpendDeployableLiquidity();\\n        uint lpTokens = _depositToUniProxy();\\n\\n        _prepareLPTokensOwed(lpTokens);\\n\\n        emit LiquidityDeployed(\\n            lastTotalDeployedLiquidity[config.token0],\\n            lastTotalDeployedLiquidity[config.token1],\\n            lpTokens\\n        );\\n    }\\n\\n    function withdrawLpTokens() external nonReentrant {\\n        _withdrawLpTokens(lPTokensOwed[msg.sender]);\\n    }\\n\\n    function withdrawLpTokens(uint amount) external nonReentrant {\\n        _withdrawLpTokens(amount);\\n    }\\n\\n    function getToken0() external view returns (address) {\\n        return config.token0;\\n    }\\n\\n    function getToken1() external view returns (address) {\\n        return config.token1;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getGammaVault() external view returns (address) {\\n        return config.gammaVault;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getUniProxy() external view returns (address) {\\n        return address(config.uniProxy);\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getConversionRate() external view returns (uint) {\\n        return config.conversionRate;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getConversionRateDecimals() external view returns (uint8) {\\n        return config.conversionRateDecimals;\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getMinConvertibleToken0Amount() external view returns (uint) {\\n        return config.minConvertibleToken0Amount;\\n    }\\n\\n    function token0BalanceOf(address account) external view returns (uint) {\\n        return userTokenBalance[account][config.token0];\\n    }\\n\\n    function token1BalanceOf(address account) external view returns (uint) {\\n        return userTokenBalance[account][config.token1];\\n    }\\n\\n    function getTotalDeposits() external view returns (uint token0Amount, uint token1Amount) {\\n        token0Amount = totalDeposits[config.token0];\\n        token1Amount = totalDeposits[config.token1];\\n    }\\n\\n    function getTokenDepositors() external view returns (address[] memory tokenDepositors) {\\n        tokenDepositors = new address[](depositors.tokenDepositors.length);\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            tokenDepositors[i] = depositors.tokenDepositors[i];\\n        }\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken0AvailableLiquidity() external view returns (uint) {\\n        return lastAvailableLiquidity[config.token0];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken1AvailableLiquidity() external view returns (uint) {\\n        return lastAvailableLiquidity[config.token1];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken0LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount)\\n    {\\n        lastDeployedAmount = lastDeployedLiquidity[config.token0][liquidityProvider];\\n    }\\n\\n    /// @inheritdoc ILiquidityDeployer\\n    function getLastToken1LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount)\\n    {\\n        lastDeployedAmount = lastDeployedLiquidity[config.token1][liquidityProvider];\\n    }\\n\\n    function getLastTotalDeployedLiquidity() external view returns (uint, uint) {\\n        return (lastTotalDeployedLiquidity[config.token0], lastTotalDeployedLiquidity[config.token1]);\\n    }\\n\\n    function getLPTokensOwed(address liquidityProvider) external view returns (uint) {\\n        return lPTokensOwed[liquidityProvider];\\n    }\\n\\n    function _computeAvailableLiquidity()\\n        internal\\n        view\\n        returns (uint token0AvailableLiquidity, uint token1AvailableLiquidity)\\n    {\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address depositor = depositors.tokenDepositors[i];\\n            uint token0Balance = userTokenBalance[depositor][config.token0];\\n            uint token1Balance = userTokenBalance[depositor][config.token1];\\n\\n            if (token0Balance >= config.minConvertibleToken0Amount) {\\n                token0AvailableLiquidity += token0Balance;\\n            }\\n            if (token1Balance > 0) {\\n                token1AvailableLiquidity += token1Balance;\\n            }\\n        }\\n    }\\n\\n    function _prepareDeployableLiquidity()\\n        internal\\n        returns (uint token0TotalDeployableLiquidity, uint token1TotalDeployableLiquidity)\\n    {\\n        uint lastAvailableLiquidityToken0ValueInToken1 = _convertToken0ToToken1(\\n            lastAvailableLiquidity[config.token0]\\n        );\\n        if (lastAvailableLiquidityToken0ValueInToken1 == 0 || lastAvailableLiquidity[config.token1] == 0) {\\n            revert NotEnoughAvailableLiquidity(\\n                lastAvailableLiquidity[config.token0],\\n                lastAvailableLiquidity[config.token1]\\n            );\\n        }\\n\\n        if (lastAvailableLiquidityToken0ValueInToken1 > lastAvailableLiquidity[config.token1]) {\\n            LiquidityDeployerDataTypes.Fraction memory adjustmentFactor = LiquidityDeployerDataTypes.Fraction(\\n                lastAvailableLiquidity[config.token1],\\n                lastAvailableLiquidityToken0ValueInToken1\\n            );\\n            (token0TotalDeployableLiquidity, token1TotalDeployableLiquidity) = _prepareDeployableLiquidity(\\n                adjustmentFactor,\\n                LiquidityDeployerMath.neutralFraction()\\n            );\\n        } else {\\n            LiquidityDeployerDataTypes.Fraction memory adjustmentFactor = LiquidityDeployerDataTypes.Fraction(\\n                lastAvailableLiquidityToken0ValueInToken1,\\n                lastAvailableLiquidity[config.token1]\\n            );\\n            (token0TotalDeployableLiquidity, token1TotalDeployableLiquidity) = _prepareDeployableLiquidity(\\n                LiquidityDeployerMath.neutralFraction(),\\n                adjustmentFactor\\n            );\\n        }\\n    }\\n\\n    function _prepareDeployableLiquidity(\\n        LiquidityDeployerDataTypes.Fraction memory token0AdjustmentFactor,\\n        LiquidityDeployerDataTypes.Fraction memory token1AdjustmentFactor\\n    ) internal returns (uint token0TotalDeployableLiquidity, uint token1TotalDeployableLiquidity) {\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address tokenDepositor = depositors.tokenDepositors[i];\\n            uint token0DeployableLiquidity = _computeDeployableLiquidity(\\n                config.token0,\\n                tokenDepositor,\\n                token0AdjustmentFactor\\n            );\\n            token0DeployableLiquidity = token0DeployableLiquidity < config.minConvertibleToken0Amount\\n                ? 0\\n                : token0DeployableLiquidity;\\n            lastDeployedLiquidity[config.token0][tokenDepositor] = token0DeployableLiquidity;\\n            if (token0DeployableLiquidity > 0) {\\n                userTokenBalance[tokenDepositor][config.token0] -= token0DeployableLiquidity;\\n                totalDeposits[config.token0] -= token0DeployableLiquidity;\\n                token0TotalDeployableLiquidity += token0DeployableLiquidity;\\n            }\\n\\n            uint token1DeployableLiquidity = _computeDeployableLiquidity(\\n                config.token1,\\n                tokenDepositor,\\n                token1AdjustmentFactor\\n            );\\n            lastDeployedLiquidity[config.token1][tokenDepositor] = token1DeployableLiquidity;\\n            if (token1DeployableLiquidity > 0) {\\n                userTokenBalance[tokenDepositor][config.token1] -= token1DeployableLiquidity;\\n                totalDeposits[config.token1] -= token1DeployableLiquidity;\\n                token1TotalDeployableLiquidity += token1DeployableLiquidity;\\n            }\\n        }\\n    }\\n\\n    function _computeDeployableLiquidity(\\n        address token,\\n        address depositor,\\n        LiquidityDeployerDataTypes.Fraction memory adjustmentFactor\\n    ) internal view returns (uint) {\\n        uint tokenDepositorBalance = userTokenBalance[depositor][token];\\n\\n        if (tokenDepositorBalance == 0) {\\n            return 0;\\n        }\\n\\n        return LiquidityDeployerMath.adjustTokenAmount(tokenDepositorBalance, adjustmentFactor);\\n    }\\n\\n    function _depositToken(address token, uint amount) internal {\\n        userTokenBalance[msg.sender][token] += amount;\\n        totalDeposits[token] += amount;\\n\\n        if (!depositors.isDepositor[msg.sender]) {\\n            depositors.isDepositor[msg.sender] = true;\\n            depositors.tokenDepositors.push(msg.sender);\\n        }\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit TokenDeposited(token, msg.sender, amount);\\n    }\\n\\n    function _withdrawToken(address token, uint amount) internal {\\n        if (userTokenBalance[msg.sender][token] < amount) {\\n            revert InsufficientTokenBalance(token, msg.sender, userTokenBalance[msg.sender][token], amount);\\n        }\\n\\n        userTokenBalance[msg.sender][token] -= amount;\\n        totalDeposits[token] -= amount;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit TokenWithdrawn(token, msg.sender, amount);\\n    }\\n\\n    function _withdrawLpTokens(uint amount) internal validTokenAmount(amount) {\\n        if (amount > lPTokensOwed[msg.sender]) {\\n            revert InsufficientLpTokenBalance(msg.sender, lPTokensOwed[msg.sender], amount);\\n        }\\n\\n        lPTokensOwed[msg.sender] -= amount;\\n        IERC20(config.gammaVault).safeTransfer(msg.sender, amount);\\n\\n        emit LpTokenWithdrawn(msg.sender, amount);\\n    }\\n\\n    function _allowUniProxyToSpendDeployableLiquidity() internal {\\n        IERC20(config.token0).approve(config.uniProxy, lastTotalDeployedLiquidity[config.token0]);\\n        IERC20(config.token1).approve(config.uniProxy, lastTotalDeployedLiquidity[config.token1]);\\n    }\\n\\n    function _depositToUniProxy() internal returns (uint lpTokens) {\\n        return\\n            IUniProxy(config.uniProxy).deposit(\\n                lastTotalDeployedLiquidity[config.token0],\\n                lastTotalDeployedLiquidity[config.token1],\\n                address(this),\\n                config.gammaVault,\\n                _uniProxyMinIn()\\n            );\\n    }\\n\\n    function _prepareLPTokensOwed(uint lpTokens) internal {\\n        uint remainingLpTokens = lpTokens;\\n        uint totalLiquidityInToken1 = _totalToken0DeployedLiquidityInToken1() +\\n            lastTotalDeployedLiquidity[config.token1];\\n\\n        for (uint i; i < depositors.tokenDepositors.length; i++) {\\n            address tokenDepositor = depositors.tokenDepositors[i];\\n            uint totalLiquidityInToken1ForDepositor = _totalDeployableLiquidityInToken1ForDepositor(\\n                tokenDepositor\\n            );\\n\\n            if (totalLiquidityInToken1ForDepositor == 0) {\\n                continue;\\n            }\\n\\n            uint lpTokensOwed = Math.mulDiv(\\n                lpTokens,\\n                totalLiquidityInToken1ForDepositor,\\n                totalLiquidityInToken1\\n            );\\n\\n            lPTokensOwed[tokenDepositor] += lpTokensOwed;\\n            remainingLpTokens -= lpTokensOwed;\\n        }\\n\\n        if (remainingLpTokens > 0) {\\n            // distribute dust to first depositor\\n            lPTokensOwed[depositors.tokenDepositors[0]] += remainingLpTokens;\\n        }\\n    }\\n\\n    function _totalDeployableLiquidityInToken1ForDepositor(address depositor) internal view returns (uint) {\\n        uint token0DeployableLiquidity = lastDeployedLiquidity[config.token0][depositor];\\n        uint token1DeployableLiquidity = lastDeployedLiquidity[config.token1][depositor];\\n        uint token0DeployableLiquidityInToken1 = _convertToken0ToToken1(token0DeployableLiquidity);\\n\\n        return token0DeployableLiquidityInToken1 + token1DeployableLiquidity;\\n    }\\n\\n    function _totalToken0DeployedLiquidityInToken1() internal view returns (uint) {\\n        return _convertToken0ToToken1(lastTotalDeployedLiquidity[config.token0]);\\n    }\\n\\n    function _convertToken0ToToken1(uint token0Amount) internal view returns (uint) {\\n        if (token0Amount < config.minConvertibleToken0Amount) {\\n            return 0;\\n        }\\n\\n        return\\n            LiquidityDeployerMath.convertTokenValue(\\n                config.token0Decimals,\\n                config.token1Decimals,\\n                config.conversionRate,\\n                config.conversionRateDecimals,\\n                token0Amount\\n            );\\n    }\\n\\n    function _uniProxyMinIn() internal pure returns (uint[4] memory) {\\n        return [uint(0), uint(0), uint(0), uint(0)];\\n    }\\n}\\n\",\"keccak256\":\"0xef34fa2c2535c7f2cc3cac2e8d6963bfa54dff2b4e47348a287ec8cd08cd5b14\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IHypervisor {\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6454038f34548d95621cbd4e172665b5a86b7acda720aaf0f19158f5d1a969fb\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/ILiquidityDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Solid World\\ninterface ILiquidityDeployer {\\n    error InvalidInput();\\n    error TokensMismatch();\\n    error InsufficientTokenBalance(address token, address account, uint balance, uint withdrawAmount);\\n    error NotEnoughAvailableLiquidity(uint token0Liquidity, uint token1Liquidity);\\n    error InsufficientLpTokenBalance(address account, uint balance, uint withdrawAmount);\\n\\n    event TokenDeposited(address indexed token, address indexed depositor, uint indexed amount);\\n    event TokenWithdrawn(address indexed token, address indexed withdrawer, uint indexed amount);\\n    event LpTokenWithdrawn(address indexed withdrawer, uint indexed amount);\\n    event LiquidityDeployed(\\n        uint indexed token0DeployedAmount,\\n        uint indexed token1DeployedAmount,\\n        uint indexed lpTokensReceived\\n    );\\n\\n    /// @notice The caller must approve the contract to spend `amount` of token0\\n    function depositToken0(uint amount) external;\\n\\n    /// @notice The caller must approve the contract to spend `amount` of token1\\n    function depositToken1(uint amount) external;\\n\\n    function withdrawToken0(uint amount) external;\\n\\n    function withdrawToken1(uint amount) external;\\n\\n    /// @notice Looks at the current configuration and state of the contract, deploys\\n    /// the available liquidity to the Gamma Vault, and distributes the LP tokens to\\n    /// the depositors proportionally\\n    function deployLiquidity() external;\\n\\n    function withdrawLpTokens(uint amount) external;\\n\\n    function withdrawLpTokens() external;\\n\\n    function getToken0() external view returns (address);\\n\\n    function getToken1() external view returns (address);\\n\\n    /// @return Gamma Vault address the UniProxy contract will deposit tokens to\\n    function getGammaVault() external view returns (address);\\n\\n    /// @return UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault,\\n    /// and returns LP tokens\\n    function getUniProxy() external view returns (address);\\n\\n    /// @return 1 token0 = ? token1\\n    function getConversionRate() external view returns (uint);\\n\\n    /// @return Number of decimals of the conversion rate\\n    /// e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6\\n    function getConversionRateDecimals() external view returns (uint8);\\n\\n    /// @dev Returns the minimum amount of token0 that can be converted to token1\\n    function getMinConvertibleToken0Amount() external view returns (uint);\\n\\n    function token0BalanceOf(address account) external view returns (uint);\\n\\n    function token1BalanceOf(address account) external view returns (uint);\\n\\n    function getTotalDeposits() external view returns (uint token0Amount, uint token1Amount);\\n\\n    function getTokenDepositors() external view returns (address[] memory);\\n\\n    /// @dev returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)\\n    function getLastToken0AvailableLiquidity() external view returns (uint);\\n\\n    /// @dev returns the total amount of token1 that was available to be deployed\\n    function getLastToken1AvailableLiquidity() external view returns (uint);\\n\\n    /// @param liquidityProvider account that contributed liquidity\\n    /// @return lastDeployedAmount amount of token0 liquidity that was\\n    /// deployed by the liquidity provider during the last deployment\\n    function getLastToken0LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount);\\n\\n    /// @param liquidityProvider account that contributed liquidity\\n    /// @return lastDeployedAmount amount of token1 liquidity that was\\n    /// last deployed by the liquidity provider during the last deployment\\n    function getLastToken1LiquidityDeployed(address liquidityProvider)\\n        external\\n        view\\n        returns (uint lastDeployedAmount);\\n\\n    function getLastTotalDeployedLiquidity() external view returns (uint, uint);\\n\\n    function getLPTokensOwed(address liquidityProvider) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc91f3dd1e44ec5fdeccda0e6f6fede0ef85b04e60c06a751640dafacf6afae6a\",\"license\":\"MIT\"},\"contracts/interfaces/liquidity-deployer/IUniProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\n/// @author Gamma Strategies\\ninterface IUniProxy {\\n    /// @notice Deposit into the given position\\n    /// @param deposit0 Amount of token0 to deposit\\n    /// @param deposit1 Amount of token1 to deposit\\n    /// @param to Address to receive liquidity tokens\\n    /// @param pos Hypervisor Address\\n    /// @param minIn Minimum amount of tokens that should be paid\\n    /// @return shares Amount of liquidity tokens received\\n    function deposit(\\n        uint deposit0,\\n        uint deposit1,\\n        address to,\\n        address pos,\\n        uint[4] memory minIn\\n    ) external returns (uint shares);\\n}\\n\",\"keccak256\":\"0x3465a156581152598e67c1ce1cfdf431d2703c893c34d08c0cbef280942891f2\",\"license\":\"MIT\"},\"contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x76a64a698224ac465712446431e6ad26cbe8e2bff8e2d09400f546ba5a667280\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/libraries/liquidity-deployer/LiquidityDeployerDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.16;\\n\\nlibrary LiquidityDeployerDataTypes {\\n    struct Config {\\n        address token0;\\n        address token1;\\n        address gammaVault;\\n        address uniProxy;\\n        uint conversionRate;\\n        uint minConvertibleToken0Amount;\\n        uint8 conversionRateDecimals;\\n        uint8 token0Decimals;\\n        uint8 token1Decimals;\\n    }\\n\\n    struct Depositors {\\n        address[] tokenDepositors;\\n        /// @dev Depositor => IsDepositor\\n        mapping(address => bool) isDepositor;\\n    }\\n\\n    /// @dev used to adjust deployable liquidity to maintain proportionality\\n    struct Fraction {\\n        uint numerator;\\n        uint denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x1f392d2ed1322be9d23f159407e63cd269342e92f83edd047d8161fdc1f4a59a\",\"license\":\"UNLICENSED\"},\"contracts/libraries/liquidity-deployer/LiquidityDeployerMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./LiquidityDeployerDataTypes.sol\\\";\\n\\n/// @author Solid World\\nlibrary LiquidityDeployerMath {\\n    error InvalidFraction(uint numerator, uint denominator);\\n\\n    function convertTokenValue(\\n        uint currentDecimals,\\n        uint newDecimals,\\n        uint conversionRate,\\n        uint conversionRateDecimals,\\n        uint tokenAmount\\n    ) internal pure returns (uint tokenConverted) {\\n        if (tokenAmount == 0) {\\n            return 0;\\n        }\\n\\n        tokenConverted = Math.mulDiv(\\n            tokenAmount,\\n            10**newDecimals * conversionRate,\\n            10**(currentDecimals + conversionRateDecimals)\\n        );\\n    }\\n\\n    /// @dev Returns the minimum amount of token0 that can be converted to token1\\n    function minConvertibleToken0Amount(\\n        uint currentDecimals,\\n        uint newDecimals,\\n        uint conversionRate,\\n        uint conversionRateDecimals\\n    ) internal pure returns (uint) {\\n        return\\n            1 +\\n            Math.mulDiv(1, 10**(currentDecimals + conversionRateDecimals), 10**newDecimals * conversionRate);\\n    }\\n\\n    function neutralFraction() internal pure returns (LiquidityDeployerDataTypes.Fraction memory) {\\n        return LiquidityDeployerDataTypes.Fraction(1, 1);\\n    }\\n\\n    function adjustTokenAmount(uint amount, LiquidityDeployerDataTypes.Fraction memory adjustmentFactor)\\n        internal\\n        pure\\n        returns (uint)\\n    {\\n        if (adjustmentFactor.denominator == 0) {\\n            revert InvalidFraction(adjustmentFactor.numerator, adjustmentFactor.denominator);\\n        }\\n\\n        if (_isNeutralFraction(adjustmentFactor)) {\\n            return amount;\\n        }\\n\\n        return Math.mulDiv(amount, adjustmentFactor.numerator, adjustmentFactor.denominator);\\n    }\\n\\n    function _isNeutralFraction(LiquidityDeployerDataTypes.Fraction memory adjustmentFactor)\\n        private\\n        pure\\n        returns (bool)\\n    {\\n        return adjustmentFactor.numerator == adjustmentFactor.denominator;\\n    }\\n}\\n\",\"keccak256\":\"0x75534bb3d81911e6692754bb6516a7958aee367da096ac706409dd2fc075fb97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200260e3803806200260e833981016040819052620000349162000444565b60016000819055508585856000819050806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000083573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a99190620004bc565b6001600160a01b0316846001600160a01b0316141580620001405750806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000104573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012a9190620004bc565b6001600160a01b0316836001600160a01b031614155b156200015f57604051637aa1a10560e01b815260040160405180910390fd5b600180546001600160a01b03199081166001600160a01b038d81169182179093556002805483168d85161790556003805483168c851617905560048054909216928a1692909217815560058890556007805460ff191660ff89161790556040805163313ce56760e01b8152905163313ce567928281019260209291908290030181865afa158015620001f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200021b9190620004da565b600160060160016101000a81548160ff021916908360ff160217905550886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d9190620004da565b6007805462ff000019166201000060ff93841681029190911791829055620002e49261010083048116929190910481169089908916620002f8602090811b62000ac417901c565b600655506200066d98505050505050505050565b60006200034460016200030c84886200050e565b6200031990600a62000627565b856200032788600a62000627565b62000333919062000635565b6200035a60201b62000b0f1760201c565b620003519060016200050e565b95945050505050565b600080806000198587098587029250828110838203039150508060000362000399578382816200038e576200038e62000657565b04925050506200040e565b808411620003a657600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b80516001600160a01b03811681146200042d57600080fd5b919050565b805160ff811681146200042d57600080fd5b60008060008060008060c087890312156200045e57600080fd5b620004698762000415565b9550620004796020880162000415565b9450620004896040880162000415565b9350620004996060880162000415565b925060808701519150620004b060a0880162000432565b90509295509295509295565b600060208284031215620004cf57600080fd5b6200040e8262000415565b600060208284031215620004ed57600080fd5b6200040e8262000432565b634e487b7160e01b600052601160045260246000fd5b80820180821115620005245762000524620004f8565b92915050565b600181815b808511156200056b5781600019048211156200054f576200054f620004f8565b808516156200055d57918102915b93841c93908002906200052f565b509250929050565b600082620005845750600162000524565b81620005935750600062000524565b8160018114620005ac5760028114620005b757620005d7565b600191505062000524565b60ff841115620005cb57620005cb620004f8565b50506001821b62000524565b5060208310610133831016604e8410600b8410161715620005fc575081810a62000524565b6200060883836200052a565b80600019048211156200061f576200061f620004f8565b029392505050565b60006200040e838362000573565b6000816000190483118215151615620006525762000652620004f8565b500290565b634e487b7160e01b600052601260045260246000fd5b611f91806200067d6000396000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806371210a0d116100e3578063a9be89441161008c578063e68c471311610066578063e68c47131461042a578063f3143f8a14610432578063f36089ec1461046f57600080fd5b8063a9be8944146103ca578063ba94a315146103df578063c5acb690146103f057600080fd5b80638eae2d22116100bd5780638eae2d2214610384578063971e3c43146103a4578063a5c0fd05146103b757600080fd5b806371210a0d146103235780637fb9e9121461033657806384c5a67a1461037357600080fd5b80633bd7a701116101455780635d71ebf21161011f5780635d71ebf2146102dc57806367e3d15b146102e45780636f26a7101461031257600080fd5b80633bd7a7011461029a5780634086bf89146102af57806344276f1e146102b757600080fd5b8063168a482211610176578063168a48221461020157806320b3cac2146102405780632fb05b651461026057600080fd5b806305bba6bd1461019d578063080a415d146101b257806311e8416c146101ee575b600080fd5b6101b06101ab366004611bbb565b610477565b005b6101db6101c0366004611bd4565b6001600160a01b03166000908152600e602052604090205490565b6040519081526020015b60405180910390f35b6101b06101fc366004611bbb565b6104fe565b6001546001600160a01b039081166000908152600f60205260408082205460025490931682529020545b604080519283526020830191909152016101e5565b6002546001600160a01b03166000908152600d60205260409020546101db565b6101db61026e366004611bd4565b6001600160a01b039081166000908152600a602090815260408083206002549094168352929052205490565b60075460405160ff90911681526020016101e5565b6101b06105cc565b6004546001600160a01b03165b6040516001600160a01b0390911681526020016101e5565b6101b061071c565b6001546001600160a01b039081166000908152600c602052604080822054600254909316825290205461022b565b6002546001600160a01b03166102c4565b6101b0610331366004611bbb565b6107ac565b6101db610344366004611bd4565b6002546001600160a01b039081166000908152600b602090815260408083209490931682529290925290205490565b6003546001600160a01b03166102c4565b6001546001600160a01b03166000908152600d60205260409020546101db565b6101b06103b2366004611bbb565b610871565b6101b06103c5366004611bbb565b610936565b6103d26109fb565b6040516101e59190611bfd565b6001546001600160a01b03166102c4565b6101db6103fe366004611bd4565b6001600160a01b039081166000908152600a602090815260408083206001549094168352929052205490565b6006546101db565b6101db610440366004611bd4565b6001546001600160a01b039081166000908152600b602090815260408083209490931682529290925290205490565b6005546101db565b6002600054036104e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556104f681610be2565b506001600055565b60026000540361056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b600260008190555080806000036105ad576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546105c3906001600160a01b031683610cf3565b50506001600055565b600260005403610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b6002600055610645610e43565b6001546001600160a01b039081166000908152600d6020526040808220600254909316825290209190915555610679610ef4565b6001546001600160a01b039081166000908152600c60205260408082206002549093168252902091909155556106ad61109f565b60006106b76111ed565b90506106c28161129a565b6002546001600160a01b039081166000908152600c60205260408082205460015490931682528082205490518493927f27ef04f3eee6365ec57cc96b0ca6c817697868d1f05670199c789ca05b26979291a4506001600055565b600260005403610788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b60026000908155338152600e60205260409020546107a590610be2565b6001600055565b600260005403610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b6002600081905550808060000361085b576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546105c3906001600160a01b0316836113e5565b6002600054036108dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b60026000819055508080600003610920576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546105c3906001600160a01b0316836113e5565b6002600054036109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b600260008190555080806000036109e5576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546105c3906001600160a01b031683610cf3565b60085460609067ffffffffffffffff811115610a1957610a19611c4a565b604051908082528060200260200182016040528015610a42578160200160208202803683370190505b50905060005b600854811015610ac0576008805482908110610a6657610a66611c79565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610a9657610a96611c79565b6001600160a01b039092166020928302919091019091015280610ab881611cd7565b915050610a48565b5090565b6000610afb6001610ad58488611d0f565b610ae090600a611e3a565b85610aec88600a611e3a565b610af69190611e46565b610b0f565b610b06906001611d0f565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003610b6757838281610b5d57610b5d611e83565b0492505050610bdb565b808411610b7357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b8080600003610c1d576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600e6020526040902054821115610c8757336000818152600e6020526040908190205490517f1a8470c700000000000000000000000000000000000000000000000000000000815260048101929092526024820152604481018390526064016104df565b336000908152600e602052604081208054849290610ca6908490611eb2565b9091555050600354610cc2906001600160a01b03163384611545565b604051829033907f0b68af39d2b2f165a1280cac62c3a28685e96801c9a077e2b13bad6a31f1d44290600090a35050565b336000908152600a602090815260408083206001600160a01b0386168452909152902054811115610d8d57336000818152600a602090815260408083206001600160a01b0387168085529252918290205491517fe4bc5068000000000000000000000000000000000000000000000000000000008152600481019190915260248101929092526044820152606481018290526084016104df565b336000908152600a602090815260408083206001600160a01b038616845290915281208054839290610dc0908490611eb2565b90915550506001600160a01b0382166000908152600f602052604081208054839290610ded908490611eb2565b90915550610e0790506001600160a01b0383163383611545565b604051819033906001600160a01b038516907f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562090600090a45050565b60008060005b600854811015610eef57600060086000018281548110610e6b57610e6b611c79565b6000918252602080832091909101546001600160a01b03908116808452600a83526040808520600154841686529093528284205460025490921684529190922054600654919350908210610ec657610ec38287611d0f565b95505b8015610ed957610ed68186611d0f565b94505b5050508080610ee790611cd7565b915050610e49565b509091565b6001546001600160a01b03166000908152600d602052604081205481908190610f1c90611611565b9050801580610f4357506002546001600160a01b03166000908152600d6020526040902054155b15610fad576001546001600160a01b039081166000908152600d6020526040808220546002549093168252908190205490517f931eb8e0000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016104df565b6002546001600160a01b03166000908152600d602052604090205481111561103c576040805180820182526002546001600160a01b03166000908152600d60209081529290205481529081018290526110308161102b6040805180820182526000808252602091820152815180830190925260018083529082015290565b611652565b9094509250610eef9050565b6040805180820182528281526002546001600160a01b03166000908152600d60209081528382205481840152835180850185528281528101919091528251808401909352600180845290830152906110949082611652565b909450925050509091565b600154600480546001600160a01b039283166000818152600c6020526040908190205490517f095ea7b3000000000000000000000000000000000000000000000000000000008152949092169284019290925260248301529063095ea7b3906044016020604051808303816000875af1158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190611ec5565b50600254600480546001600160a01b039283166000818152600c6020526040908190205490517f095ea7b3000000000000000000000000000000000000000000000000000000008152949092169284019290925260248301529063095ea7b3906044016020604051808303816000875af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190611ec5565b50565b6004546001546001600160a01b039081166000908152600c60205260408082205460025484168352908220546003549294841693638e3c92e49330911661123261184c565b6040518663ffffffff1660e01b8152600401611252959493929190611ee7565b6020604051808303816000875af1158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190611f42565b905090565b6002546001600160a01b03166000908152600c60205260408120548291906112c061187e565b6112ca9190611d0f565b905060005b600854811015611383576000600860000182815481106112f1576112f1611c79565b60009182526020822001546001600160a01b03169150611310826118a2565b905080600003611321575050611371565b600061132e878387610b0f565b6001600160a01b0384166000908152600e602052604081208054929350839290919061135b908490611d0f565b9091555061136b90508187611eb2565b95505050505b8061137b81611cd7565b9150506112cf565b5081156113e05781600e600060086000016000815481106113a6576113a6611c79565b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906113da908490611d0f565b90915550505b505050565b336000908152600a602090815260408083206001600160a01b038616845290915281208054839290611418908490611d0f565b90915550506001600160a01b0382166000908152600f602052604081208054839290611445908490611d0f565b90915550503360009081526009602052604090205460ff166114f45733600081815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556008805491820181559091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b6115096001600160a01b0383163330846118fe565b604051819033906001600160a01b038516907ff1444b5cad7ce70cb018d1b8edc8618fe303f3c7f034d8d572a6e27facbf2bef90600090a45050565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008082526001600160a01b0384166004830152602482018390529060008060448382895af161159b573d6000803e3d6000fd5b506115a5846119d3565b61160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e73666572000000000000000000000060448201526064016104df565b50505050565b60065460009082101561162657506000919050565b60075460055461164c9160ff610100820481169262010000830482169290911686611a9e565b92915050565b60008060005b6008548110156118445760006008600001828154811061167a5761167a611c79565b60009182526020822001546001546001600160a01b0391821693506116a191168389611ae9565b60065490915081106116b357806116b6565b60005b6001546001600160a01b039081166000908152600b6020908152604080832093871683529290522081905590508015611765576001600160a01b038083166000908152600a6020908152604080832060015490941683529290529081208054839290611723908490611eb2565b90915550506001546001600160a01b03166000908152600f602052604081208054839290611752908490611eb2565b9091555061176290508186611d0f565b94505b60025460009061177f906001600160a01b03168489611ae9565b6002546001600160a01b039081166000908152600b602090815260408083209388168352929052208190559050801561182e576001600160a01b038084166000908152600a60209081526040808320600254909416835292905290812080548392906117ec908490611eb2565b90915550506002546001600160a01b03166000908152600f60205260408120805483929061181b908490611eb2565b9091555061182b90508186611d0f565b94505b505050808061183c90611cd7565b915050611658565b509250929050565b611854611b9d565b60405180608001604052806000815260200160008152602001600081526020016000815250905090565b6001546001600160a01b03166000908152600c602052604081205461129590611611565b6001546001600160a01b039081166000908152600b60208181526040808420868616808652908352818520546002549096168552928252808420928452919052812054909190826118f283611611565b9050610b068282611d0f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af161195c573d6000803e3d6000fd5b50611966856119d3565b6119cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016104df565b5050505050565b6000611a12565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d8015611a515760208114611a8b57611a4c7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6119da565b611a98565b823b611a8257611a827f475076323a206e6f74206120636f6e747261637400000000000000000000000060146119da565b60019150611a98565b3d6000803e600051151591505b50919050565b600081600003611ab057506000610b06565b611adf8285611ac088600a611e3a565b611aca9190611e46565b611ad4868a611d0f565b610af690600a611e3a565b9695505050505050565b6001600160a01b038083166000908152600a60209081526040808320938716835292905290812054808203611b22576000915050610bdb565b610b06818460008160200151600003611b7757815160208301516040517f60c1ae39000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016104df565b6020820151825103611b8a57508161164c565b610bdb8383600001518460200151610b0f565b60405180608001604052806004906020820280368337509192915050565b600060208284031215611bcd57600080fd5b5035919050565b600060208284031215611be657600080fd5b81356001600160a01b0381168114610bdb57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611c3e5783516001600160a01b031683529284019291840191600101611c19565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d0857611d08611ca8565b5060010190565b8082018082111561164c5761164c611ca8565b600181815b8085111561184457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611d6157611d61611ca8565b80851615611d6e57918102915b93841c9390800290611d27565b600082611d8a5750600161164c565b81611d975750600061164c565b8160018114611dad5760028114611db757611dd3565b600191505061164c565b60ff841115611dc857611dc8611ca8565b50506001821b61164c565b5060208310610133831016604e8410600b8410161715611df6575081810a61164c565b611e008383611d22565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e3257611e32611ca8565b029392505050565b6000610bdb8383611d7b565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e7e57611e7e611ca8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8181038181111561164c5761164c611ca8565b600060208284031215611ed757600080fd5b81518015158114610bdb57600080fd5b85815260208082018690526001600160a01b03858116604084015284166060830152610100820190608083018460005b6004811015611f3457815183529183019190830190600101611f17565b505050509695505050505050565b600060208284031215611f5457600080fd5b505191905056fea2646970667358221220ea292a0029a444ae5b799ef3a7a7b01725ffb5a659e097557a9bce227871a5ee64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101985760003560e01c806371210a0d116100e3578063a9be89441161008c578063e68c471311610066578063e68c47131461042a578063f3143f8a14610432578063f36089ec1461046f57600080fd5b8063a9be8944146103ca578063ba94a315146103df578063c5acb690146103f057600080fd5b80638eae2d22116100bd5780638eae2d2214610384578063971e3c43146103a4578063a5c0fd05146103b757600080fd5b806371210a0d146103235780637fb9e9121461033657806384c5a67a1461037357600080fd5b80633bd7a701116101455780635d71ebf21161011f5780635d71ebf2146102dc57806367e3d15b146102e45780636f26a7101461031257600080fd5b80633bd7a7011461029a5780634086bf89146102af57806344276f1e146102b757600080fd5b8063168a482211610176578063168a48221461020157806320b3cac2146102405780632fb05b651461026057600080fd5b806305bba6bd1461019d578063080a415d146101b257806311e8416c146101ee575b600080fd5b6101b06101ab366004611bbb565b610477565b005b6101db6101c0366004611bd4565b6001600160a01b03166000908152600e602052604090205490565b6040519081526020015b60405180910390f35b6101b06101fc366004611bbb565b6104fe565b6001546001600160a01b039081166000908152600f60205260408082205460025490931682529020545b604080519283526020830191909152016101e5565b6002546001600160a01b03166000908152600d60205260409020546101db565b6101db61026e366004611bd4565b6001600160a01b039081166000908152600a602090815260408083206002549094168352929052205490565b60075460405160ff90911681526020016101e5565b6101b06105cc565b6004546001600160a01b03165b6040516001600160a01b0390911681526020016101e5565b6101b061071c565b6001546001600160a01b039081166000908152600c602052604080822054600254909316825290205461022b565b6002546001600160a01b03166102c4565b6101b0610331366004611bbb565b6107ac565b6101db610344366004611bd4565b6002546001600160a01b039081166000908152600b602090815260408083209490931682529290925290205490565b6003546001600160a01b03166102c4565b6001546001600160a01b03166000908152600d60205260409020546101db565b6101b06103b2366004611bbb565b610871565b6101b06103c5366004611bbb565b610936565b6103d26109fb565b6040516101e59190611bfd565b6001546001600160a01b03166102c4565b6101db6103fe366004611bd4565b6001600160a01b039081166000908152600a602090815260408083206001549094168352929052205490565b6006546101db565b6101db610440366004611bd4565b6001546001600160a01b039081166000908152600b602090815260408083209490931682529290925290205490565b6005546101db565b6002600054036104e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000556104f681610be2565b506001600055565b60026000540361056a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b600260008190555080806000036105ad576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546105c3906001600160a01b031683610cf3565b50506001600055565b600260005403610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b6002600055610645610e43565b6001546001600160a01b039081166000908152600d6020526040808220600254909316825290209190915555610679610ef4565b6001546001600160a01b039081166000908152600c60205260408082206002549093168252902091909155556106ad61109f565b60006106b76111ed565b90506106c28161129a565b6002546001600160a01b039081166000908152600c60205260408082205460015490931682528082205490518493927f27ef04f3eee6365ec57cc96b0ca6c817697868d1f05670199c789ca05b26979291a4506001600055565b600260005403610788576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b60026000908155338152600e60205260409020546107a590610be2565b6001600055565b600260005403610818576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b6002600081905550808060000361085b576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546105c3906001600160a01b0316836113e5565b6002600054036108dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b60026000819055508080600003610920576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001546105c3906001600160a01b0316836113e5565b6002600054036109a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104df565b600260008190555080806000036109e5576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002546105c3906001600160a01b031683610cf3565b60085460609067ffffffffffffffff811115610a1957610a19611c4a565b604051908082528060200260200182016040528015610a42578160200160208202803683370190505b50905060005b600854811015610ac0576008805482908110610a6657610a66611c79565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610a9657610a96611c79565b6001600160a01b039092166020928302919091019091015280610ab881611cd7565b915050610a48565b5090565b6000610afb6001610ad58488611d0f565b610ae090600a611e3a565b85610aec88600a611e3a565b610af69190611e46565b610b0f565b610b06906001611d0f565b95945050505050565b600080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85870985870292508281108382030391505080600003610b6757838281610b5d57610b5d611e83565b0492505050610bdb565b808411610b7357600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b8080600003610c1d576040517fb4fa3fb300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600e6020526040902054821115610c8757336000818152600e6020526040908190205490517f1a8470c700000000000000000000000000000000000000000000000000000000815260048101929092526024820152604481018390526064016104df565b336000908152600e602052604081208054849290610ca6908490611eb2565b9091555050600354610cc2906001600160a01b03163384611545565b604051829033907f0b68af39d2b2f165a1280cac62c3a28685e96801c9a077e2b13bad6a31f1d44290600090a35050565b336000908152600a602090815260408083206001600160a01b0386168452909152902054811115610d8d57336000818152600a602090815260408083206001600160a01b0387168085529252918290205491517fe4bc5068000000000000000000000000000000000000000000000000000000008152600481019190915260248101929092526044820152606481018290526084016104df565b336000908152600a602090815260408083206001600160a01b038616845290915281208054839290610dc0908490611eb2565b90915550506001600160a01b0382166000908152600f602052604081208054839290610ded908490611eb2565b90915550610e0790506001600160a01b0383163383611545565b604051819033906001600160a01b038516907f8210728e7c071f615b840ee026032693858fbcd5e5359e67e438c890f59e562090600090a45050565b60008060005b600854811015610eef57600060086000018281548110610e6b57610e6b611c79565b6000918252602080832091909101546001600160a01b03908116808452600a83526040808520600154841686529093528284205460025490921684529190922054600654919350908210610ec657610ec38287611d0f565b95505b8015610ed957610ed68186611d0f565b94505b5050508080610ee790611cd7565b915050610e49565b509091565b6001546001600160a01b03166000908152600d602052604081205481908190610f1c90611611565b9050801580610f4357506002546001600160a01b03166000908152600d6020526040902054155b15610fad576001546001600160a01b039081166000908152600d6020526040808220546002549093168252908190205490517f931eb8e0000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016104df565b6002546001600160a01b03166000908152600d602052604090205481111561103c576040805180820182526002546001600160a01b03166000908152600d60209081529290205481529081018290526110308161102b6040805180820182526000808252602091820152815180830190925260018083529082015290565b611652565b9094509250610eef9050565b6040805180820182528281526002546001600160a01b03166000908152600d60209081528382205481840152835180850185528281528101919091528251808401909352600180845290830152906110949082611652565b909450925050509091565b600154600480546001600160a01b039283166000818152600c6020526040908190205490517f095ea7b3000000000000000000000000000000000000000000000000000000008152949092169284019290925260248301529063095ea7b3906044016020604051808303816000875af1158015611120573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111449190611ec5565b50600254600480546001600160a01b039283166000818152600c6020526040908190205490517f095ea7b3000000000000000000000000000000000000000000000000000000008152949092169284019290925260248301529063095ea7b3906044016020604051808303816000875af11580156111c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ea9190611ec5565b50565b6004546001546001600160a01b039081166000908152600c60205260408082205460025484168352908220546003549294841693638e3c92e49330911661123261184c565b6040518663ffffffff1660e01b8152600401611252959493929190611ee7565b6020604051808303816000875af1158015611271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112959190611f42565b905090565b6002546001600160a01b03166000908152600c60205260408120548291906112c061187e565b6112ca9190611d0f565b905060005b600854811015611383576000600860000182815481106112f1576112f1611c79565b60009182526020822001546001600160a01b03169150611310826118a2565b905080600003611321575050611371565b600061132e878387610b0f565b6001600160a01b0384166000908152600e602052604081208054929350839290919061135b908490611d0f565b9091555061136b90508187611eb2565b95505050505b8061137b81611cd7565b9150506112cf565b5081156113e05781600e600060086000016000815481106113a6576113a6611c79565b60009182526020808320909101546001600160a01b03168352820192909252604001812080549091906113da908490611d0f565b90915550505b505050565b336000908152600a602090815260408083206001600160a01b038616845290915281208054839290611418908490611d0f565b90915550506001600160a01b0382166000908152600f602052604081208054839290611445908490611d0f565b90915550503360009081526009602052604090205460ff166114f45733600081815260096020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556008805491820181559091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b6115096001600160a01b0383163330846118fe565b604051819033906001600160a01b038516907ff1444b5cad7ce70cb018d1b8edc8618fe303f3c7f034d8d572a6e27facbf2bef90600090a45050565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008082526001600160a01b0384166004830152602482018390529060008060448382895af161159b573d6000803e3d6000fd5b506115a5846119d3565b61160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f475076323a206661696c6564207472616e73666572000000000000000000000060448201526064016104df565b50505050565b60065460009082101561162657506000919050565b60075460055461164c9160ff610100820481169262010000830482169290911686611a9e565b92915050565b60008060005b6008548110156118445760006008600001828154811061167a5761167a611c79565b60009182526020822001546001546001600160a01b0391821693506116a191168389611ae9565b60065490915081106116b357806116b6565b60005b6001546001600160a01b039081166000908152600b6020908152604080832093871683529290522081905590508015611765576001600160a01b038083166000908152600a6020908152604080832060015490941683529290529081208054839290611723908490611eb2565b90915550506001546001600160a01b03166000908152600f602052604081208054839290611752908490611eb2565b9091555061176290508186611d0f565b94505b60025460009061177f906001600160a01b03168489611ae9565b6002546001600160a01b039081166000908152600b602090815260408083209388168352929052208190559050801561182e576001600160a01b038084166000908152600a60209081526040808320600254909416835292905290812080548392906117ec908490611eb2565b90915550506002546001600160a01b03166000908152600f60205260408120805483929061181b908490611eb2565b9091555061182b90508186611d0f565b94505b505050808061183c90611cd7565b915050611658565b509250929050565b611854611b9d565b60405180608001604052806000815260200160008152602001600081526020016000815250905090565b6001546001600160a01b03166000908152600c602052604081205461129590611611565b6001546001600160a01b039081166000908152600b60208181526040808420868616808652908352818520546002549096168552928252808420928452919052812054909190826118f283611611565b9050610b068282611d0f565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af161195c573d6000803e3d6000fd5b50611966856119d3565b6119cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d0000000000000060448201526064016104df565b5050505050565b6000611a12565b7f08c379a000000000000000000000000000000000000000000000000000000000600052602060045280602452508060445260646000fd5b3d8015611a515760208114611a8b57611a4c7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6119da565b611a98565b823b611a8257611a827f475076323a206e6f74206120636f6e747261637400000000000000000000000060146119da565b60019150611a98565b3d6000803e600051151591505b50919050565b600081600003611ab057506000610b06565b611adf8285611ac088600a611e3a565b611aca9190611e46565b611ad4868a611d0f565b610af690600a611e3a565b9695505050505050565b6001600160a01b038083166000908152600a60209081526040808320938716835292905290812054808203611b22576000915050610bdb565b610b06818460008160200151600003611b7757815160208301516040517f60c1ae39000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044016104df565b6020820151825103611b8a57508161164c565b610bdb8383600001518460200151610b0f565b60405180608001604052806004906020820280368337509192915050565b600060208284031215611bcd57600080fd5b5035919050565b600060208284031215611be657600080fd5b81356001600160a01b0381168114610bdb57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611c3e5783516001600160a01b031683529284019291840191600101611c19565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611d0857611d08611ca8565b5060010190565b8082018082111561164c5761164c611ca8565b600181815b8085111561184457817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611d6157611d61611ca8565b80851615611d6e57918102915b93841c9390800290611d27565b600082611d8a5750600161164c565b81611d975750600061164c565b8160018114611dad5760028114611db757611dd3565b600191505061164c565b60ff841115611dc857611dc8611ca8565b50506001821b61164c565b5060208310610133831016604e8410600b8410161715611df6575081810a61164c565b611e008383611d22565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115611e3257611e32611ca8565b029392505050565b6000610bdb8383611d7b565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611e7e57611e7e611ca8565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b8181038181111561164c5761164c611ca8565b600060208284031215611ed757600080fd5b81518015158114610bdb57600080fd5b85815260208082018690526001600160a01b03858116604084015284166060830152610100820190608083018460005b6004811015611f3457815183529183019190830190600101611f17565b505050509695505050505050565b600060208284031215611f5457600080fd5b505191905056fea2646970667358221220ea292a0029a444ae5b799ef3a7a7b01725ffb5a659e097557a9bce227871a5ee64736f6c63430008100033",
  "devdoc": {
    "author": "Solid World",
    "kind": "dev",
    "methods": {
      "getConversionRate()": {
        "returns": {
          "_0": "1 token0 = ? token1"
        }
      },
      "getConversionRateDecimals()": {
        "returns": {
          "_0": "Number of decimals of the conversion rate e.g. to express 1 token0 = 0.000001 token1, conversion rate is 1 and decimals is 6"
        }
      },
      "getGammaVault()": {
        "returns": {
          "_0": "Gamma Vault address the UniProxy contract will deposit tokens to"
        }
      },
      "getLastToken0AvailableLiquidity()": {
        "details": "returns the total amount of token0 that was available to be deployed (excludes deposits not convertible to token1)"
      },
      "getLastToken0LiquidityDeployed(address)": {
        "params": {
          "liquidityProvider": "account that contributed liquidity"
        },
        "returns": {
          "lastDeployedAmount": "amount of token0 liquidity that was deployed by the liquidity provider during the last deployment"
        }
      },
      "getLastToken1AvailableLiquidity()": {
        "details": "returns the total amount of token1 that was available to be deployed"
      },
      "getLastToken1LiquidityDeployed(address)": {
        "params": {
          "liquidityProvider": "account that contributed liquidity"
        },
        "returns": {
          "lastDeployedAmount": "amount of token1 liquidity that was last deployed by the liquidity provider during the last deployment"
        }
      },
      "getMinConvertibleToken0Amount()": {
        "details": "Returns the minimum amount of token0 that can be converted to token1"
      },
      "getUniProxy()": {
        "returns": {
          "_0": "UniProxy contract takes amounts of token0 and token1, deposits them to Gamma Vault, and returns LP tokens"
        }
      }
    },
    "stateVariables": {
      "lPTokensOwed": {
        "details": "Account => Amount"
      },
      "lastAvailableLiquidity": {
        "details": "Token => Amount"
      },
      "lastDeployedLiquidity": {
        "details": "Token => Account => Amount"
      },
      "lastTotalDeployedLiquidity": {
        "details": "Token => Amount"
      },
      "totalDeposits": {
        "details": "Token => Amount"
      },
      "userTokenBalance": {
        "details": "Account => Token => Balance"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deployLiquidity()": {
        "notice": "Looks at the current configuration and state of the contract, deploys the available liquidity to the Gamma Vault, and distributes the LP tokens to the depositors proportionally"
      },
      "depositToken0(uint256)": {
        "notice": "The caller must approve the contract to spend `amount` of token0"
      },
      "depositToken1(uint256)": {
        "notice": "The caller must approve the contract to spend `amount` of token1"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 803,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6455,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "config",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Config)13148_storage"
      },
      {
        "astId": 6458,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "depositors",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(Depositors)13157_storage"
      },
      {
        "astId": 6465,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "userTokenBalance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6472,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastDeployedLiquidity",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6477,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastTotalDeployedLiquidity",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6482,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lastAvailableLiquidity",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6487,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "lPTokensOwed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6492,
        "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Config)13148_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityDeployerDataTypes.Config",
        "members": [
          {
            "astId": 13131,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token0",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13133,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token1",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13135,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "gammaVault",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 13137,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "uniProxy",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 13139,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "conversionRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13141,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "minConvertibleToken0Amount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13143,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "conversionRateDecimals",
            "offset": 0,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 13145,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token0Decimals",
            "offset": 1,
            "slot": "6",
            "type": "t_uint8"
          },
          {
            "astId": 13147,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "token1Decimals",
            "offset": 2,
            "slot": "6",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Depositors)13157_storage": {
        "encoding": "inplace",
        "label": "struct LiquidityDeployerDataTypes.Depositors",
        "members": [
          {
            "astId": 13151,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "tokenDepositors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 13156,
            "contract": "contracts/LiquidityDeployer.sol:LiquidityDeployer",
            "label": "isDepositor",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}