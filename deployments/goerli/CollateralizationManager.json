{
  "address": "0x22350d4AC97c3573395c593fE25b811c7c385402",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "AmountOutLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "BatchCertified",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "forwardCreditsAmount",
          "type": "uint256"
        }
      ],
      "name": "ForwardCreditsInputAmountTooLarge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "IncorrectDates",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "InvalidBatchId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "batchSupplier",
          "type": "address"
        }
      ],
      "name": "BatchCollateralized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "averageTA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalCollateralized",
          "type": "uint256"
        }
      ],
      "name": "CategoryRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralizationFee",
          "type": "uint256"
        }
      ],
      "name": "CollateralizationFeeUpdated",
      "type": "event"
    }
  ],
  "transactionHash": "0x826227b8e2ddfab9a5acec6e2fd09a5d08a33ccdb5d8eadeead9dbd031874972",
  "receipt": {
    "to": null,
    "from": "0x8B3A08b22d25C60e4b2BfD984e331568ECa4C299",
    "contractAddress": "0x22350d4AC97c3573395c593fE25b811c7c385402",
    "transactionIndex": 16,
    "gasUsed": "1967535",
    "logsBloom": "0x
    "blockHash": "0x5d3380884582609443c5e7c27aa79bd6d2f3cece2f09778bddde2d3528719d56",
    "transactionHash": "0x826227b8e2ddfab9a5acec6e2fd09a5d08a33ccdb5d8eadeead9dbd031874972",
    "logs": [],
    "blockNumber": 8262343,
    "cumulativeGasUsed": "8668812",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "127010483d562c5b4d4bfaefd00ffb55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchCertified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"forwardCreditsAmount\",\"type\":\"uint256\"}],\"name\":\"ForwardCreditsInputAmountTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"IncorrectDates\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"InvalidBatchId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"batchSupplier\",\"type\":\"address\"}],\"name\":\"BatchCollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"averageTA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalCollateralized\",\"type\":\"uint256\"}],\"name\":\"CategoryRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralizationFee\",\"type\":\"uint256\"}],\"name\":\"CollateralizationFeeUpdated\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Solid World DAO\",\"kind\":\"dev\",\"methods\":{\"collateralizeBatch(SolidWorldManagerStorage.Storage storage,uint256,uint256,uint256)\":{\"details\":\"Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`\",\"params\":{\"_storage\":\"Struct containing the current state used or modified by this function\",\"amountIn\":\"ERC1155 tokens to collateralize\",\"amountOutMin\":\"minimum output amount of ERC20 tokens for transaction to succeed\",\"batchId\":\"id of the batch\"}},\"setCollateralizationFee(SolidWorldManagerStorage.Storage storage,uint16)\":{\"params\":{\"_storage\":\"Struct containing the current state used or modified by this function\",\"collateralizationFee\":\"fee for collateralizing ERC1155 tokens\"}},\"simulateBatchCollateralization(SolidWorldManagerStorage.Storage storage,uint256,uint256)\":{\"details\":\"Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender\",\"params\":{\"_storage\":\"Struct containing the current state used or modified by this function\",\"amountIn\":\"ERC1155 tokens to collateralize\",\"batchId\":\"id of the batch\"},\"returns\":{\"cbtDaoCut\":\"ERC20 tokens to be received by feeReceiver\",\"cbtForfeited\":\"ERC20 tokens forfeited for collateralizing the ERC1155 tokens\",\"cbtUserCut\":\"ERC20 tokens to be received by msg.sender\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Handles batch collateralization operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/manager/CollateralizationManager.sol\":\"CollateralizationManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/CollateralizedBasketToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/// @notice ERC-20 for working with forward commodity tokens\\n/// @author Solid World DAO\\ncontract CollateralizedBasketToken is ERC20Burnable, Ownable {\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n    function mint(address account, uint amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x037186540d4e5f349f738159c60ff9465d92ac0438814ffabac4a525698537fb\",\"license\":\"UNLICENSED\"},\"contracts/CollateralizedBasketTokenDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CollateralizedBasketToken.sol\\\";\\n\\ncontract CollateralizedBasketTokenDeployer {\\n    function deploy(string calldata tokenName, string calldata tokenSymbol)\\n        external\\n        returns (CollateralizedBasketToken token)\\n    {\\n        token = new CollateralizedBasketToken(tokenName, tokenSymbol);\\n        token.transferOwnership(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde4704746224e7960476b02202fbda49a1c7244357d2a9484862ee8e9be90962\",\"license\":\"UNLICENSED\"},\"contracts/ForwardContractBatchToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice ERC-1155 for working with forward contract batch tokens\\n/// @author Solid World DAO\\ncontract ForwardContractBatchToken is ERC1155, Ownable {\\n    constructor(string memory uri) ERC1155(uri) {}\\n\\n    /// @dev only owner\\n    /// @param to address of the owner of new token\\n    /// @param id id of new token\\n    /// @param amount amount of new token\\n    /// @param data external data\\n    function mint(\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /// @dev only owner\\n    /// @param account address of the owner of token what is burned\\n    /// @param id id of token what is burned\\n    /// @param amount amount of token what is burned\\n    function burn(\\n        address account,\\n        uint id,\\n        uint amount\\n    ) public onlyOwner {\\n        _burn(account, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x85b70058acabb3db1a305cf5eef89828c9bcdc23878e2dd04679409a3e46ad6a\",\"license\":\"UNLICENSED\"},\"contracts/SolidWorldManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./libraries/DomainDataTypes.sol\\\";\\nimport \\\"./CollateralizedBasketToken.sol\\\";\\nimport \\\"./ForwardContractBatchToken.sol\\\";\\nimport \\\"./CollateralizedBasketTokenDeployer.sol\\\";\\n\\n/// @title SolidWorldManager contract storage layout and getters\\n/// @author Solid World DAO\\nabstract contract SolidWorldManagerStorage {\\n    struct Storage {\\n        /// @notice Mapping is used for checking if Category ID already exists\\n        /// @dev CategoryId => isCreated\\n        mapping(uint => bool) categoryCreated;\\n        /// @notice Property is used for checking if Project ID already exists\\n        /// @dev ProjectId => isCreated\\n        mapping(uint => bool) projectCreated;\\n        /// @notice Property is used for checking if Batch ID already exists\\n        /// @dev BatchId => isCreated\\n        mapping(uint => bool) batchCreated;\\n        /// @notice Stores the state of categories\\n        /// @dev CategoryId => DomainDataTypes.Category\\n        mapping(uint => DomainDataTypes.Category) categories;\\n        /// @notice Property stores info about a batch\\n        /// @dev BatchId => DomainDataTypes.Batch\\n        mapping(uint => DomainDataTypes.Batch) batches;\\n        /// @notice Mapping determines a respective CollateralizedBasketToken (ERC-20) of a category\\n        /// @dev CategoryId => CollateralizedBasketToken address (ERC-20)\\n        mapping(uint => CollateralizedBasketToken) categoryToken;\\n        /// @notice Mapping determines what projects a category has\\n        /// @dev CategoryId => ProjectId[]\\n        mapping(uint => uint[]) categoryProjects;\\n        /// @notice Mapping determines what category a project belongs to\\n        /// @dev ProjectId => CategoryId\\n        mapping(uint => uint) projectCategory;\\n        /// @notice Mapping determines what category a batch belongs to\\n        /// @dev BatchId => CategoryId\\n        mapping(uint => uint) batchCategory;\\n        /// @notice Mapping determines what batches a project has\\n        /// @dev ProjectId => BatchId[]\\n        mapping(uint => uint[]) projectBatches;\\n        /// @notice Stores all batch ids ever created\\n        uint[] batchIds;\\n        /// @notice Contract that operates forward contract batch tokens (ERC-1155). Allows this contract to mint tokens.\\n        ForwardContractBatchToken _forwardContractBatch;\\n        /// @notice Contract that deploys new collateralized basket tokens. Allows this contract to mint tokens.\\n        CollateralizedBasketTokenDeployer _collateralizedBasketTokenDeployer;\\n        /// @notice The only account that is allowed to mint weekly carbon rewards\\n        address weeklyRewardsMinter;\\n        /// @notice The account where all protocol fees are captured.\\n        address feeReceiver;\\n        /// @notice Fee charged by DAO when collateralizing forward contract batch tokens.\\n        uint16 collateralizationFee;\\n        /// @notice Fee charged by DAO when decollateralizing collateralized basket tokens.\\n        uint16 decollateralizationFee;\\n        /// @notice Fee charged by DAO on the weekly carbon rewards.\\n        uint16 rewardsFee;\\n    }\\n\\n    Storage _storage;\\n\\n    function isCategoryCreated(uint categoryId) external view returns (bool) {\\n        return _storage.categoryCreated[categoryId];\\n    }\\n\\n    function isProjectCreated(uint projectId) external view returns (bool) {\\n        return _storage.projectCreated[projectId];\\n    }\\n\\n    function isBatchCreated(uint batchId) external view returns (bool) {\\n        return _storage.batchCreated[batchId];\\n    }\\n\\n    function getCategory(uint categoryId) external view returns (DomainDataTypes.Category memory) {\\n        return _storage.categories[categoryId];\\n    }\\n\\n    function getBatch(uint batchId) external view returns (DomainDataTypes.Batch memory) {\\n        return _storage.batches[batchId];\\n    }\\n\\n    function getCategoryToken(uint categoryId) external view returns (CollateralizedBasketToken) {\\n        return _storage.categoryToken[categoryId];\\n    }\\n\\n    function getCategoryProjects(uint categoryId) external view returns (uint[] memory) {\\n        return _storage.categoryProjects[categoryId];\\n    }\\n\\n    function getProjectCategory(uint projectId) external view returns (uint) {\\n        return _storage.projectCategory[projectId];\\n    }\\n\\n    function getBatchCategory(uint batchId) external view returns (uint) {\\n        return _storage.batchCategory[batchId];\\n    }\\n\\n    function getProjectBatches(uint projectId) external view returns (uint[] memory) {\\n        return _storage.projectBatches[projectId];\\n    }\\n\\n    function getBatchId(uint index) external view returns (uint) {\\n        return _storage.batchIds[index];\\n    }\\n\\n    function forwardContractBatch() external view returns (ForwardContractBatchToken) {\\n        return _storage._forwardContractBatch;\\n    }\\n\\n    function collateralizedBasketTokenDeployer()\\n        external\\n        view\\n        returns (CollateralizedBasketTokenDeployer)\\n    {\\n        return _storage._collateralizedBasketTokenDeployer;\\n    }\\n\\n    function getWeeklyRewardsMinter() external view returns (address) {\\n        return _storage.weeklyRewardsMinter;\\n    }\\n\\n    function getFeeReceiver() external view returns (address) {\\n        return _storage.feeReceiver;\\n    }\\n\\n    function getCollateralizationFee() external view returns (uint16) {\\n        return _storage.collateralizationFee;\\n    }\\n\\n    function getDecollateralizationFee() external view returns (uint16) {\\n        return _storage.decollateralizationFee;\\n    }\\n\\n    function getRewardsFee() external view returns (uint16) {\\n        return _storage.rewardsFee;\\n    }\\n\\n    function getProjectIdsByCategory(uint categoryId) external view returns (uint[] memory) {\\n        return _storage.categoryProjects[categoryId];\\n    }\\n\\n    function getBatchIdsByProject(uint projectId) external view returns (uint[] memory) {\\n        return _storage.projectBatches[projectId];\\n    }\\n}\\n\",\"keccak256\":\"0x1a2c6266cd6e8fc5ac7b44ed96cabf9126fb7165b7f24386774165a80cc84d75\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n\\n/// ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n/// Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\npragma solidity ^0.8.16;\\n\\n/// Smart contract library of mathematical functions operating with signed\\n/// 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n/// basically a simple fraction whose numerator is signed 128-bit integer and\\n/// denominator is 2^64.  As long as denominator is always the same, there is no\\n/// need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n/// represented by int128 type holding only the numerator.\\nlibrary ABDKMath64x64 {\\n    /// Minimum value signed 64.64-bit fixed point number may have.\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /// Maximum value signed 64.64-bit fixed point number may have.\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n    /// number.  Revert on overflow.\\n    /// @param x unsigned 256-bit integer number\\n    /// @return signed 64.64-bit fixed point number\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /// Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n    /// number rounding down.  Revert on underflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return unsigned 64-bit integer number\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /// Calculate x * y rounding down. Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @param y signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\\n    /// @param x signed 64.64 fixed point number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return unsigned 256-bit integer number\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /// Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @param y uint256 value\\n    /// @return signed 64.64-bit fixed point number\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n    /// integer numbers.  Revert on overflow or when y is zero.\\n    /// @param x unsigned 256-bit integer number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return signed 64.64-bit fixed point number\\n    function div(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n    /// integer numbers.  Revert on overflow or when y is zero.\\n    /// @param x unsigned 256-bit integer number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return unsigned 64.64-bit fixed point number\\n    function divu(uint256 x, uint256 y) internal pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /// Calculate natural exponent of x.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n        }\\n    }\\n\\n    /// Calculate binary exponent of x.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /// Calculate natural logarithm of x.  Revert if x <= 0.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256((uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128)\\n                );\\n        }\\n    }\\n\\n    /// Calculate binary logarithm of x.  Revert if x <= 0.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate 1 / x rounding towards zero.  Revert on overflow or when x is zero.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf112250da264389e4b3074010e22f8d6611f0efa0c021339874733b2ab056fd\",\"license\":\"BSD-4-Clause\"},\"contracts/libraries/DomainDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nlibrary DomainDataTypes {\\n    /// @notice Structure that holds necessary information for minting collateralized basket tokens (ERC-20).\\n    /// @param id ID of the batch in the database\\n    /// @param projectId Project ID this batch belongs to\\n    /// @param supplier Address who receives forward contract batch tokens (ERC-1155)\\n    /// @param certificationDate When the batch is about to be delivered; affects on how many collateralized basket tokens (ERC-20) may be minted\\n    /// @param vintage The year an emission reduction occurred or the offset was issued. The older the vintage, the cheaper the price per credit.\\n    /// @param status Status for the batch (ex. CAN_BE_DEPOSITED | IS_ACCUMULATING | READY_FOR_DELIVERY etc.)\\n    /// @param batchTA Coefficient that affects on how many collateralized basket tokens (ERC-20) may be minted / ton\\n    ///                   depending on market conditions. Forward is worth less than spot.\\n    struct Batch {\\n        uint id;\\n        uint projectId;\\n        address supplier;\\n        uint32 certificationDate;\\n        uint16 vintage;\\n        uint8 status;\\n        uint24 batchTA;\\n    }\\n\\n    /// @notice Structure that holds state of a category of forward carbon credits. Used for computing collateralization.\\n    /// @param volumeCoefficient controls how much impact does erc1155 input size have on the TA being offered.\\n    /// The higher, the more you have to input to raise the TA.\\n    /// @param decayPerSecond controls how fast the built momentum drops over time.\\n    /// The bigger, the faster the momentum drops.\\n    /// @param maxDepreciationPerYear controls how much the reactive TA can drop from the averageTA value. Quantified per year.\\n    /// @param maxDepreciation controls how much the reactive TA can drop from the averageTA value. Quantified per week.\\n    /// @param averageTA is the average time appreciation of the category.\\n    /// @param totalCollateralized is the total amount of collateralized tokens for this category.\\n    /// @param lastCollateralizationTimestamp the timestamp of the last collateralization.\\n    /// @param lastCollateralizationMomentum the value of the momentum at the last collateralization.\\n    struct Category {\\n        uint volumeCoefficient;\\n        uint40 decayPerSecond;\\n        uint16 maxDepreciationPerYear;\\n        uint24 maxDepreciation;\\n        uint24 averageTA;\\n        uint totalCollateralized;\\n        uint32 lastCollateralizationTimestamp;\\n        uint lastCollateralizationMomentum;\\n    }\\n\\n    /// @notice Structure that holds necessary information for decollateralizing ERC20 tokens to ERC1155 tokens with id `batchId`\\n    /// @param batchId id of the batch\\n    /// @param availableBatchTokens Amount of ERC1155 tokens with id `batchId` that are available to be redeemed\\n    /// @param amountOut ERC1155 tokens with id `batchId` to be received by msg.sender\\n    /// @param minAmountIn minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\\n    /// @param minCbtDaoCut ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\\n    struct TokenDecollateralizationInfo {\\n        uint batchId;\\n        uint availableBatchTokens;\\n        uint amountOut;\\n        uint minAmountIn;\\n        uint minCbtDaoCut;\\n    }\\n}\\n\",\"keccak256\":\"0xed363c2b9e708fb382b6d5ec46a4705e775d3fa1899cc63cdb7e7ea2640a1fc2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ReactiveTimeAppreciationMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"./DomainDataTypes.sol\\\";\\nimport \\\"./SolidMath.sol\\\";\\n\\nlibrary ReactiveTimeAppreciationMath {\\n    /// @dev Basis points in which the `decayPerSecond` must be expressed\\n    uint constant DECAY_BASIS_POINTS = 100_000_000_000;\\n\\n    /// @dev Basis points in which the `maxDepreciationPerYear` must be expressed\\n    uint constant DEPRECIATION_BASIS_POINTS = 10;\\n\\n    error ForwardCreditsInputAmountTooLarge(uint forwardCreditsAmount);\\n\\n    /// @dev Computes a time appreciation value that is reactive to market conditions\\n    /// @dev The reactive time appreciation starts at averageTA - maxDepreciation and increases with momentum and input amount\\n    /// @param categoryState The current state of the category to compute the time appreciation for\\n    /// @param forwardCreditsAmount The size of the forward credits to be collateralized\\n    /// @return decayingMomentum The current decaying momentum of the category\\n    /// @return reactiveTA The time appreciation value influenced by current market conditions\\n    function computeReactiveTA(\\n        DomainDataTypes.Category memory categoryState,\\n        uint forwardCreditsAmount\\n    ) internal view returns (uint decayingMomentum, uint reactiveTA) {\\n        if (categoryState.volumeCoefficient == 0) {\\n            return (0, categoryState.averageTA);\\n        }\\n\\n        decayingMomentum = computeDecayingMomentum(\\n            categoryState.decayPerSecond,\\n            categoryState.lastCollateralizationMomentum,\\n            categoryState.lastCollateralizationTimestamp\\n        );\\n\\n        uint volume = decayingMomentum + forwardCreditsAmount / 2;\\n        uint reactiveFactorAnnually = Math.mulDiv(\\n            volume,\\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS,\\n            categoryState.volumeCoefficient * 100\\n        );\\n        if (reactiveFactorAnnually >= SolidMath.TIME_APPRECIATION_BASIS_POINTS) {\\n            revert ForwardCreditsInputAmountTooLarge(forwardCreditsAmount);\\n        }\\n\\n        uint reactiveFactorWeekly = toWeeklyRate(reactiveFactorAnnually);\\n        reactiveTA = categoryState.averageTA - categoryState.maxDepreciation + reactiveFactorWeekly;\\n\\n        if (reactiveTA >= SolidMath.TIME_APPRECIATION_BASIS_POINTS) {\\n            revert ForwardCreditsInputAmountTooLarge(forwardCreditsAmount);\\n        }\\n    }\\n\\n    /// @dev Decays the `lastCollateralizationMomentum` with the `decayPerSecond` rate since the `lastCollateralizationTimestamp`\\n    /// @dev e.g a momentum of 100 with a decay of 5% per day will decay to 95 after 1 day\\n    /// @dev The minimum decaying momentum is 0\\n    /// @param decayPerSecond The rate at which the `lastCollateralizationMomentum` decays per second\\n    /// @param lastCollateralizationMomentum The last collateralization momentum\\n    /// @param lastCollateralizationTimestamp The last collateralization timestamp\\n    /// @return decayingMomentum The decaying momentum value\\n    function computeDecayingMomentum(\\n        uint decayPerSecond,\\n        uint lastCollateralizationMomentum,\\n        uint lastCollateralizationTimestamp\\n    ) internal view returns (uint decayingMomentum) {\\n        uint secondsPassedSinceLastCollateralization = block.timestamp -\\n            lastCollateralizationTimestamp;\\n\\n        int decayMultiplier = int(DECAY_BASIS_POINTS) -\\n            int(secondsPassedSinceLastCollateralization * decayPerSecond);\\n        decayMultiplier = SignedMath.max(0, decayMultiplier);\\n\\n        decayingMomentum = Math.mulDiv(\\n            lastCollateralizationMomentum,\\n            uint(decayMultiplier),\\n            DECAY_BASIS_POINTS\\n        );\\n    }\\n\\n    /// @dev Derives what the time appreciation should be for a batch based on ERC20 in circulation, underlying ERC1155\\n    ///      amount and its certification date\\n    /// @dev Computes: 1 - (circulatingCBT / totalCollateralizedBatchForwardCredits) ** (1 / weeksTillCertification)\\n    /// @dev Taking form: 1 - e ** (ln(circulatingCBT / totalCollateralizedBatchForwardCredits) * (1 / weeksTillCertification))\\n    /// @param circulatingCBT The circulating CBT amount minted for the batch\\n    /// @param totalCollateralizedForwardCredits The total collateralized batch forward credits\\n    /// @param certificationDate The batch certification date\\n    /// @param cbtDecimals Collateralized basket token number of decimals\\n    function inferBatchTA(\\n        uint circulatingCBT,\\n        uint totalCollateralizedForwardCredits,\\n        uint certificationDate,\\n        uint cbtDecimals\\n    ) internal view returns (uint batchTA) {\\n        assert(circulatingCBT != 0 && totalCollateralizedForwardCredits != 0);\\n\\n        uint weeksTillCertification = SolidMath.weeksBetween(block.timestamp, certificationDate);\\n\\n        if (weeksTillCertification == 0) {\\n            return 0;\\n        }\\n\\n        int128 weeksTillCertificationInverse = ABDKMath64x64.inv(\\n            ABDKMath64x64.fromUInt(weeksTillCertification)\\n        );\\n        int128 aggregateDiscount = ABDKMath64x64.div(\\n            circulatingCBT,\\n            totalCollateralizedForwardCredits * 10**cbtDecimals\\n        );\\n\\n        int128 aggregateDiscountLN = ABDKMath64x64.ln(aggregateDiscount);\\n        int128 aggregatedWeeklyDiscount = ABDKMath64x64.exp(\\n            ABDKMath64x64.mul(aggregateDiscountLN, weeksTillCertificationInverse)\\n        );\\n        uint aggregatedWeeklyDiscountPoints = ABDKMath64x64.mulu(\\n            aggregatedWeeklyDiscount,\\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        batchTA = SolidMath.TIME_APPRECIATION_BASIS_POINTS - aggregatedWeeklyDiscountPoints;\\n    }\\n\\n    /// @dev Determines the momentum for the specified Category based on current state and the new params\\n    /// @param category The category to compute the momentum for\\n    /// @param newVolumeCoefficient The new volume coefficient of the category\\n    /// @param newMaxDepreciationPerYear The new max depreciation per year of the category\\n    function inferMomentum(\\n        DomainDataTypes.Category memory category,\\n        uint newVolumeCoefficient,\\n        uint newMaxDepreciationPerYear\\n    ) internal view returns (uint) {\\n        if (category.volumeCoefficient == 0 || category.decayPerSecond == 0) {\\n            return computeInitialMomentum(newVolumeCoefficient, newMaxDepreciationPerYear);\\n        }\\n\\n        return computeAdjustedMomentum(category, newVolumeCoefficient, newMaxDepreciationPerYear);\\n    }\\n\\n    /// @dev Computes the initial value of momentum with the specified parameters\\n    /// @param volumeCoefficient The volume coefficient of the category\\n    /// @param maxDepreciationPerYear how much the reactive TA can drop from the averageTA value, quantified per year\\n    /// @return initialMomentum The initial momentum value\\n    function computeInitialMomentum(uint volumeCoefficient, uint maxDepreciationPerYear)\\n        internal\\n        pure\\n        returns (uint initialMomentum)\\n    {\\n        initialMomentum = Math.mulDiv(\\n            volumeCoefficient,\\n            maxDepreciationPerYear,\\n            DEPRECIATION_BASIS_POINTS\\n        );\\n    }\\n\\n    /// @dev Computes the adjusted value of momentum for a category when category update event occurs\\n    /// @param category The category to compute the adjusted momentum for\\n    /// @param newVolumeCoefficient The new volume coefficient of the category\\n    /// @param newMaxDepreciationPerYear The new max depreciation per year of the category\\n    /// @return adjustedMomentum The adjusted momentum value\\n    function computeAdjustedMomentum(\\n        DomainDataTypes.Category memory category,\\n        uint newVolumeCoefficient,\\n        uint newMaxDepreciationPerYear\\n    ) internal view returns (uint adjustedMomentum) {\\n        adjustedMomentum = computeDecayingMomentum(\\n            category.decayPerSecond,\\n            category.lastCollateralizationMomentum,\\n            category.lastCollateralizationTimestamp\\n        );\\n\\n        adjustedMomentum = Math.mulDiv(\\n            adjustedMomentum,\\n            newVolumeCoefficient,\\n            category.volumeCoefficient\\n        );\\n\\n        int depreciationDiff = int(newMaxDepreciationPerYear) -\\n            int(uint(category.maxDepreciationPerYear));\\n        if (depreciationDiff > 0) {\\n            adjustedMomentum += Math.mulDiv(\\n                newVolumeCoefficient,\\n                uint(depreciationDiff),\\n                DEPRECIATION_BASIS_POINTS\\n            );\\n        }\\n    }\\n\\n    /// @dev Converts a rate quantified per year to a rate quantified per week\\n    /// @dev Computes: 1 - (1 - annualRate) ** (1/52.1)\\n    /// @dev Taking form: 1 - e ** (ln(1 - annualRate) * (1/52.1))\\n    /// @param annualRate 1% = 10000, 0.0984% = 984\\n    /// @return weeklyRate the rate quantified per week\\n    function toWeeklyRate(uint annualRate) internal pure returns (uint weeklyRate) {\\n        uint annualDiscountPoints = SolidMath.TIME_APPRECIATION_BASIS_POINTS - annualRate;\\n        int128 annualDiscount = ABDKMath64x64.div(\\n            annualDiscountPoints,\\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        int128 annualDiscountLN = ABDKMath64x64.ln(annualDiscount);\\n        int128 weeksInYearInverse = ABDKMath64x64.inv(weeksInYear());\\n        int128 weeklyDiscount = ABDKMath64x64.exp(\\n            ABDKMath64x64.mul(annualDiscountLN, weeksInYearInverse)\\n        );\\n        uint weeklyDiscountPoints = ABDKMath64x64.mulu(\\n            weeklyDiscount,\\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        weeklyRate = SolidMath.TIME_APPRECIATION_BASIS_POINTS - weeklyDiscountPoints;\\n    }\\n\\n    function weeksInYear() internal pure returns (int128) {\\n        return ABDKMath64x64.div(521, 10);\\n    }\\n}\\n\",\"keccak256\":\"0x0c4a49edd14a8db27e2d9b997c12897c919c11686779f492fd3a3018f65dfbc4\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SolidMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @notice Solid World DAO Math Operations and Constants.\\n/// @author Solid World DAO\\nlibrary SolidMath {\\n    /// @dev Basis points in which the `time appreciation` must be expressed\\n    /// @dev 100% = 1_000_000; 1% = 10_000; 0.0984% = 984\\n    uint constant TIME_APPRECIATION_BASIS_POINTS = 1_000_000;\\n\\n    /// @dev Basis points used to express various DAO fees\\n    /// @dev 100% = 10_000; 0.01% = 1\\n    uint constant FEE_BASIS_POINTS = 10_000;\\n\\n    error IncorrectDates(uint startDate, uint endDate);\\n\\n    /// @dev Computes the number of weeks between two dates\\n    /// @param startDate start date expressed in seconds\\n    /// @param endDate end date expressed in seconds\\n    /// @return number of weeks between the two dates. Returns 0 if result is negative\\n    function weeksBetween(uint startDate, uint endDate) internal pure returns (uint) {\\n        if (startDate == 0 || endDate == 0) {\\n            revert IncorrectDates(startDate, endDate);\\n        }\\n\\n        if (endDate <= startDate) {\\n            return 0;\\n        }\\n\\n        return (endDate - startDate) / 1 weeks;\\n    }\\n\\n    /// @dev Computes discount for given `timeAppreciation` and project `certificationDate`\\n    /// @dev (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param certificationDate expected date for project certification\\n    /// @return discount in basis points\\n    function computeTimeAppreciationDiscount(uint timeAppreciation, uint certificationDate)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint weeksUntilCertification = weeksBetween(block.timestamp, certificationDate);\\n        if (weeksUntilCertification == 0) {\\n            return TIME_APPRECIATION_BASIS_POINTS;\\n        }\\n\\n        if (weeksUntilCertification == 1) {\\n            return TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\\n        }\\n\\n        uint discountRatePoints = TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\\n        int128 discountRate = ABDKMath64x64.div(discountRatePoints, TIME_APPRECIATION_BASIS_POINTS);\\n        int128 totalDiscount = ABDKMath64x64.pow(discountRate, (weeksUntilCertification - 1));\\n\\n        return ABDKMath64x64.mulu(totalDiscount, discountRatePoints);\\n    }\\n\\n    /// @dev Computes the amount of ERC20 tokens to be minted to the stakeholder and DAO,\\n    /// @dev and the amount forfeited when collateralizing `fcbtAmount` of ERC1155 tokens\\n    /// @dev cbtUserCut = erc1155 * 10e18 * (1 - fee) * (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param certificationDate expected date for project certification. Must not be in the past.\\n    /// @param fcbtAmount amount of ERC1155 tokens to be collateralized\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param collateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return amount of ERC20 tokens to be minted to the stakeholder\\n    /// @return amount of ERC20 tokens to be minted to the DAO\\n    /// @return amount of ERC20 tokens forfeited for collateralizing the ERC1155 tokens\\n    function computeCollateralizationOutcome(\\n        uint certificationDate,\\n        uint fcbtAmount,\\n        uint timeAppreciation,\\n        uint collateralizationFee,\\n        uint cbtDecimals\\n    )\\n        internal\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        assert(certificationDate > block.timestamp);\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            certificationDate\\n        );\\n        uint mintableCbtAmount = Math.mulDiv(\\n            fcbtAmount * timeAppreciationDiscount,\\n            10**cbtDecimals,\\n            TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        uint cbtDaoCut = Math.mulDiv(mintableCbtAmount, collateralizationFee, FEE_BASIS_POINTS);\\n        uint cbtUserCut = mintableCbtAmount - cbtDaoCut;\\n        uint cbtForfeited = fcbtAmount * 10**cbtDecimals - mintableCbtAmount;\\n\\n        return (cbtUserCut, cbtDaoCut, cbtForfeited);\\n    }\\n\\n    /// @dev Computes the amount of ERC1155 tokens redeemable by the stakeholder, amount of ERC20 tokens\\n    /// @dev charged by the DAO and to be burned when decollateralizing `cbtAmount` of ERC20 tokens\\n    /// @dev erc1155 = erc20 / 10e18 * (1 - fee) / (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param certificationDate expected date for project certification\\n    /// @param cbtAmount amount of ERC20 tokens to be decollateralized\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param decollateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return amount of ERC1155 tokens redeemable by the stakeholder\\n    /// @return amount of ERC20 tokens charged by the DAO\\n    /// @return amount of ERC20 tokens to be burned from the stakeholder\\n    function computeDecollateralizationOutcome(\\n        uint certificationDate,\\n        uint cbtAmount,\\n        uint timeAppreciation,\\n        uint decollateralizationFee,\\n        uint cbtDecimals\\n    )\\n        internal\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        uint cbtDaoCut = Math.mulDiv(cbtAmount, decollateralizationFee, FEE_BASIS_POINTS);\\n        uint cbtToBurn = cbtAmount - cbtDaoCut;\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            certificationDate\\n        );\\n\\n        uint fcbtAmount = Math.mulDiv(\\n            cbtToBurn,\\n            TIME_APPRECIATION_BASIS_POINTS,\\n            timeAppreciationDiscount\\n        );\\n\\n        return (fcbtAmount / 10**cbtDecimals, cbtDaoCut, cbtToBurn);\\n    }\\n\\n    /// @dev Computes the minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\\n    /// @dev and the amount of ERC20 tokens charged by the DAO for decollateralizing the minimum amount of ERC20 tokens\\n    /// @param certificationDate expected date for project certification\\n    /// @param expectedFcbtAmount amount of ERC1155 tokens to be redeemed\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param decollateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return minAmountIn minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\\n    /// @return minCbtDaoCut amount of ERC20 tokens charged by the DAO for decollateralizing minAmountIn ERC20 tokens\\n    function computeDecollateralizationMinAmountInAndDaoCut(\\n        uint certificationDate,\\n        uint expectedFcbtAmount,\\n        uint timeAppreciation,\\n        uint decollateralizationFee,\\n        uint cbtDecimals\\n    ) internal view returns (uint minAmountIn, uint minCbtDaoCut) {\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            certificationDate\\n        );\\n\\n        uint minAmountInAfterFee = Math.mulDiv(\\n            expectedFcbtAmount * timeAppreciationDiscount,\\n            10**cbtDecimals,\\n            TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        minAmountIn = Math.mulDiv(\\n            minAmountInAfterFee,\\n            FEE_BASIS_POINTS,\\n            FEE_BASIS_POINTS - decollateralizationFee\\n        );\\n\\n        minCbtDaoCut = Math.mulDiv(minAmountIn, decollateralizationFee, FEE_BASIS_POINTS);\\n    }\\n\\n    /// @dev Computes the amount of ERC20 tokens to be rewarded over the next 7 days\\n    /// @dev erc1155 * 10e18 * timeApn * (1 - timeApn) ** weeks\\n    /// @param certificationDate expected date for project certification\\n    /// @param availableCredits amount of ERC1155 tokens backing the reward\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param rewardsFee fee charged by DAO on the weekly carbon rewards\\n    /// @param decimals reward token number of decimals\\n    /// @return netRewardAmount ERC20 reward amount. Returns 0 if `certificationDate` is in the past\\n    /// @return feeAmount fee amount charged by the DAO. Returns 0 if `certificationDate` is in the past\\n    function computeWeeklyBatchReward(\\n        uint certificationDate,\\n        uint availableCredits,\\n        uint timeAppreciation,\\n        uint rewardsFee,\\n        uint decimals\\n    ) internal view returns (uint netRewardAmount, uint feeAmount) {\\n        if (certificationDate <= block.timestamp) {\\n            return (0, 0);\\n        }\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            certificationDate\\n        );\\n\\n        uint grossRewardAmount = Math.mulDiv(\\n            availableCredits * timeAppreciation * timeAppreciationDiscount,\\n            10**decimals,\\n            TIME_APPRECIATION_BASIS_POINTS**2\\n        );\\n\\n        feeAmount = Math.mulDiv(grossRewardAmount, rewardsFee, FEE_BASIS_POINTS);\\n        netRewardAmount = grossRewardAmount - feeAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x555ca6d2bd25827f53b1835c47e570182d00add01bda7b7db25af74fe7a54191\",\"license\":\"UNLICENSED\"},\"contracts/libraries/manager/CollateralizationManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"../DomainDataTypes.sol\\\";\\nimport \\\"../SolidMath.sol\\\";\\nimport \\\"../ReactiveTimeAppreciationMath.sol\\\";\\nimport \\\"../../CollateralizedBasketToken.sol\\\";\\nimport \\\"../../SolidWorldManagerStorage.sol\\\";\\n\\n/// @notice Handles batch collateralization operations.\\n/// @author Solid World DAO\\nlibrary CollateralizationManager {\\n    event BatchCollateralized(\\n        uint indexed batchId,\\n        uint amountIn,\\n        uint amountOut,\\n        address indexed batchSupplier\\n    );\\n    event CategoryRebalanced(\\n        uint indexed categoryId,\\n        uint indexed averageTA,\\n        uint indexed totalCollateralized\\n    );\\n    event CollateralizationFeeUpdated(uint indexed collateralizationFee);\\n\\n    error InvalidBatchId(uint batchId);\\n    error BatchCertified(uint batchId);\\n    error InvalidInput();\\n    error AmountOutLessThanMinimum(uint amountOut, uint minAmountOut);\\n\\n    /// @dev Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.sender\\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`\\n    /// @param _storage Struct containing the current state used or modified by this function\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC1155 tokens to collateralize\\n    /// @param amountOutMin minimum output amount of ERC20 tokens for transaction to succeed\\n    function collateralizeBatch(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) external {\\n        if (!_storage.batchCreated[batchId]) {\\n            revert InvalidBatchId(batchId);\\n        }\\n\\n        if (_storage.batches[batchId].certificationDate <= block.timestamp) {\\n            revert BatchCertified(batchId);\\n        }\\n\\n        if (amountIn == 0) {\\n            revert InvalidInput();\\n        }\\n\\n        (uint decayingMomentum, uint reactiveTA) = ReactiveTimeAppreciationMath.computeReactiveTA(\\n            _storage.categories[_storage.batchCategory[batchId]],\\n            amountIn\\n        );\\n\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(\\n            _storage,\\n            batchId\\n        );\\n\\n        (uint cbtUserCut, uint cbtDaoCut, ) = SolidMath.computeCollateralizationOutcome(\\n            _storage.batches[batchId].certificationDate,\\n            amountIn,\\n            reactiveTA,\\n            _storage.collateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n\\n        if (cbtUserCut < amountOutMin) {\\n            revert AmountOutLessThanMinimum(cbtUserCut, amountOutMin);\\n        }\\n\\n        _updateBatchTA(\\n            _storage,\\n            batchId,\\n            reactiveTA,\\n            amountIn,\\n            cbtUserCut + cbtDaoCut,\\n            collateralizedToken.decimals()\\n        );\\n        _rebalanceCategory(\\n            _storage,\\n            _storage.batchCategory[batchId],\\n            reactiveTA,\\n            amountIn,\\n            decayingMomentum\\n        );\\n\\n        collateralizedToken.mint(msg.sender, cbtUserCut);\\n        collateralizedToken.mint(_storage.feeReceiver, cbtDaoCut);\\n\\n        _storage._forwardContractBatch.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            batchId,\\n            amountIn,\\n            \\\"\\\"\\n        );\\n\\n        emit BatchCollateralized(batchId, amountIn, cbtUserCut, msg.sender);\\n    }\\n\\n    /// @dev Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender\\n    /// @param _storage Struct containing the current state used or modified by this function\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC1155 tokens to collateralize\\n    /// @return cbtUserCut ERC20 tokens to be received by msg.sender\\n    /// @return cbtDaoCut ERC20 tokens to be received by feeReceiver\\n    /// @return cbtForfeited ERC20 tokens forfeited for collateralizing the ERC1155 tokens\\n    function simulateBatchCollateralization(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint batchId,\\n        uint amountIn\\n    )\\n        external\\n        view\\n        returns (\\n            uint cbtUserCut,\\n            uint cbtDaoCut,\\n            uint cbtForfeited\\n        )\\n    {\\n        if (!_storage.batchCreated[batchId]) {\\n            revert InvalidBatchId(batchId);\\n        }\\n\\n        if (_storage.batches[batchId].certificationDate <= block.timestamp) {\\n            revert BatchCertified(batchId);\\n        }\\n\\n        if (amountIn == 0) {\\n            revert InvalidInput();\\n        }\\n\\n        DomainDataTypes.Category storage category = _storage.categories[\\n            _storage.batchCategory[batchId]\\n        ];\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(\\n            _storage,\\n            batchId\\n        );\\n\\n        (, uint reactiveTA) = ReactiveTimeAppreciationMath.computeReactiveTA(category, amountIn);\\n\\n        (cbtUserCut, cbtDaoCut, cbtForfeited) = SolidMath.computeCollateralizationOutcome(\\n            _storage.batches[batchId].certificationDate,\\n            amountIn,\\n            reactiveTA,\\n            _storage.collateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n    }\\n\\n    /// @param _storage Struct containing the current state used or modified by this function\\n    /// @param collateralizationFee fee for collateralizing ERC1155 tokens\\n    function setCollateralizationFee(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint16 collateralizationFee\\n    ) external {\\n        _storage.collateralizationFee = collateralizationFee;\\n\\n        emit CollateralizationFeeUpdated(collateralizationFee);\\n    }\\n\\n    function _updateBatchTA(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint batchId,\\n        uint reactiveTA,\\n        uint toBeCollateralizedForwardCredits,\\n        uint toBeMintedCBT,\\n        uint cbtDecimals\\n    ) internal {\\n        DomainDataTypes.Batch storage batch = _storage.batches[batchId];\\n        uint collateralizedForwardCredits = _storage._forwardContractBatch.balanceOf(\\n            address(this),\\n            batch.id\\n        );\\n        if (collateralizedForwardCredits == 0) {\\n            batch.batchTA = uint24(reactiveTA);\\n            return;\\n        }\\n\\n        (uint circulatingCBT, , ) = SolidMath.computeCollateralizationOutcome(\\n            batch.certificationDate,\\n            collateralizedForwardCredits,\\n            batch.batchTA,\\n            0, // compute without fee\\n            cbtDecimals\\n        );\\n\\n        batch.batchTA = uint24(\\n            ReactiveTimeAppreciationMath.inferBatchTA(\\n                circulatingCBT + toBeMintedCBT,\\n                collateralizedForwardCredits + toBeCollateralizedForwardCredits,\\n                batch.certificationDate,\\n                cbtDecimals\\n            )\\n        );\\n    }\\n\\n    function _rebalanceCategory(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint categoryId,\\n        uint reactiveTA,\\n        uint currentCollateralizedAmount,\\n        uint decayingMomentum\\n    ) internal {\\n        DomainDataTypes.Category storage category = _storage.categories[categoryId];\\n\\n        uint latestAverageTA = (category.averageTA *\\n            category.totalCollateralized +\\n            reactiveTA *\\n            currentCollateralizedAmount) /\\n            (category.totalCollateralized + currentCollateralizedAmount);\\n\\n        category.averageTA = uint24(latestAverageTA);\\n        category.totalCollateralized += currentCollateralizedAmount;\\n        category.lastCollateralizationMomentum = decayingMomentum + currentCollateralizedAmount;\\n        category.lastCollateralizationTimestamp = uint32(block.timestamp);\\n\\n        emit CategoryRebalanced(categoryId, latestAverageTA, category.totalCollateralized);\\n    }\\n\\n    function _getCollateralizedTokenForBatchId(\\n        SolidWorldManagerStorage.Storage storage _storage,\\n        uint batchId\\n    ) internal view returns (CollateralizedBasketToken) {\\n        uint projectId = _storage.batches[batchId].projectId;\\n        uint categoryId = _storage.projectCategory[projectId];\\n\\n        return _storage.categoryToken[categoryId];\\n    }\\n}\\n\",\"keccak256\":\"0x56cc1d632f6b85a39b1598c0ba826df9681c5d0f3a68c66f04a01f850a5d6c44\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c806311bd8696146100505780633c8f4d3f1461007257806379be5d60146100a4575b600080fd5b81801561005c57600080fd5b5061007061006b366004611fe2565b6100c4565b005b610085610080366004612019565b610113565b6040805193845260208401929092529082015260600160405180910390f35b8180156100b057600080fd5b506100706100bf366004612045565b610334565b600e8201805461ffff60a01b1916600160a01b61ffff8416908102919091179091556040517f3a9c3d19b54b2e3f3f98d9114e62f0bae208d7e9b303286f2ffc42c95d7813c390600090a25050565b60008281526002840160205260408120548190819060ff1661015057604051632e46319160e21b8152600481018690526024015b60405180910390fd5b600085815260048701602052604090206002015442600160a01b90910463ffffffff161161019457604051630406a37f60e01b815260048101869052602401610147565b836000036101b55760405163b4fa3fb360e01b815260040160405180910390fd5b60008581526008870160209081526040808320548352600389019091528120906101df888861076c565b604080516101008101825284548152600185015464ffffffffff8116602083015261ffff650100000000008204169282019290925262ffffff600160381b830481166060830152600160501b9092049091166080820152600284015460a0820152600384015463ffffffff1660c0820152600484015460e082015290915060009061026a90886107ab565b9150506103228960040160008a815260200190815260200160002060020160149054906101000a900463ffffffff1663ffffffff1688838c600e0160149054906101000a900461ffff1661ffff16866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031a9190612077565b60ff166108b9565b919b909a509098509650505050505050565b600083815260028501602052604090205460ff1661036857604051632e46319160e21b815260048101849052602401610147565b600083815260048501602052604090206002015442600160a01b90910463ffffffff16116103ac57604051630406a37f60e01b815260048101849052602401610147565b816000036103cd5760405163b4fa3fb360e01b815260040160405180910390fd5b600083815260088501602090815260408083205483526003808801835281842082516101008101845281548152600182015464ffffffffff81169582019590955261ffff650100000000008604169381019390935262ffffff600160381b850481166060850152600160501b9094049093166080830152600283015460a083015282015463ffffffff1660c082015260049091015460e0820152819061047390856107ab565b915091506000610483878761076c565b90506000806105118960040160008a815260200190815260200160002060020160149054906101000a900463ffffffff1663ffffffff1688868c600e0160149054906101000a900461ffff1661ffff16876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f6573d6000803e3d6000fd5b509150915085821015610541576040516323fd80cf60e01b81526004810183905260248101879052604401610147565b6105bc8989868a61055286886120b0565b886001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b49190612077565b60ff16610956565b600088815260088a0160205260409020546105db908a90868a89610a9e565b6040516340c10f1960e01b8152336004820152602481018390526001600160a01b038416906340c10f1990604401600060405180830381600087803b15801561062357600080fd5b505af1158015610637573d6000803e3d6000fd5b50505050600e8901546040516340c10f1960e01b81526001600160a01b03918216600482015260248101839052908416906340c10f1990604401600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b50505050600b890154604051637921219560e11b8152336004820152306024820152604481018a90526064810189905260a06084820152600060a48201526001600160a01b039091169063f242432a9060c401600060405180830381600087803b15801561070c57600080fd5b505af1158015610720573d6000803e3d6000fd5b5050604080518a8152602081018690523393508b92507f996fd5dc95553bf61923ea1e658357de4a30175141a8fab02ae6ae2ed8c6d32e910160405180910390a3505050505050505050565b60008181526004830160209081526040808320600101548352600785018252808320548352600585019091529020546001600160a01b03165b92915050565b60008083600001516000036107ce575050608082015160009062ffffff166108b2565b6107f2846020015164ffffffffff168560e001518660c0015163ffffffff16610b9d565b915060006108016002856120d9565b61080b90846120b0565b9050600061082d82620f42408860000151606461082891906120fb565b610bf0565b9050620f424081106108555760405163c72b5be960e01b815260048101869052602401610147565b600061086082610ca5565b905080876060015188608001516108779190612112565b62ffffff1661088691906120b0565b9350620f424084106108ae5760405163c72b5be960e01b815260048101879052602401610147565b5050505b9250929050565b60008060004288116108cd576108cd612135565b60006108d9878a610d29565b905060006108fe6108ea838b6120fb565b6108f588600a61222f565b620f4240610bf0565b9050600061090f8289612710610bf0565b9050600061091d828461223b565b905060008361092d8a600a61222f565b610937908e6120fb565b610941919061223b565b919d929c50909a509098505050505050505050565b600085815260048781016020526040808320600b8a015481549251627eeac760e11b81523094810194909452602484019290925292916001600160a01b039091169062fdd58e90604401602060405180830381865afa1580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e1919061224e565b905080600003610a0e5750600201805462ffffff60d81b1916600160d81b62ffffff871602179055610a96565b6002820154600090610a3d90600160a01b810463ffffffff16908490600160d81b900462ffffff1684886108b9565b50509050610a728582610a5091906120b0565b610a5a88856120b0565b6002860154600160a01b900463ffffffff1687610db8565b83600201601b6101000a81548162ffffff021916908362ffffff1602179055505050505b505050505050565b600084815260038601602052604081206002810154909190610ac19085906120b0565b610acb85876120fb565b60028401546001850154610aeb9190600160501b900462ffffff166120fb565b610af591906120b0565b610aff91906120d9565b60018301805462ffffff60501b1916600160501b62ffffff8416021790556002830180549192508591600090610b369084906120b0565b90915550610b46905084846120b0565b600483015560038201805463ffffffff19164263ffffffff161790556002820154604051829088907fd0c98409f17c45dc9f0e272df73b5b8056534c9822bb3f6d02f91c9922a9f95e90600090a450505050505050565b600080610baa834261223b565b90506000610bb886836120fb565b610bc79064174876e800612267565b9050610bd4600082610e73565b9050610be6858264174876e800610bf0565b9695505050505050565b6000808060001985870985870292508281108382030391505080600003610c2a57838281610c2057610c206120c3565b0492505050610c9e565b808411610c3657600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b600080610cb583620f424061223b565b90506000610cc682620f4240610e8a565b90506000610cd382610ec4565b90506000610ce7610ce2610efe565b610f12565b90506000610cfd610cf88484610f67565b610f9e565b90506000610d0e82620f4240610ff3565b9050610d1d81620f424061223b565b98975050505050505050565b600080610d36428461105e565b905080600003610d4c57620f42409150506107a5565b80600103610d6957610d6184620f424061223b565b9150506107a5565b6000610d7885620f424061223b565b90506000610d8982620f4240610e8a565b90506000610da182610d9c60018761223b565b6110ba565b9050610dad8184610ff3565b979650505050505050565b60008415801590610dc857508315155b610dd457610dd4612135565b6000610de0428561105e565b905080600003610df4576000915050610e6b565b6000610e02610ce2836112d3565b90506000610e2488610e1587600a61222f565b610e1f908a6120fb565b610e8a565b90506000610e3182610ec4565b90506000610e42610cf88386610f67565b90506000610e5382620f4240610ff3565b9050610e6281620f424061223b565b96505050505050505b949350505050565b600081831215610e835781610c9e565b5090919050565b600081600003610e9957600080fd5b6000610ea584846112f1565b905060016001607f1b036001600160801b0382161115610c9e57600080fd5b60008082600f0b13610ed557600080fd5b6080610ee083611456565b600f0b6fb17217f7d1cf79abc9e3b39803f2f6af02901c9050919050565b6000610f0d610209600a610e8a565b905090565b600081600f0b600003610f2457600080fd5b600082600f0b600160801b81610f3c57610f3c6120c3565b05905060016001607f1b03198112801590610f5e575060016001607f1b038113155b6107a557600080fd5b6000600f83810b9083900b0260401d60016001607f1b03198112801590610f95575060016001607f1b038113155b610c9e57600080fd5b6000600160461b82600f0b12610fb357600080fd5b683fffffffffffffffff1982600f0b1215610fd057506000919050565b6107a5608083600f0b700171547652b82fe1777d0ffda0d23a7d1202901d611531565b600081600003611005575060006107a5565b600083600f0b121561101657600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b0381111561104557600080fd5b60401b811981111561105657600080fd5b019392505050565b600082158061106b575081155b1561109357604051631c5dcecf60e31b81526004810184905260248101839052604401610147565b8282116110a2575060006107a5565b62093a806110b0848461223b565b610c9e91906120d9565b600080600084600f0b1280156110d35750826001166001145b905060008085600f0b126110e757846110ec565b846000035b6001600160801b03169050600160801b600160401b821161118157603f82901b91505b8415611179576001851615611124578102607f1c5b908002607f1c90600285161561113a578102607f1c5b908002607f1c906004851615611150578102607f1c5b908002607f1c906008851615611166578102607f1c5b60049490941c93908002607f1c9061110f565b60401c611297565b603f600160601b83101561119b5760209290921b91601f19015b600160701b8310156111b35760109290921b91600f19015b600160781b8310156111cb5760089290921b91600719015b6001607c1b8310156111e35760049290921b91600319015b6001607e1b8310156111fb5760029290921b91600119015b6001607f1b8310156112135760019290921b91600019015b60005b8615611280576040821061122957600080fd5b600187161561124f57918302607f1c918101600160801b83111561124f57600192831c92015b928002607f1c9260019190911b90600160801b841061127457600193841c9391909101905b600187901c9650611216565b6040811061128d57600080fd5b6040039190911c90505b6000836112a457816112a9565b816000035b905060016001607f1b031981128015906112ca575060016001607f1b038113155b610be657600080fd5b6000677fffffffffffffff8211156112ea57600080fd5b5060401b90565b60008160000361130057600080fd5b60006001600160c01b03841161132b5782604085901b81611323576113236120c3565b049050611442565b60c084811c6401000000008110611344576020918201911c5b620100008110611356576010918201911c5b6101008110611367576008918201911c5b60108110611377576004918201911c5b60048110611387576002918201911c5b60028110611396576001820191505b60bf820360018603901c6001018260ff0387901b816113b7576113b76120c3565b0492506001600160801b038311156113ce57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b828110156113fa576001820391505b608084901b92900382811015611411576001820391505b829003608084901c821461142757611427612135565b888181611436576114366120c3565b04870196505050505050505b6001600160801b03811115610c9e57600080fd5b60008082600f0b1361146757600080fd5b6000600f83900b600160401b8112611481576040918201911d5b6401000000008112611495576020918201911d5b6201000081126114a7576010918201911d5b61010081126114b8576008918201911d5b601081126114c8576004918201911d5b600481126114d8576002918201911d5b600281126114e7576001820191505b603f19820160401b600f85900b607f8490031b6001603f1b5b60008113156115265790800260ff81901c8281029390930192607f011c9060011d611500565b509095945050505050565b6000600160461b82600f0b1261154657600080fd5b683fffffffffffffffff1982600f0b121561156357506000919050565b6001607f1b60006001603f1b8416600f0b13156115915770016a09e667f3bcc908b2fb1366ea957d3e0260801c5b60008367400000000000000016600f0b13156115be577001306fe0a31b7152de8d5a46305c85edec0260801c5b60008367200000000000000016600f0b13156115eb577001172b83c7d517adcdf7c8c50eb14a791f0260801c5b60008367100000000000000016600f0b13156116185770010b5586cf9890f6298b92b71842a983630260801c5b60008367080000000000000016600f0b1315611645577001059b0d31585743ae7c548eb68ca417fd0260801c5b60008367040000000000000016600f0b131561167257700102c9a3e778060ee6f7caca4f7a29bde80260801c5b60008367020000000000000016600f0b131561169f5770010163da9fb33356d84a66ae336dcdfa3f0260801c5b600083600160381b16600f0b13156116c857700100b1afa5abcbed6129ab13ec11dc95430260801c5b600083668000000000000016600f0b13156116f45770010058c86da1c09ea1ff19d294cf2f679b0260801c5b600083664000000000000016600f0b1315611720577001002c605e2e8cec506d21bfc89a23a00f0260801c5b600083662000000000000016600f0b131561174c57700100162f3904051fa128bca9c55c31e5df0260801c5b600083661000000000000016600f0b1315611778577001000b175effdc76ba38e31671ca9397250260801c5b600083660800000000000016600f0b13156117a457700100058ba01fb9f96d6cacd4b180917c3d0260801c5b600083660400000000000016600f0b13156117d05770010002c5cc37da9491d0985c348c68e7b30260801c5b600083660200000000000016600f0b13156117fc577001000162e525ee054754457d59952920260260801c5b600083660100000000000016600f0b13156118285770010000b17255775c040618bf4a4ade83fc0260801c5b6000836580000000000016600f0b1315611853577001000058b91b5bc9ae2eed81e9b7d4cfab0260801c5b6000836540000000000016600f0b131561187e57700100002c5c89d5ec6ca4d7c8acc017b7c90260801c5b6000836520000000000016600f0b13156118a95770010000162e43f4f831060e02d839a9d16d0260801c5b6000836510000000000016600f0b13156118d457700100000b1721bcfc99d9f890ea069117630260801c5b6000836508000000000016600f0b13156118ff5770010000058b90cf1e6d97f9ca14dbcc16280260801c5b6000836504000000000016600f0b131561192a577001000002c5c863b73f016468f6bac5ca2b0260801c5b6000836502000000000016600f0b131561195557700100000162e430e5a18f6119e3c02282a50260801c5b6000836501000000000016600f0b1315611980577001000000b1721835514b86e6d96efd1bfe0260801c5b60008364800000000016600f0b13156119aa57700100000058b90c0b48c6be5df846c5b2ef0260801c5b60008364400000000016600f0b13156119d45770010000002c5c8601cc6b9e94213c72737a0260801c5b60008364200000000016600f0b13156119fe577001000000162e42fff037df38aa2b219f060260801c5b60008364100000000016600f0b1315611a285770010000000b17217fba9c739aa5819f44f90260801c5b60008364080000000016600f0b1315611a52577001000000058b90bfcdee5acd3c1cedc8230260801c5b60008364040000000016600f0b1315611a7c57700100000002c5c85fe31f35a6a30da1be500260801c5b60008364020000000016600f0b1315611aa65770010000000162e42ff0999ce3541b9fffcf0260801c5b60008364010000000016600f0b1315611ad057700100000000b17217f80f4ef5aadda455540260801c5b600083638000000016600f0b1315611af95770010000000058b90bfbf8479bd5a81b51ad0260801c5b600083634000000016600f0b1315611b22577001000000002c5c85fdf84bd62ae30a74cc0260801c5b600083632000000016600f0b1315611b4b57700100000000162e42fefb2fed257559bdaa0260801c5b600083631000000016600f0b1315611b74577001000000000b17217f7d5a7716bba4a9ae0260801c5b600083630800000016600f0b1315611b9d57700100000000058b90bfbe9ddbac5e109cce0260801c5b600083630400000016600f0b1315611bc65770010000000002c5c85fdf4b15de6f17eb0d0260801c5b600083630200000016600f0b1315611bef577001000000000162e42fefa494f1478fde050260801c5b600083630100000016600f0b1315611c185770010000000000b17217f7d20cf927c8e94c0260801c5b6000836280000016600f0b1315611c40577001000000000058b90bfbe8f71cb4e4b33d0260801c5b6000836240000016600f0b1315611c6857700100000000002c5c85fdf477b662b269450260801c5b6000836220000016600f0b1315611c905770010000000000162e42fefa3ae53369388c0260801c5b6000836210000016600f0b1315611cb857700100000000000b17217f7d1d351a389d400260801c5b6000836208000016600f0b1315611ce05770010000000000058b90bfbe8e8b2d3d4ede0260801c5b6000836204000016600f0b1315611d08577001000000000002c5c85fdf4741bea6e77e0260801c5b6000836202000016600f0b1315611d3057700100000000000162e42fefa39fe95583c20260801c5b6000836201000016600f0b1315611d58577001000000000000b17217f7d1cfb72b45e10260801c5b60008361800016600f0b1315611d7f57700100000000000058b90bfbe8e7cc35c3f00260801c5b60008361400016600f0b1315611da65770010000000000002c5c85fdf473e242ea380260801c5b60008361200016600f0b1315611dcd577001000000000000162e42fefa39f02b772c0260801c5b60008361100016600f0b1315611df45770010000000000000b17217f7d1cf7d83c1a0260801c5b60008361080016600f0b1315611e1b577001000000000000058b90bfbe8e7bdcbe2e0260801c5b60008361040016600f0b1315611e4257700100000000000002c5c85fdf473dea871f0260801c5b60008361020016600f0b1315611e695770010000000000000162e42fefa39ef44d910260801c5b60008361010016600f0b1315611e9057700100000000000000b17217f7d1cf79e9490260801c5b600083608016600f0b1315611eb65770010000000000000058b90bfbe8e7bce5440260801c5b600083604016600f0b1315611edc577001000000000000002c5c85fdf473de6eca0260801c5b600083602016600f0b1315611f0257700100000000000000162e42fefa39ef366f0260801c5b600083601016600f0b1315611f28577001000000000000000b17217f7d1cf79afa0260801c5b600083600816600f0b1315611f4e57700100000000000000058b90bfbe8e7bcd6d0260801c5b600083600416600f0b1315611f745770010000000000000002c5c85fdf473de6b20260801c5b600083600216600f0b1315611f9a577001000000000000000162e42fefa39ef3580260801c5b600083600116600f0b1315611fc05770010000000000000000b17217f7d1cf79ab0260801c5b600f83810b60401d603f03900b1c60016001607f1b038111156107a557600080fd5b60008060408385031215611ff557600080fd5b82359150602083013561ffff8116811461200e57600080fd5b809150509250929050565b60008060006060848603121561202e57600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561205b57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561208957600080fd5b815160ff81168114610c9e57600080fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156107a5576107a561209a565b634e487b7160e01b600052601260045260246000fd5b6000826120f657634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176107a5576107a561209a565b62ffffff82811682821603908082111561212e5761212e61209a565b5092915050565b634e487b7160e01b600052600160045260246000fd5b600181815b8085111561218657816000190482111561216c5761216c61209a565b8085161561217957918102915b93841c9390800290612150565b509250929050565b60008261219d575060016107a5565b816121aa575060006107a5565b81600181146121c057600281146121ca576121e6565b60019150506107a5565b60ff8411156121db576121db61209a565b50506001821b6107a5565b5060208310610133831016604e8410600b8410161715612209575081810a6107a5565b612213838361214b565b80600019048211156122275761222761209a565b029392505050565b6000610c9e838361218e565b818103818111156107a5576107a561209a565b60006020828403121561226057600080fd5b5051919050565b818103600083128015838313168383128216171561212e5761212e61209a56fea26469706673582212209c59b28a659811c082a2c03e609dd1594a00889605baf3746c4c918b316ca3b064736f6c63430008110033",
  "devdoc": {
    "author": "Solid World DAO",
    "kind": "dev",
    "methods": {
      "collateralizeBatch(SolidWorldManagerStorage.Storage storage,uint256,uint256,uint256)": {
        "details": "Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`",
        "params": {
          "_storage": "Struct containing the current state used or modified by this function",
          "amountIn": "ERC1155 tokens to collateralize",
          "amountOutMin": "minimum output amount of ERC20 tokens for transaction to succeed",
          "batchId": "id of the batch"
        }
      },
      "setCollateralizationFee(SolidWorldManagerStorage.Storage storage,uint16)": {
        "params": {
          "_storage": "Struct containing the current state used or modified by this function",
          "collateralizationFee": "fee for collateralizing ERC1155 tokens"
        }
      },
      "simulateBatchCollateralization(SolidWorldManagerStorage.Storage storage,uint256,uint256)": {
        "details": "Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender",
        "params": {
          "_storage": "Struct containing the current state used or modified by this function",
          "amountIn": "ERC1155 tokens to collateralize",
          "batchId": "id of the batch"
        },
        "returns": {
          "cbtDaoCut": "ERC20 tokens to be received by feeReceiver",
          "cbtForfeited": "ERC20 tokens forfeited for collateralizing the ERC1155 tokens",
          "cbtUserCut": "ERC20 tokens to be received by msg.sender"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Handles batch collateralization operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}