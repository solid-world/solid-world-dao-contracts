{
  "address": "0x252E7f78c44fA4514FAc465Bbf156A33f720607f",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "NotEmissionAdmin",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "EmissionAdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint88",
              "name": "emissionPerSecond",
              "type": "uint88"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "distributionEnd",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "contract IEACAggregatorProxy",
              "name": "rewardOracle",
              "type": "address"
            }
          ],
          "internalType": "struct RewardsDataTypes.DistributionConfig[]",
          "name": "config",
          "type": "tuple[]"
        }
      ],
      "name": "configureAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCarbonRewardsManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        }
      ],
      "name": "getEmissionAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsController",
      "outputs": [
        {
          "internalType": "contract IRewardsController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "carbonRewardsManager",
          "type": "address"
        }
      ],
      "name": "setCarbonRewardsManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "setClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "newDistributionEnd",
          "type": "uint32"
        }
      ],
      "name": "setDistributionEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "setEmissionAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "emissionManager",
          "type": "address"
        }
      ],
      "name": "setEmissionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rewards",
          "type": "address[]"
        },
        {
          "internalType": "uint88[]",
          "name": "newEmissionsPerSecond",
          "type": "uint88[]"
        }
      ],
      "name": "setEmissionPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "internalType": "contract IEACAggregatorProxy",
          "name": "rewardOracle",
          "type": "address"
        }
      ],
      "name": "setRewardOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "setRewardsController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "setRewardsVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "solidStaking",
          "type": "address"
        }
      ],
      "name": "setSolidStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IWeeklyCarbonRewardsManager",
          "name": "carbonRewardsManager",
          "type": "address"
        },
        {
          "internalType": "contract IRewardsController",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "setup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "categoryIds",
          "type": "uint256[]"
        }
      ],
      "name": "updateCarbonRewardDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0678f32ea09f0db2d6d589e07b64bf00866c0deda6ae248072278c35bc9d7c87",
  "receipt": {
    "to": null,
    "from": "0x8B3A08b22d25C60e4b2BfD984e331568ECa4C299",
    "contractAddress": "0x252E7f78c44fA4514FAc465Bbf156A33f720607f",
    "transactionIndex": 28,
    "gasUsed": "1250026",
    "logsBloom": "0x
    "blockHash": "0xd5a79e9f2b0cc67f6d4f95b237bc66fe4b37e7f3e17f77e454d49f5d448eb869",
    "transactionHash": "0x0678f32ea09f0db2d6d589e07b64bf00866c0deda6ae248072278c35bc9d7c87",
    "logs": [
      {
        "transactionIndex": 28,
        "blockNumber": 8209876,
        "transactionHash": "0x0678f32ea09f0db2d6d589e07b64bf00866c0deda6ae248072278c35bc9d7c87",
        "address": "0x252E7f78c44fA4514FAc465Bbf156A33f720607f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b3a08b22d25c60e4b2bfd984e331568eca4c299"
        ],
        "data": "0x",
        "logIndex": 60,
        "blockHash": "0xd5a79e9f2b0cc67f6d4f95b237bc66fe4b37e7f3e17f77e454d49f5d448eb869"
      }
    ],
    "blockNumber": 8209876,
    "cumulativeGasUsed": "8297043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e024d1a9c4342b7c692f63ce5523d09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"NotEmissionAdmin\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"EmissionAdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint88\",\"name\":\"emissionPerSecond\",\"type\":\"uint88\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"distributionEnd\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"internalType\":\"struct RewardsDataTypes.DistributionConfig[]\",\"name\":\"config\",\"type\":\"tuple[]\"}],\"name\":\"configureAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCarbonRewardsManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getEmissionAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsController\",\"outputs\":[{\"internalType\":\"contract IRewardsController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"carbonRewardsManager\",\"type\":\"address\"}],\"name\":\"setCarbonRewardsManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"setClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"newDistributionEnd\",\"type\":\"uint32\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setEmissionAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"emissionManager\",\"type\":\"address\"}],\"name\":\"setEmissionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rewards\",\"type\":\"address[]\"},{\"internalType\":\"uint88[]\",\"name\":\"newEmissionsPerSecond\",\"type\":\"uint88[]\"}],\"name\":\"setEmissionPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"contract IEACAggregatorProxy\",\"name\":\"rewardOracle\",\"type\":\"address\"}],\"name\":\"setRewardOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"setRewardsController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"setRewardsVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"solidStaking\",\"type\":\"address\"}],\"name\":\"setSolidStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IWeeklyCarbonRewardsManager\",\"name\":\"carbonRewardsManager\",\"type\":\"address\"},{\"internalType\":\"contract IRewardsController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"categoryIds\",\"type\":\"uint256[]\"}],\"name\":\"updateCarbonRewardDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"configureAssets((uint88,uint256,uint32,address,address,address)[])\":{\"details\":\"Configure assets to incentivize with an emission of rewards per second until the end of distribution.Only callable by the emission admin of the given rewards\",\"params\":{\"config\":\"The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\"}},\"getCarbonRewardsManager()\":{\"returns\":{\"_0\":\"The address of the IWeeklyCarbonRewardsManager implementation contract\"}},\"getEmissionAdmin(address)\":{\"details\":\"Returns the admin of the given reward emission\",\"params\":{\"reward\":\"The address of the reward token\"},\"returns\":{\"_0\":\"The address of the emission admin\"}},\"getRewardsController()\":{\"details\":\"Returns the rewards controller address\",\"returns\":{\"_0\":\"The address of the RewardsController contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCarbonRewardsManager(address)\":{\"details\":\"Only callable by the owner of the EmissionManager\",\"params\":{\"carbonRewardsManager\":\"the address of the IWeeklyCarbonRewardsManager contract\"}},\"setClaimer(address,address)\":{\"details\":\"Whitelists an address to claim the rewards on behalf of another addressOnly callable by the owner of the EmissionManager\",\"params\":{\"claimer\":\"The address of the claimer\",\"user\":\"The address of the user\"}},\"setDistributionEnd(address,address,uint32)\":{\"details\":\"Sets the end date for the distributionOnly callable by the emission admin of the given reward\",\"params\":{\"asset\":\"The asset to incentivize\",\"newDistributionEnd\":\"The end date of the incentivization, in unix time format\",\"reward\":\"The reward token that incentives the asset\"}},\"setEmissionAdmin(address,address)\":{\"details\":\"Updates the admin of the reward emissionOnly callable by the owner of the EmissionManager\",\"params\":{\"admin\":\"The address of the new admin of the emission\",\"reward\":\"The address of the reward token\"}},\"setEmissionManager(address)\":{\"details\":\"Updates the address of the emission managerOnly callable by the owner of the EmissionManager\",\"params\":{\"emissionManager\":\"The address of the new EmissionManager\"}},\"setEmissionPerSecond(address,address[],uint88[])\":{\"details\":\"Sets the emission per second of a set of reward distributions\",\"params\":{\"asset\":\"The asset is being incentivized\",\"newEmissionsPerSecond\":\"List of new reward emissions per second\",\"rewards\":\"List of reward addresses are being distributed\"}},\"setRewardOracle(address,address)\":{\"details\":\"Sets an Aave Oracle contract to enforce rewards with a source of value.Only callable by the emission admin of the given reward\",\"params\":{\"reward\":\"The address of the reward to set the price aggregator\",\"rewardOracle\":\"The address of price aggregator that follows IEACAggregatorProxy interface\"}},\"setRewardsController(address)\":{\"details\":\"Updates the address of the rewards controllerOnly callable by the owner of the EmissionManager\",\"params\":{\"controller\":\"the address of the RewardsController contract\"}},\"setRewardsVault(address)\":{\"details\":\"Only callable by the owner of the EmissionManager\",\"params\":{\"rewardsVault\":\"The address of the account that secures ERC20 rewards.\"}},\"setSolidStaking(address)\":{\"details\":\"Only callable by the owner of the EmissionManager\",\"params\":{\"solidStaking\":\"Used to fetch the total amount staked and the stake of an user for a given asset\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCarbonRewardDistribution(address[],uint256[])\":{\"details\":\"Computes and mints weekly carbon rewards, and instructs RewardsController how to distribute them\",\"params\":{\"_categoryIds\":\"The categories to which the incentivized assets belong\",\"assets\":\"The incentivized assets (hypervisors)\"}}},\"title\":\"EmissionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setRewardOracle(address,address)\":{\"notice\":\"At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry\"}},\"notice\":\"It manages the list of admins of reward emissions and provides functions to control reward emissions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rewards/EmissionManager.sol\":\"EmissionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PostConstruct.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// @notice Simple contract exposing a modifier used on setup functions\\n/// to prevent them from being called more than once\\n/// @author Solid World DAO\\nabstract contract PostConstruct {\\n    error AlreadyInitialized();\\n\\n    bool private _initialized;\\n\\n    modifier postConstruct() {\\n        if (_initialized) {\\n            revert AlreadyInitialized();\\n        }\\n        _initialized = true;\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xec67f7a041da46fe31a40c4ad3ebcd731338298cdc9ac3696a2864ae7dc285e9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/manager/IWeeklyCarbonRewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// @title The interface weekly carbon rewards processing\\n/// @notice Computes and mints weekly carbon rewards\\n/// @author Solid World DAO\\ninterface IWeeklyCarbonRewardsManager {\\n    event WeeklyRewardMinted(address indexed rewardToken, uint indexed rewardAmount);\\n\\n    /// @dev Thrown if minting weekly rewards is called by an unauthorized account\\n    error UnauthorizedRewardMinting(address account);\\n\\n    /// @param _weeklyRewardsMinter The only account allowed to mint weekly carbon rewards\\n    function setWeeklyRewardsMinter(address _weeklyRewardsMinter) external;\\n\\n    /// @param assets The incentivized assets (LP tokens)\\n    /// @param _categoryIds The categories to which the incentivized assets belong\\n    /// @return carbonRewards List of carbon rewards getting distributed.\\n    /// @return rewardAmounts List of carbon reward amounts getting distributed\\n    function computeWeeklyCarbonRewards(address[] calldata assets, uint[] calldata _categoryIds)\\n        external\\n        view\\n        returns (address[] memory carbonRewards, uint[] memory rewardAmounts);\\n\\n    /// @param _categoryIds The categories to which the incentivized assets belong\\n    /// @param carbonRewards List of carbon rewards to mint\\n    /// @param rewardAmounts List of carbon reward amounts to mint\\n    /// @param rewardsVault Account that secures ERC20 rewards\\n    function mintWeeklyCarbonRewards(\\n        uint[] calldata _categoryIds,\\n        address[] calldata carbonRewards,\\n        uint[] calldata rewardAmounts,\\n        address rewardsVault\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cfdc5932aa7a228245ae84b4daf0ad933e2ca9d84c2f8c94b9bf7edc215fbaf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/rewards/IEACAggregatorProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.7.6 <0.9.0;\\n\\ninterface IEACAggregatorProxy {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int);\\n}\\n\",\"keccak256\":\"0x6c46f7648a422b34af86a026ab91a8b9adf3b6e73a159226aec7baf5cdc6dc51\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/rewards/IEmissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"../../libraries/RewardsDataTypes.sol\\\";\\nimport \\\"./IRewardsController.sol\\\";\\n\\n/// @title IEmissionManager\\n/// @author Aave\\n/// @notice Defines the basic interface for the Emission Manager\\ninterface IEmissionManager {\\n    error NotEmissionAdmin(address sender, address reward);\\n\\n    /// @dev Emitted when the admin of a reward emission is updated.\\n    /// @param reward The address of the rewarding token\\n    /// @param oldAdmin The address of the old emission admin\\n    /// @param newAdmin The address of the new emission admin\\n    event EmissionAdminUpdated(\\n        address indexed reward,\\n        address indexed oldAdmin,\\n        address indexed newAdmin\\n    );\\n\\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n    /// @dev Only callable by the emission admin of the given rewards\\n    /// @param config The assets configuration input, the list of structs contains the following fields:\\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n    ///   uint256 totalSupply: The total supply of the asset to incentivize\\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n    ///   address asset: The asset address to incentivize\\n    ///   address reward: The reward token address\\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\\n\\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n    /// @dev Only callable by the emission admin of the given reward\\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n    /// This check is enforced for integrators to be able to show incentives at\\n    /// the current Aave UI without the need to setup an external price registry\\n    /// @param reward The address of the reward to set the price aggregator\\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n    /// @dev Sets the end date for the distribution\\n    /// @dev Only callable by the emission admin of the given reward\\n    /// @param asset The asset to incentivize\\n    /// @param reward The reward token that incentives the asset\\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /// @dev Sets the emission per second of a set of reward distributions\\n    /// @param asset The asset is being incentivized\\n    /// @param rewards List of reward addresses are being distributed\\n    /// @param newEmissionsPerSecond List of new reward emissions per second\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /// @dev Computes and mints weekly carbon rewards, and instructs RewardsController how to distribute them\\n    /// @param assets The incentivized assets (hypervisors)\\n    /// @param _categoryIds The categories to which the incentivized assets belong\\n    function updateCarbonRewardDistribution(address[] calldata assets, uint[] calldata _categoryIds)\\n        external;\\n\\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    function setClaimer(address user, address claimer) external;\\n\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    function setRewardsVault(address rewardsVault) external;\\n\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    function setSolidStaking(address solidStaking) external;\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function setEmissionManager(address emissionManager) external;\\n\\n    /// @dev Updates the admin of the reward emission\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param reward The address of the reward token\\n    /// @param admin The address of the new admin of the emission\\n    function setEmissionAdmin(address reward, address admin) external;\\n\\n    /// @dev Updates the address of the rewards controller\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param controller the address of the RewardsController contract\\n    function setRewardsController(address controller) external;\\n\\n    /// @dev Only callable by the owner of the EmissionManager\\n    /// @param carbonRewardsManager the address of the IWeeklyCarbonRewardsManager contract\\n    function setCarbonRewardsManager(address carbonRewardsManager) external;\\n\\n    /// @dev Returns the rewards controller address\\n    /// @return The address of the RewardsController contract\\n    function getRewardsController() external view returns (IRewardsController);\\n\\n    /// @dev Returns the admin of the given reward emission\\n    /// @param reward The address of the reward token\\n    /// @return The address of the emission admin\\n    function getEmissionAdmin(address reward) external view returns (address);\\n\\n    /// @return The address of the IWeeklyCarbonRewardsManager implementation contract\\n    function getCarbonRewardsManager() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe326b2ced2b8baa5a32436052e820c621d8668a692b3c2222bc48694bbabb449\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/rewards/IRewardsController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IRewardsDistributor.sol\\\";\\nimport \\\"../../libraries/RewardsDataTypes.sol\\\";\\n\\n/// @title IRewardsController\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Controller.\\ninterface IRewardsController is IRewardsDistributor {\\n    error UnauthorizedClaimer(address claimer, address user);\\n    error NotSolidStaking(address sender);\\n    error InvalidRewardOracle(address reward, address rewardOracle);\\n\\n    /// @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /// @dev Emitted when rewards are claimed\\n    /// @param user The address of the user rewards has been claimed on behalf of\\n    /// @param reward The address of the token reward is claimed\\n    /// @param to The address of the receiver of the rewards\\n    /// @param claimer The address of the claimer\\n    /// @param amount The amount of rewards claimed\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed reward,\\n        address indexed to,\\n        address claimer,\\n        uint amount\\n    );\\n\\n    /// @dev Emitted when the reward oracle is updated\\n    /// @param reward The address of the token reward\\n    /// @param rewardOracle The address of oracle\\n    event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    event RewardsVaultUpdated(address indexed rewardsVault);\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    event SolidStakingUpdated(address indexed solidStaking);\\n\\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\\n    /// @param user The address of the user\\n    /// @param claimer The address of the claimer\\n    function setClaimer(address user, address claimer) external;\\n\\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\\n    /// This check is enforced for integrators to be able to show incentives at\\n    /// the current Aave UI without the need to setup an external price registry\\n    /// @param reward The address of the reward to set the price aggregator\\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\\n\\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\\n    function setRewardsVault(address rewardsVault) external;\\n\\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\\n    function setSolidStaking(address solidStaking) external;\\n\\n    /// @dev Get the price aggregator oracle address\\n    /// @param reward The address of the reward\\n    /// @return The price oracle of the reward\\n    function getRewardOracle(address reward) external view returns (address);\\n\\n    /// @return Account that secures ERC20 rewards.\\n    function getRewardsVault() external view returns (address);\\n\\n    /// @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n    /// @param user The address of the user\\n    /// @return The claimer address\\n    function getClaimer(address user) external view returns (address);\\n\\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\\n    /// @param config The assets configuration input, the list of structs contains the following fields:\\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\\n    ///   uint256 totalStaked: The total amount staked of the asset\\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\\n    ///   address asset: The asset address to incentivize\\n    ///   address reward: The reward token address\\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\\n\\n    /// @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n    /// @param asset The incentivized asset address\\n    /// @param user The address of the user whose asset balance has changed\\n    /// @param oldUserStake The amount of assets staked by the user, prior to stake change\\n    /// @param oldTotalStaked The total amount staked of the asset, prior to stake change\\n    function handleUserStakeChanged(\\n        address asset,\\n        address user,\\n        uint oldUserStake,\\n        uint oldTotalStaked\\n    ) external;\\n\\n    /// @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\\n    /// be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @param user The address to check and claim rewards\\n    /// @param to The address that will be receiving the rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsOnBehalf(\\n        address[] calldata assets,\\n        address user,\\n        address to\\n    ) external returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n\\n    /// @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\\n    /// @return rewardsList List of addresses of the reward tokens\\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardsList\\\"\\n    function claimAllRewardsToSelf(address[] calldata assets)\\n        external\\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\\n}\\n\",\"keccak256\":\"0x5d62f023ff560d45c68b8ab0c68cd82851ffe572fcf05c157c9134900e2b5758\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/rewards/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// @title IRewardsDistributor\\n/// @author Aave\\n/// @notice Defines the basic interface for a Rewards Distributor.\\ninterface IRewardsDistributor {\\n    error NotEmissionManager(address sender);\\n    error InvalidInput();\\n    error InvalidAssetDecimals(address asset);\\n    error IndexOverflow(uint newIndex);\\n    error DistributionNonExistent(address asset, address reward);\\n\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    error UpdateDistributionNotApplicable(address asset, address reward);\\n\\n    /// @dev Emitted when the configuration of the rewards of an asset is updated.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param oldEmission The old emissions per second value of the reward distribution\\n    /// @param newEmission The new emissions per second value of the reward distribution\\n    /// @param oldDistributionEnd The old end timestamp of the reward distribution\\n    /// @param newDistributionEnd The new end timestamp of the reward distribution\\n    /// @param assetIndex The index of the asset distribution\\n    event AssetConfigUpdated(\\n        address indexed asset,\\n        address indexed reward,\\n        uint oldEmission,\\n        uint newEmission,\\n        uint oldDistributionEnd,\\n        uint newDistributionEnd,\\n        uint assetIndex\\n    );\\n\\n    /// @dev Emitted when rewards of an asset are accrued on behalf of a user.\\n    /// @param asset The address of the incentivized asset\\n    /// @param reward The address of the reward token\\n    /// @param user The address of the user that rewards are accrued on behalf of\\n    /// @param assetIndex The index of the asset distribution\\n    /// @param userIndex The index of the asset distribution on behalf of the user\\n    /// @param rewardsAccrued The amount of rewards accrued\\n    event Accrued(\\n        address indexed asset,\\n        address indexed reward,\\n        address indexed user,\\n        uint assetIndex,\\n        uint userIndex,\\n        uint rewardsAccrued\\n    );\\n\\n    /// @dev Emitted when the emission manager address is updated.\\n    /// @param oldEmissionManager The address of the old emission manager\\n    /// @param newEmissionManager The address of the new emission manager\\n    event EmissionManagerUpdated(\\n        address indexed oldEmissionManager,\\n        address indexed newEmissionManager\\n    );\\n\\n    /// @dev Sets the end date for the distribution\\n    /// @param asset The asset to incentivize\\n    /// @param reward The reward token that incentives the asset\\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external;\\n\\n    /// @dev Sets the emission per second of a set of reward distributions\\n    /// @param asset The asset is being incentivized\\n    /// @param rewards List of reward addresses are being distributed\\n    /// @param newEmissionsPerSecond List of new reward emissions per second\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external;\\n\\n    /// @dev Updates weekly reward distributions\\n    /// @param assets List of incentivized assets getting updated\\n    /// @param rewards List of reward tokens getting updated\\n    /// @param rewardAmounts List of carbon reward amounts getting distributed\\n    function updateCarbonRewardDistribution(\\n        address[] calldata assets,\\n        address[] calldata rewards,\\n        uint[] calldata rewardAmounts\\n    ) external;\\n\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return true, if distribution can be updated for the asset - reward pair\\n    function canUpdateCarbonRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Gets the end date for the distribution\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The timestamp with the end of the distribution, in unix time format\\n    function getDistributionEnd(address asset, address reward) external view returns (uint);\\n\\n    /// @dev Returns the index of a user on a reward distribution\\n    /// @param user Address of the user\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The current user asset index, not including new distributions\\n    function getUserIndex(\\n        address user,\\n        address asset,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns the configuration of the distribution reward for a certain asset\\n    /// @param asset The incentivized asset\\n    /// @param reward The reward token of the incentivized asset\\n    /// @return The index of the asset distribution\\n    /// @return The emission per second of the reward distribution\\n    /// @return The timestamp of the last update of the index\\n    /// @return The timestamp of the distribution end\\n    function getRewardDistribution(address asset, address reward)\\n        external\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint,\\n            uint\\n        );\\n\\n    /// @dev Returns the list of available reward token addresses of an incentivized asset\\n    /// @param asset The incentivized asset\\n    /// @return List of rewards addresses of the input asset\\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\\n\\n    /// @dev Returns the list of available reward addresses\\n    /// @return List of rewards supported in this contract\\n    function getAllRewards() external view returns (address[] memory);\\n\\n    /// @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return Unclaimed rewards, not including new distributions\\n    function getAccruedRewardAmountForUser(address user, address reward)\\n        external\\n        view\\n        returns (uint);\\n\\n    /// @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @param reward The address of the reward token\\n    /// @return The rewards amount\\n    function getUnclaimedRewardAmountForUserAndAssets(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint);\\n\\n    /// @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n    /// @param assets List of incentivized assets to check eligible distributions\\n    /// @param user The address of the user\\n    /// @return The list of reward addresses\\n    /// @return The list of unclaimed amount of rewards\\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory, uint[] memory);\\n\\n    /// @dev Returns the decimals of an asset to calculate the distribution delta\\n    /// @param asset The address to retrieve decimals\\n    /// @return The decimals of an underlying asset\\n    function getAssetDecimals(address asset) external view returns (uint8);\\n\\n    /// @dev Returns the address of the emission manager\\n    /// @return The address of the EmissionManager\\n    function getEmissionManager() external view returns (address);\\n\\n    /// @dev Updates the address of the emission manager\\n    /// @param emissionManager The address of the new EmissionManager\\n    function setEmissionManager(address emissionManager) external;\\n}\\n\",\"keccak256\":\"0x71b674bf8b53613b5a0497f131b86beaed3183e52da3e85bfe0942540cffe40b\",\"license\":\"UNLICENSED\"},\"contracts/libraries/RewardsDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"../interfaces/rewards/IEACAggregatorProxy.sol\\\";\\n\\nlibrary RewardsDataTypes {\\n    struct DistributionConfig {\\n        uint88 emissionPerSecond;\\n        uint totalStaked;\\n        uint32 distributionEnd;\\n        address asset;\\n        address reward;\\n        IEACAggregatorProxy rewardOracle;\\n    }\\n\\n    struct AssetStakedAmounts {\\n        address asset;\\n        uint userStake;\\n        uint totalStaked;\\n    }\\n\\n    struct AssetData {\\n        mapping(address => RewardDistribution) rewardDistribution;\\n        mapping(uint128 => address) availableRewards;\\n        uint128 availableRewardsCount;\\n        uint8 decimals;\\n    }\\n\\n    struct RewardDistribution {\\n        uint104 index;\\n        uint88 emissionPerSecond;\\n        uint32 lastUpdateTimestamp;\\n        uint32 distributionEnd;\\n        mapping(address => UserReward) userReward;\\n    }\\n\\n    struct UserReward {\\n        uint104 index;\\n        uint128 accrued;\\n    }\\n}\\n\",\"keccak256\":\"0x0253ff2f736710dcb43de7c4a75740b755089c1a8b50c71c1f4d1c2e0e675c16\",\"license\":\"UNLICENSED\"},\"contracts/rewards/EmissionManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/rewards/IEmissionManager.sol\\\";\\nimport \\\"../interfaces/manager/IWeeklyCarbonRewardsManager.sol\\\";\\nimport \\\"../PostConstruct.sol\\\";\\n\\n/// @title EmissionManager\\n/// @author Aave\\n/// @notice It manages the list of admins of reward emissions and provides functions to control reward emissions.\\ncontract EmissionManager is Ownable, IEmissionManager, PostConstruct, ReentrancyGuard {\\n    // reward => emissionAdmin\\n    mapping(address => address) internal _emissionAdmins;\\n\\n    IWeeklyCarbonRewardsManager internal _carbonRewardsManager;\\n    IRewardsController internal _rewardsController;\\n    address internal carbonRewardAdmin;\\n\\n    modifier onlyEmissionAdmin(address reward) {\\n        if (_emissionAdmins[reward] != msg.sender) {\\n            revert NotEmissionAdmin(msg.sender, reward);\\n        }\\n        _;\\n    }\\n\\n    function setup(\\n        IWeeklyCarbonRewardsManager carbonRewardsManager,\\n        IRewardsController controller,\\n        address owner\\n    ) external postConstruct {\\n        _carbonRewardsManager = carbonRewardsManager;\\n        _rewardsController = controller;\\n        transferOwnership(owner);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config)\\n        external\\n        override\\n    {\\n        for (uint i; i < config.length; i++) {\\n            if (_emissionAdmins[config[i].reward] != msg.sender) {\\n                revert NotEmissionAdmin(msg.sender, config[i].reward);\\n            }\\n        }\\n        _rewardsController.configureAssets(config);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle)\\n        external\\n        override\\n        onlyEmissionAdmin(reward)\\n    {\\n        _rewardsController.setRewardOracle(reward, rewardOracle);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setDistributionEnd(\\n        address asset,\\n        address reward,\\n        uint32 newDistributionEnd\\n    ) external override onlyEmissionAdmin(reward) {\\n        _rewardsController.setDistributionEnd(asset, reward, newDistributionEnd);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setEmissionPerSecond(\\n        address asset,\\n        address[] calldata rewards,\\n        uint88[] calldata newEmissionsPerSecond\\n    ) external override {\\n        for (uint i; i < rewards.length; i++) {\\n            if (_emissionAdmins[rewards[i]] != msg.sender) {\\n                revert NotEmissionAdmin(msg.sender, rewards[i]);\\n            }\\n        }\\n        _rewardsController.setEmissionPerSecond(asset, rewards, newEmissionsPerSecond);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function updateCarbonRewardDistribution(address[] calldata assets, uint[] calldata categoryIds)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        (address[] memory carbonRewards, uint[] memory rewardAmounts) = _carbonRewardsManager\\n            .computeWeeklyCarbonRewards(assets, categoryIds);\\n\\n        _rewardsController.updateCarbonRewardDistribution(assets, carbonRewards, rewardAmounts);\\n\\n        _carbonRewardsManager.mintWeeklyCarbonRewards(\\n            categoryIds,\\n            carbonRewards,\\n            rewardAmounts,\\n            _rewardsController.getRewardsVault()\\n        );\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setClaimer(address user, address claimer) external override onlyOwner {\\n        _rewardsController.setClaimer(user, claimer);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setRewardsVault(address rewardsVault) external override onlyOwner {\\n        _rewardsController.setRewardsVault(rewardsVault);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setEmissionManager(address emissionManager) external override onlyOwner {\\n        _rewardsController.setEmissionManager(emissionManager);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setSolidStaking(address solidStaking) external override onlyOwner {\\n        _rewardsController.setSolidStaking(solidStaking);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setEmissionAdmin(address reward, address admin) external override onlyOwner {\\n        address oldAdmin = _emissionAdmins[reward];\\n        _emissionAdmins[reward] = admin;\\n        emit EmissionAdminUpdated(reward, oldAdmin, admin);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setRewardsController(address controller) external override onlyOwner {\\n        _rewardsController = IRewardsController(controller);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function setCarbonRewardsManager(address carbonRewardsManager) external override onlyOwner {\\n        _carbonRewardsManager = IWeeklyCarbonRewardsManager(carbonRewardsManager);\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function getRewardsController() external view override returns (IRewardsController) {\\n        return _rewardsController;\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function getEmissionAdmin(address reward) external view override returns (address) {\\n        return _emissionAdmins[reward];\\n    }\\n\\n    /// @inheritdoc IEmissionManager\\n    function getCarbonRewardsManager() external view override returns (address) {\\n        return address(_carbonRewardsManager);\\n    }\\n}\\n\",\"keccak256\":\"0x4ff55f63d51ca072a7d0d5d89d52e55fc60c83183d8975fc39bea0b7fb3feadd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a33610023565b60018055610073565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114cb806100826000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a286c6b4116100ad578063f2fde38b11610071578063f2fde38b14610256578063f5bb3e0214610269578063f5cf673b1461027c578063f996868b1461028f578063fdc560be146102a257600080fd5b8063a286c6b4146101f9578063bee36bb31461020c578063c040af691461021f578063c5a7b53814610232578063de2627381461024557600080fd5b8063704e7f45116100f4578063704e7f45146101a9578063707199e5146101ba578063715018a6146101cd57806377b8b1c7146101d55780638da5cb5b146101e857600080fd5b8063198af1f9146101265780634f7459d51461013b578063529b1e871461014e5780635453ba1014610196575b600080fd5b610139610134366004610c5d565b6102b5565b005b610139610149366004610c5d565b6102df565b61017a61015c366004610c5d565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b03909116815260200160405180910390f35b6101396101a4366004610c81565b61034c565b6003546001600160a01b031661017a565b6101396101c8366004610d82565b61040c565b6101396104fa565b6101396101e3366004610e8c565b61050e565b6000546001600160a01b031661017a565b610139610207366004610c81565b610589565b61013961021a366004610c5d565b6105f5565b61013961022d366004610c5d565b61061f565b610139610240366004610ed7565b61065b565b6004546001600160a01b031661017a565b610139610264366004610c5d565b610723565b610139610277366004610c5d565b61079c565b61013961028a366004610c81565b6107d8565b61013961029d366004610f6a565b61084d565b6101396102b0366004610fed565b61097d565b6102bd610b9e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6102e7610b9e565b60048054604051634f7459d560e01b81526001600160a01b0384811693820193909352911690634f7459d5906024015b600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b5050505050565b6001600160a01b03808316600090815260026020526040902054839116331461039e57604051638c34b5a560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b600480546040516305453ba160e41b81526001600160a01b03868116938201939093528483166024820152911690635453ba1090604401600060405180830381600087803b1580156103ef57600080fd5b505af1158015610403573d6000803e3d6000fd5b50505050505050565b60005b81518110156104ca57336001600160a01b03166002600084848151811061043857610438611059565b602090810291909101810151608001516001600160a01b039081168352908201929092526040016000205416146104b8573382828151811061047c5761047c611059565b602002602001015160800151604051638c34b5a560e01b81526004016103959291906001600160a01b0392831681529116602082015260400190565b806104c28161106f565b91505061040f565b506004805460405163707199e560e01b81526001600160a01b039091169163707199e59161031791859101611096565b610502610b9e565b61050c6000610bf8565b565b600054600160a01b900460ff16156105385760405162dc149f60e41b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b179055600380546001600160a01b038086166001600160a01b031992831617909255600480549285169290911691909117905561058481610723565b505050565b610591610b9e565b6001600160a01b0380831660008181526002602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917fda40ea421dd7e42cf8be71255facac4fdc12a3f70f4d5fd373cb16cec4cb53849190a4505050565b6105fd610b9e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610627610b9e565b6004805460405163c040af6960e01b81526001600160a01b038481169382019390935291169063c040af6990602401610317565b6001600160a01b0380831660009081526002602052604090205483911633146106a857604051638c34b5a560e01b81523360048201526001600160a01b0382166024820152604401610395565b600480546040516318b4f6a760e31b81526001600160a01b0387811693820193909352858316602482015263ffffffff8516604482015291169063c5a7b53890606401600060405180830381600087803b15801561070557600080fd5b505af1158015610719573d6000803e3d6000fd5b5050505050505050565b61072b610b9e565b6001600160a01b0381166107905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610395565b61079981610bf8565b50565b6107a4610b9e565b60048054604051637add9f0160e11b81526001600160a01b038481169382019390935291169063f5bb3e0290602401610317565b6107e0610b9e565b6004805460405163f5cf673b60e01b81526001600160a01b0385811693820193909352838316602482015291169063f5cf673b90604401600060405180830381600087803b15801561083157600080fd5b505af1158015610845573d6000803e3d6000fd5b505050505050565b60005b8381101561090c57336002600087878581811061086f5761086f611059565b90506020020160208101906108849190610c5d565b6001600160a01b03908116825260208201929092526040016000205416146108fa57338585838181106108b9576108b9611059565b90506020020160208101906108ce9190610c5d565b604051638c34b5a560e01b81526001600160a01b03928316600482015291166024820152604401610395565b806109048161106f565b915050610850565b506004805460405163f996868b60e01b81526001600160a01b039091169163f996868b9161094491899189918991899189910161117b565b600060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050505050505050565b6002600154036109cf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610395565b600260015560035460405163074eb55560e21b815260009182916001600160a01b0390911690631d3ad55490610a0f908990899089908990600401611223565b600060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5491908101906112bb565b600480546040516338be719f60e01b81529395509193506001600160a01b03909116916338be719f91610a8f918a918a9188918891016113e9565b600060405180830381600087803b158015610aa957600080fd5b505af1158015610abd573d6000803e3d6000fd5b5050600354600480546040805163e23ddec560e01b815290516001600160a01b03948516965063adb4e05895508a948a948a948a9492169263e23ddec59280830192602092918290030181865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611423565b6040518663ffffffff1660e01b8152600401610b60959493929190611440565b600060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b5050600180555050505050505050565b6000546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610395565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461079957600080fd5b600060208284031215610c6f57600080fd5b8135610c7a81610c48565b9392505050565b60008060408385031215610c9457600080fd5b8235610c9f81610c48565b91506020830135610caf81610c48565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610cf357610cf3610cba565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d2257610d22610cba565b604052919050565b600067ffffffffffffffff821115610d4457610d44610cba565b5060051b60200190565b80356affffffffffffffffffffff81168114610d6957600080fd5b919050565b803563ffffffff81168114610d6957600080fd5b60006020808385031215610d9557600080fd5b823567ffffffffffffffff811115610dac57600080fd5b8301601f81018513610dbd57600080fd5b8035610dd0610dcb82610d2a565b610cf9565b81815260c09182028301840191848201919088841115610def57600080fd5b938501935b83851015610e805780858a031215610e0c5760008081fd5b610e14610cd0565b610e1d86610d4e565b815286860135878201526040610e34818801610d6e565b90820152606086810135610e4781610c48565b90820152608086810135610e5a81610c48565b9082015260a086810135610e6d81610c48565b9082015283529384019391850191610df4565b50979650505050505050565b600080600060608486031215610ea157600080fd5b8335610eac81610c48565b92506020840135610ebc81610c48565b91506040840135610ecc81610c48565b809150509250925092565b600080600060608486031215610eec57600080fd5b8335610ef781610c48565b92506020840135610f0781610c48565b9150610f1560408501610d6e565b90509250925092565b60008083601f840112610f3057600080fd5b50813567ffffffffffffffff811115610f4857600080fd5b6020830191508360208260051b8501011115610f6357600080fd5b9250929050565b600080600080600060608688031215610f8257600080fd5b8535610f8d81610c48565b9450602086013567ffffffffffffffff80821115610faa57600080fd5b610fb689838a01610f1e565b90965094506040880135915080821115610fcf57600080fd5b50610fdc88828901610f1e565b969995985093965092949392505050565b6000806000806040858703121561100357600080fd5b843567ffffffffffffffff8082111561101b57600080fd5b61102788838901610f1e565b9096509450602087013591508082111561104057600080fd5b5061104d87828801610f1e565b95989497509550505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161108f57634e487b7160e01b600052601160045260246000fd5b5060010190565b602080825282518282018190526000919060409081850190868401855b8281101561112557815180516affffffffffffffffffffff16855286810151878601528581015163ffffffff16868601526060808201516001600160a01b039081169187019190915260808083015182169087015260a091820151169085015260c090930192908501906001016110b3565b5091979650505050505050565b8183526000602080850194508260005b8581101561117057813561115581610c48565b6001600160a01b031687529582019590820190600101611142565b509495945050505050565b6001600160a01b0386168152606060208083018290526000916111a19084018789611132565b83810360408501528481528590820160005b868110156111e3576affffffffffffffffffffff6111d084610d4e565b16825291830191908301906001016111b3565b509998505050505050505050565b81835260006001600160fb1b0383111561120a57600080fd5b8260051b80836020870137939093016020019392505050565b604081526000611237604083018688611132565b828103602084015261124a8185876111f1565b979650505050505050565b600082601f83011261126657600080fd5b81516020611276610dcb83610d2a565b82815260059290921b8401810191818101908684111561129557600080fd5b8286015b848110156112b05780518352918301918301611299565b509695505050505050565b600080604083850312156112ce57600080fd5b825167ffffffffffffffff808211156112e657600080fd5b818501915085601f8301126112fa57600080fd5b8151602061130a610dcb83610d2a565b82815260059290921b8401810191818101908984111561132957600080fd5b948201945b8386101561135057855161134181610c48565b8252948201949082019061132e565b9188015191965090935050508082111561136957600080fd5b5061137685828601611255565b9150509250929050565b600081518084526020808501945080840160005b838110156111705781516001600160a01b031687529582019590820190600101611394565b600081518084526020808501945080840160005b83811015611170578151875295820195908201906001016113cd565b6060815260006113fd606083018688611132565b828103602084015261140f8186611380565b9050828103604084015261124a81856113b9565b60006020828403121561143557600080fd5b8151610c7a81610c48565b6080815260006114546080830187896111f1565b82810360208401526114668187611380565b9050828103604084015261147a81866113b9565b91505060018060a01b0383166060830152969550505050505056fea26469706673582212205983ab9be953f7c270db07d52b86cbae75efd70f75d3292e14341e1db65181b564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a286c6b4116100ad578063f2fde38b11610071578063f2fde38b14610256578063f5bb3e0214610269578063f5cf673b1461027c578063f996868b1461028f578063fdc560be146102a257600080fd5b8063a286c6b4146101f9578063bee36bb31461020c578063c040af691461021f578063c5a7b53814610232578063de2627381461024557600080fd5b8063704e7f45116100f4578063704e7f45146101a9578063707199e5146101ba578063715018a6146101cd57806377b8b1c7146101d55780638da5cb5b146101e857600080fd5b8063198af1f9146101265780634f7459d51461013b578063529b1e871461014e5780635453ba1014610196575b600080fd5b610139610134366004610c5d565b6102b5565b005b610139610149366004610c5d565b6102df565b61017a61015c366004610c5d565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b03909116815260200160405180910390f35b6101396101a4366004610c81565b61034c565b6003546001600160a01b031661017a565b6101396101c8366004610d82565b61040c565b6101396104fa565b6101396101e3366004610e8c565b61050e565b6000546001600160a01b031661017a565b610139610207366004610c81565b610589565b61013961021a366004610c5d565b6105f5565b61013961022d366004610c5d565b61061f565b610139610240366004610ed7565b61065b565b6004546001600160a01b031661017a565b610139610264366004610c5d565b610723565b610139610277366004610c5d565b61079c565b61013961028a366004610c81565b6107d8565b61013961029d366004610f6a565b61084d565b6101396102b0366004610fed565b61097d565b6102bd610b9e565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6102e7610b9e565b60048054604051634f7459d560e01b81526001600160a01b0384811693820193909352911690634f7459d5906024015b600060405180830381600087803b15801561033157600080fd5b505af1158015610345573d6000803e3d6000fd5b5050505050565b6001600160a01b03808316600090815260026020526040902054839116331461039e57604051638c34b5a560e01b81523360048201526001600160a01b03821660248201526044015b60405180910390fd5b600480546040516305453ba160e41b81526001600160a01b03868116938201939093528483166024820152911690635453ba1090604401600060405180830381600087803b1580156103ef57600080fd5b505af1158015610403573d6000803e3d6000fd5b50505050505050565b60005b81518110156104ca57336001600160a01b03166002600084848151811061043857610438611059565b602090810291909101810151608001516001600160a01b039081168352908201929092526040016000205416146104b8573382828151811061047c5761047c611059565b602002602001015160800151604051638c34b5a560e01b81526004016103959291906001600160a01b0392831681529116602082015260400190565b806104c28161106f565b91505061040f565b506004805460405163707199e560e01b81526001600160a01b039091169163707199e59161031791859101611096565b610502610b9e565b61050c6000610bf8565b565b600054600160a01b900460ff16156105385760405162dc149f60e41b815260040160405180910390fd5b6000805460ff60a01b1916600160a01b179055600380546001600160a01b038086166001600160a01b031992831617909255600480549285169290911691909117905561058481610723565b505050565b610591610b9e565b6001600160a01b0380831660008181526002602052604080822080548686166001600160a01b0319821681179092559151919094169392849290917fda40ea421dd7e42cf8be71255facac4fdc12a3f70f4d5fd373cb16cec4cb53849190a4505050565b6105fd610b9e565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610627610b9e565b6004805460405163c040af6960e01b81526001600160a01b038481169382019390935291169063c040af6990602401610317565b6001600160a01b0380831660009081526002602052604090205483911633146106a857604051638c34b5a560e01b81523360048201526001600160a01b0382166024820152604401610395565b600480546040516318b4f6a760e31b81526001600160a01b0387811693820193909352858316602482015263ffffffff8516604482015291169063c5a7b53890606401600060405180830381600087803b15801561070557600080fd5b505af1158015610719573d6000803e3d6000fd5b5050505050505050565b61072b610b9e565b6001600160a01b0381166107905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610395565b61079981610bf8565b50565b6107a4610b9e565b60048054604051637add9f0160e11b81526001600160a01b038481169382019390935291169063f5bb3e0290602401610317565b6107e0610b9e565b6004805460405163f5cf673b60e01b81526001600160a01b0385811693820193909352838316602482015291169063f5cf673b90604401600060405180830381600087803b15801561083157600080fd5b505af1158015610845573d6000803e3d6000fd5b505050505050565b60005b8381101561090c57336002600087878581811061086f5761086f611059565b90506020020160208101906108849190610c5d565b6001600160a01b03908116825260208201929092526040016000205416146108fa57338585838181106108b9576108b9611059565b90506020020160208101906108ce9190610c5d565b604051638c34b5a560e01b81526001600160a01b03928316600482015291166024820152604401610395565b806109048161106f565b915050610850565b506004805460405163f996868b60e01b81526001600160a01b039091169163f996868b9161094491899189918991899189910161117b565b600060405180830381600087803b15801561095e57600080fd5b505af1158015610972573d6000803e3d6000fd5b505050505050505050565b6002600154036109cf5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610395565b600260015560035460405163074eb55560e21b815260009182916001600160a01b0390911690631d3ad55490610a0f908990899089908990600401611223565b600060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5491908101906112bb565b600480546040516338be719f60e01b81529395509193506001600160a01b03909116916338be719f91610a8f918a918a9188918891016113e9565b600060405180830381600087803b158015610aa957600080fd5b505af1158015610abd573d6000803e3d6000fd5b5050600354600480546040805163e23ddec560e01b815290516001600160a01b03948516965063adb4e05895508a948a948a948a9492169263e23ddec59280830192602092918290030181865afa158015610b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b409190611423565b6040518663ffffffff1660e01b8152600401610b60959493929190611440565b600060405180830381600087803b158015610b7a57600080fd5b505af1158015610b8e573d6000803e3d6000fd5b5050600180555050505050505050565b6000546001600160a01b0316331461050c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610395565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461079957600080fd5b600060208284031215610c6f57600080fd5b8135610c7a81610c48565b9392505050565b60008060408385031215610c9457600080fd5b8235610c9f81610c48565b91506020830135610caf81610c48565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715610cf357610cf3610cba565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610d2257610d22610cba565b604052919050565b600067ffffffffffffffff821115610d4457610d44610cba565b5060051b60200190565b80356affffffffffffffffffffff81168114610d6957600080fd5b919050565b803563ffffffff81168114610d6957600080fd5b60006020808385031215610d9557600080fd5b823567ffffffffffffffff811115610dac57600080fd5b8301601f81018513610dbd57600080fd5b8035610dd0610dcb82610d2a565b610cf9565b81815260c09182028301840191848201919088841115610def57600080fd5b938501935b83851015610e805780858a031215610e0c5760008081fd5b610e14610cd0565b610e1d86610d4e565b815286860135878201526040610e34818801610d6e565b90820152606086810135610e4781610c48565b90820152608086810135610e5a81610c48565b9082015260a086810135610e6d81610c48565b9082015283529384019391850191610df4565b50979650505050505050565b600080600060608486031215610ea157600080fd5b8335610eac81610c48565b92506020840135610ebc81610c48565b91506040840135610ecc81610c48565b809150509250925092565b600080600060608486031215610eec57600080fd5b8335610ef781610c48565b92506020840135610f0781610c48565b9150610f1560408501610d6e565b90509250925092565b60008083601f840112610f3057600080fd5b50813567ffffffffffffffff811115610f4857600080fd5b6020830191508360208260051b8501011115610f6357600080fd5b9250929050565b600080600080600060608688031215610f8257600080fd5b8535610f8d81610c48565b9450602086013567ffffffffffffffff80821115610faa57600080fd5b610fb689838a01610f1e565b90965094506040880135915080821115610fcf57600080fd5b50610fdc88828901610f1e565b969995985093965092949392505050565b6000806000806040858703121561100357600080fd5b843567ffffffffffffffff8082111561101b57600080fd5b61102788838901610f1e565b9096509450602087013591508082111561104057600080fd5b5061104d87828801610f1e565b95989497509550505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161108f57634e487b7160e01b600052601160045260246000fd5b5060010190565b602080825282518282018190526000919060409081850190868401855b8281101561112557815180516affffffffffffffffffffff16855286810151878601528581015163ffffffff16868601526060808201516001600160a01b039081169187019190915260808083015182169087015260a091820151169085015260c090930192908501906001016110b3565b5091979650505050505050565b8183526000602080850194508260005b8581101561117057813561115581610c48565b6001600160a01b031687529582019590820190600101611142565b509495945050505050565b6001600160a01b0386168152606060208083018290526000916111a19084018789611132565b83810360408501528481528590820160005b868110156111e3576affffffffffffffffffffff6111d084610d4e565b16825291830191908301906001016111b3565b509998505050505050505050565b81835260006001600160fb1b0383111561120a57600080fd5b8260051b80836020870137939093016020019392505050565b604081526000611237604083018688611132565b828103602084015261124a8185876111f1565b979650505050505050565b600082601f83011261126657600080fd5b81516020611276610dcb83610d2a565b82815260059290921b8401810191818101908684111561129557600080fd5b8286015b848110156112b05780518352918301918301611299565b509695505050505050565b600080604083850312156112ce57600080fd5b825167ffffffffffffffff808211156112e657600080fd5b818501915085601f8301126112fa57600080fd5b8151602061130a610dcb83610d2a565b82815260059290921b8401810191818101908984111561132957600080fd5b948201945b8386101561135057855161134181610c48565b8252948201949082019061132e565b9188015191965090935050508082111561136957600080fd5b5061137685828601611255565b9150509250929050565b600081518084526020808501945080840160005b838110156111705781516001600160a01b031687529582019590820190600101611394565b600081518084526020808501945080840160005b83811015611170578151875295820195908201906001016113cd565b6060815260006113fd606083018688611132565b828103602084015261140f8186611380565b9050828103604084015261124a81856113b9565b60006020828403121561143557600080fd5b8151610c7a81610c48565b6080815260006114546080830187896111f1565b82810360208401526114668187611380565b9050828103604084015261147a81866113b9565b91505060018060a01b0383166060830152969550505050505056fea26469706673582212205983ab9be953f7c270db07d52b86cbae75efd70f75d3292e14341e1db65181b564736f6c63430008110033",
  "devdoc": {
    "author": "Aave",
    "kind": "dev",
    "methods": {
      "configureAssets((uint88,uint256,uint32,address,address,address)[])": {
        "details": "Configure assets to incentivize with an emission of rewards per second until the end of distribution.Only callable by the emission admin of the given rewards",
        "params": {
          "config": "The assets configuration input, the list of structs contains the following fields:   uint104 emissionPerSecond: The emission per second following rewards unit decimals.   uint256 totalSupply: The total supply of the asset to incentivize   uint40 distributionEnd: The end of the distribution of the incentives for an asset   address asset: The asset address to incentivize   address reward: The reward token address   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible."
        }
      },
      "getCarbonRewardsManager()": {
        "returns": {
          "_0": "The address of the IWeeklyCarbonRewardsManager implementation contract"
        }
      },
      "getEmissionAdmin(address)": {
        "details": "Returns the admin of the given reward emission",
        "params": {
          "reward": "The address of the reward token"
        },
        "returns": {
          "_0": "The address of the emission admin"
        }
      },
      "getRewardsController()": {
        "details": "Returns the rewards controller address",
        "returns": {
          "_0": "The address of the RewardsController contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCarbonRewardsManager(address)": {
        "details": "Only callable by the owner of the EmissionManager",
        "params": {
          "carbonRewardsManager": "the address of the IWeeklyCarbonRewardsManager contract"
        }
      },
      "setClaimer(address,address)": {
        "details": "Whitelists an address to claim the rewards on behalf of another addressOnly callable by the owner of the EmissionManager",
        "params": {
          "claimer": "The address of the claimer",
          "user": "The address of the user"
        }
      },
      "setDistributionEnd(address,address,uint32)": {
        "details": "Sets the end date for the distributionOnly callable by the emission admin of the given reward",
        "params": {
          "asset": "The asset to incentivize",
          "newDistributionEnd": "The end date of the incentivization, in unix time format",
          "reward": "The reward token that incentives the asset"
        }
      },
      "setEmissionAdmin(address,address)": {
        "details": "Updates the admin of the reward emissionOnly callable by the owner of the EmissionManager",
        "params": {
          "admin": "The address of the new admin of the emission",
          "reward": "The address of the reward token"
        }
      },
      "setEmissionManager(address)": {
        "details": "Updates the address of the emission managerOnly callable by the owner of the EmissionManager",
        "params": {
          "emissionManager": "The address of the new EmissionManager"
        }
      },
      "setEmissionPerSecond(address,address[],uint88[])": {
        "details": "Sets the emission per second of a set of reward distributions",
        "params": {
          "asset": "The asset is being incentivized",
          "newEmissionsPerSecond": "List of new reward emissions per second",
          "rewards": "List of reward addresses are being distributed"
        }
      },
      "setRewardOracle(address,address)": {
        "details": "Sets an Aave Oracle contract to enforce rewards with a source of value.Only callable by the emission admin of the given reward",
        "params": {
          "reward": "The address of the reward to set the price aggregator",
          "rewardOracle": "The address of price aggregator that follows IEACAggregatorProxy interface"
        }
      },
      "setRewardsController(address)": {
        "details": "Updates the address of the rewards controllerOnly callable by the owner of the EmissionManager",
        "params": {
          "controller": "the address of the RewardsController contract"
        }
      },
      "setRewardsVault(address)": {
        "details": "Only callable by the owner of the EmissionManager",
        "params": {
          "rewardsVault": "The address of the account that secures ERC20 rewards."
        }
      },
      "setSolidStaking(address)": {
        "details": "Only callable by the owner of the EmissionManager",
        "params": {
          "solidStaking": "Used to fetch the total amount staked and the stake of an user for a given asset"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCarbonRewardDistribution(address[],uint256[])": {
        "details": "Computes and mints weekly carbon rewards, and instructs RewardsController how to distribute them",
        "params": {
          "_categoryIds": "The categories to which the incentivized assets belong",
          "assets": "The incentivized assets (hypervisors)"
        }
      }
    },
    "title": "EmissionManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setRewardOracle(address,address)": {
        "notice": "At the moment of reward configuration, the Incentives Controller performs a check to see if the reward asset oracle is compatible with IEACAggregator proxy. This check is enforced for integrators to be able to show incentives at the current Aave UI without the need to setup an external price registry"
      }
    },
    "notice": "It manages the list of admins of reward emissions and provides functions to control reward emissions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 687,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6439,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 803,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 12294,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_emissionAdmins",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12297,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_carbonRewardsManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IWeeklyCarbonRewardsManager)8613"
      },
      {
        "astId": 12300,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "_rewardsController",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRewardsController)8940"
      },
      {
        "astId": 12302,
        "contract": "contracts/rewards/EmissionManager.sol:EmissionManager",
        "label": "carbonRewardAdmin",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRewardsController)8940": {
        "encoding": "inplace",
        "label": "contract IRewardsController",
        "numberOfBytes": "20"
      },
      "t_contract(IWeeklyCarbonRewardsManager)8613": {
        "encoding": "inplace",
        "label": "contract IWeeklyCarbonRewardsManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}