{
  "address": "0x7dA27a82d5A6D309234b6264457fa67369B80C44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "AmountOutLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "name": "AmountOutTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "BatchAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "BatchCertified",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "dueDate",
          "type": "uint32"
        }
      ],
      "name": "BatchDueDateInThePast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "CategoryAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        }
      ],
      "name": "IncorrectDates",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "InvalidBatchId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBatchOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "InvalidCategoryId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "InvalidProjectId",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "UnauthorizedRewardMinting",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "batchOwner",
          "type": "address"
        }
      ],
      "name": "BatchCollateralized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "CategoryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "averageTA",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalCollateralized",
          "type": "uint256"
        }
      ],
      "name": "CategoryRebalanced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "volumeCoefficient",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "decayPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxDepreciation",
          "type": "uint256"
        }
      ],
      "name": "CategoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokensOwner",
          "type": "address"
        }
      ],
      "name": "TokensDecollateralized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardAmount",
          "type": "uint256"
        }
      ],
      "name": "WeeklyRewardMinted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECOLLATERALIZATION_SIMULATION_INPUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "expectedDueDate",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "vintage",
              "type": "uint16"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint24",
              "name": "discountRate",
              "type": "uint24"
            }
          ],
          "internalType": "struct DomainDataTypes.Batch",
          "name": "batch",
          "type": "tuple"
        }
      ],
      "name": "addBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint24",
          "name": "initialTA",
          "type": "uint24"
        }
      ],
      "name": "addCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "addProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchCreated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batchIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "batches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "expectedDueDate",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "vintage",
          "type": "uint16"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "uint24",
          "name": "discountRate",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_batchIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsIn",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amountsOutMin",
          "type": "uint256[]"
        }
      ],
      "name": "bulkDecollateralizeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categories",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "volumeCoefficient",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "decayPerSecond",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "maxDepreciation",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "averageTA",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "totalCollateralized",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "lastCollateralizationTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "lastCollateralizationMomentum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryProjects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "categoryToken",
      "outputs": [
        {
          "internalType": "contract CollateralizedBasketToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "collateralizeBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizedBasketTokenDeployer",
      "outputs": [
        {
          "internalType": "contract CollateralizedBasketTokenDeployer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_categoryIds",
          "type": "uint256[]"
        }
      ],
      "name": "computeWeeklyCarbonRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "carbonRewards",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decollateralizationFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "decollateralizeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwardContractBatch",
      "outputs": [
        {
          "internalType": "contract ForwardContractBatchToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getBatchIdsByProject",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vintage",
          "type": "uint256"
        }
      ],
      "name": "getBatchesDecollateralizationInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "availableBatchTokens",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minCbtDaoCut",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainDataTypes.TokenDecollateralizationInfo[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        }
      ],
      "name": "getProjectIdsByCategory",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract CollateralizedBasketTokenDeployer",
          "name": "_collateralizedBasketTokenDeployer",
          "type": "address"
        },
        {
          "internalType": "contract ForwardContractBatchToken",
          "name": "_forwardContractBatch",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_collateralizationFee",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_decollateralizationFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weeklyRewardsMinter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_categoryIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "carbonRewards",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "rewardsVault",
          "type": "address"
        }
      ],
      "name": "mintWeeklyCarbonRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectBatches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectCategory",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectIds",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_collateralizationFee",
          "type": "uint16"
        }
      ],
      "name": "setCollateralizationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_decollateralizationFee",
          "type": "uint16"
        }
      ],
      "name": "setDecollateralizationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeReceiver",
          "type": "address"
        }
      ],
      "name": "setFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_weeklyRewardsMinter",
          "type": "address"
        }
      ],
      "name": "setWeeklyRewardsMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "simulateBatchCollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cbtUserCut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cbtDaoCut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cbtForfeited",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "simulateDecollateralization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minCbtDaoCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "categoryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volumeCoefficient",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "decayPerSecond",
          "type": "uint40"
        },
        {
          "internalType": "uint24",
          "name": "maxDepreciation",
          "type": "uint24"
        }
      ],
      "name": "updateCategory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weeklyRewardsMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x97f4198d40dba2a86412994ebdf578bde96037074c48c5efd2a4acdc6a1b3f6c",
  "receipt": {
    "to": null,
    "from": "0x8B3A08b22d25C60e4b2BfD984e331568ECa4C299",
    "contractAddress": "0x7dA27a82d5A6D309234b6264457fa67369B80C44",
    "transactionIndex": 12,
    "gasUsed": "3328749",
    "logsBloom": "0x
    "blockHash": "0xefeb5e40426253bdf8872b48aaad25f5eb34311a6e96ca0e45240a6785bb75fb",
    "transactionHash": "0x97f4198d40dba2a86412994ebdf578bde96037074c48c5efd2a4acdc6a1b3f6c",
    "logs": [],
    "blockNumber": 8209880,
    "cumulativeGasUsed": "4794275",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0e024d1a9c4342b7c692f63ce5523d09",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"AmountOutTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchCertified\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dueDate\",\"type\":\"uint32\"}],\"name\":\"BatchDueDateInThePast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"CategoryAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"}],\"name\":\"IncorrectDates\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"InvalidBatchId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"InvalidCategoryId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"InvalidProjectId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedRewardMinting\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"batchOwner\",\"type\":\"address\"}],\"name\":\"BatchCollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"CategoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"averageTA\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalCollateralized\",\"type\":\"uint256\"}],\"name\":\"CategoryRebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"volumeCoefficient\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"decayPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxDepreciation\",\"type\":\"uint256\"}],\"name\":\"CategoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokensOwner\",\"type\":\"address\"}],\"name\":\"TokensDecollateralized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"WeeklyRewardMinted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECOLLATERALIZATION_SIMULATION_INPUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expectedDueDate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"vintage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"discountRate\",\"type\":\"uint24\"}],\"internalType\":\"struct DomainDataTypes.Batch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"addBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint24\",\"name\":\"initialTA\",\"type\":\"uint24\"}],\"name\":\"addCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"addProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchCreated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"expectedDueDate\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"vintage\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint24\",\"name\":\"discountRate\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_batchIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsOutMin\",\"type\":\"uint256[]\"}],\"name\":\"bulkDecollateralizeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categories\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"decayPerSecond\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"maxDepreciation\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"averageTA\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"totalCollateralized\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastCollateralizationTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastCollateralizationMomentum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"categoryToken\",\"outputs\":[{\"internalType\":\"contract CollateralizedBasketToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"collateralizeBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizedBasketTokenDeployer\",\"outputs\":[{\"internalType\":\"contract CollateralizedBasketTokenDeployer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_categoryIds\",\"type\":\"uint256[]\"}],\"name\":\"computeWeeklyCarbonRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"carbonRewards\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decollateralizationFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"decollateralizeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwardContractBatch\",\"outputs\":[{\"internalType\":\"contract ForwardContractBatchToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getBatchIdsByProject\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vintage\",\"type\":\"uint256\"}],\"name\":\"getBatchesDecollateralizationInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBatchTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCbtDaoCut\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainDataTypes.TokenDecollateralizationInfo[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"}],\"name\":\"getProjectIdsByCategory\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract CollateralizedBasketTokenDeployer\",\"name\":\"_collateralizedBasketTokenDeployer\",\"type\":\"address\"},{\"internalType\":\"contract ForwardContractBatchToken\",\"name\":\"_forwardContractBatch\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_collateralizationFee\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_decollateralizationFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weeklyRewardsMinter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_categoryIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"carbonRewards\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"rewardsVault\",\"type\":\"address\"}],\"name\":\"mintWeeklyCarbonRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectBatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectCategory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_collateralizationFee\",\"type\":\"uint16\"}],\"name\":\"setCollateralizationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_decollateralizationFee\",\"type\":\"uint16\"}],\"name\":\"setDecollateralizationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_weeklyRewardsMinter\",\"type\":\"address\"}],\"name\":\"setWeeklyRewardsMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"simulateBatchCollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cbtUserCut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cbtDaoCut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cbtForfeited\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"simulateDecollateralization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minCbtDaoCut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"categoryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"decayPerSecond\",\"type\":\"uint40\"},{\"internalType\":\"uint24\",\"name\":\"maxDepreciation\",\"type\":\"uint24\"}],\"name\":\"updateCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyRewardsMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"UnauthorizedRewardMinting(address)\":[{\"details\":\"Thrown if minting weekly rewards is called by an unauthorized account\"}]},\"kind\":\"dev\",\"methods\":{\"bulkDecollateralizeTokens(uint256[],uint256[],uint256[])\":{\"details\":\"Bulk-decollateralizes ERC20 tokens into multiple ERC1155 tokens with specified amountsprior to calling, msg.sender must approve SolidWorldManager to spend `sum(amountsIn)` ERC20 tokens\",\"params\":{\"_batchIds\":\"ids of the batches\",\"amountsIn\":\"ERC20 tokens to decollateralize\",\"amountsOutMin\":\"minimum output amounts of ERC1155 tokens for transaction to succeed\"}},\"collateralizeBatch(uint256,uint256,uint256)\":{\"details\":\"Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`nonReentrant, to avoid possible reentrancy after calling safeTransferFrom\",\"params\":{\"amountIn\":\"ERC1155 tokens to collateralize\",\"amountOutMin\":\"minimum output amount of ERC20 tokens for transaction to succeed\",\"batchId\":\"id of the batch\"}},\"computeWeeklyCarbonRewards(address[],uint256[])\":{\"params\":{\"_categoryIds\":\"The categories to which the incentivized assets belong\",\"assets\":\"The incentivized assets (LP tokens)\"},\"returns\":{\"carbonRewards\":\"List of carbon rewards getting distributed.\",\"rewardAmounts\":\"List of carbon reward amounts getting distributed\"}},\"decollateralizeTokens(uint256,uint256,uint256)\":{\"details\":\"Decollateralizes `amountIn` of ERC20 tokens and sends `amountOut` ERC1155 tokens with id `batchId` to msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend `amountIn` ERC20 tokensnonReentrant, to avoid possible reentrancy after calling safeTransferFrom\",\"params\":{\"amountIn\":\"ERC20 tokens to decollateralize\",\"amountOutMin\":\"minimum output amount of ERC1155 tokens for transaction to succeed\",\"batchId\":\"id of the batch\"}},\"getBatchesDecollateralizationInfo(uint256,uint256)\":{\"details\":\"Computes relevant info for the decollateralization process involving batches that match the specified `projectId` and `vintage`\",\"params\":{\"projectId\":\"id of the project the batch belongs to\",\"vintage\":\"vintage of the batch\"},\"returns\":{\"result\":\"array of relevant info about matching batches\"}},\"mintWeeklyCarbonRewards(uint256[],address[],uint256[],address)\":{\"params\":{\"_categoryIds\":\"The categories to which the incentivized assets belong\",\"carbonRewards\":\"List of carbon rewards to mint\",\"rewardAmounts\":\"List of carbon reward amounts to mint\",\"rewardsVault\":\"Account that secures ERC20 rewards\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setWeeklyRewardsMinter(address)\":{\"params\":{\"_weeklyRewardsMinter\":\"The only account allowed to mint weekly carbon rewards\"}},\"simulateBatchCollateralization(uint256,uint256)\":{\"details\":\"Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender\",\"params\":{\"amountIn\":\"ERC1155 tokens to collateralize\",\"batchId\":\"id of the batch\"},\"returns\":{\"cbtDaoCut\":\"ERC20 tokens to be received by feeReceiver\",\"cbtForfeited\":\"ERC20 tokens forfeited for collateralizing the ERC1155 tokens\",\"cbtUserCut\":\"ERC20 tokens to be received by msg.sender\"}},\"simulateDecollateralization(uint256,uint256)\":{\"details\":\"Simulates decollateralization of `amountIn` ERC20 tokens for ERC1155 tokens with id `batchId`\",\"params\":{\"amountIn\":\"ERC20 tokens to decollateralize\",\"batchId\":\"id of the batch\"},\"returns\":{\"amountOut\":\"ERC1155 tokens to be received by msg.sender\",\"minAmountIn\":\"minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\",\"minCbtDaoCut\":\"ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"batchCreated\":{\"details\":\"BatchId => isAdded\"},\"batches\":{\"details\":\"BatchId => DomainDataTypes.Batch\"},\"categories\":{\"details\":\"CategoryId => DomainDataTypes.Category\"},\"categoryIds\":{\"details\":\"CategoryId => isAdded\"},\"categoryProjects\":{\"details\":\"CategoryId => ProjectId[]\"},\"categoryToken\":{\"details\":\"CategoryId => CollateralizedBasketToken address (ERC-20)\"},\"projectBatches\":{\"details\":\"ProjectId => BatchId[]\"},\"projectCategory\":{\"details\":\"ProjectId => CategoryId\"},\"projectIds\":{\"details\":\"ProjectId => isAdded\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DECOLLATERALIZATION_SIMULATION_INPUT()\":{\"notice\":\"Constant used as input for decollateralization simulation for ordering batches with the same category and vintage\"},\"batchCreated(uint256)\":{\"notice\":\"Property is used for checking if Batch ID is already added\"},\"batchIds(uint256)\":{\"notice\":\"Stores all batch ids ever created\"},\"batches(uint256)\":{\"notice\":\"Property stores info about a batch\"},\"categories(uint256)\":{\"notice\":\"Stores the state of categories\"},\"categoryIds(uint256)\":{\"notice\":\"Mapping is used for checking if Category ID is already added\"},\"categoryProjects(uint256,uint256)\":{\"notice\":\"Mapping determines what projects a category has\"},\"categoryToken(uint256)\":{\"notice\":\"Mapping determines a respective CollateralizedBasketToken (ERC-20) of a category\"},\"collateralizationFee()\":{\"notice\":\"Fee charged by DAO when collateralizing forward contract batch tokens.\"},\"collateralizedBasketTokenDeployer()\":{\"notice\":\"Contract that deploys new collateralized basket tokens. Allows this contract to mint tokens.\"},\"decollateralizationFee()\":{\"notice\":\"Fee charged by DAO when decollateralizing collateralized basket tokens.\"},\"feeReceiver()\":{\"notice\":\"The account where all protocol fees are captured.\"},\"forwardContractBatch()\":{\"notice\":\"Contract that operates forward contract batch tokens (ERC-1155). Allows this contract to mint tokens.\"},\"projectBatches(uint256,uint256)\":{\"notice\":\"Mapping determines what batches a project has\"},\"projectCategory(uint256)\":{\"notice\":\"Mapping determines what category a project belongs to\"},\"projectIds(uint256)\":{\"notice\":\"Property is used for checking if Project ID is already added\"},\"weeklyRewardsMinter()\":{\"notice\":\"The only account that is allowed to mint weekly carbon rewards\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SolidWorldManager.sol\":\"SolidWorldManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x447a21c87433c0f11252912313a96f3454629ef88cca7a4eefbb283b3ec409f9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`.\\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\\n        // This gives `2**k < a <= 2**(k+1)` \\u2192 `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1;\\n        uint256 x = a;\\n        if (x >> 128 > 0) {\\n            x >>= 128;\\n            result <<= 64;\\n        }\\n        if (x >> 64 > 0) {\\n            x >>= 64;\\n            result <<= 32;\\n        }\\n        if (x >> 32 > 0) {\\n            x >>= 32;\\n            result <<= 16;\\n        }\\n        if (x >> 16 > 0) {\\n            x >>= 16;\\n            result <<= 8;\\n        }\\n        if (x >> 8 > 0) {\\n            x >>= 8;\\n            result <<= 4;\\n        }\\n        if (x >> 4 > 0) {\\n            x >>= 4;\\n            result <<= 2;\\n        }\\n        if (x >> 2 > 0) {\\n            result <<= 1;\\n        }\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = sqrt(a);\\n        if (rounding == Rounding.Up && result * result < a) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd15c3e400531f00203839159b2b8e7209c5158b35618f570c695b7e47f12e9f0\",\"license\":\"MIT\"},\"contracts/CollateralizedBasketToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n/// @notice ERC-20 for working with forward commodity tokens\\n/// @author Solid World DAO\\ncontract CollateralizedBasketToken is ERC20Burnable, Ownable {\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n    function mint(address account, uint amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x037186540d4e5f349f738159c60ff9465d92ac0438814ffabac4a525698537fb\",\"license\":\"UNLICENSED\"},\"contracts/CollateralizedBasketTokenDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./CollateralizedBasketToken.sol\\\";\\n\\ncontract CollateralizedBasketTokenDeployer {\\n    function deploy(string calldata tokenName, string calldata tokenSymbol)\\n        external\\n        returns (CollateralizedBasketToken token)\\n    {\\n        token = new CollateralizedBasketToken(tokenName, tokenSymbol);\\n        token.transferOwnership(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde4704746224e7960476b02202fbda49a1c7244357d2a9484862ee8e9be90962\",\"license\":\"UNLICENSED\"},\"contracts/ForwardContractBatchToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @notice ERC-1155 for working with forward contract batch tokens\\n/// @author Solid World DAO\\ncontract ForwardContractBatchToken is ERC1155, Ownable {\\n    constructor(string memory uri) ERC1155(uri) {}\\n\\n    /// @dev only owner\\n    /// @param to address of the owner of new token\\n    /// @param id id of new token\\n    /// @param amount amount of new token\\n    /// @param data external data\\n    function mint(\\n        address to,\\n        uint id,\\n        uint amount,\\n        bytes memory data\\n    ) public onlyOwner {\\n        _mint(to, id, amount, data);\\n    }\\n\\n    /// @dev only owner\\n    /// @param account address of the owner of token what is burned\\n    /// @param id id of token what is burned\\n    /// @param amount amount of token what is burned\\n    function burn(\\n        address account,\\n        uint id,\\n        uint amount\\n    ) public onlyOwner {\\n        _burn(account, id, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x85b70058acabb3db1a305cf5eef89828c9bcdc23878e2dd04679409a3e46ad6a\",\"license\":\"UNLICENSED\"},\"contracts/SolidWorldManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./ForwardContractBatchToken.sol\\\";\\nimport \\\"./CollateralizedBasketToken.sol\\\";\\nimport \\\"./libraries/SolidMath.sol\\\";\\nimport \\\"./libraries/GPv2SafeERC20.sol\\\";\\nimport \\\"./interfaces/manager/IWeeklyCarbonRewardsManager.sol\\\";\\nimport \\\"./interfaces/manager/ISolidWorldManagerErrors.sol\\\";\\nimport \\\"./libraries/DomainDataTypes.sol\\\";\\nimport \\\"./CollateralizedBasketTokenDeployer.sol\\\";\\n\\ncontract SolidWorldManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    IERC1155ReceiverUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IWeeklyCarbonRewardsManager,\\n    ISolidWorldManagerErrors\\n{\\n    /// @notice Constant used as input for decollateralization simulation for ordering batches with the same category and vintage\\n    uint public constant DECOLLATERALIZATION_SIMULATION_INPUT = 1000e18;\\n\\n    /// @notice Mapping is used for checking if Category ID is already added\\n    /// @dev CategoryId => isAdded\\n    mapping(uint => bool) public categoryIds;\\n\\n    /// @notice Stores the state of categories\\n    /// @dev CategoryId => DomainDataTypes.Category\\n    mapping(uint => DomainDataTypes.Category) public categories;\\n\\n    /// @notice Property is used for checking if Project ID is already added\\n    /// @dev ProjectId => isAdded\\n    mapping(uint => bool) public projectIds;\\n\\n    /// @notice Property is used for checking if Batch ID is already added\\n    /// @dev BatchId => isAdded\\n    mapping(uint => bool) public batchCreated;\\n\\n    /// @notice Stores all batch ids ever created\\n    uint[] public batchIds;\\n\\n    /// @notice Property stores info about a batch\\n    /// @dev BatchId => DomainDataTypes.Batch\\n    mapping(uint => DomainDataTypes.Batch) public batches;\\n\\n    /// @notice Mapping determines a respective CollateralizedBasketToken (ERC-20) of a category\\n    /// @dev CategoryId => CollateralizedBasketToken address (ERC-20)\\n    mapping(uint => CollateralizedBasketToken) public categoryToken;\\n\\n    /// @notice Mapping determines what projects a category has\\n    /// @dev CategoryId => ProjectId[]\\n    mapping(uint => uint[]) public categoryProjects;\\n\\n    /// @notice Mapping determines what category a project belongs to\\n    /// @dev ProjectId => CategoryId\\n    mapping(uint => uint) public projectCategory;\\n\\n    /// @notice Mapping determines what batches a project has\\n    /// @dev ProjectId => BatchId[]\\n    mapping(uint => uint[]) public projectBatches;\\n\\n    /// @notice Contract that operates forward contract batch tokens (ERC-1155). Allows this contract to mint tokens.\\n    ForwardContractBatchToken public forwardContractBatch;\\n\\n    /// @notice The account where all protocol fees are captured.\\n    address public feeReceiver;\\n\\n    /// @notice The only account that is allowed to mint weekly carbon rewards\\n    address public weeklyRewardsMinter;\\n\\n    /// @notice Contract that deploys new collateralized basket tokens. Allows this contract to mint tokens.\\n    CollateralizedBasketTokenDeployer public collateralizedBasketTokenDeployer;\\n\\n    /// @notice Fee charged by DAO when collateralizing forward contract batch tokens.\\n    uint16 public collateralizationFee;\\n\\n    /// @notice Fee charged by DAO when decollateralizing collateralized basket tokens.\\n    uint16 public decollateralizationFee;\\n\\n    event BatchCollateralized(\\n        uint indexed batchId,\\n        uint amountIn,\\n        uint amountOut,\\n        address indexed batchOwner\\n    );\\n    event TokensDecollateralized(\\n        uint indexed batchId,\\n        uint amountIn,\\n        uint amountOut,\\n        address indexed tokensOwner\\n    );\\n    event CategoryCreated(uint indexed categoryId);\\n    event CategoryUpdated(\\n        uint indexed categoryId,\\n        uint indexed volumeCoefficient,\\n        uint indexed decayPerSecond,\\n        uint maxDepreciation\\n    );\\n    event CategoryRebalanced(\\n        uint indexed categoryId,\\n        uint indexed averageTA,\\n        uint indexed totalCollateralized\\n    );\\n    event ProjectCreated(uint indexed projectId);\\n    event BatchCreated(uint indexed batchId);\\n\\n    modifier validBatch(uint batchId) {\\n        if (!batchCreated[batchId]) {\\n            revert InvalidBatchId(batchId);\\n        }\\n        _;\\n    }\\n\\n    modifier batchUnderway(uint batchId) {\\n        if (_isBatchCertified(batchId)) {\\n            revert BatchCertified(batchId);\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        CollateralizedBasketTokenDeployer _collateralizedBasketTokenDeployer,\\n        ForwardContractBatchToken _forwardContractBatch,\\n        uint16 _collateralizationFee,\\n        uint16 _decollateralizationFee,\\n        address _feeReceiver,\\n        address _weeklyRewardsMinter\\n    ) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        collateralizedBasketTokenDeployer = _collateralizedBasketTokenDeployer;\\n        forwardContractBatch = _forwardContractBatch;\\n        collateralizationFee = _collateralizationFee;\\n        decollateralizationFee = _decollateralizationFee;\\n        feeReceiver = _feeReceiver;\\n        weeklyRewardsMinter = _weeklyRewardsMinter;\\n    }\\n\\n    // todo #121: add authorization\\n    function addCategory(\\n        uint categoryId,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        uint24 initialTA\\n    ) external {\\n        if (categoryIds[categoryId]) {\\n            revert CategoryAlreadyExists(categoryId);\\n        }\\n\\n        categoryIds[categoryId] = true;\\n        categoryToken[categoryId] = collateralizedBasketTokenDeployer.deploy(\\n            tokenName,\\n            tokenSymbol\\n        );\\n\\n        categories[categoryId].averageTA = initialTA;\\n\\n        emit CategoryCreated(categoryId);\\n    }\\n\\n    // todo #121: add authorization\\n    function updateCategory(\\n        uint categoryId,\\n        uint volumeCoefficient,\\n        uint40 decayPerSecond,\\n        uint24 maxDepreciation\\n    ) external {\\n        if (!categoryIds[categoryId]) {\\n            revert InvalidCategoryId(categoryId);\\n        }\\n\\n        categories[categoryId].volumeCoefficient = volumeCoefficient;\\n        categories[categoryId].decayPerSecond = decayPerSecond;\\n        categories[categoryId].maxDepreciation = maxDepreciation;\\n\\n        // todo #204: implement logic for updating the other fields of the category based on the new values\\n\\n        emit CategoryUpdated(categoryId, volumeCoefficient, decayPerSecond, maxDepreciation);\\n    }\\n\\n    // todo #121: add authorization\\n    function addProject(uint categoryId, uint projectId) external {\\n        if (!categoryIds[categoryId]) {\\n            revert InvalidCategoryId(categoryId);\\n        }\\n\\n        if (projectIds[projectId]) {\\n            revert ProjectAlreadyExists(projectId);\\n        }\\n\\n        categoryProjects[categoryId].push(projectId);\\n        projectCategory[projectId] = categoryId;\\n        projectIds[projectId] = true;\\n\\n        emit ProjectCreated(projectId);\\n    }\\n\\n    // todo #121: add authorization\\n    function addBatch(DomainDataTypes.Batch calldata batch) external {\\n        if (!projectIds[batch.projectId]) {\\n            revert InvalidProjectId(batch.projectId);\\n        }\\n\\n        if (batchCreated[batch.id]) {\\n            revert BatchAlreadyExists(batch.id);\\n        }\\n\\n        if (batch.owner == address(0)) {\\n            revert InvalidBatchOwner();\\n        }\\n\\n        if (batch.expectedDueDate <= block.timestamp) {\\n            revert BatchDueDateInThePast(batch.expectedDueDate);\\n        }\\n\\n        batchCreated[batch.id] = true;\\n        batches[batch.id] = batch;\\n        batchIds.push(batch.id);\\n        projectBatches[batch.projectId].push(batch.id);\\n        forwardContractBatch.mint(batch.owner, batch.id, batch.totalAmount, \\\"\\\");\\n\\n        emit BatchCreated(batch.id);\\n    }\\n\\n    // todo #121: add authorization\\n    /// @inheritdoc IWeeklyCarbonRewardsManager\\n    function setWeeklyRewardsMinter(address _weeklyRewardsMinter) external {\\n        weeklyRewardsMinter = _weeklyRewardsMinter;\\n    }\\n\\n    /// @inheritdoc IWeeklyCarbonRewardsManager\\n    function computeWeeklyCarbonRewards(address[] calldata assets, uint[] calldata _categoryIds)\\n        external\\n        view\\n        override\\n        returns (address[] memory carbonRewards, uint[] memory rewardAmounts)\\n    {\\n        if (assets.length != _categoryIds.length) {\\n            revert InvalidInput();\\n        }\\n\\n        carbonRewards = new address[](assets.length);\\n        rewardAmounts = new uint[](assets.length);\\n\\n        for (uint i; i < assets.length; i++) {\\n            uint categoryId = _categoryIds[i];\\n            if (!categoryIds[categoryId]) {\\n                revert InvalidCategoryId(categoryId);\\n            }\\n\\n            CollateralizedBasketToken rewardToken = categoryToken[categoryId];\\n            uint rewardAmount = _computeWeeklyCategoryReward(categoryId, rewardToken.decimals());\\n\\n            carbonRewards[i] = address(rewardToken);\\n            rewardAmounts[i] = rewardAmount;\\n        }\\n    }\\n\\n    /// @inheritdoc IWeeklyCarbonRewardsManager\\n    function mintWeeklyCarbonRewards(\\n        uint[] calldata _categoryIds,\\n        address[] calldata carbonRewards,\\n        uint[] calldata rewardAmounts,\\n        address rewardsVault\\n    ) external override {\\n        if (\\n            _categoryIds.length != carbonRewards.length ||\\n            carbonRewards.length != rewardAmounts.length\\n        ) {\\n            revert InvalidInput();\\n        }\\n\\n        if (msg.sender != weeklyRewardsMinter) {\\n            revert UnauthorizedRewardMinting(msg.sender);\\n        }\\n\\n        for (uint i; i < carbonRewards.length; i++) {\\n            address carbonReward = carbonRewards[i];\\n            CollateralizedBasketToken rewardToken = CollateralizedBasketToken(carbonReward);\\n            uint rewardAmount = rewardAmounts[i];\\n\\n            rewardToken.mint(rewardsVault, rewardAmount);\\n            emit WeeklyRewardMinted(carbonReward, rewardAmount);\\n\\n            _rebalanceCategory(_categoryIds[i]);\\n        }\\n    }\\n\\n    /// @dev Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.sender\\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`\\n    /// @dev nonReentrant, to avoid possible reentrancy after calling safeTransferFrom\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC1155 tokens to collateralize\\n    /// @param amountOutMin minimum output amount of ERC20 tokens for transaction to succeed\\n    function collateralizeBatch(\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) external nonReentrant validBatch(batchId) batchUnderway(batchId) {\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\\n\\n        (uint cbtUserCut, uint cbtDaoCut, ) = SolidMath.computeCollateralizationOutcome(\\n            batches[batchId].expectedDueDate,\\n            amountIn,\\n            batches[batchId].discountRate,\\n            collateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n\\n        if (cbtUserCut < amountOutMin) {\\n            revert AmountOutLessThanMinimum(cbtUserCut, amountOutMin);\\n        }\\n\\n        collateralizedToken.mint(msg.sender, cbtUserCut);\\n        collateralizedToken.mint(feeReceiver, cbtDaoCut);\\n\\n        forwardContractBatch.safeTransferFrom(msg.sender, address(this), batchId, amountIn, \\\"\\\");\\n\\n        emit BatchCollateralized(batchId, amountIn, cbtUserCut, msg.sender);\\n    }\\n\\n    /// @dev Decollateralizes `amountIn` of ERC20 tokens and sends `amountOut` ERC1155 tokens with id `batchId` to msg.sender\\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend `amountIn` ERC20 tokens\\n    /// @dev nonReentrant, to avoid possible reentrancy after calling safeTransferFrom\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC20 tokens to decollateralize\\n    /// @param amountOutMin minimum output amount of ERC1155 tokens for transaction to succeed\\n    function decollateralizeTokens(\\n        uint batchId,\\n        uint amountIn,\\n        uint amountOutMin\\n    ) public nonReentrant validBatch(batchId) {\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\\n\\n        (uint amountOut, uint cbtDaoCut, uint cbtToBurn) = SolidMath\\n            .computeDecollateralizationOutcome(\\n                batches[batchId].expectedDueDate,\\n                amountIn,\\n                batches[batchId].discountRate,\\n                decollateralizationFee,\\n                collateralizedToken.decimals()\\n            );\\n\\n        if (amountOut <= 0) {\\n            revert AmountOutTooLow(amountOut);\\n        }\\n\\n        if (amountOut < amountOutMin) {\\n            revert AmountOutLessThanMinimum(amountOut, amountOutMin);\\n        }\\n\\n        collateralizedToken.burnFrom(msg.sender, cbtToBurn);\\n        GPv2SafeERC20.safeTransferFrom(collateralizedToken, msg.sender, feeReceiver, cbtDaoCut);\\n\\n        forwardContractBatch.safeTransferFrom(address(this), msg.sender, batchId, amountOut, \\\"\\\");\\n\\n        emit TokensDecollateralized(batchId, amountIn, amountOut, msg.sender);\\n    }\\n\\n    /// @dev Bulk-decollateralizes ERC20 tokens into multiple ERC1155 tokens with specified amounts\\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend `sum(amountsIn)` ERC20 tokens\\n    /// @param _batchIds ids of the batches\\n    /// @param amountsIn ERC20 tokens to decollateralize\\n    /// @param amountsOutMin minimum output amounts of ERC1155 tokens for transaction to succeed\\n    function bulkDecollateralizeTokens(\\n        uint[] calldata _batchIds,\\n        uint[] calldata amountsIn,\\n        uint[] calldata amountsOutMin\\n    ) external {\\n        if (_batchIds.length != amountsIn.length || _batchIds.length != amountsOutMin.length) {\\n            revert InvalidInput();\\n        }\\n\\n        for (uint i; i < _batchIds.length; i++) {\\n            decollateralizeTokens(_batchIds[i], amountsIn[i], amountsOutMin[i]);\\n        }\\n    }\\n\\n    /// @dev Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC1155 tokens to collateralize\\n    /// @return cbtUserCut ERC20 tokens to be received by msg.sender\\n    /// @return cbtDaoCut ERC20 tokens to be received by feeReceiver\\n    /// @return cbtForfeited ERC20 tokens forfeited for collateralizing the ERC1155 tokens\\n    function simulateBatchCollateralization(uint batchId, uint amountIn)\\n        external\\n        view\\n        validBatch(batchId)\\n        batchUnderway(batchId)\\n        returns (\\n            uint cbtUserCut,\\n            uint cbtDaoCut,\\n            uint cbtForfeited\\n        )\\n    {\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\\n\\n        (cbtUserCut, cbtDaoCut, cbtForfeited) = SolidMath.computeCollateralizationOutcome(\\n            batches[batchId].expectedDueDate,\\n            amountIn,\\n            batches[batchId].discountRate,\\n            collateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n    }\\n\\n    /// @dev Simulates decollateralization of `amountIn` ERC20 tokens for ERC1155 tokens with id `batchId`\\n    /// @param batchId id of the batch\\n    /// @param amountIn ERC20 tokens to decollateralize\\n    /// @return amountOut ERC1155 tokens to be received by msg.sender\\n    /// @return minAmountIn minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\\n    /// @return minCbtDaoCut ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\\n    function simulateDecollateralization(uint batchId, uint amountIn)\\n        public\\n        view\\n        validBatch(batchId)\\n        returns (\\n            uint amountOut,\\n            uint minAmountIn,\\n            uint minCbtDaoCut\\n        )\\n    {\\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\\n\\n        (amountOut, , ) = SolidMath.computeDecollateralizationOutcome(\\n            batches[batchId].expectedDueDate,\\n            amountIn,\\n            batches[batchId].discountRate,\\n            decollateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n\\n        (minAmountIn, minCbtDaoCut) = SolidMath.computeDecollateralizationMinAmountInAndDaoCut(\\n            batches[batchId].expectedDueDate,\\n            amountOut,\\n            batches[batchId].discountRate,\\n            decollateralizationFee,\\n            collateralizedToken.decimals()\\n        );\\n    }\\n\\n    /// @dev Computes relevant info for the decollateralization process involving batches\\n    /// that match the specified `projectId` and `vintage`\\n    /// @param projectId id of the project the batch belongs to\\n    /// @param vintage vintage of the batch\\n    /// @return result array of relevant info about matching batches\\n    function getBatchesDecollateralizationInfo(uint projectId, uint vintage)\\n        external\\n        view\\n        returns (DomainDataTypes.TokenDecollateralizationInfo[] memory result)\\n    {\\n        DomainDataTypes.TokenDecollateralizationInfo[]\\n            memory allInfos = new DomainDataTypes.TokenDecollateralizationInfo[](batchIds.length);\\n        uint infoCount;\\n\\n        for (uint i; i < batchIds.length; i++) {\\n            uint batchId = batchIds[i];\\n            if (batches[batchId].vintage != vintage || batches[batchId].projectId != projectId) {\\n                continue;\\n            }\\n\\n            uint availableCredits = forwardContractBatch.balanceOf(address(this), batchId);\\n\\n            (uint amountOut, uint minAmountIn, uint minCbtDaoCut) = simulateDecollateralization(\\n                batchId,\\n                DECOLLATERALIZATION_SIMULATION_INPUT\\n            );\\n\\n            allInfos[infoCount] = DomainDataTypes.TokenDecollateralizationInfo(\\n                batchId,\\n                availableCredits,\\n                amountOut,\\n                minAmountIn,\\n                minCbtDaoCut\\n            );\\n            infoCount = infoCount + 1;\\n        }\\n\\n        result = new DomainDataTypes.TokenDecollateralizationInfo[](infoCount);\\n        for (uint i; i < infoCount; i++) {\\n            result[i] = allInfos[i];\\n        }\\n    }\\n\\n    // todo #121: add authorization\\n    function setCollateralizationFee(uint16 _collateralizationFee) public {\\n        collateralizationFee = _collateralizationFee;\\n    }\\n\\n    // todo #121: add authorization\\n    function setDecollateralizationFee(uint16 _decollateralizationFee) public {\\n        decollateralizationFee = _decollateralizationFee;\\n    }\\n\\n    // todo #121: add authorization\\n    function setFeeReceiver(address _feeReceiver) public {\\n        feeReceiver = _feeReceiver;\\n    }\\n\\n    function getProjectIdsByCategory(uint categoryId) public view returns (uint[] memory) {\\n        return categoryProjects[categoryId];\\n    }\\n\\n    function getBatchIdsByProject(uint projectId) public view returns (uint[] memory) {\\n        return projectBatches[projectId];\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint,\\n        uint,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint[] memory,\\n        uint[] memory,\\n        bytes memory\\n    ) public virtual returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\\n        return interfaceId == 0xd9b67a26; // The ERC-165 identifier for ERC-1155\\n    }\\n\\n    /// @dev Computes the amount of ERC20 tokens to be rewarded over the next 7 days\\n    /// @param categoryId The source category for the ERC20 rewards\\n    function _computeWeeklyCategoryReward(uint categoryId, uint rewardDecimals)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint rewardAmount;\\n\\n        uint[] storage projects = categoryProjects[categoryId];\\n        for (uint i; i < projects.length; i++) {\\n            uint projectId = projects[i];\\n            uint[] storage _batches = projectBatches[projectId];\\n            for (uint j; j < _batches.length; j++) {\\n                uint batchId = _batches[j];\\n                uint availableCredits = forwardContractBatch.balanceOf(address(this), batchId);\\n                if (availableCredits == 0 || _isBatchCertified(batchId)) {\\n                    continue;\\n                }\\n\\n                DomainDataTypes.Batch storage batch = batches[batchId];\\n                rewardAmount += SolidMath.computeWeeklyBatchReward(\\n                    batch.expectedDueDate,\\n                    availableCredits,\\n                    batch.discountRate,\\n                    rewardDecimals\\n                );\\n            }\\n        }\\n\\n        return rewardAmount;\\n    }\\n\\n    function _rebalanceCategory(uint categoryId) internal {\\n        uint totalQuantifiedForwardCredits;\\n        uint totalCollateralizedForwardCredits;\\n\\n        uint[] storage projects = categoryProjects[categoryId];\\n        for (uint i; i < projects.length; i++) {\\n            uint projectId = projects[i];\\n            uint[] storage _batches = projectBatches[projectId];\\n            for (uint j; j < _batches.length; j++) {\\n                uint batchId = _batches[j];\\n                uint collateralizedForwardCredits = forwardContractBatch.balanceOf(\\n                    address(this),\\n                    batchId\\n                );\\n                if (collateralizedForwardCredits == 0 || _isBatchCertified(batchId)) {\\n                    continue;\\n                }\\n\\n                totalQuantifiedForwardCredits +=\\n                    batches[batchId].discountRate *\\n                    collateralizedForwardCredits;\\n                totalCollateralizedForwardCredits += collateralizedForwardCredits;\\n            }\\n        }\\n\\n        if (totalCollateralizedForwardCredits == 0) {\\n            categories[categoryId].totalCollateralized = 0;\\n            emit CategoryRebalanced(categoryId, categories[categoryId].averageTA, 0);\\n            return;\\n        }\\n\\n        uint latestAverageTA = totalQuantifiedForwardCredits / totalCollateralizedForwardCredits;\\n        categories[categoryId].averageTA = uint24(latestAverageTA);\\n        categories[categoryId].totalCollateralized = totalCollateralizedForwardCredits;\\n\\n        emit CategoryRebalanced(categoryId, latestAverageTA, totalCollateralizedForwardCredits);\\n    }\\n\\n    function _getCollateralizedTokenForBatchId(uint batchId)\\n        internal\\n        view\\n        returns (CollateralizedBasketToken)\\n    {\\n        uint projectId = batches[batchId].projectId;\\n        uint categoryId = projectCategory[projectId];\\n\\n        return categoryToken[categoryId];\\n    }\\n\\n    function _isBatchCertified(uint batchId) internal view returns (bool) {\\n        return batches[batchId].expectedDueDate <= block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x7fc68311919f713eef675ab2118d0f5144919a89597090d108abced48a0b6c8b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/manager/ISolidWorldManagerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// @title Errors thrown by the manager contract\\n/// @author Solid World DAO\\ninterface ISolidWorldManagerErrors {\\n    error BatchAlreadyExists(uint batchId);\\n    error InvalidBatchId(uint batchId);\\n    error InvalidBatchOwner();\\n    error BatchDueDateInThePast(uint32 dueDate);\\n\\n    error CategoryAlreadyExists(uint categoryId);\\n    error InvalidCategoryId(uint categoryId);\\n\\n    error ProjectAlreadyExists(uint projectId);\\n    error InvalidProjectId(uint projectId);\\n\\n    error InvalidInput();\\n\\n    error AmountOutLessThanMinimum(uint amountOut, uint minAmountOut);\\n    error AmountOutTooLow(uint amountOut);\\n\\n    error BatchCertified(uint batchId);\\n}\\n\",\"keccak256\":\"0x7bda46fb9821e874c83c4fe0cb173cac52b5f155fc665ee791be188221fd78a4\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/manager/IWeeklyCarbonRewardsManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\n/// @title The interface weekly carbon rewards processing\\n/// @notice Computes and mints weekly carbon rewards\\n/// @author Solid World DAO\\ninterface IWeeklyCarbonRewardsManager {\\n    event WeeklyRewardMinted(address indexed rewardToken, uint indexed rewardAmount);\\n\\n    /// @dev Thrown if minting weekly rewards is called by an unauthorized account\\n    error UnauthorizedRewardMinting(address account);\\n\\n    /// @param _weeklyRewardsMinter The only account allowed to mint weekly carbon rewards\\n    function setWeeklyRewardsMinter(address _weeklyRewardsMinter) external;\\n\\n    /// @param assets The incentivized assets (LP tokens)\\n    /// @param _categoryIds The categories to which the incentivized assets belong\\n    /// @return carbonRewards List of carbon rewards getting distributed.\\n    /// @return rewardAmounts List of carbon reward amounts getting distributed\\n    function computeWeeklyCarbonRewards(address[] calldata assets, uint[] calldata _categoryIds)\\n        external\\n        view\\n        returns (address[] memory carbonRewards, uint[] memory rewardAmounts);\\n\\n    /// @param _categoryIds The categories to which the incentivized assets belong\\n    /// @param carbonRewards List of carbon rewards to mint\\n    /// @param rewardAmounts List of carbon reward amounts to mint\\n    /// @param rewardsVault Account that secures ERC20 rewards\\n    function mintWeeklyCarbonRewards(\\n        uint[] calldata _categoryIds,\\n        address[] calldata carbonRewards,\\n        uint[] calldata rewardAmounts,\\n        address rewardsVault\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3cfdc5932aa7a228245ae84b4daf0ad933e2ca9d84c2f8c94b9bf7edc215fbaf\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ABDKMath64x64.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-4-Clause\\n\\n/// ABDK Math 64.64 Smart Contract Library.  Copyright \\u00a9 2019 by ABDK Consulting.\\n/// Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\npragma solidity ^0.8.16;\\n\\n/// Smart contract library of mathematical functions operating with signed\\n/// 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n/// basically a simple fraction whose numerator is signed 128-bit integer and\\n/// denominator is 2^64.  As long as denominator is always the same, there is no\\n/// need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n/// represented by int128 type holding only the numerator.\\nlibrary ABDKMath64x64 {\\n    /// Minimum value signed 64.64-bit fixed point number may have.\\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n    /// Maximum value signed 64.64-bit fixed point number may have.\\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /// Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n    /// number.  Revert on overflow.\\n    /// @param x unsigned 256-bit integer number\\n    /// @return signed 64.64-bit fixed point number\\n    function fromUInt(uint256 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x <= 0x7FFFFFFFFFFFFFFF);\\n            return int128(int256(x << 64));\\n        }\\n    }\\n\\n    /// Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n    /// number rounding down.  Revert on underflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return unsigned 64-bit integer number\\n    function toUInt(int128 x) internal pure returns (uint64) {\\n        unchecked {\\n            require(x >= 0);\\n            return uint64(uint128(x >> 64));\\n        }\\n    }\\n\\n    /// Calculate x * y rounding down. Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @param y signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function mul(int128 x, int128 y) internal pure returns (int128) {\\n        unchecked {\\n            int256 result = (int256(x) * y) >> 64;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\\n    /// @param x signed 64.64 fixed point number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return unsigned 256-bit integer number\\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) return 0;\\n\\n            require(x >= 0);\\n\\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n            uint256 hi = uint256(int256(x)) * (y >> 128);\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            hi <<= 64;\\n\\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n            return hi + lo;\\n        }\\n    }\\n\\n    /// Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @param y uint256 value\\n    /// @return signed 64.64-bit fixed point number\\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            bool negative = x < 0 && y & 1 == 1;\\n\\n            uint256 absX = uint128(x < 0 ? -x : x);\\n            uint256 absResult;\\n            absResult = 0x100000000000000000000000000000000;\\n\\n            if (absX <= 0x10000000000000000) {\\n                absX <<= 63;\\n                while (y != 0) {\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x2 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x4 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    if (y & 0x8 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                    }\\n                    absX = (absX * absX) >> 127;\\n\\n                    y >>= 4;\\n                }\\n\\n                absResult >>= 64;\\n            } else {\\n                uint256 absXShift = 63;\\n                if (absX < 0x1000000000000000000000000) {\\n                    absX <<= 32;\\n                    absXShift -= 32;\\n                }\\n                if (absX < 0x10000000000000000000000000000) {\\n                    absX <<= 16;\\n                    absXShift -= 16;\\n                }\\n                if (absX < 0x1000000000000000000000000000000) {\\n                    absX <<= 8;\\n                    absXShift -= 8;\\n                }\\n                if (absX < 0x10000000000000000000000000000000) {\\n                    absX <<= 4;\\n                    absXShift -= 4;\\n                }\\n                if (absX < 0x40000000000000000000000000000000) {\\n                    absX <<= 2;\\n                    absXShift -= 2;\\n                }\\n                if (absX < 0x80000000000000000000000000000000) {\\n                    absX <<= 1;\\n                    absXShift -= 1;\\n                }\\n\\n                uint256 resultShift = 0;\\n                while (y != 0) {\\n                    require(absXShift < 64);\\n\\n                    if (y & 0x1 != 0) {\\n                        absResult = (absResult * absX) >> 127;\\n                        resultShift += absXShift;\\n                        if (absResult > 0x100000000000000000000000000000000) {\\n                            absResult >>= 1;\\n                            resultShift += 1;\\n                        }\\n                    }\\n                    absX = (absX * absX) >> 127;\\n                    absXShift <<= 1;\\n                    if (absX >= 0x100000000000000000000000000000000) {\\n                        absX >>= 1;\\n                        absXShift += 1;\\n                    }\\n\\n                    y >>= 1;\\n                }\\n\\n                require(resultShift < 64);\\n                absResult >>= 64 - resultShift;\\n            }\\n            int256 result = negative ? -int256(absResult) : int256(absResult);\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n    /// integer numbers.  Revert on overflow or when y is zero.\\n    /// @param x unsigned 256-bit integer number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return signed 64.64-bit fixed point number\\n    function div(uint256 x, uint256 y) internal pure returns (int128) {\\n        unchecked {\\n            require(y != 0);\\n            uint128 result = divu(x, y);\\n            require(result <= uint128(MAX_64x64));\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n    /// integer numbers.  Revert on overflow or when y is zero.\\n    /// @param x unsigned 256-bit integer number\\n    /// @param y unsigned 256-bit integer number\\n    /// @return unsigned 64.64-bit fixed point number\\n    function divu(uint256 x, uint256 y) internal pure returns (uint128) {\\n        unchecked {\\n            require(y != 0);\\n\\n            uint256 result;\\n\\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\\n            else {\\n                uint256 msb = 192;\\n                uint256 xc = x >> 192;\\n                if (xc >= 0x100000000) {\\n                    xc >>= 32;\\n                    msb += 32;\\n                }\\n                if (xc >= 0x10000) {\\n                    xc >>= 16;\\n                    msb += 16;\\n                }\\n                if (xc >= 0x100) {\\n                    xc >>= 8;\\n                    msb += 8;\\n                }\\n                if (xc >= 0x10) {\\n                    xc >>= 4;\\n                    msb += 4;\\n                }\\n                if (xc >= 0x4) {\\n                    xc >>= 2;\\n                    msb += 2;\\n                }\\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 hi = result * (y >> 128);\\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n                uint256 xh = x >> 192;\\n                uint256 xl = x << 64;\\n\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n                lo = hi << 128;\\n                if (xl < lo) xh -= 1;\\n                xl -= lo; // We rely on overflow behavior here\\n\\n                assert(xh == hi >> 128);\\n\\n                result += xl / y;\\n            }\\n\\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n            return uint128(result);\\n        }\\n    }\\n\\n    /// Calculate natural exponent of x.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function exp(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\\n        }\\n    }\\n\\n    /// Calculate binary exponent of x.  Revert on overflow.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function exp_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x < 0x400000000000000000); // Overflow\\n\\n            if (x < -0x400000000000000000) return 0; // Underflow\\n\\n            uint256 result = 0x80000000000000000000000000000000;\\n\\n            if (x & 0x8000000000000000 > 0)\\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\\n            if (x & 0x4000000000000000 > 0)\\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\\n            if (x & 0x2000000000000000 > 0)\\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\\n            if (x & 0x1000000000000000 > 0)\\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\\n            if (x & 0x800000000000000 > 0)\\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\\n            if (x & 0x400000000000000 > 0)\\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\\n            if (x & 0x200000000000000 > 0)\\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\\n            if (x & 0x100000000000000 > 0)\\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\\n            if (x & 0x80000000000000 > 0)\\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\\n            if (x & 0x40000000000000 > 0)\\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\\n            if (x & 0x20000000000000 > 0)\\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\\n            if (x & 0x10000000000000 > 0)\\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\\n            if (x & 0x8000000000000 > 0)\\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\\n            if (x & 0x4000000000000 > 0)\\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\\n            if (x & 0x2000000000000 > 0)\\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\\n            if (x & 0x1000000000000 > 0)\\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\\n            if (x & 0x800000000000 > 0)\\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\\n            if (x & 0x400000000000 > 0)\\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\\n            if (x & 0x200000000000 > 0)\\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\\n            if (x & 0x100000000000 > 0)\\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\\n            if (x & 0x80000000000 > 0)\\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\\n            if (x & 0x40000000000 > 0)\\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\\n            if (x & 0x20000000000 > 0)\\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\\n            if (x & 0x10000000000 > 0)\\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\\n            if (x & 0x8000000000 > 0)\\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\\n            if (x & 0x4000000000 > 0)\\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\\n            if (x & 0x2000000000 > 0)\\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\\n            if (x & 0x1000000000 > 0)\\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\\n            if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\\n            if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\\n            if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\\n            if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\\n            if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\\n            if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\\n            if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\\n            if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\\n            if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\\n            if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\\n            if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\\n            if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\\n            if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\\n            if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\\n            if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\\n            if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\\n            if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\\n            if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\\n            if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\\n            if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\\n            if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\\n            if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\\n            if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\\n            if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\\n            if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\\n            if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\\n            if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\\n            if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\\n            if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\\n            if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\\n            if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\\n            if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\\n            if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\\n            if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\\n            if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\\n            if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\\n\\n            result >>= uint256(int256(63 - (x >> 64)));\\n            require(result <= uint256(int256(MAX_64x64)));\\n\\n            return int128(int256(result));\\n        }\\n    }\\n\\n    /// Calculate natural logarithm of x.  Revert if x <= 0.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function ln(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            return\\n                int128(\\n                    int256((uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128)\\n                );\\n        }\\n    }\\n\\n    /// Calculate binary logarithm of x.  Revert if x <= 0.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function log_2(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x > 0);\\n\\n            int256 msb = 0;\\n            int256 xc = x;\\n            if (xc >= 0x10000000000000000) {\\n                xc >>= 64;\\n                msb += 64;\\n            }\\n            if (xc >= 0x100000000) {\\n                xc >>= 32;\\n                msb += 32;\\n            }\\n            if (xc >= 0x10000) {\\n                xc >>= 16;\\n                msb += 16;\\n            }\\n            if (xc >= 0x100) {\\n                xc >>= 8;\\n                msb += 8;\\n            }\\n            if (xc >= 0x10) {\\n                xc >>= 4;\\n                msb += 4;\\n            }\\n            if (xc >= 0x4) {\\n                xc >>= 2;\\n                msb += 2;\\n            }\\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\\n\\n            int256 result = (msb - 64) << 64;\\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n                ux *= ux;\\n                uint256 b = ux >> 255;\\n                ux >>= 127 + b;\\n                result += bit * int256(b);\\n            }\\n\\n            return int128(result);\\n        }\\n    }\\n\\n    /// Calculate 1 / x rounding towards zero.  Revert on overflow or when x is zero.\\n    /// @param x signed 64.64-bit fixed point number\\n    /// @return signed 64.64-bit fixed point number\\n    function inv(int128 x) internal pure returns (int128) {\\n        unchecked {\\n            require(x != 0);\\n            int256 result = int256(0x100000000000000000000000000000000) / x;\\n            require(result >= MIN_64x64 && result <= MAX_64x64);\\n            return int128(result);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf112250da264389e4b3074010e22f8d6611f0efa0c021339874733b2ab056fd\",\"license\":\"BSD-4-Clause\"},\"contracts/libraries/DomainDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nlibrary DomainDataTypes {\\n    /// @notice Structure that holds necessary information for minting collateralized basket tokens (ERC-20).\\n    /// @param id ID of the batch in the database\\n    /// @param projectId Project ID this batch belongs to\\n    /// @param totalAmount Amount of carbon tons in the batch, this amount will be minted as forward contract batch tokens (ERC-1155)\\n    /// @param owner Address who receives forward contract batch tokens (ERC-1155)\\n    /// @param expectedDueDate When the batch is about to be delivered; affects on how many collateralized basket tokens (ERC-20) may be minted\\n    /// @param vintage The year an emission reduction occurred or the offset was issued. The older the vintage, the cheaper the price per credit.\\n    /// @param status Status for the batch (ex. CAN_BE_DEPOSITED | IS_ACCUMULATING | READY_FOR_DELIVERY etc.)\\n    /// @param discountRate Coefficient that affects on how many collateralized basket tokens (ERC-20) may be minted / ton. Forward is worth less than spot.\\n    struct Batch {\\n        uint id;\\n        uint projectId;\\n        uint totalAmount;\\n        address owner;\\n        uint32 expectedDueDate;\\n        uint16 vintage;\\n        uint8 status;\\n        uint24 discountRate;\\n    }\\n\\n    /// @notice Structure that holds state of a category of forward carbon credits. Used for computing collateralization.\\n    /// @param volumeCoefficient controls how much impact does erc1155 input size have on the TA being offered.\\n    /// The higher, the more you have to input to raise the TA.\\n    /// @param decayPerSecond controls how fast the built momentum drops over time.\\n    /// The bigger, the faster the momentum drops.\\n    /// @param maxDepreciation controls how much the reactive TA can drop from the averageTA value.\\n    /// @param averageTA is the average time appreciation of the category.\\n    /// @param totalCollateralized is the total amount of collateralized tokens for this category.\\n    /// @param lastCollateralizationTimestamp the timestamp of the last collateralization.\\n    /// @param lastCollateralizationMomentum the value of the momentum at the last collateralization.\\n    struct Category {\\n        uint volumeCoefficient;\\n        uint40 decayPerSecond;\\n        uint24 maxDepreciation;\\n        uint24 averageTA;\\n        uint totalCollateralized;\\n        uint32 lastCollateralizationTimestamp;\\n        uint lastCollateralizationMomentum;\\n    }\\n\\n    /// @notice Structure that holds necessary information for decollateralizing ERC20 tokens to ERC1155 tokens with id `batchId`\\n    /// @param batchId id of the batch\\n    /// @param availableBatchTokens Amount of ERC1155 tokens with id `batchId` that are available to be redeemed\\n    /// @param amountOut ERC1155 tokens with id `batchId` to be received by msg.sender\\n    /// @param minAmountIn minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\\n    /// @param minCbtDaoCut ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\\n    struct TokenDecollateralizationInfo {\\n        uint batchId;\\n        uint availableBatchTokens;\\n        uint amountOut;\\n        uint minAmountIn;\\n        uint minCbtDaoCut;\\n    }\\n}\\n\",\"keccak256\":\"0x0bb8d3b2ec57f1bfff6a199381fdbfb5827ea269bff5dce0649ad745dec663c0\",\"license\":\"UNLICENSED\"},\"contracts/libraries/GPv2SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\\n/// @author Gnosis Developers\\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\\nlibrary GPv2SafeERC20 {\\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\\n    /// also when the token returns `false`.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transfer.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transfer\\\");\\n    }\\n\\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\\n    /// reverts also when the token returns `false`.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        bytes4 selector_ = token.transferFrom.selector;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freeMemoryPointer := mload(0x40)\\n            mstore(freeMemoryPointer, selector_)\\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\\n            mstore(add(freeMemoryPointer, 68), value)\\n\\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n\\n        require(getLastTransferResult(token), \\\"GPv2: failed transferFrom\\\");\\n    }\\n\\n    /// @dev Verifies that the last return was a successful `transfer*` call.\\n    /// This is done by checking that the return data is either empty, or\\n    /// is a valid ABI encoded boolean.\\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\\n        // NOTE: Inspecting previous return data requires assembly. Note that\\n        // we write the return data to memory 0 in the case where the return\\n        // data size is 32, this is OK since the first 64 bytes of memory are\\n        // reserved by Solidy as a scratch space that can be used within\\n        // assembly blocks.\\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            /// @dev Revert with an ABI encoded Solidity error with a message\\n            /// that fits into 32-bytes.\\n            ///\\n            /// An ABI encoded Solidity error has the following memory layout:\\n            ///\\n            /// ------------+----------------------------------\\n            ///  byte range | value\\n            /// ------------+----------------------------------\\n            ///  0x00..0x04 |        selector(\\\"Error(string)\\\")\\n            ///  0x04..0x24 |      string offset (always 0x20)\\n            ///  0x24..0x44 |                    string length\\n            ///  0x44..0x64 | string value, padded to 32-bytes\\n            function revertWithMessage(length, message) {\\n                mstore(0x00, \\\"\\\\x08\\\\xc3\\\\x79\\\\xa0\\\")\\n                mstore(0x04, 0x20)\\n                mstore(0x24, length)\\n                mstore(0x44, message)\\n                revert(0x00, 0x64)\\n            }\\n\\n            switch returndatasize()\\n            // Non-standard ERC20 transfer without return.\\n            case 0 {\\n                // NOTE: When the return data size is 0, verify that there\\n                // is code at the address. This is done in order to maintain\\n                // compatibility with Solidity calling conventions.\\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\\n                if iszero(extcodesize(token)) {\\n                    revertWithMessage(20, \\\"GPv2: not a contract\\\")\\n                }\\n\\n                success := 1\\n            }\\n            // Standard ERC20 transfer returning boolean success value.\\n            case 32 {\\n                returndatacopy(0, 0, returndatasize())\\n\\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\\n                // as `true` for a boolean. In order to stay compatible with\\n                // OpenZeppelin's `SafeERC20` library which is known to work\\n                // with the existing ERC20 implementation we care about,\\n                // make sure we return success for any non-zero return value\\n                // from the `transfer*` call.\\n                success := iszero(iszero(mload(0)))\\n            }\\n            default {\\n                revertWithMessage(31, \\\"GPv2: malformed transfer result\\\")\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe877038072fde6dc9d1a0941360ef7e5b743155c861efb9285ba813985079dd2\",\"license\":\"UNLICENSED\"},\"contracts/libraries/SolidMath.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.16;\\n\\nimport \\\"./ABDKMath64x64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/// @notice Solid World DAO Math Operations and Constants.\\n/// @author Solid World DAO\\nlibrary SolidMath {\\n    /// @dev Basis points in which the `time appreciation` must be expressed\\n    /// @dev 100% = 1_000_000; 1% = 10_000; 0.0984% = 984\\n    uint constant TIME_APPRECIATION_BASIS_POINTS = 1_000_000;\\n\\n    /// @dev Basis points used to express various DAO fees\\n    /// @dev 100% = 10_000; 0.01% = 1\\n    uint constant FEE_BASIS_POINTS = 10_000;\\n\\n    error IncorrectDates(uint startDate, uint endDate);\\n\\n    /// @dev Computes the number of weeks between two dates\\n    /// @param startDate start date expressed in seconds\\n    /// @param endDate end date expressed in seconds\\n    /// @return number of weeks between the two dates. Returns 0 if result is negative\\n    function weeksBetween(uint startDate, uint endDate) internal pure returns (uint) {\\n        if (startDate == 0 || endDate == 0) {\\n            revert IncorrectDates(startDate, endDate);\\n        }\\n\\n        if (endDate <= startDate) {\\n            return 0;\\n        }\\n\\n        return (endDate - startDate) / 1 weeks;\\n    }\\n\\n    /// @dev Computes discount for given `timeAppreciation` and project `expectedCertificationDate`\\n    /// @dev (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param expectedCertificationDate expected date for project certification\\n    /// @return discount in basis points\\n    function computeTimeAppreciationDiscount(uint timeAppreciation, uint expectedCertificationDate)\\n        internal\\n        view\\n        returns (uint)\\n    {\\n        uint weeksUntilCertification = weeksBetween(block.timestamp, expectedCertificationDate);\\n        if (weeksUntilCertification == 0) {\\n            return TIME_APPRECIATION_BASIS_POINTS;\\n        }\\n\\n        if (weeksUntilCertification == 1) {\\n            return TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\\n        }\\n\\n        uint discountRatePoints = TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\\n        int128 discountRate = ABDKMath64x64.div(discountRatePoints, TIME_APPRECIATION_BASIS_POINTS);\\n        int128 totalDiscount = ABDKMath64x64.pow(discountRate, (weeksUntilCertification - 1));\\n\\n        return ABDKMath64x64.mulu(totalDiscount, discountRatePoints);\\n    }\\n\\n    /// @dev Computes the amount of ERC20 tokens to be minted to the stakeholder and DAO,\\n    /// @dev and the amount forfeited when collateralizing `fcbtAmount` of ERC1155 tokens\\n    /// @dev cbtUserCut = erc1155 * 10e18 * (1 - fee) * (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param expectedCertificationDate expected date for project certification. Must not be in the past.\\n    /// @param fcbtAmount amount of ERC1155 tokens to be collateralized\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param collateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return amount of ERC20 tokens to be minted to the stakeholder\\n    /// @return amount of ERC20 tokens to be minted to the DAO\\n    /// @return amount of ERC20 tokens forfeited for collateralizing the ERC1155 tokens\\n    function computeCollateralizationOutcome(\\n        uint expectedCertificationDate,\\n        uint fcbtAmount,\\n        uint timeAppreciation,\\n        uint collateralizationFee,\\n        uint cbtDecimals\\n    )\\n        internal\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        assert(expectedCertificationDate > block.timestamp);\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            expectedCertificationDate\\n        );\\n        uint mintableCbtAmount = Math.mulDiv(\\n            fcbtAmount * timeAppreciationDiscount,\\n            10**cbtDecimals,\\n            TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        uint cbtDaoCut = Math.mulDiv(mintableCbtAmount, collateralizationFee, FEE_BASIS_POINTS);\\n        uint cbtUserCut = mintableCbtAmount - cbtDaoCut;\\n        uint cbtForfeited = fcbtAmount * 10**cbtDecimals - mintableCbtAmount;\\n\\n        return (cbtUserCut, cbtDaoCut, cbtForfeited);\\n    }\\n\\n    /// @dev Computes the amount of ERC1155 tokens redeemable by the stakeholder, amount of ERC20 tokens\\n    /// @dev charged by the DAO and to be burned when decollateralizing `cbtAmount` of ERC20 tokens\\n    /// @dev erc1155 = erc20 / 10e18 * (1 - fee) / (1 - timeAppreciation) ** weeksUntilCertification\\n    /// @param expectedCertificationDate expected date for project certification\\n    /// @param cbtAmount amount of ERC20 tokens to be decollateralized\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param decollateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return amount of ERC1155 tokens redeemable by the stakeholder\\n    /// @return amount of ERC20 tokens charged by the DAO\\n    /// @return amount of ERC20 tokens to be burned from the stakeholder\\n    function computeDecollateralizationOutcome(\\n        uint expectedCertificationDate,\\n        uint cbtAmount,\\n        uint timeAppreciation,\\n        uint decollateralizationFee,\\n        uint cbtDecimals\\n    )\\n        internal\\n        view\\n        returns (\\n            uint,\\n            uint,\\n            uint\\n        )\\n    {\\n        uint cbtDaoCut = Math.mulDiv(cbtAmount, decollateralizationFee, FEE_BASIS_POINTS);\\n        uint cbtToBurn = cbtAmount - cbtDaoCut;\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            expectedCertificationDate\\n        );\\n\\n        uint fcbtAmount = Math.mulDiv(\\n            cbtToBurn,\\n            TIME_APPRECIATION_BASIS_POINTS,\\n            timeAppreciationDiscount\\n        );\\n\\n        return (fcbtAmount / 10**cbtDecimals, cbtDaoCut, cbtToBurn);\\n    }\\n\\n    /// @dev Computes the minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\\n    /// @dev and the amount of ERC20 tokens charged by the DAO for decollateralizing the minimum amount of ERC20 tokens\\n    /// @param expectedCertificationDate expected date for project certification\\n    /// @param expectedFcbtAmount amount of ERC1155 tokens to be redeemed\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param decollateralizationFee 0.01% = 1\\n    /// @param cbtDecimals collateralized basket token number of decimals\\n    /// @return minAmountIn minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\\n    /// @return minCbtDaoCut amount of ERC20 tokens charged by the DAO for decollateralizing minAmountIn ERC20 tokens\\n    function computeDecollateralizationMinAmountInAndDaoCut(\\n        uint expectedCertificationDate,\\n        uint expectedFcbtAmount,\\n        uint timeAppreciation,\\n        uint decollateralizationFee,\\n        uint cbtDecimals\\n    ) internal view returns (uint minAmountIn, uint minCbtDaoCut) {\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            expectedCertificationDate\\n        );\\n\\n        uint minAmountInAfterFee = Math.mulDiv(\\n            expectedFcbtAmount * timeAppreciationDiscount,\\n            10**cbtDecimals,\\n            TIME_APPRECIATION_BASIS_POINTS\\n        );\\n\\n        minAmountIn = Math.mulDiv(\\n            minAmountInAfterFee,\\n            FEE_BASIS_POINTS,\\n            FEE_BASIS_POINTS - decollateralizationFee\\n        );\\n\\n        minCbtDaoCut = Math.mulDiv(minAmountIn, decollateralizationFee, FEE_BASIS_POINTS);\\n    }\\n\\n    /// @dev Computes the amount of ERC20 tokens to be rewarded over the next 7 days\\n    /// @dev erc1155 * 10e18 * timeApn * (1 - timeApn) ** weeks\\n    /// @param expectedCertificationDate expected date for project certification\\n    /// @param availableCredits amount of ERC1155 tokens backing the reward\\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\\n    /// @param decimals reward token number of decimals\\n    /// @return rewardAmount ERC20 reward amount. Returns 0 if `expectedCertificationDate` is in the past\\n    function computeWeeklyBatchReward(\\n        uint expectedCertificationDate,\\n        uint availableCredits,\\n        uint timeAppreciation,\\n        uint decimals\\n    ) internal view returns (uint rewardAmount) {\\n        if (expectedCertificationDate <= block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\\n            timeAppreciation,\\n            expectedCertificationDate\\n        );\\n\\n        rewardAmount = Math.mulDiv(\\n            availableCredits * timeAppreciation * timeAppreciationDiscount,\\n            10**decimals,\\n            TIME_APPRECIATION_BASIS_POINTS**2\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe60bbe76b9c8c603b309de582e8dd8aed2f3a9382b09062959eb2f3e45e968fb\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b43806100206000396000f3fe608060405234801561001057600080fd5b506004361061025e5760003560e01c8063adb4e05811610146578063d63098dd116100c3578063f23a6e6111610087578063f23a6e61146107bf578063f2fde38b146107de578063f468ae99146107f1578063f7c3fec214610806578063f9be94f214610836578063fb5ba8eb1461084957600080fd5b8063d63098dd14610723578063da12b23514610746578063dacc181a14610759578063ef016cdd1461077c578063efdcd9741461078f57600080fd5b8063b505ab861161010a578063b505ab861461060a578063b5ca64ec1461061d578063bc197c811461062d578063c007acf614610665578063c6cdbe5e1461067857600080fd5b8063adb4e058146104f8578063b2c6f00c1461050b578063b32c4d8d1461051e578063b3d346b9146105e4578063b3f00674146105f757600080fd5b80635c4e7a05116101df5780638cbacb8d116101a35780638cbacb8d1461047b5780638da5cb5b1461048e578063915e99131461049f57806393fa0581146104bf578063940870dc146104d2578063a3d334a1146104e557600080fd5b80635c4e7a05146103f057806368fb7ea1146104205780636a2848e314610433578063715018a6146104535780637902298e1461045b57600080fd5b806322cfa2251161022657806322cfa225146103285780632c5dd8a91461036957806348c35ad4146103995780634ca30634146103bc5780634dccd395146103cf57600080fd5b806301ffc9a714610263578063084951cf1461029c5780631073b295146102c45780631d3ad554146102d95780631fb0a624146102fa575b600080fd5b610287610271366004612ec5565b6001600160e01b031916636cdb3d1360e11b1490565b60405190151581526020015b60405180910390f35b60a4546102b190600160b01b900461ffff1681565b60405161ffff9091168152602001610293565b6102d76102d2366004612f00565b61085c565b005b6102ec6102e7366004612f9f565b610915565b604051610293929190613045565b61030d61030836600461309b565b610b1b565b60408051938452602084019290925290820152606001610293565b6103516103363660046130bd565b609d602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610293565b6102d76103773660046130e6565b60a4805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b6102876103a73660046130bd565b60996020526000908152604090205460ff1681565b6102d76103ca366004613118565b610c4f565b6103e26103dd36600461309b565b610de7565b604051908152602001610293565b6102d76103fe36600461319a565b60a380546001600160a01b0319166001600160a01b0392909216919091179055565b6102d761042e3660046131b7565b610e18565b6103e26104413660046130bd565b609f6020526000908152604090205481565b6102d761105f565b61046e61046936600461309b565b611073565b60405161029391906131ca565b60a354610351906001600160a01b031681565b6033546001600160a01b0316610351565b6104b26104ad3660046130bd565b61134c565b6040516102939190613238565b61030d6104cd36600461309b565b6113ae565b6102d76104e036600461324b565b61156f565b60a454610351906001600160a01b031681565b6102d76105063660046132e4565b61160c565b6103e261051936600461309b565b611797565b61058f61052c3660046130bd565b609c602052600090815260409020805460018201546002830154600390930154919290916001600160a01b03811690600160a01b810463ffffffff1690600160c01b810461ffff1690600160d01b810460ff1690600160d81b900462ffffff1688565b604080519889526020890197909752958701949094526001600160a01b03909216606086015263ffffffff16608085015261ffff1660a084015260ff1660c083015262ffffff1660e082015261010001610293565b6103e26105f23660046130bd565b6117b3565b60a254610351906001600160a01b031681565b6102d7610618366004613391565b6117d4565b6103e2683635c9adc5dea0000081565b61064c61063b3660046134e6565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610293565b6102d7610673366004613391565b611ac8565b6106da6106863660046130bd565b60986020526000908152604090208054600182015460028301546003840154600490940154929364ffffffffff83169362ffffff650100000000008504811694600160401b900416929163ffffffff169087565b6040805197885264ffffffffff909616602088015262ffffff94851695870195909552929091166060850152608084015263ffffffff1660a083015260c082015260e001610293565b6102876107313660046130bd565b60976020526000908152604090205460ff1681565b6104b26107543660046130bd565b611d5d565b6102876107673660046130bd565b609a6020526000908152604090205460ff1681565b6102d761078a36600461309b565b611dbd565b6102d761079d36600461319a565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b61064c6107cd366004613593565b63f23a6e6160e01b95945050505050565b6102d76107ec36600461319a565b611e91565b60a4546102b190600160a01b900461ffff1681565b6102d76108143660046130e6565b60a4805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b6102d761084436600461363c565b611f0a565b60a154610351906001600160a01b031681565b60008481526097602052604090205460ff166108935760405163092483a160e11b8152600481018590526024015b60405180910390fd5b600084815260986020908152604091829020858155600101805464ffffffffff861667ffffffffffffffff1990911681176501000000000062ffffff8716908102919091179092559251908152859187917fa4cbd1903de80f86e1a9a2e630f758a278790366d92be399714a4938b763a011910160405180910390a450505050565b6060808483146109385760405163b4fa3fb360e01b815260040160405180910390fd5b846001600160401b03811115610950576109506133bd565b604051908082528060200260200182016040528015610979578160200160208202803683370190505b509150846001600160401b03811115610994576109946133bd565b6040519080825280602002602001820160405280156109bd578160200160208202803683370190505b50905060005b85811015610b115760008585838181106109df576109df6136b9565b60209081029290920135600081815260979093526040909220549192505060ff16610a205760405163092483a160e11b81526004810182905260240161088a565b6000818152609d6020908152604080832054815163313ce56760e01b815291516001600160a01b039091169392610aa7928692869263313ce56792600480820193918290030181865afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906136de565b60ff16612053565b905081868581518110610abc57610abc6136b9565b60200260200101906001600160a01b031690816001600160a01b03168152505080858581518110610aef57610aef6136b9565b6020026020010181815250505050508080610b0990613711565b9150506109c3565b5094509492505050565b6000828152609a602052604081205481908190859060ff16610b5357604051632e46319160e21b81526004810182905260240161088a565b85610b5d816121d7565b15610b7e57604051630406a37f60e01b81526004810182905260240161088a565b6000610b89886121fd565b6000898152609c60209081526040918290206003015460a454835163313ce56760e01b81529351949550610c3e94600160a01b80840463ffffffff16958e95600160d81b90950462ffffff16949190930461ffff16926001600160a01b0389169263313ce567926004808401939192918290030181865afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3691906136de565b60ff16612232565b919a90995090975095505050505050565b600054610100900460ff1615808015610c6f5750600054600160ff909116105b80610c895750303b158015610c89575060005460ff166001145b610cec5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161088a565b6000805460ff191660011790558015610d0f576000805461ff0019166101001790555b610d176122cf565b610d1f6122fe565b60a4805460a180546001600160a01b038a81166001600160a01b03199283161790925561ffff888116600160b01b0261ffff60b01b19918b16600160a01b026001600160b01b0319909516848e161794909417169290921790925560a2805486841690831617905560a38054928516929091169190911790558015610dde576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60a06020528160005260406000208181548110610e0357600080fd5b90600052602060002001600091509150505481565b60208082013560009081526099909152604090205460ff16610e5357604051633223e66d60e21b81526020820135600482015260240161088a565b80356000908152609a602052604090205460ff1615610e8857604051633903fb6760e01b81528135600482015260240161088a565b6000610e9a608083016060840161319a565b6001600160a01b031603610ec157604051634fd6f81960e11b815260040160405180910390fd5b42610ed260a083016080840161373c565b63ffffffff1611610f0f57610eed60a082016080830161373c565b6040516323aad46760e21b815263ffffffff909116600482015260240161088a565b80356000908152609a60209081526040808320805460ff19166001179055609c90915290208190610f408282613780565b5050609b8054600181810190925582357fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909101819055602080840135600090815260a0825260408120805494850181558152209091015560a1546001600160a01b031663731133e9610fb9608084016060850161319a565b604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152843560248301528401356044820152608060648201526000608482015260a401600060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b5050604051833592507f2354c6982830f23074cbadd3a8326546827ca5be87b6cfe41e906c66e75cd9659150600090a250565b61106761232d565b6110716000612387565b565b609b546060906000906001600160401b03811115611093576110936133bd565b6040519080825280602002602001820160405280156110f657816020015b6110e36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816110b15790505b5090506000805b609b5481101561126f576000609b828154811061111c5761111c6136b9565b6000918252602080832090910154808352609c90915260409091206003015490915061ffff600160c01b909104168614158061116957506000818152609c60205260409020600101548714155b15611174575061125d565b60a154604051627eeac760e11b8152306004820152602481018390526000916001600160a01b03169062fdd58e90604401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e6919061387a565b9050600080600061120085683635c9adc5dea000006113ae565b9250925092506040518060a001604052808681526020018581526020018481526020018381526020018281525088888151811061123f5761123f6136b9565b6020908102919091010152611255876001613893565b965050505050505b8061126781613711565b9150506110fd565b50806001600160401b03811115611288576112886133bd565b6040519080825280602002602001820160405280156112eb57816020015b6112d86040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816112a65790505b50925060005b818110156113435782818151811061130b5761130b6136b9565b6020026020010151848281518110611325576113256136b9565b6020026020010181905250808061133b90613711565b9150506112f1565b50505092915050565b600081815260a060209081526040918290208054835181840281018401909452808452606093928301828280156113a257602002820191906000526020600020905b81548152602001906001019080831161138e575b50505050509050919050565b6000828152609a602052604081205481908190859060ff166113e657604051632e46319160e21b81526004810182905260240161088a565b60006113f1876121fd565b6000888152609c60209081526040918290206003015460a454835163313ce56760e01b815293519495506114a894600160a01b830463ffffffff16948c94600160d81b90940462ffffff1693600160b01b90930461ffff16926001600160a01b0389169263313ce5679260048082019392918290030181865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a091906136de565b60ff166123d9565b50506000888152609c60209081526040918290206003015460a454835163313ce56760e01b8152935194995061156194600160a01b830463ffffffff16948b94600160d81b90940462ffffff1693600160b01b90930461ffff16926001600160a01b0389169263313ce5679260048082019392918290030181865afa158015611535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155991906136de565b60ff16612444565b959890975094955050505050565b848314158061157e5750848114155b1561159c5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b85811015610dde576115fa8787838181106115bc576115bc6136b9565b905060200201358686848181106115d5576115d56136b9565b905060200201358585858181106115ee576115ee6136b9565b90506020020135611ac8565b8061160481613711565b91505061159f565b858414158061161b5750838214155b156116395760405163b4fa3fb360e01b815260040160405180910390fd5b60a3546001600160a01b031633146116665760405163d68a9ef760e01b815233600482015260240161088a565b60005b8481101561178d576000868683818110611685576116856136b9565b905060200201602081019061169a919061319a565b90508060008686858181106116b1576116b16136b9565b6040516340c10f1960e01b81526001600160a01b038981166004830152602090920293909301356024840181905293508416916340c10f199150604401600060405180830381600087803b15801561170857600080fd5b505af115801561171c573d6000803e3d6000fd5b50506040518392506001600160a01b03861691507f2a4c118f91681e604a13a2fbe69bf4829feeab31b75c4de33b825ab6738d93d490600090a36117778b8b8681811061176b5761176b6136b9565b905060200201356124a4565b505050808061178590613711565b915050611669565b5050505050505050565b609e6020528160005260406000208181548110610e0357600080fd5b609b81815481106117c357600080fd5b600091825260209091200154905081565b6002606554036118265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161088a565b60026065556000838152609a6020526040902054839060ff1661185f57604051632e46319160e21b81526004810182905260240161088a565b83611869816121d7565b1561188a57604051630406a37f60e01b81526004810182905260240161088a565b6000611895866121fd565b6000878152609c602090815260408083206003015460a454825163313ce56760e01b815292519596509394859461191d94600160a01b80850463ffffffff16958e95600160d81b900462ffffff16949190930461ffff16926001600160a01b038b169263313ce567926004808401938290030181865afa158015610c12573d6000803e3d6000fd5b50915091508582101561194d576040516323fd80cf60e01b8152600481018390526024810187905260440161088a565b6040516340c10f1960e01b8152336004820152602481018390526001600160a01b038416906340c10f1990604401600060405180830381600087803b15801561199557600080fd5b505af11580156119a9573d6000803e3d6000fd5b505060a2546040516340c10f1960e01b81526001600160a01b0391821660048201526024810185905290861692506340c10f199150604401600060405180830381600087803b1580156119fb57600080fd5b505af1158015611a0f573d6000803e3d6000fd5b505060a154604051637921219560e11b81526001600160a01b03909116925063f242432a9150611a4990339030908d908d906004016138a6565b600060405180830381600087803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b5050604080518a8152602081018690523393508b92507f996fd5dc95553bf61923ea1e658357de4a30175141a8fab02ae6ae2ed8c6d32e91015b60405180910390a350506001606555505050505050565b600260655403611b1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161088a565b60026065556000838152609a6020526040902054839060ff16611b5357604051632e46319160e21b81526004810182905260240161088a565b6000611b5e856121fd565b6000868152609c602090815260408083206003015460a454825163313ce56760e01b81529251959650939485948594611bec94600160a01b850463ffffffff16948d94600160d81b90910462ffffff1693600160b01b900461ffff16926001600160a01b038c169263313ce56792600480830193928290030181865afa15801561147c573d6000803e3d6000fd5b92509250925060008311611c1657604051630a255ea560e41b81526004810184905260240161088a565b85831015611c41576040516323fd80cf60e01b8152600481018490526024810187905260440161088a565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038516906379cc679090604401600060405180830381600087803b158015611c8957600080fd5b505af1158015611c9d573d6000803e3d6000fd5b505060a254611cbb925086915033906001600160a01b0316856126eb565b60a154604051637921219560e11b81526001600160a01b039091169063f242432a90611cf190309033908d9089906004016138a6565b600060405180830381600087803b158015611d0b57600080fd5b505af1158015611d1f573d6000803e3d6000fd5b5050604080518a8152602081018790523393508b92507f0a2adf4ac4fa3544a2c794e5ba57a755d18102bb19672742fcc48f87e5c1fce39101611ab1565b6000818152609e60209081526040918290208054835181840281018401909452808452606093928301828280156113a2576020028201919060005260206000209081548152602001906001019080831161138e5750505050509050919050565b60008281526097602052604090205460ff16611def5760405163092483a160e11b81526004810183905260240161088a565b60008181526099602052604090205460ff1615611e225760405163c5e0852d60e01b81526004810182905260240161088a565b6000828152609e6020908152604080832080546001818101835591855283852001859055848452609f83528184208690556099909252808320805460ff19169092179091555182917f1ac2092e16e28eef29d1832f3dc69da1b21284a1f3159d3b26cb238b22fe4f8a91a25050565b611e9961232d565b6001600160a01b038116611efe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161088a565b611f0781612387565b50565b60008681526097602052604090205460ff1615611f3d57604051631e506c6d60e31b81526004810187905260240161088a565b60008681526097602052604090819020805460ff1916600117905560a454905163b548848760e01b81526001600160a01b039091169063b548848790611f8d908890889088908890600401613907565b6020604051808303816000875af1158015611fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd0919061392e565b6000878152609d6020908152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560989052818120600101805462ffffff60401b1916600160401b62ffffff861602179055905187917fafc348cb919473b1b9a1f5712a5d6d3176cdf7a5295bd4709b8cf37b5219832691a2505050505050565b6000828152609e602052604081208190815b81548110156121cb576000828281548110612082576120826136b9565b600091825260208083209091015480835260a090915260408220909250905b81548110156121b55760008282815481106120be576120be6136b9565b600091825260208220015460a154604051627eeac760e11b8152306004820152602481018390529193506001600160a01b03169062fdd58e90604401602060405180830381865afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b919061387a565b905080158061214e575061214e826121d7565b1561215a5750506121a3565b6000828152609c60205260409020600381015461219390600160a01b810463ffffffff16908490600160d81b900462ffffff168e61278d565b61219d908a613893565b98505050505b806121ad81613711565b9150506120a1565b50505080806121c390613711565b915050612065565b50909150505b92915050565b6000908152609c602052604090206003015442600160a01b90910463ffffffff16111590565b6000908152609c60209081526040808320600101548352609f8252808320548352609d9091529020546001600160a01b031690565b60008060004288116122465761224661394b565b6000612252878a6127e9565b90506000612277612263838b613961565b61226e88600a613a5c565b620f4240612878565b905060006122888289612710612878565b905060006122968284613a68565b90506000836122a68a600a613a5c565b6122b0908e613961565b6122ba9190613a68565b919d929c50909a509098505050505050505050565b600054610100900460ff166122f65760405162461bcd60e51b815260040161088a90613a7b565b61107161292d565b600054610100900460ff166123255760405162461bcd60e51b815260040161088a90613a7b565b61107161295d565b6033546001600160a01b031633146110715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000806123ec8887612710612878565b905060006123fa828a613a68565b90506000612408898c6127e9565b9050600061241a83620f424084612878565b905061242788600a613a5c565b6124319082613adc565b9c939b5091995091975050505050505050565b600080600061245386896127e9565b9050600061246f612464838a613961565b61226e87600a613a5c565b9050612487816127106124828982613a68565b612878565b93506124968487612710612878565b925050509550959350505050565b6000818152609e602052604081208190815b81548110156126175760008282815481106124d3576124d36136b9565b600091825260208083209091015480835260a090915260408220909250905b815481101561260157600082828154811061250f5761250f6136b9565b600091825260208220015460a154604051627eeac760e11b8152306004820152602481018390529193506001600160a01b03169062fdd58e90604401602060405180830381865afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c919061387a565b905080158061259f575061259f826121d7565b156125ab5750506125ef565b6000828152609c60205260409020600301546125d4908290600160d81b900462ffffff16613961565b6125de908a613893565b98506125ea8189613893565b975050505b806125f981613711565b9150506124f2565b505050808061260f90613711565b9150506124b6565b50816000036126775760008481526098602052604080822060028101839055600101549051600160401b90910462ffffff169086907fd0c98409f17c45dc9f0e272df73b5b8056534c9822bb3f6d02f91c9922a9f95e908490a450505050565b60006126838385613adc565b60008681526098602052604080822060018101805462ffffff60401b1916600160401b62ffffff871602179055600201869055519192508491839188917fd0c98409f17c45dc9f0e272df73b5b8056534c9822bb3f6d02f91c9922a9f95e9190a45050505050565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1612730573d6000803e3d6000fd5b5061273a8561298b565b6127865760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161088a565b5050505050565b600042851161279e575060006127e1565b60006127aa84876127e9565b90506127dd816127ba8688613961565b6127c49190613961565b6127cf85600a613a5c565b6124826002620f4240613afe565b9150505b949350505050565b6000806127f64284612a33565b90508060000361280c57620f42409150506121d1565b806001036128295761282184620f4240613a68565b9150506121d1565b600061283885620f4240613a68565b9050600061284982620f4240612a8f565b905060006128618261285c600187613a68565b612ac9565b905061286d8184612cf5565b979650505050505050565b60008080600019858709858702925082811083820303915050806000036128b2578382816128a8576128a8613ac6565b0492505050612926565b8084116128be57600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b600054610100900460ff166129545760405162461bcd60e51b815260040161088a90613a7b565b61107133612387565b600054610100900460ff166129845760405162461bcd60e51b815260040161088a90613a7b565b6001606555565b60006129b0565b62461bcd60e51b600052602060045280602452508060445260646000fd5b3d80156129ef5760208114612a20576129ea7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612992565b612a2d565b823b612a1757612a177311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612992565b60019150612a2d565b3d6000803e600051151591505b50919050565b6000821580612a40575081155b15612a6857604051631c5dcecf60e31b8152600481018490526024810183905260440161088a565b828211612a77575060006121d1565b62093a80612a858484613a68565b6129269190613adc565b600081600003612a9e57600080fd5b6000612aaa8484612d60565b905060016001607f1b036001600160801b038216111561292657600080fd5b600080600084600f0b128015612ae25750826001166001145b905060008085600f0b12612af65784612afb565b846000035b6001600160801b03169050600160801b600160401b8211612b9057603f82901b91505b8415612b88576001851615612b33578102607f1c5b908002607f1c906002851615612b49578102607f1c5b908002607f1c906004851615612b5f578102607f1c5b908002607f1c906008851615612b75578102607f1c5b60049490941c93908002607f1c90612b1e565b60401c612ca6565b603f600160601b831015612baa5760209290921b91601f19015b600160701b831015612bc25760109290921b91600f19015b600160781b831015612bda5760089290921b91600719015b6001607c1b831015612bf25760049290921b91600319015b6001607e1b831015612c0a5760029290921b91600119015b6001607f1b831015612c225760019290921b91600019015b60005b8615612c8f5760408210612c3857600080fd5b6001871615612c5e57918302607f1c918101600160801b831115612c5e57600192831c92015b928002607f1c9260019190911b90600160801b8410612c8357600193841c9391909101905b600187901c9650612c25565b60408110612c9c57600080fd5b6040039190911c90505b600083612cb35781612cb8565b816000035b90506f7fffffffffffffffffffffffffffffff198112801590612ce2575060016001607f1b038113155b612ceb57600080fd5b9695505050505050565b600081600003612d07575060006121d1565b600083600f0b1215612d1857600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b03811115612d4757600080fd5b60401b8119811115612d5857600080fd5b019392505050565b600081600003612d6f57600080fd5b60006001600160c01b038411612d9a5782604085901b81612d9257612d92613ac6565b049050612eb1565b60c084811c6401000000008110612db3576020918201911c5b620100008110612dc5576010918201911c5b6101008110612dd6576008918201911c5b60108110612de6576004918201911c5b60048110612df6576002918201911c5b60028110612e05576001820191505b60bf820360018603901c6001018260ff0387901b81612e2657612e26613ac6565b0492506001600160801b03831115612e3d57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612e69576001820391505b608084901b92900382811015612e80576001820391505b829003608084901c8214612e9657612e9661394b565b888181612ea557612ea5613ac6565b04870196505050505050505b6001600160801b0381111561292657600080fd5b600060208284031215612ed757600080fd5b81356001600160e01b03198116811461292657600080fd5b62ffffff81168114611f0757600080fd5b60008060008060808587031215612f1657600080fd5b8435935060208501359250604085013564ffffffffff81168114612f3957600080fd5b91506060850135612f4981612eef565b939692955090935050565b60008083601f840112612f6657600080fd5b5081356001600160401b03811115612f7d57600080fd5b6020830191508360208260051b8501011115612f9857600080fd5b9250929050565b60008060008060408587031215612fb557600080fd5b84356001600160401b0380821115612fcc57600080fd5b612fd888838901612f54565b90965094506020870135915080821115612ff157600080fd5b50612ffe87828801612f54565b95989497509550505050565b600081518084526020808501945080840160005b8381101561303a5781518752958201959082019060010161301e565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156130875781516001600160a01b031684529284019290840190600101613062565b50505083810382850152612ceb818661300a565b600080604083850312156130ae57600080fd5b50508035926020909101359150565b6000602082840312156130cf57600080fd5b5035919050565b61ffff81168114611f0757600080fd5b6000602082840312156130f857600080fd5b8135612926816130d6565b6001600160a01b0381168114611f0757600080fd5b60008060008060008060c0878903121561313157600080fd5b863561313c81613103565b9550602087013561314c81613103565b9450604087013561315c816130d6565b9350606087013561316c816130d6565b9250608087013561317c81613103565b915060a087013561318c81613103565b809150509295509295509295565b6000602082840312156131ac57600080fd5b813561292681613103565b60006101008284031215612a2d57600080fd5b602080825282518282018190526000919060409081850190868401855b8281101561322b5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016131e7565b5091979650505050505050565b602081526000612926602083018461300a565b6000806000806000806060878903121561326457600080fd5b86356001600160401b038082111561327b57600080fd5b6132878a838b01612f54565b909850965060208901359150808211156132a057600080fd5b6132ac8a838b01612f54565b909650945060408901359150808211156132c557600080fd5b506132d289828a01612f54565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156132ff57600080fd5b87356001600160401b038082111561331657600080fd5b6133228b838c01612f54565b909950975060208a013591508082111561333b57600080fd5b6133478b838c01612f54565b909750955060408a013591508082111561336057600080fd5b5061336d8a828b01612f54565b909450925050606088013561338181613103565b8091505092959891949750929550565b6000806000606084860312156133a657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156133fb576133fb6133bd565b604052919050565b600082601f83011261341457600080fd5b813560206001600160401b0382111561342f5761342f6133bd565b8160051b61343e8282016133d3565b928352848101820192828101908785111561345857600080fd5b83870192505b8483101561286d5782358252918301919083019061345e565b600082601f83011261348857600080fd5b81356001600160401b038111156134a1576134a16133bd565b6134b4601f8201601f19166020016133d3565b8181528460208386010111156134c957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156134fe57600080fd5b853561350981613103565b9450602086013561351981613103565b935060408601356001600160401b038082111561353557600080fd5b61354189838a01613403565b9450606088013591508082111561355757600080fd5b61356389838a01613403565b9350608088013591508082111561357957600080fd5b5061358688828901613477565b9150509295509295909350565b600080600080600060a086880312156135ab57600080fd5b85356135b681613103565b945060208601356135c681613103565b9350604086013592506060860135915060808601356001600160401b038111156135ef57600080fd5b61358688828901613477565b60008083601f84011261360d57600080fd5b5081356001600160401b0381111561362457600080fd5b602083019150836020828501011115612f9857600080fd5b6000806000806000806080878903121561365557600080fd5b8635955060208701356001600160401b038082111561367357600080fd5b61367f8a838b016135fb565b9097509550604089013591508082111561369857600080fd5b506136a589828a016135fb565b909450925050606087013561318c81612eef565b634e487b7160e01b600052603260045260246000fd5b60ff81168114611f0757600080fd5b6000602082840312156136f057600080fd5b8151612926816136cf565b634e487b7160e01b600052601160045260246000fd5b600060018201613723576137236136fb565b5060010190565b63ffffffff81168114611f0757600080fd5b60006020828403121561374e57600080fd5b81356129268161372a565b600081356121d1816130d6565b600081356121d1816136cf565b600081356121d181612eef565b8135815560208201356001820155604082013560028201556003810160608301356137aa81613103565b815460808501356137ba8161372a565b6001600160c01b0319919091166001600160a01b03929092169190911760a091821b63ffffffff60a01b16178255613817906137f7908501613759565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b61384461382660c08501613766565b82805460ff60d01b191660d09290921b60ff60d01b16919091179055565b61387561385360e08501613773565b82805462ffffff60d81b191660d89290921b62ffffff60d81b16919091179055565b505050565b60006020828403121561388c57600080fd5b5051919050565b808201808211156121d1576121d16136fb565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061391b6040830186886138de565b828103602084015261286d8185876138de565b60006020828403121561394057600080fd5b815161292681613103565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176121d1576121d16136fb565b600181815b808511156139b3578160001904821115613999576139996136fb565b808516156139a657918102915b93841c939080029061397d565b509250929050565b6000826139ca575060016121d1565b816139d7575060006121d1565b81600181146139ed57600281146139f757613a13565b60019150506121d1565b60ff841115613a0857613a086136fb565b50506001821b6121d1565b5060208310610133831016604e8410600b8410161715613a36575081810a6121d1565b613a408383613978565b8060001904821115613a5457613a546136fb565b029392505050565b600061292683836139bb565b818103818111156121d1576121d16136fb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082613af957634e487b7160e01b600052601260045260246000fd5b500490565b600061292660ff8416836139bb56fea2646970667358221220b10f703e48c964cfc689f6d37c7d6a1b6299377e0ca9e00369b5e2b28ac1fa7a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c8063adb4e05811610146578063d63098dd116100c3578063f23a6e6111610087578063f23a6e61146107bf578063f2fde38b146107de578063f468ae99146107f1578063f7c3fec214610806578063f9be94f214610836578063fb5ba8eb1461084957600080fd5b8063d63098dd14610723578063da12b23514610746578063dacc181a14610759578063ef016cdd1461077c578063efdcd9741461078f57600080fd5b8063b505ab861161010a578063b505ab861461060a578063b5ca64ec1461061d578063bc197c811461062d578063c007acf614610665578063c6cdbe5e1461067857600080fd5b8063adb4e058146104f8578063b2c6f00c1461050b578063b32c4d8d1461051e578063b3d346b9146105e4578063b3f00674146105f757600080fd5b80635c4e7a05116101df5780638cbacb8d116101a35780638cbacb8d1461047b5780638da5cb5b1461048e578063915e99131461049f57806393fa0581146104bf578063940870dc146104d2578063a3d334a1146104e557600080fd5b80635c4e7a05146103f057806368fb7ea1146104205780636a2848e314610433578063715018a6146104535780637902298e1461045b57600080fd5b806322cfa2251161022657806322cfa225146103285780632c5dd8a91461036957806348c35ad4146103995780634ca30634146103bc5780634dccd395146103cf57600080fd5b806301ffc9a714610263578063084951cf1461029c5780631073b295146102c45780631d3ad554146102d95780631fb0a624146102fa575b600080fd5b610287610271366004612ec5565b6001600160e01b031916636cdb3d1360e11b1490565b60405190151581526020015b60405180910390f35b60a4546102b190600160b01b900461ffff1681565b60405161ffff9091168152602001610293565b6102d76102d2366004612f00565b61085c565b005b6102ec6102e7366004612f9f565b610915565b604051610293929190613045565b61030d61030836600461309b565b610b1b565b60408051938452602084019290925290820152606001610293565b6103516103363660046130bd565b609d602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610293565b6102d76103773660046130e6565b60a4805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b6102876103a73660046130bd565b60996020526000908152604090205460ff1681565b6102d76103ca366004613118565b610c4f565b6103e26103dd36600461309b565b610de7565b604051908152602001610293565b6102d76103fe36600461319a565b60a380546001600160a01b0319166001600160a01b0392909216919091179055565b6102d761042e3660046131b7565b610e18565b6103e26104413660046130bd565b609f6020526000908152604090205481565b6102d761105f565b61046e61046936600461309b565b611073565b60405161029391906131ca565b60a354610351906001600160a01b031681565b6033546001600160a01b0316610351565b6104b26104ad3660046130bd565b61134c565b6040516102939190613238565b61030d6104cd36600461309b565b6113ae565b6102d76104e036600461324b565b61156f565b60a454610351906001600160a01b031681565b6102d76105063660046132e4565b61160c565b6103e261051936600461309b565b611797565b61058f61052c3660046130bd565b609c602052600090815260409020805460018201546002830154600390930154919290916001600160a01b03811690600160a01b810463ffffffff1690600160c01b810461ffff1690600160d01b810460ff1690600160d81b900462ffffff1688565b604080519889526020890197909752958701949094526001600160a01b03909216606086015263ffffffff16608085015261ffff1660a084015260ff1660c083015262ffffff1660e082015261010001610293565b6103e26105f23660046130bd565b6117b3565b60a254610351906001600160a01b031681565b6102d7610618366004613391565b6117d4565b6103e2683635c9adc5dea0000081565b61064c61063b3660046134e6565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610293565b6102d7610673366004613391565b611ac8565b6106da6106863660046130bd565b60986020526000908152604090208054600182015460028301546003840154600490940154929364ffffffffff83169362ffffff650100000000008504811694600160401b900416929163ffffffff169087565b6040805197885264ffffffffff909616602088015262ffffff94851695870195909552929091166060850152608084015263ffffffff1660a083015260c082015260e001610293565b6102876107313660046130bd565b60976020526000908152604090205460ff1681565b6104b26107543660046130bd565b611d5d565b6102876107673660046130bd565b609a6020526000908152604090205460ff1681565b6102d761078a36600461309b565b611dbd565b6102d761079d36600461319a565b60a280546001600160a01b0319166001600160a01b0392909216919091179055565b61064c6107cd366004613593565b63f23a6e6160e01b95945050505050565b6102d76107ec36600461319a565b611e91565b60a4546102b190600160a01b900461ffff1681565b6102d76108143660046130e6565b60a4805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b6102d761084436600461363c565b611f0a565b60a154610351906001600160a01b031681565b60008481526097602052604090205460ff166108935760405163092483a160e11b8152600481018590526024015b60405180910390fd5b600084815260986020908152604091829020858155600101805464ffffffffff861667ffffffffffffffff1990911681176501000000000062ffffff8716908102919091179092559251908152859187917fa4cbd1903de80f86e1a9a2e630f758a278790366d92be399714a4938b763a011910160405180910390a450505050565b6060808483146109385760405163b4fa3fb360e01b815260040160405180910390fd5b846001600160401b03811115610950576109506133bd565b604051908082528060200260200182016040528015610979578160200160208202803683370190505b509150846001600160401b03811115610994576109946133bd565b6040519080825280602002602001820160405280156109bd578160200160208202803683370190505b50905060005b85811015610b115760008585838181106109df576109df6136b9565b60209081029290920135600081815260979093526040909220549192505060ff16610a205760405163092483a160e11b81526004810182905260240161088a565b6000818152609d6020908152604080832054815163313ce56760e01b815291516001600160a01b039091169392610aa7928692869263313ce56792600480820193918290030181865afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906136de565b60ff16612053565b905081868581518110610abc57610abc6136b9565b60200260200101906001600160a01b031690816001600160a01b03168152505080858581518110610aef57610aef6136b9565b6020026020010181815250505050508080610b0990613711565b9150506109c3565b5094509492505050565b6000828152609a602052604081205481908190859060ff16610b5357604051632e46319160e21b81526004810182905260240161088a565b85610b5d816121d7565b15610b7e57604051630406a37f60e01b81526004810182905260240161088a565b6000610b89886121fd565b6000898152609c60209081526040918290206003015460a454835163313ce56760e01b81529351949550610c3e94600160a01b80840463ffffffff16958e95600160d81b90950462ffffff16949190930461ffff16926001600160a01b0389169263313ce567926004808401939192918290030181865afa158015610c12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3691906136de565b60ff16612232565b919a90995090975095505050505050565b600054610100900460ff1615808015610c6f5750600054600160ff909116105b80610c895750303b158015610c89575060005460ff166001145b610cec5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161088a565b6000805460ff191660011790558015610d0f576000805461ff0019166101001790555b610d176122cf565b610d1f6122fe565b60a4805460a180546001600160a01b038a81166001600160a01b03199283161790925561ffff888116600160b01b0261ffff60b01b19918b16600160a01b026001600160b01b0319909516848e161794909417169290921790925560a2805486841690831617905560a38054928516929091169190911790558015610dde576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b60a06020528160005260406000208181548110610e0357600080fd5b90600052602060002001600091509150505481565b60208082013560009081526099909152604090205460ff16610e5357604051633223e66d60e21b81526020820135600482015260240161088a565b80356000908152609a602052604090205460ff1615610e8857604051633903fb6760e01b81528135600482015260240161088a565b6000610e9a608083016060840161319a565b6001600160a01b031603610ec157604051634fd6f81960e11b815260040160405180910390fd5b42610ed260a083016080840161373c565b63ffffffff1611610f0f57610eed60a082016080830161373c565b6040516323aad46760e21b815263ffffffff909116600482015260240161088a565b80356000908152609a60209081526040808320805460ff19166001179055609c90915290208190610f408282613780565b5050609b8054600181810190925582357fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909101819055602080840135600090815260a0825260408120805494850181558152209091015560a1546001600160a01b031663731133e9610fb9608084016060850161319a565b604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152843560248301528401356044820152608060648201526000608482015260a401600060405180830381600087803b15801561101857600080fd5b505af115801561102c573d6000803e3d6000fd5b5050604051833592507f2354c6982830f23074cbadd3a8326546827ca5be87b6cfe41e906c66e75cd9659150600090a250565b61106761232d565b6110716000612387565b565b609b546060906000906001600160401b03811115611093576110936133bd565b6040519080825280602002602001820160405280156110f657816020015b6110e36040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816110b15790505b5090506000805b609b5481101561126f576000609b828154811061111c5761111c6136b9565b6000918252602080832090910154808352609c90915260409091206003015490915061ffff600160c01b909104168614158061116957506000818152609c60205260409020600101548714155b15611174575061125d565b60a154604051627eeac760e11b8152306004820152602481018390526000916001600160a01b03169062fdd58e90604401602060405180830381865afa1580156111c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e6919061387a565b9050600080600061120085683635c9adc5dea000006113ae565b9250925092506040518060a001604052808681526020018581526020018481526020018381526020018281525088888151811061123f5761123f6136b9565b6020908102919091010152611255876001613893565b965050505050505b8061126781613711565b9150506110fd565b50806001600160401b03811115611288576112886133bd565b6040519080825280602002602001820160405280156112eb57816020015b6112d86040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b8152602001906001900390816112a65790505b50925060005b818110156113435782818151811061130b5761130b6136b9565b6020026020010151848281518110611325576113256136b9565b6020026020010181905250808061133b90613711565b9150506112f1565b50505092915050565b600081815260a060209081526040918290208054835181840281018401909452808452606093928301828280156113a257602002820191906000526020600020905b81548152602001906001019080831161138e575b50505050509050919050565b6000828152609a602052604081205481908190859060ff166113e657604051632e46319160e21b81526004810182905260240161088a565b60006113f1876121fd565b6000888152609c60209081526040918290206003015460a454835163313ce56760e01b815293519495506114a894600160a01b830463ffffffff16948c94600160d81b90940462ffffff1693600160b01b90930461ffff16926001600160a01b0389169263313ce5679260048082019392918290030181865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a091906136de565b60ff166123d9565b50506000888152609c60209081526040918290206003015460a454835163313ce56760e01b8152935194995061156194600160a01b830463ffffffff16948b94600160d81b90940462ffffff1693600160b01b90930461ffff16926001600160a01b0389169263313ce5679260048082019392918290030181865afa158015611535573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155991906136de565b60ff16612444565b959890975094955050505050565b848314158061157e5750848114155b1561159c5760405163b4fa3fb360e01b815260040160405180910390fd5b60005b85811015610dde576115fa8787838181106115bc576115bc6136b9565b905060200201358686848181106115d5576115d56136b9565b905060200201358585858181106115ee576115ee6136b9565b90506020020135611ac8565b8061160481613711565b91505061159f565b858414158061161b5750838214155b156116395760405163b4fa3fb360e01b815260040160405180910390fd5b60a3546001600160a01b031633146116665760405163d68a9ef760e01b815233600482015260240161088a565b60005b8481101561178d576000868683818110611685576116856136b9565b905060200201602081019061169a919061319a565b90508060008686858181106116b1576116b16136b9565b6040516340c10f1960e01b81526001600160a01b038981166004830152602090920293909301356024840181905293508416916340c10f199150604401600060405180830381600087803b15801561170857600080fd5b505af115801561171c573d6000803e3d6000fd5b50506040518392506001600160a01b03861691507f2a4c118f91681e604a13a2fbe69bf4829feeab31b75c4de33b825ab6738d93d490600090a36117778b8b8681811061176b5761176b6136b9565b905060200201356124a4565b505050808061178590613711565b915050611669565b5050505050505050565b609e6020528160005260406000208181548110610e0357600080fd5b609b81815481106117c357600080fd5b600091825260209091200154905081565b6002606554036118265760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161088a565b60026065556000838152609a6020526040902054839060ff1661185f57604051632e46319160e21b81526004810182905260240161088a565b83611869816121d7565b1561188a57604051630406a37f60e01b81526004810182905260240161088a565b6000611895866121fd565b6000878152609c602090815260408083206003015460a454825163313ce56760e01b815292519596509394859461191d94600160a01b80850463ffffffff16958e95600160d81b900462ffffff16949190930461ffff16926001600160a01b038b169263313ce567926004808401938290030181865afa158015610c12573d6000803e3d6000fd5b50915091508582101561194d576040516323fd80cf60e01b8152600481018390526024810187905260440161088a565b6040516340c10f1960e01b8152336004820152602481018390526001600160a01b038416906340c10f1990604401600060405180830381600087803b15801561199557600080fd5b505af11580156119a9573d6000803e3d6000fd5b505060a2546040516340c10f1960e01b81526001600160a01b0391821660048201526024810185905290861692506340c10f199150604401600060405180830381600087803b1580156119fb57600080fd5b505af1158015611a0f573d6000803e3d6000fd5b505060a154604051637921219560e11b81526001600160a01b03909116925063f242432a9150611a4990339030908d908d906004016138a6565b600060405180830381600087803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b5050604080518a8152602081018690523393508b92507f996fd5dc95553bf61923ea1e658357de4a30175141a8fab02ae6ae2ed8c6d32e91015b60405180910390a350506001606555505050505050565b600260655403611b1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161088a565b60026065556000838152609a6020526040902054839060ff16611b5357604051632e46319160e21b81526004810182905260240161088a565b6000611b5e856121fd565b6000868152609c602090815260408083206003015460a454825163313ce56760e01b81529251959650939485948594611bec94600160a01b850463ffffffff16948d94600160d81b90910462ffffff1693600160b01b900461ffff16926001600160a01b038c169263313ce56792600480830193928290030181865afa15801561147c573d6000803e3d6000fd5b92509250925060008311611c1657604051630a255ea560e41b81526004810184905260240161088a565b85831015611c41576040516323fd80cf60e01b8152600481018490526024810187905260440161088a565b60405163079cc67960e41b8152336004820152602481018290526001600160a01b038516906379cc679090604401600060405180830381600087803b158015611c8957600080fd5b505af1158015611c9d573d6000803e3d6000fd5b505060a254611cbb925086915033906001600160a01b0316856126eb565b60a154604051637921219560e11b81526001600160a01b039091169063f242432a90611cf190309033908d9089906004016138a6565b600060405180830381600087803b158015611d0b57600080fd5b505af1158015611d1f573d6000803e3d6000fd5b5050604080518a8152602081018790523393508b92507f0a2adf4ac4fa3544a2c794e5ba57a755d18102bb19672742fcc48f87e5c1fce39101611ab1565b6000818152609e60209081526040918290208054835181840281018401909452808452606093928301828280156113a2576020028201919060005260206000209081548152602001906001019080831161138e5750505050509050919050565b60008281526097602052604090205460ff16611def5760405163092483a160e11b81526004810183905260240161088a565b60008181526099602052604090205460ff1615611e225760405163c5e0852d60e01b81526004810182905260240161088a565b6000828152609e6020908152604080832080546001818101835591855283852001859055848452609f83528184208690556099909252808320805460ff19169092179091555182917f1ac2092e16e28eef29d1832f3dc69da1b21284a1f3159d3b26cb238b22fe4f8a91a25050565b611e9961232d565b6001600160a01b038116611efe5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161088a565b611f0781612387565b50565b60008681526097602052604090205460ff1615611f3d57604051631e506c6d60e31b81526004810187905260240161088a565b60008681526097602052604090819020805460ff1916600117905560a454905163b548848760e01b81526001600160a01b039091169063b548848790611f8d908890889088908890600401613907565b6020604051808303816000875af1158015611fac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd0919061392e565b6000878152609d6020908152604080832080546001600160a01b0319166001600160a01b03959095169490941790935560989052818120600101805462ffffff60401b1916600160401b62ffffff861602179055905187917fafc348cb919473b1b9a1f5712a5d6d3176cdf7a5295bd4709b8cf37b5219832691a2505050505050565b6000828152609e602052604081208190815b81548110156121cb576000828281548110612082576120826136b9565b600091825260208083209091015480835260a090915260408220909250905b81548110156121b55760008282815481106120be576120be6136b9565b600091825260208220015460a154604051627eeac760e11b8152306004820152602481018390529193506001600160a01b03169062fdd58e90604401602060405180830381865afa158015612117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213b919061387a565b905080158061214e575061214e826121d7565b1561215a5750506121a3565b6000828152609c60205260409020600381015461219390600160a01b810463ffffffff16908490600160d81b900462ffffff168e61278d565b61219d908a613893565b98505050505b806121ad81613711565b9150506120a1565b50505080806121c390613711565b915050612065565b50909150505b92915050565b6000908152609c602052604090206003015442600160a01b90910463ffffffff16111590565b6000908152609c60209081526040808320600101548352609f8252808320548352609d9091529020546001600160a01b031690565b60008060004288116122465761224661394b565b6000612252878a6127e9565b90506000612277612263838b613961565b61226e88600a613a5c565b620f4240612878565b905060006122888289612710612878565b905060006122968284613a68565b90506000836122a68a600a613a5c565b6122b0908e613961565b6122ba9190613a68565b919d929c50909a509098505050505050505050565b600054610100900460ff166122f65760405162461bcd60e51b815260040161088a90613a7b565b61107161292d565b600054610100900460ff166123255760405162461bcd60e51b815260040161088a90613a7b565b61107161295d565b6033546001600160a01b031633146110715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806000806123ec8887612710612878565b905060006123fa828a613a68565b90506000612408898c6127e9565b9050600061241a83620f424084612878565b905061242788600a613a5c565b6124319082613adc565b9c939b5091995091975050505050505050565b600080600061245386896127e9565b9050600061246f612464838a613961565b61226e87600a613a5c565b9050612487816127106124828982613a68565b612878565b93506124968487612710612878565b925050509550959350505050565b6000818152609e602052604081208190815b81548110156126175760008282815481106124d3576124d36136b9565b600091825260208083209091015480835260a090915260408220909250905b815481101561260157600082828154811061250f5761250f6136b9565b600091825260208220015460a154604051627eeac760e11b8152306004820152602481018390529193506001600160a01b03169062fdd58e90604401602060405180830381865afa158015612568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258c919061387a565b905080158061259f575061259f826121d7565b156125ab5750506125ef565b6000828152609c60205260409020600301546125d4908290600160d81b900462ffffff16613961565b6125de908a613893565b98506125ea8189613893565b975050505b806125f981613711565b9150506124f2565b505050808061260f90613711565b9150506124b6565b50816000036126775760008481526098602052604080822060028101839055600101549051600160401b90910462ffffff169086907fd0c98409f17c45dc9f0e272df73b5b8056534c9822bb3f6d02f91c9922a9f95e908490a450505050565b60006126838385613adc565b60008681526098602052604080822060018101805462ffffff60401b1916600160401b62ffffff871602179055600201869055519192508491839188917fd0c98409f17c45dc9f0e272df73b5b8056534c9822bb3f6d02f91c9922a9f95e9190a45050505050565b6040516323b872dd60e01b8082526001600160a01b038581166004840152841660248301526044820183905290600080606483828a5af1612730573d6000803e3d6000fd5b5061273a8561298b565b6127865760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161088a565b5050505050565b600042851161279e575060006127e1565b60006127aa84876127e9565b90506127dd816127ba8688613961565b6127c49190613961565b6127cf85600a613a5c565b6124826002620f4240613afe565b9150505b949350505050565b6000806127f64284612a33565b90508060000361280c57620f42409150506121d1565b806001036128295761282184620f4240613a68565b9150506121d1565b600061283885620f4240613a68565b9050600061284982620f4240612a8f565b905060006128618261285c600187613a68565b612ac9565b905061286d8184612cf5565b979650505050505050565b60008080600019858709858702925082811083820303915050806000036128b2578382816128a8576128a8613ac6565b0492505050612926565b8084116128be57600080fd5b600084868809851960019081018716968790049682860381900495909211909303600082900391909104909201919091029190911760038402600290811880860282030280860282030280860282030280860282030280860282030280860290910302029150505b9392505050565b600054610100900460ff166129545760405162461bcd60e51b815260040161088a90613a7b565b61107133612387565b600054610100900460ff166129845760405162461bcd60e51b815260040161088a90613a7b565b6001606555565b60006129b0565b62461bcd60e51b600052602060045280602452508060445260646000fd5b3d80156129ef5760208114612a20576129ea7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612992565b612a2d565b823b612a1757612a177311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612992565b60019150612a2d565b3d6000803e600051151591505b50919050565b6000821580612a40575081155b15612a6857604051631c5dcecf60e31b8152600481018490526024810183905260440161088a565b828211612a77575060006121d1565b62093a80612a858484613a68565b6129269190613adc565b600081600003612a9e57600080fd5b6000612aaa8484612d60565b905060016001607f1b036001600160801b038216111561292657600080fd5b600080600084600f0b128015612ae25750826001166001145b905060008085600f0b12612af65784612afb565b846000035b6001600160801b03169050600160801b600160401b8211612b9057603f82901b91505b8415612b88576001851615612b33578102607f1c5b908002607f1c906002851615612b49578102607f1c5b908002607f1c906004851615612b5f578102607f1c5b908002607f1c906008851615612b75578102607f1c5b60049490941c93908002607f1c90612b1e565b60401c612ca6565b603f600160601b831015612baa5760209290921b91601f19015b600160701b831015612bc25760109290921b91600f19015b600160781b831015612bda5760089290921b91600719015b6001607c1b831015612bf25760049290921b91600319015b6001607e1b831015612c0a5760029290921b91600119015b6001607f1b831015612c225760019290921b91600019015b60005b8615612c8f5760408210612c3857600080fd5b6001871615612c5e57918302607f1c918101600160801b831115612c5e57600192831c92015b928002607f1c9260019190911b90600160801b8410612c8357600193841c9391909101905b600187901c9650612c25565b60408110612c9c57600080fd5b6040039190911c90505b600083612cb35781612cb8565b816000035b90506f7fffffffffffffffffffffffffffffff198112801590612ce2575060016001607f1b038113155b612ceb57600080fd5b9695505050505050565b600081600003612d07575060006121d1565b600083600f0b1215612d1857600080fd5b600f83900b6001600160801b038316810260401c90608084901c026001600160c01b03811115612d4757600080fd5b60401b8119811115612d5857600080fd5b019392505050565b600081600003612d6f57600080fd5b60006001600160c01b038411612d9a5782604085901b81612d9257612d92613ac6565b049050612eb1565b60c084811c6401000000008110612db3576020918201911c5b620100008110612dc5576010918201911c5b6101008110612dd6576008918201911c5b60108110612de6576004918201911c5b60048110612df6576002918201911c5b60028110612e05576001820191505b60bf820360018603901c6001018260ff0387901b81612e2657612e26613ac6565b0492506001600160801b03831115612e3d57600080fd5b608085901c83026001600160801b038616840260c088901c604089901b82811015612e69576001820391505b608084901b92900382811015612e80576001820391505b829003608084901c8214612e9657612e9661394b565b888181612ea557612ea5613ac6565b04870196505050505050505b6001600160801b0381111561292657600080fd5b600060208284031215612ed757600080fd5b81356001600160e01b03198116811461292657600080fd5b62ffffff81168114611f0757600080fd5b60008060008060808587031215612f1657600080fd5b8435935060208501359250604085013564ffffffffff81168114612f3957600080fd5b91506060850135612f4981612eef565b939692955090935050565b60008083601f840112612f6657600080fd5b5081356001600160401b03811115612f7d57600080fd5b6020830191508360208260051b8501011115612f9857600080fd5b9250929050565b60008060008060408587031215612fb557600080fd5b84356001600160401b0380821115612fcc57600080fd5b612fd888838901612f54565b90965094506020870135915080821115612ff157600080fd5b50612ffe87828801612f54565b95989497509550505050565b600081518084526020808501945080840160005b8381101561303a5781518752958201959082019060010161301e565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b828110156130875781516001600160a01b031684529284019290840190600101613062565b50505083810382850152612ceb818661300a565b600080604083850312156130ae57600080fd5b50508035926020909101359150565b6000602082840312156130cf57600080fd5b5035919050565b61ffff81168114611f0757600080fd5b6000602082840312156130f857600080fd5b8135612926816130d6565b6001600160a01b0381168114611f0757600080fd5b60008060008060008060c0878903121561313157600080fd5b863561313c81613103565b9550602087013561314c81613103565b9450604087013561315c816130d6565b9350606087013561316c816130d6565b9250608087013561317c81613103565b915060a087013561318c81613103565b809150509295509295509295565b6000602082840312156131ac57600080fd5b813561292681613103565b60006101008284031215612a2d57600080fd5b602080825282518282018190526000919060409081850190868401855b8281101561322b5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a090930192908501906001016131e7565b5091979650505050505050565b602081526000612926602083018461300a565b6000806000806000806060878903121561326457600080fd5b86356001600160401b038082111561327b57600080fd5b6132878a838b01612f54565b909850965060208901359150808211156132a057600080fd5b6132ac8a838b01612f54565b909650945060408901359150808211156132c557600080fd5b506132d289828a01612f54565b979a9699509497509295939492505050565b60008060008060008060006080888a0312156132ff57600080fd5b87356001600160401b038082111561331657600080fd5b6133228b838c01612f54565b909950975060208a013591508082111561333b57600080fd5b6133478b838c01612f54565b909750955060408a013591508082111561336057600080fd5b5061336d8a828b01612f54565b909450925050606088013561338181613103565b8091505092959891949750929550565b6000806000606084860312156133a657600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156133fb576133fb6133bd565b604052919050565b600082601f83011261341457600080fd5b813560206001600160401b0382111561342f5761342f6133bd565b8160051b61343e8282016133d3565b928352848101820192828101908785111561345857600080fd5b83870192505b8483101561286d5782358252918301919083019061345e565b600082601f83011261348857600080fd5b81356001600160401b038111156134a1576134a16133bd565b6134b4601f8201601f19166020016133d3565b8181528460208386010111156134c957600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156134fe57600080fd5b853561350981613103565b9450602086013561351981613103565b935060408601356001600160401b038082111561353557600080fd5b61354189838a01613403565b9450606088013591508082111561355757600080fd5b61356389838a01613403565b9350608088013591508082111561357957600080fd5b5061358688828901613477565b9150509295509295909350565b600080600080600060a086880312156135ab57600080fd5b85356135b681613103565b945060208601356135c681613103565b9350604086013592506060860135915060808601356001600160401b038111156135ef57600080fd5b61358688828901613477565b60008083601f84011261360d57600080fd5b5081356001600160401b0381111561362457600080fd5b602083019150836020828501011115612f9857600080fd5b6000806000806000806080878903121561365557600080fd5b8635955060208701356001600160401b038082111561367357600080fd5b61367f8a838b016135fb565b9097509550604089013591508082111561369857600080fd5b506136a589828a016135fb565b909450925050606087013561318c81612eef565b634e487b7160e01b600052603260045260246000fd5b60ff81168114611f0757600080fd5b6000602082840312156136f057600080fd5b8151612926816136cf565b634e487b7160e01b600052601160045260246000fd5b600060018201613723576137236136fb565b5060010190565b63ffffffff81168114611f0757600080fd5b60006020828403121561374e57600080fd5b81356129268161372a565b600081356121d1816130d6565b600081356121d1816136cf565b600081356121d181612eef565b8135815560208201356001820155604082013560028201556003810160608301356137aa81613103565b815460808501356137ba8161372a565b6001600160c01b0319919091166001600160a01b03929092169190911760a091821b63ffffffff60a01b16178255613817906137f7908501613759565b82805461ffff60c01b191660c09290921b61ffff60c01b16919091179055565b61384461382660c08501613766565b82805460ff60d01b191660d09290921b60ff60d01b16919091179055565b61387561385360e08501613773565b82805462ffffff60d81b191660d89290921b62ffffff60d81b16919091179055565b505050565b60006020828403121561388c57600080fd5b5051919050565b808201808211156121d1576121d16136fb565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a06080820181905260009082015260c00190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60408152600061391b6040830186886138de565b828103602084015261286d8185876138de565b60006020828403121561394057600080fd5b815161292681613103565b634e487b7160e01b600052600160045260246000fd5b80820281158282048414176121d1576121d16136fb565b600181815b808511156139b3578160001904821115613999576139996136fb565b808516156139a657918102915b93841c939080029061397d565b509250929050565b6000826139ca575060016121d1565b816139d7575060006121d1565b81600181146139ed57600281146139f757613a13565b60019150506121d1565b60ff841115613a0857613a086136fb565b50506001821b6121d1565b5060208310610133831016604e8410600b8410161715613a36575081810a6121d1565b613a408383613978565b8060001904821115613a5457613a546136fb565b029392505050565b600061292683836139bb565b818103818111156121d1576121d16136fb565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082613af957634e487b7160e01b600052601260045260246000fd5b500490565b600061292660ff8416836139bb56fea2646970667358221220b10f703e48c964cfc689f6d37c7d6a1b6299377e0ca9e00369b5e2b28ac1fa7a64736f6c63430008110033",
  "devdoc": {
    "errors": {
      "UnauthorizedRewardMinting(address)": [
        {
          "details": "Thrown if minting weekly rewards is called by an unauthorized account"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "bulkDecollateralizeTokens(uint256[],uint256[],uint256[])": {
        "details": "Bulk-decollateralizes ERC20 tokens into multiple ERC1155 tokens with specified amountsprior to calling, msg.sender must approve SolidWorldManager to spend `sum(amountsIn)` ERC20 tokens",
        "params": {
          "_batchIds": "ids of the batches",
          "amountsIn": "ERC20 tokens to decollateralize",
          "amountsOutMin": "minimum output amounts of ERC1155 tokens for transaction to succeed"
        }
      },
      "collateralizeBatch(uint256,uint256,uint256)": {
        "details": "Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`nonReentrant, to avoid possible reentrancy after calling safeTransferFrom",
        "params": {
          "amountIn": "ERC1155 tokens to collateralize",
          "amountOutMin": "minimum output amount of ERC20 tokens for transaction to succeed",
          "batchId": "id of the batch"
        }
      },
      "computeWeeklyCarbonRewards(address[],uint256[])": {
        "params": {
          "_categoryIds": "The categories to which the incentivized assets belong",
          "assets": "The incentivized assets (LP tokens)"
        },
        "returns": {
          "carbonRewards": "List of carbon rewards getting distributed.",
          "rewardAmounts": "List of carbon reward amounts getting distributed"
        }
      },
      "decollateralizeTokens(uint256,uint256,uint256)": {
        "details": "Decollateralizes `amountIn` of ERC20 tokens and sends `amountOut` ERC1155 tokens with id `batchId` to msg.senderprior to calling, msg.sender must approve SolidWorldManager to spend `amountIn` ERC20 tokensnonReentrant, to avoid possible reentrancy after calling safeTransferFrom",
        "params": {
          "amountIn": "ERC20 tokens to decollateralize",
          "amountOutMin": "minimum output amount of ERC1155 tokens for transaction to succeed",
          "batchId": "id of the batch"
        }
      },
      "getBatchesDecollateralizationInfo(uint256,uint256)": {
        "details": "Computes relevant info for the decollateralization process involving batches that match the specified `projectId` and `vintage`",
        "params": {
          "projectId": "id of the project the batch belongs to",
          "vintage": "vintage of the batch"
        },
        "returns": {
          "result": "array of relevant info about matching batches"
        }
      },
      "mintWeeklyCarbonRewards(uint256[],address[],uint256[],address)": {
        "params": {
          "_categoryIds": "The categories to which the incentivized assets belong",
          "carbonRewards": "List of carbon rewards to mint",
          "rewardAmounts": "List of carbon reward amounts to mint",
          "rewardsVault": "Account that secures ERC20 rewards"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setWeeklyRewardsMinter(address)": {
        "params": {
          "_weeklyRewardsMinter": "The only account allowed to mint weekly carbon rewards"
        }
      },
      "simulateBatchCollateralization(uint256,uint256)": {
        "details": "Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender",
        "params": {
          "amountIn": "ERC1155 tokens to collateralize",
          "batchId": "id of the batch"
        },
        "returns": {
          "cbtDaoCut": "ERC20 tokens to be received by feeReceiver",
          "cbtForfeited": "ERC20 tokens forfeited for collateralizing the ERC1155 tokens",
          "cbtUserCut": "ERC20 tokens to be received by msg.sender"
        }
      },
      "simulateDecollateralization(uint256,uint256)": {
        "details": "Simulates decollateralization of `amountIn` ERC20 tokens for ERC1155 tokens with id `batchId`",
        "params": {
          "amountIn": "ERC20 tokens to decollateralize",
          "batchId": "id of the batch"
        },
        "returns": {
          "amountOut": "ERC1155 tokens to be received by msg.sender",
          "minAmountIn": "minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`",
          "minCbtDaoCut": "ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "batchCreated": {
        "details": "BatchId => isAdded"
      },
      "batches": {
        "details": "BatchId => DomainDataTypes.Batch"
      },
      "categories": {
        "details": "CategoryId => DomainDataTypes.Category"
      },
      "categoryIds": {
        "details": "CategoryId => isAdded"
      },
      "categoryProjects": {
        "details": "CategoryId => ProjectId[]"
      },
      "categoryToken": {
        "details": "CategoryId => CollateralizedBasketToken address (ERC-20)"
      },
      "projectBatches": {
        "details": "ProjectId => BatchId[]"
      },
      "projectCategory": {
        "details": "ProjectId => CategoryId"
      },
      "projectIds": {
        "details": "ProjectId => isAdded"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DECOLLATERALIZATION_SIMULATION_INPUT()": {
        "notice": "Constant used as input for decollateralization simulation for ordering batches with the same category and vintage"
      },
      "batchCreated(uint256)": {
        "notice": "Property is used for checking if Batch ID is already added"
      },
      "batchIds(uint256)": {
        "notice": "Stores all batch ids ever created"
      },
      "batches(uint256)": {
        "notice": "Property stores info about a batch"
      },
      "categories(uint256)": {
        "notice": "Stores the state of categories"
      },
      "categoryIds(uint256)": {
        "notice": "Mapping is used for checking if Category ID is already added"
      },
      "categoryProjects(uint256,uint256)": {
        "notice": "Mapping determines what projects a category has"
      },
      "categoryToken(uint256)": {
        "notice": "Mapping determines a respective CollateralizedBasketToken (ERC-20) of a category"
      },
      "collateralizationFee()": {
        "notice": "Fee charged by DAO when collateralizing forward contract batch tokens."
      },
      "collateralizedBasketTokenDeployer()": {
        "notice": "Contract that deploys new collateralized basket tokens. Allows this contract to mint tokens."
      },
      "decollateralizationFee()": {
        "notice": "Fee charged by DAO when decollateralizing collateralized basket tokens."
      },
      "feeReceiver()": {
        "notice": "The account where all protocol fees are captured."
      },
      "forwardContractBatch()": {
        "notice": "Contract that operates forward contract batch tokens (ERC-1155). Allows this contract to mint tokens."
      },
      "projectBatches(uint256,uint256)": {
        "notice": "Mapping determines what batches a project has"
      },
      "projectCategory(uint256)": {
        "notice": "Mapping determines what category a project belongs to"
      },
      "projectIds(uint256)": {
        "notice": "Property is used for checking if Project ID is already added"
      },
      "weeklyRewardsMinter()": {
        "notice": "The only account that is allowed to mint weekly carbon rewards"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 666,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 296,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6891,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "categoryIds",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6897,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "categories",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_uint256,t_struct(Category)11446_storage)"
      },
      {
        "astId": 6902,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "projectIds",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6907,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "batchCreated",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6911,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "batchIds",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6917,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "batches",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_uint256,t_struct(Batch)11431_storage)"
      },
      {
        "astId": 6923,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "categoryToken",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_uint256,t_contract(CollateralizedBasketToken)6341)"
      },
      {
        "astId": 6929,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "categoryProjects",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6934,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "projectCategory",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6940,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "projectBatches",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 6944,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "forwardContractBatch",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(ForwardContractBatchToken)6432"
      },
      {
        "astId": 6947,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "feeReceiver",
        "offset": 0,
        "slot": "162",
        "type": "t_address"
      },
      {
        "astId": 6950,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "weeklyRewardsMinter",
        "offset": 0,
        "slot": "163",
        "type": "t_address"
      },
      {
        "astId": 6954,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "collateralizedBasketTokenDeployer",
        "offset": 0,
        "slot": "164",
        "type": "t_contract(CollateralizedBasketTokenDeployer)6372"
      },
      {
        "astId": 6957,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "collateralizationFee",
        "offset": 20,
        "slot": "164",
        "type": "t_uint16"
      },
      {
        "astId": 6960,
        "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
        "label": "decollateralizationFee",
        "offset": 22,
        "slot": "164",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CollateralizedBasketToken)6341": {
        "encoding": "inplace",
        "label": "contract CollateralizedBasketToken",
        "numberOfBytes": "20"
      },
      "t_contract(CollateralizedBasketTokenDeployer)6372": {
        "encoding": "inplace",
        "label": "contract CollateralizedBasketTokenDeployer",
        "numberOfBytes": "20"
      },
      "t_contract(ForwardContractBatchToken)6432": {
        "encoding": "inplace",
        "label": "contract ForwardContractBatchToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_contract(CollateralizedBasketToken)6341)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract CollateralizedBasketToken)",
        "numberOfBytes": "32",
        "value": "t_contract(CollateralizedBasketToken)6341"
      },
      "t_mapping(t_uint256,t_struct(Batch)11431_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DomainDataTypes.Batch)",
        "numberOfBytes": "32",
        "value": "t_struct(Batch)11431_storage"
      },
      "t_mapping(t_uint256,t_struct(Category)11446_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DomainDataTypes.Category)",
        "numberOfBytes": "32",
        "value": "t_struct(Category)11446_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Batch)11431_storage": {
        "encoding": "inplace",
        "label": "struct DomainDataTypes.Batch",
        "members": [
          {
            "astId": 11416,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11418,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11420,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "totalAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11422,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11424,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "expectedDueDate",
            "offset": 20,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 11426,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "vintage",
            "offset": 24,
            "slot": "3",
            "type": "t_uint16"
          },
          {
            "astId": 11428,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "status",
            "offset": 26,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 11430,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "discountRate",
            "offset": 27,
            "slot": "3",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Category)11446_storage": {
        "encoding": "inplace",
        "label": "struct DomainDataTypes.Category",
        "members": [
          {
            "astId": 11433,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "volumeCoefficient",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11435,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "decayPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 11437,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "maxDepreciation",
            "offset": 5,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 11439,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "averageTA",
            "offset": 8,
            "slot": "1",
            "type": "t_uint24"
          },
          {
            "astId": 11441,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "totalCollateralized",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11443,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "lastCollateralizationTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 11445,
            "contract": "contracts/SolidWorldManager.sol:SolidWorldManager",
            "label": "lastCollateralizationMomentum",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}