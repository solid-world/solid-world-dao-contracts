{
  "address": "0x1b388967207b8e2969adfa0B198Ee70ed3bd9f3D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ct",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timelock",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_category",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_daoTreasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_daoLiquidityFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ISolidDaoManagement",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "timelock",
          "type": "bool"
        }
      ],
      "name": "ChangedTimelock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "carbonProjectTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ctTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum CTTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PermissionOrdered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "enum CTTreasury.STATUS",
          "name": "status",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "name": "Permissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "SetOnChainGovernanceTimelock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "carbonProjectTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ctTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Sold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "UpdatedInfo",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CT",
      "outputs": [
        {
          "internalType": "contract ICT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAOTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEEKS_IN_SECONDS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract ISolidDaoManagement",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksNeededForOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numWeeks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "calcBasicValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "carbonProjectTons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "carbonProjects",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tons",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contractExpectedDueDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectDiscountRate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isCertified",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isRedeemed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "category",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tons",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contractExpectedDueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "projectDiscountRate",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isCertified",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isRedeemed",
              "type": "bool"
            }
          ],
          "internalType": "struct CTTreasury.CarbonProject",
          "name": "_carbonProject",
          "type": "tuple"
        }
      ],
      "name": "createOrUpdateCarbonProject",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoLiquidityFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "depositReserveToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "disable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "enable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        }
      ],
      "name": "indexInRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "nullify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onChainGovernanceTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "_status",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "orderTimelock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numWeeks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daoFee",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_ctDecimals",
          "type": "uint8"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "permissionOrder",
      "outputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "managing",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "toPermit",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timelockEnd",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "nullify",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permissionToDisableTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum CTTreasury.STATUS",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountToSell",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISolidDaoManagement",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoAddress",
          "type": "address"
        }
      ],
      "name": "setDAOAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_daoLiquidityFee",
          "type": "uint256"
        }
      ],
      "name": "setDAOLiquidityFee",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_numWeeks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_daoFee",
          "type": "uint256"
        }
      ],
      "name": "simulateDepositWeekPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "basisValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toProjectOwner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toDAO",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        }
      ],
      "name": "simulateSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "userAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPermissionOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_initialDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_contractExpectedDueDate",
          "type": "uint256"
        }
      ],
      "name": "weeksInThePeriod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xb883f003bd29866ae08efb96c0f0875fb8c74174188e3fe3247c385cf3ecf4e6",
  "receipt": {
    "to": null,
    "from": "0x8B3A08b22d25C60e4b2BfD984e331568ECa4C299",
    "contractAddress": "0x1b388967207b8e2969adfa0B198Ee70ed3bd9f3D",
    "transactionIndex": 11,
    "gasUsed": "5469944",
    "logsBloom": "0x
    "blockHash": "0xf4b303d2648c5e5a2cd9f99ae726190be5a3f53c97e856ab9b971d12bb829898",
    "transactionHash": "0xb883f003bd29866ae08efb96c0f0875fb8c74174188e3fe3247c385cf3ecf4e6",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 7590505,
        "transactionHash": "0xb883f003bd29866ae08efb96c0f0875fb8c74174188e3fe3247c385cf3ecf4e6",
        "address": "0x1b388967207b8e2969adfa0B198Ee70ed3bd9f3D",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000ff00910acb01910022a0f3dfc7c641d0b3b6d192"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xf4b303d2648c5e5a2cd9f99ae726190be5a3f53c97e856ab9b971d12bb829898"
      }
    ],
    "blockNumber": 7590505,
    "cumulativeGasUsed": "5965083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFf00910Acb01910022a0f3Dfc7C641d0b3b6d192",
    "0xf86ED9D897eCB4216352b58A6e813d28a870F7F3",
    0,
    "EnergyProduction",
    "0x8B3A08b22d25C60e4b2BfD984e331568ECa4C299",
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "ff44a7223596cd9c355a727819cd01e7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ct\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timelock\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_daoTreasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_daoLiquidityFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"timelock\",\"type\":\"bool\"}],\"name\":\"ChangedTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"carbonProjectTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PermissionOrdered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"status\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"Permissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"SetOnChainGovernanceTimelock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"carbonProjectTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ctTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"UpdatedInfo\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CT\",\"outputs\":[{\"internalType\":\"contract ICT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAOTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEEKS_IN_SECONDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksNeededForOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"calcBasicValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"carbonProjectTons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"carbonProjects\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractExpectedDueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectDiscountRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRedeemed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"category\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tons\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contractExpectedDueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectDiscountRate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCertified\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRedeemed\",\"type\":\"bool\"}],\"internalType\":\"struct CTTreasury.CarbonProject\",\"name\":\"_carbonProject\",\"type\":\"tuple\"}],\"name\":\"createOrUpdateCarbonProject\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"depositReserveToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"indexInRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"nullify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onChainGovernanceTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"_status\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"orderTimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_ctDecimals\",\"type\":\"uint8\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"permissionOrder\",\"outputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"managing\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"toPermit\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timelockEnd\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"nullify\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionToDisableTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum CTTreasury.STATUS\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSell\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISolidDaoManagement\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"name\":\"setDAOAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_daoLiquidityFee\",\"type\":\"uint256\"}],\"name\":\"setDAOLiquidityFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_numWeeks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoFee\",\"type\":\"uint256\"}],\"name\":\"simulateDepositWeekPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"basisValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toProjectOwner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toDAO\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"simulateSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPermissionOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_contractExpectedDueDate\",\"type\":\"uint256\"}],\"name\":\"weeksInThePeriod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Solid World DAO\",\"kind\":\"dev\",\"methods\":{\"baseSupply()\":{\"returns\":{\"_0\":\"uint256\"}},\"calcBasicValue(uint256,uint256)\":{\"params\":{\"_numWeeks\":\"uint256\",\"_rate\":\"uint256 1% = 10000, 0.0984% = 984\"}},\"constructor\":{\"details\":\"this is executed when this contract is deployedset timelockEnabled and initialized to falseset blocksNeededForOrder\",\"params\":{\"_authority\":\"Solid DAO Manager contract address\",\"_category\":\"string to store the name of the category this contract manages. This is for info purposes.\",\"_ct\":\"address of the CT (Carbon Token) this treasury will manange\",\"_daoLiquidityFee\":\"uint256 to store the DAO Liquidity Fee.\",\"_daoTreasury\":\"address to store the address of the DAO Vault Smart Contract.\",\"_timelock\":\"unint256\"}},\"createOrUpdateCarbonProject((address,uint256,uint256,uint256,uint256,bool,bool,bool))\":{\"details\":\"only permitted reserve manager can call this functiononly permitted reserve tokens are accepted\",\"params\":{\"_carbonProject\":\"CarbonProject\"},\"returns\":{\"_0\":\"true\"}},\"depositReserveToken(address,uint256,uint256,address)\":{\"details\":\"only permitted reserve tokens are acceptedonly active carbon projects are acceptedowner ERC1155 carbon project token balance needs to be more or equal than _amountowner need to allow this contract spend ERC1155 carbon project token before execute this functionupdate _owner carbonProjectBalances and smart contract carbonProjectTons\",\"params\":{\"_amount\":\"unint256\",\"_owner\":\"address\",\"_token\":\"address\",\"_tokenId\":\"unint256\"},\"returns\":{\"_0\":\"true\"}},\"disable(uint8,address)\":{\"details\":\"only policy can call this function\",\"params\":{\"_address\":\"address\",\"_status\":\"STATUS\"},\"returns\":{\"_0\":\"true\"}},\"disableTimelock()\":{\"details\":\"only governor can call this functiononChainGovernanceTimelock need to be less or equal than block number\"},\"enable(uint8,address)\":{\"details\":\"only policy can call this functiontimelock needs to be disabledif timelock is enable use orderTimelock function\",\"params\":{\"_address\":\"address\",\"_status\":\"STATUS\"},\"returns\":{\"_0\":\"true\"}},\"enableTimelock()\":{\"details\":\"only governor can call this functionset timelockEnabled to true\"},\"execute(uint256)\":{\"details\":\"only policy can call this function\",\"params\":{\"_index\":\"uint256\"},\"returns\":{\"_0\":\"true\"}},\"indexInRegistry(address,uint8)\":{\"returns\":{\"_0\":\"(bool, uint256)\"}},\"initialize()\":{\"details\":\"this function enable timelock and set initialized to trueonly governor can call this function\"},\"nullify(uint256)\":{\"details\":\"only governor can call this function\",\"params\":{\"_index\":\"uint256\"},\"returns\":{\"_0\":\"true\"}},\"orderTimelock(uint8,address)\":{\"details\":\"only policy can call this function\",\"params\":{\"_address\":\"address\",\"_status\":\"STATUS\"},\"returns\":{\"_0\":\"true\"}},\"payout(uint256,uint256,uint256,uint256,uint8)\":{\"params\":{\"_ctDecimals\":\"uint8\",\"_daoFee\":\"uint256 1% = 1\",\"_numWeeks\":\"uint256\",\"_rate\":\"uint256 1% = 10000, 0.0984% = 984\",\"_totalToken\":\"uint256\"}},\"permissionToDisableTimelock()\":{\"details\":\"only governor can call this functionthis function set new onChainGovernanceTimelock\"},\"sell(address,uint256,uint256,address)\":{\"details\":\"only permitted reserve tokens are acceptedonly active carbon projects are acceptedCT Treasury ERC1155 token balance needs to be more or equal than _amountToSell_buyer CT token balance needs to be more or equal than amountToPay_buyer need to allow this contract spend amountToPay CT token before execute this functionupdate CT Treasury carbonProjectTons balance\",\"params\":{\"_amountToSell\":\"unint256\",\"_buyer\":\"address\",\"_token\":\"address\",\"_tokenId\":\"unint256\"},\"returns\":{\"_0\":\"true\"}},\"setAuthority(address)\":{\"details\":\"Emit AuthorityUpdated event\",\"params\":{\"_newAuthority\":\"Address of the new Solid Dao Management smart contract\"}},\"setDAOAddress(address)\":{\"details\":\"only governor can call this function\",\"params\":{\"_daoAddress\":\"address to store the DAO Smart Contract address\"},\"returns\":{\"_0\":\"true if everything goes well\"}},\"setDAOLiquidityFee(uint256)\":{\"details\":\"only governor can call this function\",\"params\":{\"_daoLiquidityFee\":\"uint256 to store the DAO Liquidity Fee\"},\"returns\":{\"_0\":\"true if everything goes well\"}},\"simulateSwap(address,uint256,uint256)\":{\"params\":{\"_amountIn\":\"unint256\",\"_token\":\"address\",\"_tokenId\":\"unint256\"},\"returns\":{\"amountOut\":\"uint256 - Total minted amount of ERC20. Returns 0 if there is an error in calculation.\",\"daoAmount\":\"uint256 - How many ERC20 tokens DAO receives\",\"userAmount\":\"uint256 - How many ERC20 tokens user receives\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalPermissionOrder()\":{\"returns\":{\"_0\":\"uint256\"}},\"weeksInThePeriod(uint256,uint256)\":{\"details\":\"Calculates the number of weeks between a period\",\"params\":{\"_contractExpectedDueDate\":\"uint256 the carbon credit contract expected due date to be informed in seconds\",\"_initialDate\":\"uint256 initial date to be informed in seconds\"}}},\"stateVariables\":{\"CT\":{\"details\":\"immutable variable to store CT ERC20 token address\",\"return\":\"address\",\"returns\":{\"_0\":\"address\"}},\"DAOTreasury\":{\"details\":\"immutable address to store DAO contract address\",\"return\":\"address\",\"returns\":{\"_0\":\"address\"}},\"blocksNeededForOrder\":{\"details\":\"immutable variable set in constructor to store number of blocks that order needed to stay in queue to be executed\",\"return\":\"uint256\",\"returns\":{\"_0\":\"uint256\"}},\"carbonProjectTons\":{\"details\":\"mapping with token and tokenId as keys to store total amount of ERC1155 carbon project deposited in this contract\",\"return\":\"uint256\",\"returns\":{\"_0\":\"uint256\"}},\"carbonProjects\":{\"details\":\"mapping with token and tokenId as keys to store CarbonProjectsreturn CarbonProject\"},\"category\":{\"details\":\"variable to store the name of the category this contract manages. This is for info purposes.\",\"return\":\"string\",\"returns\":{\"_0\":\"string\"}},\"daoLiquidityFee\":{\"details\":\"variable to store the DAO Liquidity Fee\",\"return\":\"uint256\",\"returns\":{\"_0\":\"uint256\"}},\"initialized\":{\"details\":\"variable to store if smart contract is initialized\",\"return\":\"boolean\",\"returns\":{\"_0\":\"boolean\"}},\"onChainGovernanceTimelock\":{\"details\":\"variable to store the block number that disableTimelock function can change timelockEnabled to true\",\"return\":\"uint256\",\"returns\":{\"_0\":\"uint256\"}},\"permissionOrder\":{\"details\":\"array of Ordersreturn Order[]\"},\"permissions\":{\"details\":\"mapping with STATUS and address as keys to store status of permisions\",\"return\":\"bool\",\"returns\":{\"_0\":\"bool\"}},\"registry\":{\"details\":\"mapping with STATUS as key to store an array of addresses\",\"return\":\"array of addresses\",\"returns\":{\"_0\":\"array of addresses\"}},\"timelockEnabled\":{\"details\":\"variable to store if smart contract timelock is enabled\",\"return\":\"boolean\",\"returns\":{\"_0\":\"boolean\"}},\"totalReserves\":{\"details\":\"variable to store SCT ERC20 token address\",\"return\":\"uint256\",\"returns\":{\"_0\":\"uint256\"}}},\"title\":\"Carbon Token Treasury (CTTTreasury) Template\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CT()\":{\"notice\":\"ERC-20 Carbon Token address\"},\"DAOTreasury()\":{\"notice\":\"DAO Treasury Address where the profits of the operations must be sent to\"},\"baseSupply()\":{\"notice\":\"baseSupplyview function that returns SCT total supply\"},\"blocksNeededForOrder()\":{\"notice\":\"blocksNeededForOrder\"},\"carbonProjectTons(address,uint256)\":{\"notice\":\"carbonProjectTons\"},\"carbonProjects(address,uint256)\":{\"notice\":\"carbonProjects\"},\"category()\":{\"notice\":\"category of the Carbon Project this treasury manages\"},\"constructor\":{\"notice\":\"constructor\"},\"createOrUpdateCarbonProject((address,uint256,uint256,uint256,uint256,bool,bool,bool))\":{\"notice\":\"createOrUpdateCarbonProjectfunction to create or update carbon project\"},\"daoLiquidityFee()\":{\"notice\":\"daoLiquidityFee\"},\"depositReserveToken(address,uint256,uint256,address)\":{\"notice\":\"depositReserveTokenfunction to deposit an _amount of ERC1155 carbon project token in SCT Treasury and mint the same _amount of SCT\"},\"disable(uint8,address)\":{\"notice\":\"disablefunction to disable permission\"},\"disableTimelock()\":{\"notice\":\"disableTimelockfunction to disable timelock\"},\"enable(uint8,address)\":{\"notice\":\"enablefunction to enable permission\"},\"enableTimelock()\":{\"notice\":\"enableTimelockfunction to disable timelock\"},\"execute(uint256)\":{\"notice\":\"executefunction to enable ordered permission\"},\"indexInRegistry(address,uint8)\":{\"notice\":\"indexInRegistryview function to check if registry contains address\"},\"initialize()\":{\"notice\":\"initialize\"},\"initialized()\":{\"notice\":\"initialized\"},\"nullify(uint256)\":{\"notice\":\"nullifyfunction to cancel timelocked order\"},\"onChainGovernanceTimelock()\":{\"notice\":\"onChainGovernanceTimelock\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"onERC1155BatchReceivedvirtual function to allow contract accept ERC1155 tokens\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"onERC1155Receivedvirtual function to allow contract accept ERC1155 tokens\"},\"orderTimelock(uint8,address)\":{\"notice\":\"orderTimelockfunction to create order for address receive permission\"},\"permissionOrder(uint256)\":{\"notice\":\"permissionOrder\"},\"permissionToDisableTimelock()\":{\"notice\":\"permissionToDisableTimelockfunction to set onChainGovernanceTimelock to disable timelock\"},\"permissions(uint8,address)\":{\"notice\":\"permissions\"},\"registry(uint8,uint256)\":{\"notice\":\"registry\"},\"sell(address,uint256,uint256,address)\":{\"notice\":\"sellfunction to sell an _amountToSell of ERC1155 carbon project to _buyer upon payment of the projectAmount price and daoAmount fees in CT Tokens\"},\"setAuthority(address)\":{\"notice\":\"Function to set and update Solid Dao Management smart contract address\"},\"setDAOAddress(address)\":{\"notice\":\"function where the Governor sets the DAO Smart Contract address\"},\"setDAOLiquidityFee(uint256)\":{\"notice\":\"function where the Governor sets the DAO liquidity fee\"},\"simulateDepositWeekPeriod(uint256,uint256,uint256,uint256)\":{\"notice\":\"informs the investor a simulated return for deposit project's tokens\"},\"simulateSwap(address,uint256,uint256)\":{\"notice\":\"simulateSwapSimulates swapping erc20 to erc1155\"},\"timelockEnabled()\":{\"notice\":\"timelockEnabled\"},\"totalPermissionOrder()\":{\"notice\":\"totalPermissionOrderview function that returns total permissionOrder entries\"},\"totalReserves()\":{\"notice\":\"totalReserves\"}},\"notice\":\"CT Treasury Template\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CTTreasury.sol\":\"CTTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/CTTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./lib/SolidDaoManaged.sol\\\";\\nimport \\\"./lib/SolidMath.sol\\\";\\nimport \\\"./interfaces/ICT.sol\\\";\\n\\n/**\\n * @title Carbon Token Treasury (CTTTreasury) Template\\n * @author Solid World DAO\\n * @notice CT Treasury Template\\n */\\ncontract CTTreasury is SolidDaoManaged, ERC1155Receiver, SolidMath {\\n\\n    /**\\n     * @notice CarbonProject\\n     * @dev struct to store carbon project details\\n     * @param token: ERC1155 smart contract address\\n     * @param tokenId: ERC1155 carbon project token id\\n     * @param tons: total amount of carbon project tokens\\n     * @param contractExpectedDueDate: the carbon credit contract expected due date to be informed in seconds\\n     * @param projectDiscountRate: fee that will be charged from the investor when commodify the project\\n     * @param isActive: boolean status of carbon project in this smart contract\\n     * @param isCertified: boolean verra status of carbon project certificate\\n     * @param isRedeemed: boolean status of carbon project redeem\\n     */\\n    struct CarbonProject {\\n        address token;\\n        uint256 tokenId;\\n        uint256 tons;\\n        uint256 contractExpectedDueDate;\\n        uint256 projectDiscountRate;\\n        bool isActive;\\n        bool isCertified;\\n        bool isRedeemed;\\n    }\\n\\n    /**\\n     * @notice Order\\n     * @dev struct to store orders created on the timelock\\n     * @param managing: STATUS enum to be enabled\\n     * @param toPermit: address to recieve permision\\n     * @param timelockEnd: due date of the order in blocks\\n     * @param nullify: boolean to verify if the order is null\\n     * @param executed: boolean to verify if the order is executed\\n     */\\n    struct Order {\\n        STATUS managing;\\n        address toPermit;\\n        uint256 timelockEnd;\\n        bool nullify;\\n        bool executed;\\n    }\\n\\n    /**\\n     * @notice STATUS\\n     * @dev enum of permisions types\\n     * @dev 0 RESERVETOKEN\\n     * @dev 1 RESERVEMANAGER\\n     */\\n    enum STATUS {\\n        RESERVETOKEN,\\n        RESERVEMANAGER\\n    }\\n\\n    event Deposited(address indexed token, uint256 indexed tokenId, address indexed owner, uint256 carbonProjectTokenAmount, uint256 ctTokenAmount);\\n    event Sold(address indexed token, uint256 indexed tokenId, address indexed buyer, uint256 carbonProjectTokenAmount, uint256 ctTokenAmount);\\n    event UpdatedInfo(address indexed token, uint256 indexed tokenId, bool isActive);\\n    event ChangedTimelock(bool timelock);\\n    event SetOnChainGovernanceTimelock(uint256 blockNumber);\\n    event Permissioned(STATUS indexed status, address token, bool result);\\n    event PermissionOrdered(STATUS indexed status, address token, uint256 index);\\n\\n\\n    /**\\n     * @notice ERC-20 Carbon Token address\\n     * @dev immutable variable to store CT ERC20 token address\\n     * @return address\\n     */\\n    ICT public immutable CT;\\n\\n    /**\\n     * @notice category of the Carbon Project this treasury manages\\n     * @dev variable to store the name of the category this contract manages. This is for info purposes.\\n     * @return string\\n    */\\n    string public category;\\n\\n    /**\\n     * @notice totalReserves\\n     * @dev variable to store SCT ERC20 token address\\n     * @return uint256\\n     */\\n    uint256 public totalReserves;\\n\\n    /**\\n     * @notice carbonProjects\\n     * @dev mapping with token and tokenId as keys to store CarbonProjects\\n     * @dev return CarbonProject\\n     */\\n    mapping(address => mapping(uint256 => CarbonProject)) public carbonProjects;\\n\\n    /**\\n     * @notice carbonProjectTons\\n     * @dev mapping with token and tokenId as keys to store total amount of ERC1155 carbon project deposited in this contract\\n     * @return uint256\\n     */\\n    mapping(address => mapping(uint256 => uint256)) public carbonProjectTons;\\n\\n    /**\\n     * @notice registry\\n     * @dev mapping with STATUS as key to store an array of addresses\\n     * @return array of addresses\\n     */\\n    mapping(STATUS => address[]) public registry;\\n\\n    /**\\n     * @notice permissions\\n     * @dev mapping with STATUS and address as keys to store status of permisions\\n     * @return bool\\n     */\\n    mapping(STATUS => mapping(address => bool)) public permissions;\\n\\n    /**\\n     * @notice permissionOrder\\n     * @dev array of Orders\\n     * @dev return Order[]\\n     */\\n    Order[] public permissionOrder;\\n\\n    /**\\n     * @notice blocksNeededForOrder\\n     * @dev immutable variable set in constructor to store number of blocks that order needed to stay in queue to be executed\\n     * @return uint256\\n     */\\n    uint256 public immutable blocksNeededForOrder;\\n\\n    /**\\n     * @notice timelockEnabled\\n     * @dev variable to store if smart contract timelock is enabled\\n     * @return boolean\\n     */\\n    bool public timelockEnabled;\\n\\n    /**\\n     * @notice initialized\\n     * @dev variable to store if smart contract is initialized\\n     * @return boolean\\n     */\\n    bool public initialized;\\n\\n    /**\\n     * @notice onChainGovernanceTimelock\\n     * @dev variable to store the block number that disableTimelock function can change timelockEnabled to true\\n     * @return uint256\\n     */\\n    uint256 public onChainGovernanceTimelock;\\n\\n    /**\\n     * @notice DAO Treasury Address where the profits of the operations must be sent to\\n     * @dev immutable address to store DAO contract address\\n     * @return address\\n     */\\n    address public DAOTreasury;\\n\\n    /**\\n     * @notice daoLiquidityFee\\n     * @dev variable to store the DAO Liquidity Fee\\n     * @return uint256\\n     */\\n    uint256 public daoLiquidityFee;\\n\\n    /**\\n     * @notice constructor\\n     * @dev this is executed when this contract is deployed\\n     * @dev set timelockEnabled and initialized to false\\n     * @dev set blocksNeededForOrder\\n     * @param _authority Solid DAO Manager contract address\\n     * @param _ct address of the CT (Carbon Token) this treasury will manange\\n     * @param _timelock unint256\\n     * @param _category string to store the name of the category this contract manages. This is for info purposes.\\n     * @param _daoTreasury address to store the address of the DAO Vault Smart Contract.\\n     * @param _daoLiquidityFee uint256 to store the DAO Liquidity Fee.\\n     */\\n    constructor(\\n        address _authority,\\n        address _ct,\\n        uint256 _timelock,\\n        string memory _category,\\n        address _daoTreasury,\\n        uint256 _daoLiquidityFee\\n    ) SolidDaoManaged(ISolidDaoManagement(_authority)) {\\n        require(_ct != address(0), \\\"CT Treasury: invalid CT address\\\");\\n        require(_daoTreasury != address(0), \\\"CT Treasury: invalid DAO Treasury\\\");\\n        CT = ICT(_ct);\\n        timelockEnabled = false;\\n        initialized = false;\\n        blocksNeededForOrder = _timelock;\\n        category = _category;\\n        DAOTreasury = _daoTreasury;\\n        daoLiquidityFee = _daoLiquidityFee;\\n    }\\n\\n    /**\\n     * @notice initialize\\n     * @dev this function enable timelock and set initialized to true\\n     * @dev only governor can call this function\\n     */\\n    function initialize() external onlyGovernor {\\n        require(!initialized, \\\"SCT Treasury: already initialized\\\");\\n        timelockEnabled = true;\\n        initialized = true;\\n    }\\n\\n\\n\\n    /*\\n    ************************************************************\\n    ** CARBON PROJECT AREA\\n    ************************************************************\\n    */\\n\\n    /**\\n     * @notice createOrUpdateCarbonProject\\n     * @notice function to create or update carbon project\\n     * @dev only permitted reserve manager can call this function\\n     * @dev only permitted reserve tokens are accepted\\n     * @param _carbonProject CarbonProject\\n     * @return true\\n     */\\n    function createOrUpdateCarbonProject(CarbonProject memory _carbonProject) external returns (bool) {\\n        require(permissions[STATUS.RESERVEMANAGER][msg.sender], \\\"SCT Treasury: reserve manager not permitted\\\");\\n        require(permissions[STATUS.RESERVETOKEN][_carbonProject.token], \\\"SCT Treasury: reserve token not permitted\\\");\\n\\n        carbonProjects[_carbonProject.token][_carbonProject.tokenId] = _carbonProject;\\n\\n        emit UpdatedInfo(_carbonProject.token, _carbonProject.tokenId, _carbonProject.isActive);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice depositReserveToken\\n     * @notice function to deposit an _amount of ERC1155 carbon project token in SCT Treasury and mint the same _amount of SCT\\n     * @dev only permitted reserve tokens are accepted\\n     * @dev only active carbon projects are accepted\\n     * @dev owner ERC1155 carbon project token balance needs to be more or equal than _amount\\n     * @dev owner need to allow this contract spend ERC1155 carbon project token before execute this function\\n     * @dev update _owner carbonProjectBalances and smart contract carbonProjectTons\\n     * @param _token address\\n     * @param _tokenId unint256\\n     * @param _amount unint256\\n     * @param _owner address\\n     * @return true\\n     */\\n    function depositReserveToken(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amount,\\n        address _owner\\n    ) external returns (bool) {\\n        require(initialized, \\\"Contract was not initialized yet\\\");\\n        require(permissions[STATUS.RESERVETOKEN][_token], \\\"CT Treasury: reserve token not permitted\\\");\\n        require(carbonProjects[_token][_tokenId].isActive, \\\"CT Treasury: carbon project not active\\\");\\n        require((IERC1155(_token).balanceOf(_owner, _tokenId)) >= _amount, \\\"CT Treasury: owner insuficient ERC1155 balance\\\");\\n        require((IERC1155(_token).isApprovedForAll(_owner, address(this))) , \\\"CT Treasury: owner not approved this contract spend ERC1155\\\");\\n\\n        (bool mathOK, uint256 weeksUntilDelivery) = SolidMath.weeksInThePeriod(block.timestamp, carbonProjects[_token][_tokenId].contractExpectedDueDate);\\n        require(mathOK, \\\"CT Treasury: weeks from delivery dates are invalid\\\");\\n\\n        (, uint256 projectAmount, uint256 daoAmount) = payout(\\n            weeksUntilDelivery,\\n            _amount,\\n            carbonProjects[_token][_tokenId].projectDiscountRate,\\n            daoLiquidityFee,\\n            CT.decimals()\\n        );\\n\\n        IERC1155(_token).safeTransferFrom(\\n            _owner,\\n            address(this),\\n            _tokenId,\\n            _amount,\\n            \\\"data\\\"\\n        );\\n\\n        CT.mint(_owner, projectAmount);\\n        CT.mint(DAOTreasury, daoAmount);\\n\\n        carbonProjectTons[_token][_tokenId] += _amount;\\n        totalReserves += _amount;\\n\\n        emit Deposited(_token, _tokenId, _owner, _amount, projectAmount + daoAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice sell\\n     * @notice function to sell an _amountToSell of ERC1155 carbon project to _buyer upon payment of the projectAmount price and daoAmount fees in CT Tokens\\n     * @dev only permitted reserve tokens are accepted\\n     * @dev only active carbon projects are accepted\\n     * @dev CT Treasury ERC1155 token balance needs to be more or equal than _amountToSell\\n     * @dev _buyer CT token balance needs to be more or equal than amountToPay\\n     * @dev _buyer need to allow this contract spend amountToPay CT token before execute this function\\n     * @dev update CT Treasury carbonProjectTons balance\\n     * @param _token address\\n     * @param _tokenId unint256\\n     * @param _amountToSell unint256\\n     * @param _buyer address\\n     * @return true\\n     */\\n    function sell(\\n        address _token,\\n        uint256 _tokenId,\\n        uint256 _amountToSell,\\n        address _buyer\\n    ) external returns (bool) {\\n        require(permissions[STATUS.RESERVETOKEN][_token], \\\"CT Treasury: reserve token not permitted\\\");\\n        require(carbonProjects[_token][_tokenId].isActive, \\\"CT Treasury: carbon project not active\\\");\\n        require(carbonProjectTons[_token][_tokenId] >= _amountToSell, \\\"CT Treasury: carbon project insuficient ERC1155 balance\\\");\\n\\n        (bool mathOK, uint256 weeksUntilDelivery) = SolidMath.weeksInThePeriod(block.timestamp, carbonProjects[_token][_tokenId].contractExpectedDueDate);\\n        require(mathOK, \\\"CT Treasury: weeks from delivery dates are invalid\\\");\\n\\n        (, uint256 projectAmount, uint256 daoAmount) = payout(\\n            weeksUntilDelivery,\\n            _amountToSell,\\n            carbonProjects[_token][_tokenId].projectDiscountRate,\\n            daoLiquidityFee,\\n            CT.decimals()\\n        );\\n\\n        uint256 amountToPay = projectAmount + daoAmount;\\n\\n        require((CT.balanceOf(_buyer)) >= amountToPay, \\\"CT Treasury: buyer insuficient CT Token balance\\\");\\n        require((CT.allowance(_buyer, address(this))) >= amountToPay, \\\"CT Treasury: buyer not approved this contract spend CT Token\\\");\\n\\n        IERC1155(_token).safeTransferFrom(\\n            address(this),\\n            _buyer,\\n            _tokenId,\\n            _amountToSell,\\n            \\\"data\\\"\\n        );\\n\\n        CT.transferFrom(_buyer, DAOTreasury, daoAmount);\\n        CT.burnFrom(_buyer, projectAmount);\\n\\n        carbonProjectTons[_token][_tokenId] -= _amountToSell;\\n        totalReserves -= _amountToSell;\\n\\n        emit Sold(_token, _tokenId, _buyer, _amountToSell, amountToPay);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice simulateSwap\\n     * @notice Simulates swapping erc20 to erc1155\\n     * @param _token address\\n     * @param _tokenId unint256\\n     * @param _amountIn unint256\\n     * @return amountOut uint256 - Total minted amount of ERC20. Returns 0 if there is an error in calculation.\\n     * @return daoAmount uint256 - How many ERC20 tokens DAO receives\\n     * @return userAmount uint256 - How many ERC20 tokens user receives\\n     */\\n    function simulateSwap(\\n        address _token, uint256 _tokenId, uint256 _amountIn\\n    ) view public returns (\\n        uint256 amountOut, uint256 daoAmount, uint256 userAmount\\n    ) {\\n        (bool mathOK, uint256 weeksUntilDelivery) = SolidMath.weeksInThePeriod(\\n            block.timestamp,\\n            carbonProjects[_token][_tokenId].contractExpectedDueDate\\n        );\\n\\n        if (!mathOK) {\\n            return (0, 0, 0);\\n        }\\n\\n        (, uint256 projectAmount, uint256 daoAmount_) = payout(\\n            weeksUntilDelivery,\\n            _amountIn,\\n            carbonProjects[_token][_tokenId].projectDiscountRate,\\n            daoLiquidityFee,\\n            CT.decimals()\\n        );\\n\\n        return (projectAmount + daoAmount_, daoAmount_, projectAmount);\\n    }\\n\\n    /**\\n    @notice informs the investor a simulated return for deposit project's tokens\\n     */\\n    function simulateDepositWeekPeriod(\\n        uint256 _numWeeks,\\n        uint256 _rate,\\n        uint256 _totalToken,\\n        uint256 _daoFee\\n    ) view public returns (uint256 basisValue, uint256 toProjectOwner, uint256 toDAO) {\\n        return payout(_numWeeks, _totalToken, _rate, _daoFee, CT.decimals());\\n    }\\n\\n    /*\\n    ************************************************************\\n    ** POLICY MANAGEMENT AREA\\n    ************************************************************\\n    */\\n\\n    /**\\n     * @notice enable\\n     * @notice function to enable permission\\n     * @dev only policy can call this function\\n     * @dev timelock needs to be disabled\\n     * @dev if timelock is enable use orderTimelock function\\n     * @param _status STATUS\\n     * @param _address address\\n     * @return true\\n     */\\n    function enable(\\n        STATUS _status,\\n        address _address\\n    ) external onlyPolicy returns(bool) {\\n        require(_address != address(0), \\\"SCT Treasury: invalid address\\\");\\n        require(!timelockEnabled, \\\"SCT Treasury: timelock enabled\\\");\\n\\n        permissions[_status][_address] = true;\\n        (bool registered, ) = indexInRegistry(_address, _status);\\n        if (!registered) {\\n            registry[_status].push(_address);\\n        }\\n\\n        emit Permissioned(_status, _address, true);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice disable\\n     * @notice function to disable permission\\n     * @dev only policy can call this function\\n     * @param _status STATUS\\n     * @param _address address\\n     * @return true\\n     */\\n    function disable(\\n        STATUS _status,\\n        address _address\\n    ) external onlyPolicy returns(bool) {\\n        permissions[_status][_address] = false;\\n\\n        emit Permissioned(_status, _address, false);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice indexInRegistry\\n     * @notice view function to check if registry contains address\\n     * @return (bool, uint256)\\n     */\\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\\n        address[] memory entries = registry[_status];\\n        for (uint256 i = 0; i < entries.length; i++) {\\n            if (_address == entries[i]) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @notice orderTimelock\\n     * @notice function to create order for address receive permission\\n     * @dev only policy can call this function\\n     * @param _status STATUS\\n     * @param _address address\\n     * @return true\\n     */\\n    function orderTimelock(\\n        STATUS _status,\\n        address _address\\n    ) external onlyPolicy returns(bool) {\\n        require(_address != address(0), \\\"SCT Treasury: invalid address\\\");\\n        require(timelockEnabled, \\\"SCT Treasury: timelock is disabled, use enable\\\");\\n\\n        uint256 timelock = block.number + blocksNeededForOrder;\\n        permissionOrder.push(\\n            Order({\\n                managing: _status,\\n                toPermit: _address,\\n                timelockEnd: timelock,\\n                nullify: false,\\n                executed: false\\n            })\\n        );\\n\\n        emit PermissionOrdered(_status, _address, permissionOrder.length);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice execute\\n     * @notice function to enable ordered permission\\n     * @dev only policy can call this function\\n     * @param _index uint256\\n     * @return true\\n     */\\n    function execute(uint256 _index) external onlyPolicy returns(bool) {\\n        require(timelockEnabled, \\\"SCT Treasury: timelock is disabled, use enable\\\");\\n\\n        Order memory info = permissionOrder[_index];\\n\\n        require(!info.nullify, \\\"SCT Treasury: order has been nullified\\\");\\n        require(!info.executed, \\\"SCT Treasury: order has already been executed\\\");\\n        require(block.number >= info.timelockEnd, \\\"SCT Treasury: timelock not complete\\\");\\n\\n        permissions[info.managing][info.toPermit] = true;\\n        (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\\n        if (!registered) {\\n            registry[info.managing].push(info.toPermit);\\n        }\\n        permissionOrder[_index].executed = true;\\n\\n        emit Permissioned(info.managing, info.toPermit, true);\\n        return true;\\n    }\\n\\n    /*\\n    ************************************************************\\n    ** GOVERNOR MANAGEMENT AREA\\n    ************************************************************\\n    */\\n\\n    /**\\n    * @notice function where the Governor sets the DAO liquidity fee\\n    * @dev only governor can call this function\\n    * @return true if everything goes well\\n    * @param _daoLiquidityFee uint256 to store the DAO Liquidity Fee\\n    */\\n    function setDAOLiquidityFee(uint256 _daoLiquidityFee) external onlyGovernor returns(bool) {\\n        daoLiquidityFee = _daoLiquidityFee;\\n        return true;\\n    }\\n\\n    /**\\n    * @notice function where the Governor sets the DAO Smart Contract address\\n    * @dev only governor can call this function\\n    * @return true if everything goes well\\n    * @param _daoAddress address to store the DAO Smart Contract address\\n    */\\n    function setDAOAddress(address _daoAddress) external onlyGovernor returns(bool) {\\n        DAOTreasury = _daoAddress;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice nullify\\n     * @notice function to cancel timelocked order\\n     * @dev only governor can call this function\\n     * @param _index uint256\\n     * @return true\\n     */\\n    function nullify(uint256 _index) external onlyGovernor returns(bool) {\\n        permissionOrder[_index].nullify = true;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice enableTimelock\\n     * @notice function to disable timelock\\n     * @dev only governor can call this function\\n     * @dev set timelockEnabled to true\\n     */\\n    function enableTimelock() external onlyGovernor {\\n        require(!timelockEnabled, \\\"SCT Treasury: timelock already enabled\\\");\\n        timelockEnabled = true;\\n        emit ChangedTimelock(true);\\n    }\\n\\n    /**\\n     * @notice disableTimelock\\n     * @notice function to disable timelock\\n     * @dev only governor can call this function\\n     * @dev onChainGovernanceTimelock need to be less or equal than block number\\n     */\\n    function disableTimelock() external onlyGovernor {\\n        require(timelockEnabled, \\\"SCT Treasury: timelock already disabled\\\");\\n        require(onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number, \\\"SCT Treasury: governance timelock not expired yet\\\");\\n        timelockEnabled = false;\\n        onChainGovernanceTimelock = 0;\\n        emit ChangedTimelock(false);\\n    }\\n\\n    /**\\n     * @notice permissionToDisableTimelock\\n     * @notice function to set onChainGovernanceTimelock to disable timelock\\n     * @dev only governor can call this function\\n     * @dev this function set new onChainGovernanceTimelock\\n     */\\n    function permissionToDisableTimelock() external onlyGovernor {\\n        require(timelockEnabled, \\\"SCT Treasury: timelock already disabled\\\");\\n        onChainGovernanceTimelock = block.number + (blocksNeededForOrder * 10);\\n        emit SetOnChainGovernanceTimelock(onChainGovernanceTimelock);\\n    }\\n\\n    /**\\n     * @notice totalPermissionOrder\\n     * @notice view function that returns total permissionOrder entries\\n     * @return uint256\\n     */\\n    function totalPermissionOrder() external view returns (uint256) {\\n        return permissionOrder.length;\\n    }\\n\\n    /**\\n     * @notice baseSupply\\n     * @notice view function that returns SCT total supply\\n     * @return uint256\\n     */\\n    function baseSupply() external view returns (uint256) {\\n        return CT.totalSupply();\\n    }\\n\\n    /**\\n     * @notice onERC1155Received\\n     * @notice virtual function to allow contract accept ERC1155 tokens\\n     */\\n    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice onERC1155BatchReceived\\n     * @notice virtual function to allow contract accept ERC1155 tokens\\n     */\\n    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xbfb4bc4552ca6cc4af10afb992e350aba138057e721bd468dca5849ecdb3ca78\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICT is IERC20 {\\n  function decimals() external view returns (uint8);\\n\\n  function mint(address account_, uint256 amount_) external;\\n\\n  function burn(uint256 amount) external;\\n\\n  function burnFrom(address account_, uint256 amount_) external;\\n}\\n\",\"keccak256\":\"0xdcc1af82cac4345eb9b1cd7c85a068bde8a5258494dc1221f2d353333ac8a380\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISolidDaoManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\ninterface ISolidDaoManagement {\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    function governor() external view returns (address);\\n    function guardian() external view returns (address);\\n    function policy() external view returns (address);\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb74fbf40811c7b65972f39536f452185ec9c605f5299dee45c52b3f1e6f27169\",\"license\":\"MIT\"},\"contracts/lib/SolidDaoManaged.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.16;\\n\\nimport \\\"../interfaces/ISolidDaoManagement.sol\\\";\\n\\n/**\\n * @title Solid Dao Managed\\n * @author Solid World DAO\\n * @notice Abstract contratc to implement Solid Dao Management and access control modifiers\\n */\\nabstract contract SolidDaoManaged {\\n\\n    /**\\n    * @dev Emitted on setAuthority()\\n    * @param authority Address of Solid Dao Management smart contract\\n    **/\\n    event AuthorityUpdated(ISolidDaoManagement indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\";\\n\\n    ISolidDaoManagement public authority;\\n\\n    constructor(ISolidDaoManagement _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /**\\n    * @notice Function modifier that can be used in other smart contracts\\n    * @dev Only governor address can call functions marked by this modifier\\n    **/\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Function modifier that can be used in other smart contracts\\n    * @dev Only guardian address can call functions marked by this modifier\\n    **/\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Function modifier that can be used in other smart contracts\\n    * @dev Only policy address can call functions marked by this modifier\\n    **/\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Function modifier that can be used in other smart contracts\\n    * @dev Only vault address can call functions marked by this modifier\\n    **/\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Function to set and update Solid Dao Management smart contract address\\n    * @dev Emit AuthorityUpdated event\\n    * @param _newAuthority Address of the new Solid Dao Management smart contract\\n    */\\n    function setAuthority(ISolidDaoManagement _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0xda42039f618419cb92b0a294c75708d9b4e9ea9247b4f4c5b94b8f0f71fe2547\",\"license\":\"MIT\"},\"contracts/lib/SolidMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.16;\\n\\n/**\\n * @dev Solid DAO Math Operations and Constants.\\n */\\nabstract contract SolidMath {\\n\\n    uint256 constant public WEEKS_IN_SECONDS = 604800;\\n\\n    /**\\n    @notice BASIS define in which basis value the interest rate per week must be informed\\n    */\\n    uint256 constant BASIS = 1000000;\\n\\n    /**\\n     * @dev Calculates the number of weeks between a period\\n     * @param _initialDate uint256 initial date to be informed in seconds\\n     * @param _contractExpectedDueDate uint256 the carbon credit contract expected due date to be informed in seconds\\n     */\\n    function weeksInThePeriod(uint256 _initialDate, uint256 _contractExpectedDueDate) public pure returns(bool, uint256) {\\n        if (_contractExpectedDueDate < WEEKS_IN_SECONDS) {\\n            return (false, 0);\\n        }\\n        if (_initialDate < WEEKS_IN_SECONDS) {\\n            return (false, 0);\\n        }\\n        if (_contractExpectedDueDate < _initialDate) {\\n            return (false, 0);\\n        }\\n        uint256 numberOfWeeks = (_contractExpectedDueDate - _initialDate ) / WEEKS_IN_SECONDS;\\n        uint256 remainder = (_contractExpectedDueDate - _initialDate ) % WEEKS_IN_SECONDS;\\n        if (remainder >= 5) {\\n            numberOfWeeks++;\\n        }\\n        return (true, numberOfWeeks);\\n    }\\n\\n    /**\\n     * @param _numWeeks uint256\\n     * @param _rate uint256 1% = 10000, 0.0984% = 984\\n     */\\n    function calcBasicValue(uint256 _numWeeks, uint256 _rate) pure public returns (uint256) {\\n        uint256 invertDiscountRate = BASIS - _rate;\\n        uint256 basicValue = invertDiscountRate;\\n        for (uint16 i=1; i < _numWeeks; ) {\\n            basicValue = (basicValue * invertDiscountRate) / BASIS;\\n            unchecked { i++; }\\n        }\\n        return basicValue;\\n    }\\n\\n    /**\\n     * @param _numWeeks uint256\\n     * @param _totalToken uint256\\n     * @param _rate uint256 1% = 10000, 0.0984% = 984\\n     * @param _daoFee uint256 1% = 1\\n     * @param _ctDecimals uint8\\n     */\\n    function payout(\\n        uint256 _numWeeks,\\n        uint256 _totalToken,\\n        uint256 _rate,\\n        uint256 _daoFee,\\n        uint8 _ctDecimals\\n    ) pure public returns (uint256, uint256, uint256) {\\n        uint256 basicValue = calcBasicValue(_numWeeks, _rate);\\n        uint256 coefficient = BASIS * 100;\\n        uint256 totalBasicValue = _totalToken * basicValue * 10 ** _ctDecimals;\\n        uint256 userResult = (totalBasicValue * (100-_daoFee)) / coefficient;\\n        uint256 daoResult = (totalBasicValue * _daoFee) / coefficient;\\n        return (basicValue, userResult, daoResult);\\n    }\\n}\\n\",\"keccak256\":\"0x744804a847c53c908facce71e10a277af23f405a4ab24086cdfc1628cb11e9e0\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040526040518060400160405280600c81526020017f554e415554484f52495a45440000000000000000000000000000000000000000815250600090816200004a91906200053a565b503480156200005857600080fd5b5060405162006a1338038062006a1383398181016040528101906200007e91906200081b565b8580600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad60405160405180910390a250600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160362000176576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200016d9062000937565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620001e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001df90620009cf565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600960006101000a81548160ff0219169083151502179055506000600960016101000a81548160ff0219169083151502179055508360a0818152505082600290816200026b91906200053a565b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600c81905550505050505050620009f1565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034257607f821691505b602082108103620003585762000357620002fa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003c27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000383565b620003ce868362000383565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200041b620004156200040f84620003e6565b620003f0565b620003e6565b9050919050565b6000819050919050565b6200043783620003fa565b6200044f620004468262000422565b84845462000390565b825550505050565b600090565b6200046662000457565b620004738184846200042c565b505050565b5b818110156200049b576200048f6000826200045c565b60018101905062000479565b5050565b601f821115620004ea57620004b4816200035e565b620004bf8462000373565b81016020851015620004cf578190505b620004e7620004de8562000373565b83018262000478565b50505b505050565b600082821c905092915050565b60006200050f60001984600802620004ef565b1980831691505092915050565b60006200052a8383620004fc565b9150826002028217905092915050565b6200054582620002c0565b67ffffffffffffffff811115620005615762000560620002cb565b5b6200056d825462000329565b6200057a8282856200049f565b600060209050601f831160018114620005b257600084156200059d578287015190505b620005a985826200051c565b86555062000619565b601f198416620005c2866200035e565b60005b82811015620005ec57848901518255600182019150602085019450602081019050620005c5565b868310156200060c578489015162000608601f891682620004fc565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006628262000635565b9050919050565b620006748162000655565b81146200068057600080fd5b50565b600081519050620006948162000669565b92915050565b620006a581620003e6565b8114620006b157600080fd5b50565b600081519050620006c5816200069a565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b620006f182620006d5565b810181811067ffffffffffffffff82111715620007135762000712620002cb565b5b80604052505050565b60006200072862000621565b9050620007368282620006e6565b919050565b600067ffffffffffffffff821115620007595762000758620002cb565b5b6200076482620006d5565b9050602081019050919050565b60005b838110156200079157808201518184015260208101905062000774565b60008484015250505050565b6000620007b4620007ae846200073b565b6200071c565b905082815260208101848484011115620007d357620007d2620006d0565b5b620007e084828562000771565b509392505050565b600082601f8301126200080057620007ff620006cb565b5b8151620008128482602086016200079d565b91505092915050565b60008060008060008060c087890312156200083b576200083a6200062b565b5b60006200084b89828a0162000683565b96505060206200085e89828a0162000683565b95505060406200087189828a01620006b4565b945050606087015167ffffffffffffffff81111562000895576200089462000630565b5b620008a389828a01620007e8565b9350506080620008b689828a0162000683565b92505060a0620008c989828a01620006b4565b9150509295509295509295565b600082825260208201905092915050565b7f43542054726561737572793a20696e76616c6964204354206164647265737300600082015250565b60006200091f601f83620008d6565b91506200092c82620008e7565b602082019050919050565b60006020820190508181036000830152620009528162000910565b9050919050565b7f43542054726561737572793a20696e76616c69642044414f205472656173757260008201527f7900000000000000000000000000000000000000000000000000000000000000602082015250565b6000620009b7602183620008d6565b9150620009c48262000959565b604082019050919050565b60006020820190508181036000830152620009ea81620009a8565b9050919050565b60805160a051615fa162000a7260003960008181611d18015281816130c80152613329015260008181610e8201528181610f8c015281816110190152818161137f0152818161171c015281816117c6015281816118a2015281816119f001528181611ab30152818161232101528181612a420152612ec30152615fa16000f3fe608060405234801561001057600080fd5b50600436106101ee5760003560e01c806301ffc9a7146101f3578063056faf2b146102235780630a6e193d14610253578063158ef93e14610283578063165a6484146102a157806327e9732e146102d15780632d495ada146102db5780632dc8f8671461030d5780632fa1b76b1461033d5780632fd391811461035b57806332ef419f14610392578063330dd345146103b05780633c1c98e7146103e057806352991831146103fe578063541cf9441461042e57806364446c581461045e578063692f167b1461047c57806371a45c95146104ae5780637a9e5e4b146104de5780637d921af0146104fa5780638129fc1c14610504578063860f50481461050e5780638f840ddd1461052c5780639022b1bd1461054a57806393988b531461057c578063965afa89146105ad578063a44b8287146105dd578063b320f6a91461060d578063b39df88e1461062b578063bc197c8114610649578063bf7e214f14610679578063bfc3d84b14610697578063c4c35918146106b5578063c6306135146106e9578063ccd8857a146106f3578063dab2638614610723578063dd90837314610753578063e0c821d414610783578063e6c9dde3146107a1578063ef430aa6146107d2578063f23a6e61146107f0578063fe0d94c114610820575b600080fd5b61020d60048036038101906102089190613fa9565b610850565b60405161021a9190613ff1565b60405180910390f35b61023d60048036038101906102389190614042565b6108ca565b60405161024a9190614091565b60405180910390f35b61026d600480360381019061026891906140ac565b61092b565b60405161027a9190613ff1565b60405180910390f35b61028b610a40565b6040516102989190613ff1565b60405180910390f35b6102bb60048036038101906102b69190614137565b610a53565b6040516102c89190613ff1565b60405180910390f35b6102d96111c9565b005b6102f560048036038101906102f0919061419e565b611371565b60405161030493929190614205565b60405180910390f35b61032760048036038101906103229190614137565b611421565b6040516103349190613ff1565b60405180910390f35b610345611c37565b6040516103529190614091565b60405180910390f35b6103756004803603810190610370919061423c565b611c3e565b60405161038998979695949392919061428b565b60405180910390f35b61039a611cda565b6040516103a79190614091565b60405180910390f35b6103ca60048036038101906103c5919061432e565b611ce7565b6040516103d79190613ff1565b60405180910390f35b6103e8611d16565b6040516103f59190614091565b60405180910390f35b6104186004803603810190610413919061432e565b611d3a565b6040516104259190613ff1565b60405180910390f35b610448600480360381019061044391906144f5565b611f23565b6040516104559190613ff1565b60405180910390f35b61046661223a565b6040516104739190614091565b60405180910390f35b61049660048036038101906104919190614523565b612240565b6040516104a593929190614205565b60405180910390f35b6104c860048036038101906104c391906140ac565b6123da565b6040516104d59190613ff1565b60405180910390f35b6104f860048036038101906104f391906145b4565b612526565b005b6105026126b0565b005b61050c6128b3565b005b610516612a3e565b6040516105239190614091565b60405180910390f35b610534612ad4565b6040516105419190614091565b60405180910390f35b610564600480360381019061055f919061461a565b612ada565b60405161057393929190614205565b60405180910390f35b61059660048036038101906105919190614695565b612b82565b6040516105a49291906146d5565b60405180910390f35b6105c760048036038101906105c291906146fe565b612cd0565b6040516105d49190613ff1565b60405180910390f35b6105f760048036038101906105f2919061472b565b612e1f565b604051610604919061476b565b60405180910390f35b610615612e6d565b6040516106229190613ff1565b60405180910390f35b610633612e80565b6040516106409190614091565b60405180910390f35b610663600480360381019061065e9190614908565b612e86565b60405161067091906149e6565b60405180910390f35b610681612e9b565b60405161068e9190614a60565b60405180910390f35b61069f612ec1565b6040516106ac9190614a9c565b60405180910390f35b6106cf60048036038101906106ca91906140ac565b612ee5565b6040516106e0959493929190614b2e565b60405180910390f35b6106f1612f72565b005b61070d6004803603810190610708919061423c565b61313d565b60405161071a9190614091565b60405180910390f35b61073d6004803603810190610738919061432e565b613162565b60405161074a9190613ff1565b60405180910390f35b61076d6004803603810190610768919061432e565b6134f4565b60405161077a9190613ff1565b60405180910390f35b61078b61384a565b604051610798919061476b565b60405180910390f35b6107bb60048036038101906107b69190614042565b613870565b6040516107c99291906146d5565b60405180910390f35b6107da613919565b6040516107e79190614c00565b60405180910390f35b61080a60048036038101906108059190614c22565b6139a7565b60405161081791906149e6565b60405180910390f35b61083a600480360381019061083591906140ac565b6139bc565b6040516108479190613ff1565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c357506108c282613ed3565b5b9050919050565b60008082620f42406108dc9190614ce8565b905060008190506000600190505b858161ffff16101561091f57620f424083836109069190614d1c565b6109109190614da5565b915080806001019150506108ea565b50809250505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a269190614f11565b60405180910390fd5b5081600c8190555060019050919050565b600960019054906101000a900460ff1681565b6000600960019054906101000a900460ff16610aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9b90614f7f565b60405180910390fd5b60076000806001811115610abb57610aba614ab7565b5b6001811115610acd57610acc614ab7565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90615011565b60405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060050160009054906101000a900460ff16610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc906150a3565b60405180910390fd5b828573ffffffffffffffffffffffffffffffffffffffff1662fdd58e84876040518363ffffffff1660e01b8152600401610c409291906150c3565b602060405180830381865afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190615101565b1015610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb9906151a0565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e985e9c583306040518363ffffffff1660e01b8152600401610cfd9291906151c0565b602060405180830381865afa158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e91906151fe565b610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061529d565b60405180910390fd5b600080610ddd42600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060030154613870565b9150915081610e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e189061532f565b60405180910390fd5b600080610f148388600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190615364565b612ada565b92509250508873ffffffffffffffffffffffffffffffffffffffff1663f242432a87308b8b6040518563ffffffff1660e01b8152600401610f5894939291906153ee565b600060405180830381600087803b158015610f7257600080fd5b505af1158015610f86573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1987846040518363ffffffff1660e01b8152600401610fe59291906150c3565b600060405180830381600087803b158015610fff57600080fd5b505af1158015611013573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016110949291906150c3565b600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b5050505086600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008282546111269190615446565b92505081905550866003600082825461113f9190615446565b925050819055508573ffffffffffffffffffffffffffffffffffffffff16888a73ffffffffffffffffffffffffffffffffffffffff167f93e30903a33256312afaa1ced52a512ef93748c4eee202463ee7c8f25e1c047d8a85876111a39190615446565b6040516111b192919061547a565b60405180910390a46001945050505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125a9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190614f11565b60405180910390fd5b50600960009054906101000a900460ff161561131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131390615515565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055507fcda1a456e30fda74a38a8908b93c1fea691a78d8ad1aca4add9e16ce7829eafb60016040516113679190613ff1565b60405180910390a1565b6000806000611411878688877f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190615364565b612ada565b9250925092509450945094915050565b60006007600080600181111561143a57611439614ab7565b5b600181111561144c5761144b614ab7565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90615011565b60405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060050160009054906101000a900460ff16611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b906150a3565b60405180910390fd5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020541015611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e906155a7565b60405180910390fd5b60008061167742600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060030154613870565b91509150816116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b29061532f565b60405180910390fd5b6000806117ae8388600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190615364565b612ada565b9250925050600081836117c19190615446565b9050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b815260040161181d919061476b565b602060405180830381865afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190615101565b101561189f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189690615639565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e89306040518363ffffffff1660e01b81526004016118fb9291906151c0565b602060405180830381865afa158015611918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193c9190615101565b101561197d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611974906156cb565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff1663f242432a30898c8c6040518563ffffffff1660e01b81526004016119bc94939291906153ee565b600060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd88600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611a6d939291906156eb565b6020604051808303816000875af1158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab091906151fe565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc679088856040518363ffffffff1660e01b8152600401611b0c9291906150c3565b600060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b5050505087600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000828254611b9e9190614ce8565b925050819055508760036000828254611bb79190614ce8565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16898b73ffffffffffffffffffffffffffffffffffffffff167f62eb47b71cb57ac0e92b9c1ce6b8db449b85d8975a4f8f02e582170c5a959e518b85604051611c1e92919061547a565b60405180910390a4600195505050505050949350505050565b62093a8081565b6004602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060050160029054906101000a900460ff16905088565b6000600880549050905090565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e359190614f11565b60405180910390fd5b50600060076000856001811115611e5857611e57614ab7565b5b6001811115611e6a57611e69614ab7565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550826001811115611edf57611ede614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b836000604051611f11929190615722565b60405180910390a26001905092915050565b600060076000600180811115611f3c57611f3b614ab7565b5b6001811115611f4e57611f4d614ab7565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd906157bd565b60405180910390fd5b60076000806001811115611ffd57611ffc614ab7565b5b600181111561200f5761200e614ab7565b5b81526020019081526020016000206000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166120ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a29061584f565b60405180910390fd5b8160046000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460200151815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e08201518160050160026101000a81548160ff0219169083151502179055509050508160200151826000015173ffffffffffffffffffffffffffffffffffffffff167fc9cd83f59722bccac957d73aea60c6c94f88d4ff1bdb0637016e78ca302b40ef8460a001516040516122299190613ff1565b60405180910390a360019050919050565b600c5481565b60008060008060006122a542600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060030154613870565b91509150816122c057600080600094509450945050506123d1565b6000806123b38389600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ae9190615364565b612ada565b925092505080826123c49190615446565b8183965096509650505050505b93509350939050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246d9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906124de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d59190614f11565b60405180910390fd5b506001600883815481106124f5576124f461586f565b5b906000526020600020906003020160020160006101000a81548160ff02191690831515021790555060019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b79190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090612628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261f9190614f11565b60405180910390fd5b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad60405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127419190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a99190614f11565b60405180910390fd5b50600960009054906101000a900460ff16612802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f990615910565b60405180910390fd5b6000600a5414158015612817575043600a5411155b612856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284d906159a2565b60405180910390fd5b6000600960006101000a81548160ff0219169083151502179055506000600a819055507fcda1a456e30fda74a38a8908b93c1fea691a78d8ad1aca4add9e16ce7829eafb60006040516128a99190613ff1565b60405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129449190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906129b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ac9190614f11565b60405180910390fd5b50600960019054906101000a900460ff1615612a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fd90615a34565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055506001600960016101000a81548160ff021916908315150217905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acf9190615101565b905090565b60035481565b600080600080612aea89886108ca565b905060006064620f4240612afe9190614d1c565b9050600086600a612b0f9190615b87565b838b612b1b9190614d1c565b612b259190614d1c565b9050600082896064612b379190614ce8565b83612b429190614d1c565b612b4c9190614da5565b90506000838a84612b5d9190614d1c565b612b679190614da5565b90508482829750975097505050505050955095509592505050565b600080600060066000856001811115612b9e57612b9d614ab7565b5b6001811115612bb057612baf614ab7565b5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612c3e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612bf4575b5050505050905060005b8151811015612cbf57818181518110612c6457612c6361586f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603612cac57600181935093505050612cc9565b8080612cb790615bd2565b915050612c48565b5060008092509250505b9250929050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d639190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090612dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dcb9190614f11565b60405180910390fd5b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60066020528160005260406000208181548110612e3b57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900460ff1681565b600a5481565b600063bc197c8160e01b905095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60088181548110612ef557600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130039190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161306b9190614f11565b60405180910390fd5b50600960009054906101000a900460ff166130c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130bb90615910565b60405180910390fd5b600a7f00000000000000000000000000000000000000000000000000000000000000006130f19190614d1c565b436130fc9190615446565b600a819055507f5e3a6d8c4bcbb0fb59adc792103325b682213ab56055aab3106be34cbee86ef0600a546040516131339190614091565b60405180910390a1565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f59190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325d9190614f11565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036132d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cd90615c66565b60405180910390fd5b600960009054906101000a900460ff16613325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331c90615cf8565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000436133539190615446565b905060086040518060a0016040528086600181111561337557613374614ab7565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690836001811115613400576133ff614ab7565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff02191690831515021790555060808201518160020160016101000a81548160ff02191690831515021790555050508360018111156134ab576134aa614ab7565b5b7f9cda4c45543e6ab4fd271edebb1b91bc2ba79f72b922903e9f56a79b9ab032e2846008805490506040516134e19291906150c3565b60405180910390a2600191505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135879190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906135f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ef9190614f11565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365f90615c66565b60405180910390fd5b600960009054906101000a900460ff16156136b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136af90615d64565b60405180910390fd5b6001600760008560018111156136d1576136d0614ab7565b5b60018111156136e3576136e2614ab7565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060006137518385612b82565b509050806137f257600660008560018111156137705761376f614ab7565b5b600181111561378257613781614ab7565b5b8152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b83600181111561380557613804614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b846001604051613837929190615722565b60405180910390a2600191505092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008062093a8083101561388a5760008091509150613912565b62093a808410156138a15760008091509150613912565b838310156138b55760008091509150613912565b600062093a8085856138c79190614ce8565b6138d19190614da5565b9050600062093a8086866138e59190614ce8565b6138ef9190615d84565b90506005811061390857818061390490615bd2565b9250505b6001829350935050505b9250929050565b6002805461392690614e47565b80601f016020809104026020016040519081016040528092919081815260200182805461395290614e47565b801561399f5780601f106139745761010080835404028352916020019161399f565b820191906000526020600020905b81548152906001019060200180831161398257829003601f168201915b505050505081565b600063f23a6e6160e01b905095945050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4f9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ab79190614f11565b60405180910390fd5b50600960009054906101000a900460ff16613b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0790615cf8565b60405180910390fd5b600060088381548110613b2657613b2561586f565b5b90600052602060002090600302016040518060a00160405290816000820160009054906101000a900460ff166001811115613b6457613b63614ab7565b5b6001811115613b7657613b75614ab7565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff1615151515815250509050806060015115613c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4e90615e27565b60405180910390fd5b806080015115613c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c9390615eb9565b60405180910390fd5b8060400151431015613ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cda90615f4b565b60405180910390fd5b60016007600083600001516001811115613d0057613cff614ab7565b5b6001811115613d1257613d11614ab7565b5b81526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000613d8c82602001518360000151612b82565b50905080613e35576006600083600001516001811115613daf57613dae614ab7565b5b6001811115613dc157613dc0614ab7565b5b815260200190815260200160002082602001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160088581548110613e4b57613e4a61586f565b5b906000526020600020906003020160020160016101000a81548160ff02191690831515021790555081600001516001811115613e8a57613e89614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b83602001516001604051613ec0929190615722565b60405180910390a2600192505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613f8681613f51565b8114613f9157600080fd5b50565b600081359050613fa381613f7d565b92915050565b600060208284031215613fbf57613fbe613f47565b5b6000613fcd84828501613f94565b91505092915050565b60008115159050919050565b613feb81613fd6565b82525050565b60006020820190506140066000830184613fe2565b92915050565b6000819050919050565b61401f8161400c565b811461402a57600080fd5b50565b60008135905061403c81614016565b92915050565b6000806040838503121561405957614058613f47565b5b60006140678582860161402d565b92505060206140788582860161402d565b9150509250929050565b61408b8161400c565b82525050565b60006020820190506140a66000830184614082565b92915050565b6000602082840312156140c2576140c1613f47565b5b60006140d08482850161402d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614104826140d9565b9050919050565b614114816140f9565b811461411f57600080fd5b50565b6000813590506141318161410b565b92915050565b6000806000806080858703121561415157614150613f47565b5b600061415f87828801614122565b94505060206141708782880161402d565b93505060406141818782880161402d565b925050606061419287828801614122565b91505092959194509250565b600080600080608085870312156141b8576141b7613f47565b5b60006141c68782880161402d565b94505060206141d78782880161402d565b93505060406141e88782880161402d565b92505060606141f98782880161402d565b91505092959194509250565b600060608201905061421a6000830186614082565b6142276020830185614082565b6142346040830184614082565b949350505050565b6000806040838503121561425357614252613f47565b5b600061426185828601614122565b92505060206142728582860161402d565b9150509250929050565b614285816140f9565b82525050565b6000610100820190506142a1600083018b61427c565b6142ae602083018a614082565b6142bb6040830189614082565b6142c86060830188614082565b6142d56080830187614082565b6142e260a0830186613fe2565b6142ef60c0830185613fe2565b6142fc60e0830184613fe2565b9998505050505050505050565b6002811061431657600080fd5b50565b60008135905061432881614309565b92915050565b6000806040838503121561434557614344613f47565b5b600061435385828601614319565b925050602061436485828601614122565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6143bc82614373565b810181811067ffffffffffffffff821117156143db576143da614384565b5b80604052505050565b60006143ee613f3d565b90506143fa82826143b3565b919050565b61440881613fd6565b811461441357600080fd5b50565b600081359050614425816143ff565b92915050565b600061010082840312156144425761444161436e565b5b61444d6101006143e4565b9050600061445d84828501614122565b60008301525060206144718482850161402d565b60208301525060406144858482850161402d565b60408301525060606144998482850161402d565b60608301525060806144ad8482850161402d565b60808301525060a06144c184828501614416565b60a08301525060c06144d584828501614416565b60c08301525060e06144e984828501614416565b60e08301525092915050565b6000610100828403121561450c5761450b613f47565b5b600061451a8482850161442b565b91505092915050565b60008060006060848603121561453c5761453b613f47565b5b600061454a86828701614122565b935050602061455b8682870161402d565b925050604061456c8682870161402d565b9150509250925092565b6000614581826140f9565b9050919050565b61459181614576565b811461459c57600080fd5b50565b6000813590506145ae81614588565b92915050565b6000602082840312156145ca576145c9613f47565b5b60006145d88482850161459f565b91505092915050565b600060ff82169050919050565b6145f7816145e1565b811461460257600080fd5b50565b600081359050614614816145ee565b92915050565b600080600080600060a0868803121561463657614635613f47565b5b60006146448882890161402d565b95505060206146558882890161402d565b94505060406146668882890161402d565b93505060606146778882890161402d565b925050608061468888828901614605565b9150509295509295909350565b600080604083850312156146ac576146ab613f47565b5b60006146ba85828601614122565b92505060206146cb85828601614319565b9150509250929050565b60006040820190506146ea6000830185613fe2565b6146f76020830184614082565b9392505050565b60006020828403121561471457614713613f47565b5b600061472284828501614122565b91505092915050565b6000806040838503121561474257614741613f47565b5b600061475085828601614319565b92505060206147618582860161402d565b9150509250929050565b6000602082019050614780600083018461427c565b92915050565b600080fd5b600067ffffffffffffffff8211156147a6576147a5614384565b5b602082029050602081019050919050565b600080fd5b60006147cf6147ca8461478b565b6143e4565b905080838252602082019050602084028301858111156147f2576147f16147b7565b5b835b8181101561481b5780614807888261402d565b8452602084019350506020810190506147f4565b5050509392505050565b600082601f83011261483a57614839614786565b5b813561484a8482602086016147bc565b91505092915050565b600080fd5b600067ffffffffffffffff82111561487357614872614384565b5b61487c82614373565b9050602081019050919050565b82818337600083830152505050565b60006148ab6148a684614858565b6143e4565b9050828152602081018484840111156148c7576148c6614853565b5b6148d2848285614889565b509392505050565b600082601f8301126148ef576148ee614786565b5b81356148ff848260208601614898565b91505092915050565b600080600080600060a0868803121561492457614923613f47565b5b600061493288828901614122565b955050602061494388828901614122565b945050604086013567ffffffffffffffff81111561496457614963613f4c565b5b61497088828901614825565b935050606086013567ffffffffffffffff81111561499157614990613f4c565b5b61499d88828901614825565b925050608086013567ffffffffffffffff8111156149be576149bd613f4c565b5b6149ca888289016148da565b9150509295509295909350565b6149e081613f51565b82525050565b60006020820190506149fb60008301846149d7565b92915050565b6000819050919050565b6000614a26614a21614a1c846140d9565b614a01565b6140d9565b9050919050565b6000614a3882614a0b565b9050919050565b6000614a4a82614a2d565b9050919050565b614a5a81614a3f565b82525050565b6000602082019050614a756000830184614a51565b92915050565b6000614a8682614a2d565b9050919050565b614a9681614a7b565b82525050565b6000602082019050614ab16000830184614a8d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110614af757614af6614ab7565b5b50565b6000819050614b0882614ae6565b919050565b6000614b1882614afa565b9050919050565b614b2881614b0d565b82525050565b600060a082019050614b436000830188614b1f565b614b50602083018761427c565b614b5d6040830186614082565b614b6a6060830185613fe2565b614b776080830184613fe2565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614bbb578082015181840152602081019050614ba0565b60008484015250505050565b6000614bd282614b81565b614bdc8185614b8c565b9350614bec818560208601614b9d565b614bf581614373565b840191505092915050565b60006020820190508181036000830152614c1a8184614bc7565b905092915050565b600080600080600060a08688031215614c3e57614c3d613f47565b5b6000614c4c88828901614122565b9550506020614c5d88828901614122565b9450506040614c6e8882890161402d565b9350506060614c7f8882890161402d565b925050608086013567ffffffffffffffff811115614ca057614c9f613f4c565b5b614cac888289016148da565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614cf38261400c565b9150614cfe8361400c565b9250828203905081811115614d1657614d15614cb9565b5b92915050565b6000614d278261400c565b9150614d328361400c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6b57614d6a614cb9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614db08261400c565b9150614dbb8361400c565b925082614dcb57614dca614d76565b5b828204905092915050565b600081519050614de58161410b565b92915050565b600060208284031215614e0157614e00613f47565b5b6000614e0f84828501614dd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614e5f57607f821691505b602082108103614e7257614e71614e18565b5b50919050565b60008190508160005260206000209050919050565b60008154614e9a81614e47565b614ea48186614b8c565b94506001821660008114614ebf5760018114614ed557614f08565b60ff198316865281151560200286019350614f08565b614ede85614e78565b60005b83811015614f0057815481890152600182019150602081019050614ee1565b808801955050505b50505092915050565b60006020820190508181036000830152614f2b8184614e8d565b905092915050565b7f436f6e747261637420776173206e6f7420696e697469616c697a656420796574600082015250565b6000614f69602083614b8c565b9150614f7482614f33565b602082019050919050565b60006020820190508181036000830152614f9881614f5c565b9050919050565b7f43542054726561737572793a207265736572766520746f6b656e206e6f74207060008201527f65726d6974746564000000000000000000000000000000000000000000000000602082015250565b6000614ffb602883614b8c565b915061500682614f9f565b604082019050919050565b6000602082019050818103600083015261502a81614fee565b9050919050565b7f43542054726561737572793a20636172626f6e2070726f6a656374206e6f742060008201527f6163746976650000000000000000000000000000000000000000000000000000602082015250565b600061508d602683614b8c565b915061509882615031565b604082019050919050565b600060208201905081810360008301526150bc81615080565b9050919050565b60006040820190506150d8600083018561427c565b6150e56020830184614082565b9392505050565b6000815190506150fb81614016565b92915050565b60006020828403121561511757615116613f47565b5b6000615125848285016150ec565b91505092915050565b7f43542054726561737572793a206f776e657220696e737566696369656e74204560008201527f5243313135352062616c616e6365000000000000000000000000000000000000602082015250565b600061518a602e83614b8c565b91506151958261512e565b604082019050919050565b600060208201905081810360008301526151b98161517d565b9050919050565b60006040820190506151d5600083018561427c565b6151e2602083018461427c565b9392505050565b6000815190506151f8816143ff565b92915050565b60006020828403121561521457615213613f47565b5b6000615222848285016151e9565b91505092915050565b7f43542054726561737572793a206f776e6572206e6f7420617070726f7665642060008201527f7468697320636f6e7472616374207370656e6420455243313135350000000000602082015250565b6000615287603b83614b8c565b91506152928261522b565b604082019050919050565b600060208201905081810360008301526152b68161527a565b9050919050565b7f43542054726561737572793a207765656b732066726f6d2064656c697665727960008201527f2064617465732061726520696e76616c69640000000000000000000000000000602082015250565b6000615319603283614b8c565b9150615324826152bd565b604082019050919050565b600060208201905081810360008301526153488161530c565b9050919050565b60008151905061535e816145ee565b92915050565b60006020828403121561537a57615379613f47565b5b60006153888482850161534f565b91505092915050565b600082825260208201905092915050565b7f6461746100000000000000000000000000000000000000000000000000000000600082015250565b60006153d8600483615391565b91506153e3826153a2565b602082019050919050565b600060a082019050615403600083018761427c565b615410602083018661427c565b61541d6040830185614082565b61542a6060830184614082565b818103608083015261543b816153cb565b905095945050505050565b60006154518261400c565b915061545c8361400c565b925082820190508082111561547457615473614cb9565b5b92915050565b600060408201905061548f6000830185614082565b61549c6020830184614082565b9392505050565b7f5343542054726561737572793a2074696d656c6f636b20616c7265616479206560008201527f6e61626c65640000000000000000000000000000000000000000000000000000602082015250565b60006154ff602683614b8c565b915061550a826154a3565b604082019050919050565b6000602082019050818103600083015261552e816154f2565b9050919050565b7f43542054726561737572793a20636172626f6e2070726f6a65637420696e737560008201527f66696369656e7420455243313135352062616c616e6365000000000000000000602082015250565b6000615591603783614b8c565b915061559c82615535565b604082019050919050565b600060208201905081810360008301526155c081615584565b9050919050565b7f43542054726561737572793a20627579657220696e737566696369656e74204360008201527f5420546f6b656e2062616c616e63650000000000000000000000000000000000602082015250565b6000615623602f83614b8c565b915061562e826155c7565b604082019050919050565b6000602082019050818103600083015261565281615616565b9050919050565b7f43542054726561737572793a206275796572206e6f7420617070726f7665642060008201527f7468697320636f6e7472616374207370656e6420435420546f6b656e00000000602082015250565b60006156b5603c83614b8c565b91506156c082615659565b604082019050919050565b600060208201905081810360008301526156e4816156a8565b9050919050565b6000606082019050615700600083018661427c565b61570d602083018561427c565b61571a6040830184614082565b949350505050565b6000604082019050615737600083018561427c565b6157446020830184613fe2565b9392505050565b7f5343542054726561737572793a2072657365727665206d616e61676572206e6f60008201527f74207065726d6974746564000000000000000000000000000000000000000000602082015250565b60006157a7602b83614b8c565b91506157b28261574b565b604082019050919050565b600060208201905081810360008301526157d68161579a565b9050919050565b7f5343542054726561737572793a207265736572766520746f6b656e206e6f742060008201527f7065726d69747465640000000000000000000000000000000000000000000000602082015250565b6000615839602983614b8c565b9150615844826157dd565b604082019050919050565b600060208201905081810360008301526158688161582c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5343542054726561737572793a2074696d656c6f636b20616c7265616479206460008201527f697361626c656400000000000000000000000000000000000000000000000000602082015250565b60006158fa602783614b8c565b91506159058261589e565b604082019050919050565b60006020820190508181036000830152615929816158ed565b9050919050565b7f5343542054726561737572793a20676f7665726e616e63652074696d656c6f6360008201527f6b206e6f74206578706972656420796574000000000000000000000000000000602082015250565b600061598c603183614b8c565b915061599782615930565b604082019050919050565b600060208201905081810360008301526159bb8161597f565b9050919050565b7f5343542054726561737572793a20616c726561647920696e697469616c697a6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000615a1e602183614b8c565b9150615a29826159c2565b604082019050919050565b60006020820190508181036000830152615a4d81615a11565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115615aab57808604811115615a8757615a86614cb9565b5b6001851615615a965780820291505b8081029050615aa485615a54565b9450615a6b565b94509492505050565b600082615ac45760019050615b80565b81615ad25760009050615b80565b8160018114615ae85760028114615af257615b21565b6001915050615b80565b60ff841115615b0457615b03614cb9565b5b8360020a915084821115615b1b57615b1a614cb9565b5b50615b80565b5060208310610133831016604e8410600b8410161715615b565782820a905083811115615b5157615b50614cb9565b5b615b80565b615b638484846001615a61565b92509050818404811115615b7a57615b79614cb9565b5b81810290505b9392505050565b6000615b928261400c565b9150615b9d836145e1565b9250615bca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615ab4565b905092915050565b6000615bdd8261400c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615c0f57615c0e614cb9565b5b600182019050919050565b7f5343542054726561737572793a20696e76616c69642061646472657373000000600082015250565b6000615c50601d83614b8c565b9150615c5b82615c1a565b602082019050919050565b60006020820190508181036000830152615c7f81615c43565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b2069732064697361626c60008201527f65642c2075736520656e61626c65000000000000000000000000000000000000602082015250565b6000615ce2602e83614b8c565b9150615ced82615c86565b604082019050919050565b60006020820190508181036000830152615d1181615cd5565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b20656e61626c65640000600082015250565b6000615d4e601e83614b8c565b9150615d5982615d18565b602082019050919050565b60006020820190508181036000830152615d7d81615d41565b9050919050565b6000615d8f8261400c565b9150615d9a8361400c565b925082615daa57615da9614d76565b5b828206905092915050565b7f5343542054726561737572793a206f7264657220686173206265656e206e756c60008201527f6c69666965640000000000000000000000000000000000000000000000000000602082015250565b6000615e11602683614b8c565b9150615e1c82615db5565b604082019050919050565b60006020820190508181036000830152615e4081615e04565b9050919050565b7f5343542054726561737572793a206f726465722068617320616c72656164792060008201527f6265656e20657865637574656400000000000000000000000000000000000000602082015250565b6000615ea3602d83614b8c565b9150615eae82615e47565b604082019050919050565b60006020820190508181036000830152615ed281615e96565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b206e6f7420636f6d706c60008201527f6574650000000000000000000000000000000000000000000000000000000000602082015250565b6000615f35602383614b8c565b9150615f4082615ed9565b604082019050919050565b60006020820190508181036000830152615f6481615f28565b905091905056fea26469706673582212203ae0004efc6692cd3bc72bbd2f450b8444a792bfcefcfbf282a29e8616b1c0a064736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ee5760003560e01c806301ffc9a7146101f3578063056faf2b146102235780630a6e193d14610253578063158ef93e14610283578063165a6484146102a157806327e9732e146102d15780632d495ada146102db5780632dc8f8671461030d5780632fa1b76b1461033d5780632fd391811461035b57806332ef419f14610392578063330dd345146103b05780633c1c98e7146103e057806352991831146103fe578063541cf9441461042e57806364446c581461045e578063692f167b1461047c57806371a45c95146104ae5780637a9e5e4b146104de5780637d921af0146104fa5780638129fc1c14610504578063860f50481461050e5780638f840ddd1461052c5780639022b1bd1461054a57806393988b531461057c578063965afa89146105ad578063a44b8287146105dd578063b320f6a91461060d578063b39df88e1461062b578063bc197c8114610649578063bf7e214f14610679578063bfc3d84b14610697578063c4c35918146106b5578063c6306135146106e9578063ccd8857a146106f3578063dab2638614610723578063dd90837314610753578063e0c821d414610783578063e6c9dde3146107a1578063ef430aa6146107d2578063f23a6e61146107f0578063fe0d94c114610820575b600080fd5b61020d60048036038101906102089190613fa9565b610850565b60405161021a9190613ff1565b60405180910390f35b61023d60048036038101906102389190614042565b6108ca565b60405161024a9190614091565b60405180910390f35b61026d600480360381019061026891906140ac565b61092b565b60405161027a9190613ff1565b60405180910390f35b61028b610a40565b6040516102989190613ff1565b60405180910390f35b6102bb60048036038101906102b69190614137565b610a53565b6040516102c89190613ff1565b60405180910390f35b6102d96111c9565b005b6102f560048036038101906102f0919061419e565b611371565b60405161030493929190614205565b60405180910390f35b61032760048036038101906103229190614137565b611421565b6040516103349190613ff1565b60405180910390f35b610345611c37565b6040516103529190614091565b60405180910390f35b6103756004803603810190610370919061423c565b611c3e565b60405161038998979695949392919061428b565b60405180910390f35b61039a611cda565b6040516103a79190614091565b60405180910390f35b6103ca60048036038101906103c5919061432e565b611ce7565b6040516103d79190613ff1565b60405180910390f35b6103e8611d16565b6040516103f59190614091565b60405180910390f35b6104186004803603810190610413919061432e565b611d3a565b6040516104259190613ff1565b60405180910390f35b610448600480360381019061044391906144f5565b611f23565b6040516104559190613ff1565b60405180910390f35b61046661223a565b6040516104739190614091565b60405180910390f35b61049660048036038101906104919190614523565b612240565b6040516104a593929190614205565b60405180910390f35b6104c860048036038101906104c391906140ac565b6123da565b6040516104d59190613ff1565b60405180910390f35b6104f860048036038101906104f391906145b4565b612526565b005b6105026126b0565b005b61050c6128b3565b005b610516612a3e565b6040516105239190614091565b60405180910390f35b610534612ad4565b6040516105419190614091565b60405180910390f35b610564600480360381019061055f919061461a565b612ada565b60405161057393929190614205565b60405180910390f35b61059660048036038101906105919190614695565b612b82565b6040516105a49291906146d5565b60405180910390f35b6105c760048036038101906105c291906146fe565b612cd0565b6040516105d49190613ff1565b60405180910390f35b6105f760048036038101906105f2919061472b565b612e1f565b604051610604919061476b565b60405180910390f35b610615612e6d565b6040516106229190613ff1565b60405180910390f35b610633612e80565b6040516106409190614091565b60405180910390f35b610663600480360381019061065e9190614908565b612e86565b60405161067091906149e6565b60405180910390f35b610681612e9b565b60405161068e9190614a60565b60405180910390f35b61069f612ec1565b6040516106ac9190614a9c565b60405180910390f35b6106cf60048036038101906106ca91906140ac565b612ee5565b6040516106e0959493929190614b2e565b60405180910390f35b6106f1612f72565b005b61070d6004803603810190610708919061423c565b61313d565b60405161071a9190614091565b60405180910390f35b61073d6004803603810190610738919061432e565b613162565b60405161074a9190613ff1565b60405180910390f35b61076d6004803603810190610768919061432e565b6134f4565b60405161077a9190613ff1565b60405180910390f35b61078b61384a565b604051610798919061476b565b60405180910390f35b6107bb60048036038101906107b69190614042565b613870565b6040516107c99291906146d5565b60405180910390f35b6107da613919565b6040516107e79190614c00565b60405180910390f35b61080a60048036038101906108059190614c22565b6139a7565b60405161081791906149e6565b60405180910390f35b61083a600480360381019061083591906140ac565b6139bc565b6040516108479190613ff1565b60405180910390f35b60007f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c357506108c282613ed3565b5b9050919050565b60008082620f42406108dc9190614ce8565b905060008190506000600190505b858161ffff16101561091f57620f424083836109069190614d1c565b6109109190614da5565b915080806001019150506108ea565b50809250505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561099a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109be9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090610a2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a269190614f11565b60405180910390fd5b5081600c8190555060019050919050565b600960019054906101000a900460ff1681565b6000600960019054906101000a900460ff16610aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9b90614f7f565b60405180910390fd5b60076000806001811115610abb57610aba614ab7565b5b6001811115610acd57610acc614ab7565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5c90615011565b60405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060050160009054906101000a900460ff16610c05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfc906150a3565b60405180910390fd5b828573ffffffffffffffffffffffffffffffffffffffff1662fdd58e84876040518363ffffffff1660e01b8152600401610c409291906150c3565b602060405180830381865afa158015610c5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c819190615101565b1015610cc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb9906151a0565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663e985e9c583306040518363ffffffff1660e01b8152600401610cfd9291906151c0565b602060405180830381865afa158015610d1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3e91906151fe565b610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061529d565b60405180910390fd5b600080610ddd42600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060030154613870565b9150915081610e21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e189061532f565b60405180910390fd5b600080610f148388600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190615364565b612ada565b92509250508873ffffffffffffffffffffffffffffffffffffffff1663f242432a87308b8b6040518563ffffffff1660e01b8152600401610f5894939291906153ee565b600060405180830381600087803b158015610f7257600080fd5b505af1158015610f86573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f1987846040518363ffffffff1660e01b8152600401610fe59291906150c3565b600060405180830381600087803b158015610fff57600080fd5b505af1158015611013573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016110949291906150c3565b600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b5050505086600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060008282546111269190615446565b92505081905550866003600082825461113f9190615446565b925050819055508573ffffffffffffffffffffffffffffffffffffffff16888a73ffffffffffffffffffffffffffffffffffffffff167f93e30903a33256312afaa1ced52a512ef93748c4eee202463ee7c8f25e1c047d8a85876111a39190615446565b6040516111b192919061547a565b60405180910390a46001945050505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061125a9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906112cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c29190614f11565b60405180910390fd5b50600960009054906101000a900460ff161561131c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131390615515565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055507fcda1a456e30fda74a38a8908b93c1fea691a78d8ad1aca4add9e16ce7829eafb60016040516113679190613ff1565b60405180910390a1565b6000806000611411878688877f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140c9190615364565b612ada565b9250925092509450945094915050565b60006007600080600181111561143a57611439614ab7565b5b600181111561144c5761144b614ab7565b5b815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db90615011565b60405180910390fd5b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060050160009054906101000a900460ff16611584576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157b906150a3565b60405180910390fd5b82600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020541015611617576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160e906155a7565b60405180910390fd5b60008061167742600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089815260200190815260200160002060030154613870565b91509150816116bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b29061532f565b60405180910390fd5b6000806117ae8388600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190615364565b612ada565b9250925050600081836117c19190615446565b9050807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b815260040161181d919061476b565b602060405180830381865afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190615101565b101561189f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189690615639565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e89306040518363ffffffff1660e01b81526004016118fb9291906151c0565b602060405180830381865afa158015611918573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193c9190615101565b101561197d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611974906156cb565b60405180910390fd5b8973ffffffffffffffffffffffffffffffffffffffff1663f242432a30898c8c6040518563ffffffff1660e01b81526004016119bc94939291906153ee565b600060405180830381600087803b1580156119d657600080fd5b505af11580156119ea573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd88600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611a6d939291906156eb565b6020604051808303816000875af1158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab091906151fe565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc679088856040518363ffffffff1660e01b8152600401611b0c9291906150c3565b600060405180830381600087803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b5050505087600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b81526020019081526020016000206000828254611b9e9190614ce8565b925050819055508760036000828254611bb79190614ce8565b925050819055508673ffffffffffffffffffffffffffffffffffffffff16898b73ffffffffffffffffffffffffffffffffffffffff167f62eb47b71cb57ac0e92b9c1ce6b8db449b85d8975a4f8f02e582170c5a959e518b85604051611c1e92919061547a565b60405180910390a4600195505050505050949350505050565b62093a8081565b6004602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060050160029054906101000a900460ff16905088565b6000600880549050905090565b60076020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcd9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090611e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e359190614f11565b60405180910390fd5b50600060076000856001811115611e5857611e57614ab7565b5b6001811115611e6a57611e69614ab7565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550826001811115611edf57611ede614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b836000604051611f11929190615722565b60405180910390a26001905092915050565b600060076000600180811115611f3c57611f3b614ab7565b5b6001811115611f4e57611f4d614ab7565b5b815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611fe6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fdd906157bd565b60405180910390fd5b60076000806001811115611ffd57611ffc614ab7565b5b600181111561200f5761200e614ab7565b5b81526020019081526020016000206000836000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166120ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a29061584f565b60405180910390fd5b8160046000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008460200151815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff02191690831515021790555060e08201518160050160026101000a81548160ff0219169083151502179055509050508160200151826000015173ffffffffffffffffffffffffffffffffffffffff167fc9cd83f59722bccac957d73aea60c6c94f88d4ff1bdb0637016e78ca302b40ef8460a001516040516122299190613ff1565b60405180910390a360019050919050565b600c5481565b60008060008060006122a542600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a815260200190815260200160002060030154613870565b91509150816122c057600080600094509450945050506123d1565b6000806123b38389600460008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d815260200190815260200160002060040154600c547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561238a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ae9190615364565b612ada565b925092505080826123c49190615446565b8183965096509650505050505b93509350939050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612449573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246d9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906124de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124d59190614f11565b60405180910390fd5b506001600883815481106124f5576124f461586f565b5b906000526020600020906003020160020160006101000a81548160ff02191690831515021790555060019050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b79190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090612628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261f9190614f11565b60405180910390fd5b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad60405160405180910390a250565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561271d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127419190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906127b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a99190614f11565b60405180910390fd5b50600960009054906101000a900460ff16612802576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f990615910565b60405180910390fd5b6000600a5414158015612817575043600a5411155b612856576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161284d906159a2565b60405180910390fd5b6000600960006101000a81548160ff0219169083151502179055506000600a819055507fcda1a456e30fda74a38a8908b93c1fea691a78d8ad1aca4add9e16ce7829eafb60006040516128a99190613ff1565b60405180910390a1565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129449190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906129b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ac9190614f11565b60405180910390fd5b50600960019054906101000a900460ff1615612a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fd90615a34565b60405180910390fd5b6001600960006101000a81548160ff0219169083151502179055506001600960016101000a81548160ff021916908315150217905550565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612aab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acf9190615101565b905090565b60035481565b600080600080612aea89886108ca565b905060006064620f4240612afe9190614d1c565b9050600086600a612b0f9190615b87565b838b612b1b9190614d1c565b612b259190614d1c565b9050600082896064612b379190614ce8565b83612b429190614d1c565b612b4c9190614da5565b90506000838a84612b5d9190614d1c565b612b679190614da5565b90508482829750975097505050505050955095509592505050565b600080600060066000856001811115612b9e57612b9d614ab7565b5b6001811115612bb057612baf614ab7565b5b8152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612c3e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612bf4575b5050505050905060005b8151811015612cbf57818181518110612c6457612c6361586f565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1603612cac57600181935093505050612cc9565b8080612cb790615bd2565b915050612c48565b5060008092509250505b9250929050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d639190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090612dd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dcb9190614f11565b60405180910390fd5b5081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b60066020528160005260406000208181548110612e3b57600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900460ff1681565b600a5481565b600063bc197c8160e01b905095945050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60088181548110612ef557600080fd5b90600052602060002090600302016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16905085565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612fdf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130039190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613074576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161306b9190614f11565b60405180910390fd5b50600960009054906101000a900460ff166130c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130bb90615910565b60405180910390fd5b600a7f00000000000000000000000000000000000000000000000000000000000000006130f19190614d1c565b436130fc9190615446565b600a819055507f5e3a6d8c4bcbb0fb59adc792103325b682213ab56055aab3106be34cbee86ef0600a546040516131339190614091565b60405180910390a1565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f59190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613266576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161325d9190614f11565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036132d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132cd90615c66565b60405180910390fd5b600960009054906101000a900460ff16613325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331c90615cf8565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000436133539190615446565b905060086040518060a0016040528086600181111561337557613374614ab7565b5b81526020018573ffffffffffffffffffffffffffffffffffffffff16815260200183815260200160001515815260200160001515815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548160ff02191690836001811115613400576133ff614ab7565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015560608201518160020160006101000a81548160ff02191690831515021790555060808201518160020160016101000a81548160ff02191690831515021790555050508360018111156134ab576134aa614ab7565b5b7f9cda4c45543e6ab4fd271edebb1b91bc2ba79f72b922903e9f56a79b9ab032e2846008805490506040516134e19291906150c3565b60405180910390a2600191505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613563573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135879190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146000906135f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135ef9190614f11565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365f90615c66565b60405180910390fd5b600960009054906101000a900460ff16156136b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136af90615d64565b60405180910390fd5b6001600760008560018111156136d1576136d0614ab7565b5b60018111156136e3576136e2614ab7565b5b815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060006137518385612b82565b509050806137f257600660008560018111156137705761376f614ab7565b5b600181111561378257613781614ab7565b5b8152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b83600181111561380557613804614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b846001604051613837929190615722565b60405180910390a2600191505092915050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008062093a8083101561388a5760008091509150613912565b62093a808410156138a15760008091509150613912565b838310156138b55760008091509150613912565b600062093a8085856138c79190614ce8565b6138d19190614da5565b9050600062093a8086866138e59190614ce8565b6138ef9190615d84565b90506005811061390857818061390490615bd2565b9250505b6001829350935050505b9250929050565b6002805461392690614e47565b80601f016020809104026020016040519081016040528092919081815260200182805461395290614e47565b801561399f5780601f106139745761010080835404028352916020019161399f565b820191906000526020600020905b81548152906001019060200180831161398257829003601f168201915b505050505081565b600063f23a6e6160e01b905095945050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4f9190614deb565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614600090613ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ab79190614f11565b60405180910390fd5b50600960009054906101000a900460ff16613b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0790615cf8565b60405180910390fd5b600060088381548110613b2657613b2561586f565b5b90600052602060002090600302016040518060a00160405290816000820160009054906101000a900460ff166001811115613b6457613b63614ab7565b5b6001811115613b7657613b75614ab7565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff1615151515815250509050806060015115613c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c4e90615e27565b60405180910390fd5b806080015115613c9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c9390615eb9565b60405180910390fd5b8060400151431015613ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cda90615f4b565b60405180910390fd5b60016007600083600001516001811115613d0057613cff614ab7565b5b6001811115613d1257613d11614ab7565b5b81526020019081526020016000206000836020015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000613d8c82602001518360000151612b82565b50905080613e35576006600083600001516001811115613daf57613dae614ab7565b5b6001811115613dc157613dc0614ab7565b5b815260200190815260200160002082602001519080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600160088581548110613e4b57613e4a61586f565b5b906000526020600020906003020160020160016101000a81548160ff02191690831515021790555081600001516001811115613e8a57613e89614ab7565b5b7fe723d564d8aabcba84f3ed949d5402f277ccd1e89c45d310425a9e5b80aad75b83602001516001604051613ec0929190615722565b60405180910390a2600192505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613f8681613f51565b8114613f9157600080fd5b50565b600081359050613fa381613f7d565b92915050565b600060208284031215613fbf57613fbe613f47565b5b6000613fcd84828501613f94565b91505092915050565b60008115159050919050565b613feb81613fd6565b82525050565b60006020820190506140066000830184613fe2565b92915050565b6000819050919050565b61401f8161400c565b811461402a57600080fd5b50565b60008135905061403c81614016565b92915050565b6000806040838503121561405957614058613f47565b5b60006140678582860161402d565b92505060206140788582860161402d565b9150509250929050565b61408b8161400c565b82525050565b60006020820190506140a66000830184614082565b92915050565b6000602082840312156140c2576140c1613f47565b5b60006140d08482850161402d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614104826140d9565b9050919050565b614114816140f9565b811461411f57600080fd5b50565b6000813590506141318161410b565b92915050565b6000806000806080858703121561415157614150613f47565b5b600061415f87828801614122565b94505060206141708782880161402d565b93505060406141818782880161402d565b925050606061419287828801614122565b91505092959194509250565b600080600080608085870312156141b8576141b7613f47565b5b60006141c68782880161402d565b94505060206141d78782880161402d565b93505060406141e88782880161402d565b92505060606141f98782880161402d565b91505092959194509250565b600060608201905061421a6000830186614082565b6142276020830185614082565b6142346040830184614082565b949350505050565b6000806040838503121561425357614252613f47565b5b600061426185828601614122565b92505060206142728582860161402d565b9150509250929050565b614285816140f9565b82525050565b6000610100820190506142a1600083018b61427c565b6142ae602083018a614082565b6142bb6040830189614082565b6142c86060830188614082565b6142d56080830187614082565b6142e260a0830186613fe2565b6142ef60c0830185613fe2565b6142fc60e0830184613fe2565b9998505050505050505050565b6002811061431657600080fd5b50565b60008135905061432881614309565b92915050565b6000806040838503121561434557614344613f47565b5b600061435385828601614319565b925050602061436485828601614122565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6143bc82614373565b810181811067ffffffffffffffff821117156143db576143da614384565b5b80604052505050565b60006143ee613f3d565b90506143fa82826143b3565b919050565b61440881613fd6565b811461441357600080fd5b50565b600081359050614425816143ff565b92915050565b600061010082840312156144425761444161436e565b5b61444d6101006143e4565b9050600061445d84828501614122565b60008301525060206144718482850161402d565b60208301525060406144858482850161402d565b60408301525060606144998482850161402d565b60608301525060806144ad8482850161402d565b60808301525060a06144c184828501614416565b60a08301525060c06144d584828501614416565b60c08301525060e06144e984828501614416565b60e08301525092915050565b6000610100828403121561450c5761450b613f47565b5b600061451a8482850161442b565b91505092915050565b60008060006060848603121561453c5761453b613f47565b5b600061454a86828701614122565b935050602061455b8682870161402d565b925050604061456c8682870161402d565b9150509250925092565b6000614581826140f9565b9050919050565b61459181614576565b811461459c57600080fd5b50565b6000813590506145ae81614588565b92915050565b6000602082840312156145ca576145c9613f47565b5b60006145d88482850161459f565b91505092915050565b600060ff82169050919050565b6145f7816145e1565b811461460257600080fd5b50565b600081359050614614816145ee565b92915050565b600080600080600060a0868803121561463657614635613f47565b5b60006146448882890161402d565b95505060206146558882890161402d565b94505060406146668882890161402d565b93505060606146778882890161402d565b925050608061468888828901614605565b9150509295509295909350565b600080604083850312156146ac576146ab613f47565b5b60006146ba85828601614122565b92505060206146cb85828601614319565b9150509250929050565b60006040820190506146ea6000830185613fe2565b6146f76020830184614082565b9392505050565b60006020828403121561471457614713613f47565b5b600061472284828501614122565b91505092915050565b6000806040838503121561474257614741613f47565b5b600061475085828601614319565b92505060206147618582860161402d565b9150509250929050565b6000602082019050614780600083018461427c565b92915050565b600080fd5b600067ffffffffffffffff8211156147a6576147a5614384565b5b602082029050602081019050919050565b600080fd5b60006147cf6147ca8461478b565b6143e4565b905080838252602082019050602084028301858111156147f2576147f16147b7565b5b835b8181101561481b5780614807888261402d565b8452602084019350506020810190506147f4565b5050509392505050565b600082601f83011261483a57614839614786565b5b813561484a8482602086016147bc565b91505092915050565b600080fd5b600067ffffffffffffffff82111561487357614872614384565b5b61487c82614373565b9050602081019050919050565b82818337600083830152505050565b60006148ab6148a684614858565b6143e4565b9050828152602081018484840111156148c7576148c6614853565b5b6148d2848285614889565b509392505050565b600082601f8301126148ef576148ee614786565b5b81356148ff848260208601614898565b91505092915050565b600080600080600060a0868803121561492457614923613f47565b5b600061493288828901614122565b955050602061494388828901614122565b945050604086013567ffffffffffffffff81111561496457614963613f4c565b5b61497088828901614825565b935050606086013567ffffffffffffffff81111561499157614990613f4c565b5b61499d88828901614825565b925050608086013567ffffffffffffffff8111156149be576149bd613f4c565b5b6149ca888289016148da565b9150509295509295909350565b6149e081613f51565b82525050565b60006020820190506149fb60008301846149d7565b92915050565b6000819050919050565b6000614a26614a21614a1c846140d9565b614a01565b6140d9565b9050919050565b6000614a3882614a0b565b9050919050565b6000614a4a82614a2d565b9050919050565b614a5a81614a3f565b82525050565b6000602082019050614a756000830184614a51565b92915050565b6000614a8682614a2d565b9050919050565b614a9681614a7b565b82525050565b6000602082019050614ab16000830184614a8d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110614af757614af6614ab7565b5b50565b6000819050614b0882614ae6565b919050565b6000614b1882614afa565b9050919050565b614b2881614b0d565b82525050565b600060a082019050614b436000830188614b1f565b614b50602083018761427c565b614b5d6040830186614082565b614b6a6060830185613fe2565b614b776080830184613fe2565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015614bbb578082015181840152602081019050614ba0565b60008484015250505050565b6000614bd282614b81565b614bdc8185614b8c565b9350614bec818560208601614b9d565b614bf581614373565b840191505092915050565b60006020820190508181036000830152614c1a8184614bc7565b905092915050565b600080600080600060a08688031215614c3e57614c3d613f47565b5b6000614c4c88828901614122565b9550506020614c5d88828901614122565b9450506040614c6e8882890161402d565b9350506060614c7f8882890161402d565b925050608086013567ffffffffffffffff811115614ca057614c9f613f4c565b5b614cac888289016148da565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614cf38261400c565b9150614cfe8361400c565b9250828203905081811115614d1657614d15614cb9565b5b92915050565b6000614d278261400c565b9150614d328361400c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d6b57614d6a614cb9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614db08261400c565b9150614dbb8361400c565b925082614dcb57614dca614d76565b5b828204905092915050565b600081519050614de58161410b565b92915050565b600060208284031215614e0157614e00613f47565b5b6000614e0f84828501614dd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680614e5f57607f821691505b602082108103614e7257614e71614e18565b5b50919050565b60008190508160005260206000209050919050565b60008154614e9a81614e47565b614ea48186614b8c565b94506001821660008114614ebf5760018114614ed557614f08565b60ff198316865281151560200286019350614f08565b614ede85614e78565b60005b83811015614f0057815481890152600182019150602081019050614ee1565b808801955050505b50505092915050565b60006020820190508181036000830152614f2b8184614e8d565b905092915050565b7f436f6e747261637420776173206e6f7420696e697469616c697a656420796574600082015250565b6000614f69602083614b8c565b9150614f7482614f33565b602082019050919050565b60006020820190508181036000830152614f9881614f5c565b9050919050565b7f43542054726561737572793a207265736572766520746f6b656e206e6f74207060008201527f65726d6974746564000000000000000000000000000000000000000000000000602082015250565b6000614ffb602883614b8c565b915061500682614f9f565b604082019050919050565b6000602082019050818103600083015261502a81614fee565b9050919050565b7f43542054726561737572793a20636172626f6e2070726f6a656374206e6f742060008201527f6163746976650000000000000000000000000000000000000000000000000000602082015250565b600061508d602683614b8c565b915061509882615031565b604082019050919050565b600060208201905081810360008301526150bc81615080565b9050919050565b60006040820190506150d8600083018561427c565b6150e56020830184614082565b9392505050565b6000815190506150fb81614016565b92915050565b60006020828403121561511757615116613f47565b5b6000615125848285016150ec565b91505092915050565b7f43542054726561737572793a206f776e657220696e737566696369656e74204560008201527f5243313135352062616c616e6365000000000000000000000000000000000000602082015250565b600061518a602e83614b8c565b91506151958261512e565b604082019050919050565b600060208201905081810360008301526151b98161517d565b9050919050565b60006040820190506151d5600083018561427c565b6151e2602083018461427c565b9392505050565b6000815190506151f8816143ff565b92915050565b60006020828403121561521457615213613f47565b5b6000615222848285016151e9565b91505092915050565b7f43542054726561737572793a206f776e6572206e6f7420617070726f7665642060008201527f7468697320636f6e7472616374207370656e6420455243313135350000000000602082015250565b6000615287603b83614b8c565b91506152928261522b565b604082019050919050565b600060208201905081810360008301526152b68161527a565b9050919050565b7f43542054726561737572793a207765656b732066726f6d2064656c697665727960008201527f2064617465732061726520696e76616c69640000000000000000000000000000602082015250565b6000615319603283614b8c565b9150615324826152bd565b604082019050919050565b600060208201905081810360008301526153488161530c565b9050919050565b60008151905061535e816145ee565b92915050565b60006020828403121561537a57615379613f47565b5b60006153888482850161534f565b91505092915050565b600082825260208201905092915050565b7f6461746100000000000000000000000000000000000000000000000000000000600082015250565b60006153d8600483615391565b91506153e3826153a2565b602082019050919050565b600060a082019050615403600083018761427c565b615410602083018661427c565b61541d6040830185614082565b61542a6060830184614082565b818103608083015261543b816153cb565b905095945050505050565b60006154518261400c565b915061545c8361400c565b925082820190508082111561547457615473614cb9565b5b92915050565b600060408201905061548f6000830185614082565b61549c6020830184614082565b9392505050565b7f5343542054726561737572793a2074696d656c6f636b20616c7265616479206560008201527f6e61626c65640000000000000000000000000000000000000000000000000000602082015250565b60006154ff602683614b8c565b915061550a826154a3565b604082019050919050565b6000602082019050818103600083015261552e816154f2565b9050919050565b7f43542054726561737572793a20636172626f6e2070726f6a65637420696e737560008201527f66696369656e7420455243313135352062616c616e6365000000000000000000602082015250565b6000615591603783614b8c565b915061559c82615535565b604082019050919050565b600060208201905081810360008301526155c081615584565b9050919050565b7f43542054726561737572793a20627579657220696e737566696369656e74204360008201527f5420546f6b656e2062616c616e63650000000000000000000000000000000000602082015250565b6000615623602f83614b8c565b915061562e826155c7565b604082019050919050565b6000602082019050818103600083015261565281615616565b9050919050565b7f43542054726561737572793a206275796572206e6f7420617070726f7665642060008201527f7468697320636f6e7472616374207370656e6420435420546f6b656e00000000602082015250565b60006156b5603c83614b8c565b91506156c082615659565b604082019050919050565b600060208201905081810360008301526156e4816156a8565b9050919050565b6000606082019050615700600083018661427c565b61570d602083018561427c565b61571a6040830184614082565b949350505050565b6000604082019050615737600083018561427c565b6157446020830184613fe2565b9392505050565b7f5343542054726561737572793a2072657365727665206d616e61676572206e6f60008201527f74207065726d6974746564000000000000000000000000000000000000000000602082015250565b60006157a7602b83614b8c565b91506157b28261574b565b604082019050919050565b600060208201905081810360008301526157d68161579a565b9050919050565b7f5343542054726561737572793a207265736572766520746f6b656e206e6f742060008201527f7065726d69747465640000000000000000000000000000000000000000000000602082015250565b6000615839602983614b8c565b9150615844826157dd565b604082019050919050565b600060208201905081810360008301526158688161582c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5343542054726561737572793a2074696d656c6f636b20616c7265616479206460008201527f697361626c656400000000000000000000000000000000000000000000000000602082015250565b60006158fa602783614b8c565b91506159058261589e565b604082019050919050565b60006020820190508181036000830152615929816158ed565b9050919050565b7f5343542054726561737572793a20676f7665726e616e63652074696d656c6f6360008201527f6b206e6f74206578706972656420796574000000000000000000000000000000602082015250565b600061598c603183614b8c565b915061599782615930565b604082019050919050565b600060208201905081810360008301526159bb8161597f565b9050919050565b7f5343542054726561737572793a20616c726561647920696e697469616c697a6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000615a1e602183614b8c565b9150615a29826159c2565b604082019050919050565b60006020820190508181036000830152615a4d81615a11565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115615aab57808604811115615a8757615a86614cb9565b5b6001851615615a965780820291505b8081029050615aa485615a54565b9450615a6b565b94509492505050565b600082615ac45760019050615b80565b81615ad25760009050615b80565b8160018114615ae85760028114615af257615b21565b6001915050615b80565b60ff841115615b0457615b03614cb9565b5b8360020a915084821115615b1b57615b1a614cb9565b5b50615b80565b5060208310610133831016604e8410600b8410161715615b565782820a905083811115615b5157615b50614cb9565b5b615b80565b615b638484846001615a61565b92509050818404811115615b7a57615b79614cb9565b5b81810290505b9392505050565b6000615b928261400c565b9150615b9d836145e1565b9250615bca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615ab4565b905092915050565b6000615bdd8261400c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203615c0f57615c0e614cb9565b5b600182019050919050565b7f5343542054726561737572793a20696e76616c69642061646472657373000000600082015250565b6000615c50601d83614b8c565b9150615c5b82615c1a565b602082019050919050565b60006020820190508181036000830152615c7f81615c43565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b2069732064697361626c60008201527f65642c2075736520656e61626c65000000000000000000000000000000000000602082015250565b6000615ce2602e83614b8c565b9150615ced82615c86565b604082019050919050565b60006020820190508181036000830152615d1181615cd5565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b20656e61626c65640000600082015250565b6000615d4e601e83614b8c565b9150615d5982615d18565b602082019050919050565b60006020820190508181036000830152615d7d81615d41565b9050919050565b6000615d8f8261400c565b9150615d9a8361400c565b925082615daa57615da9614d76565b5b828206905092915050565b7f5343542054726561737572793a206f7264657220686173206265656e206e756c60008201527f6c69666965640000000000000000000000000000000000000000000000000000602082015250565b6000615e11602683614b8c565b9150615e1c82615db5565b604082019050919050565b60006020820190508181036000830152615e4081615e04565b9050919050565b7f5343542054726561737572793a206f726465722068617320616c72656164792060008201527f6265656e20657865637574656400000000000000000000000000000000000000602082015250565b6000615ea3602d83614b8c565b9150615eae82615e47565b604082019050919050565b60006020820190508181036000830152615ed281615e96565b9050919050565b7f5343542054726561737572793a2074696d656c6f636b206e6f7420636f6d706c60008201527f6574650000000000000000000000000000000000000000000000000000000000602082015250565b6000615f35602383614b8c565b9150615f4082615ed9565b604082019050919050565b60006020820190508181036000830152615f6481615f28565b905091905056fea26469706673582212203ae0004efc6692cd3bc72bbd2f450b8444a792bfcefcfbf282a29e8616b1c0a064736f6c63430008100033",
  "devdoc": {
    "author": "Solid World DAO",
    "kind": "dev",
    "methods": {
      "baseSupply()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "calcBasicValue(uint256,uint256)": {
        "params": {
          "_numWeeks": "uint256",
          "_rate": "uint256 1% = 10000, 0.0984% = 984"
        }
      },
      "constructor": {
        "details": "this is executed when this contract is deployedset timelockEnabled and initialized to falseset blocksNeededForOrder",
        "params": {
          "_authority": "Solid DAO Manager contract address",
          "_category": "string to store the name of the category this contract manages. This is for info purposes.",
          "_ct": "address of the CT (Carbon Token) this treasury will manange",
          "_daoLiquidityFee": "uint256 to store the DAO Liquidity Fee.",
          "_daoTreasury": "address to store the address of the DAO Vault Smart Contract.",
          "_timelock": "unint256"
        }
      },
      "createOrUpdateCarbonProject((address,uint256,uint256,uint256,uint256,bool,bool,bool))": {
        "details": "only permitted reserve manager can call this functiononly permitted reserve tokens are accepted",
        "params": {
          "_carbonProject": "CarbonProject"
        },
        "returns": {
          "_0": "true"
        }
      },
      "depositReserveToken(address,uint256,uint256,address)": {
        "details": "only permitted reserve tokens are acceptedonly active carbon projects are acceptedowner ERC1155 carbon project token balance needs to be more or equal than _amountowner need to allow this contract spend ERC1155 carbon project token before execute this functionupdate _owner carbonProjectBalances and smart contract carbonProjectTons",
        "params": {
          "_amount": "unint256",
          "_owner": "address",
          "_token": "address",
          "_tokenId": "unint256"
        },
        "returns": {
          "_0": "true"
        }
      },
      "disable(uint8,address)": {
        "details": "only policy can call this function",
        "params": {
          "_address": "address",
          "_status": "STATUS"
        },
        "returns": {
          "_0": "true"
        }
      },
      "disableTimelock()": {
        "details": "only governor can call this functiononChainGovernanceTimelock need to be less or equal than block number"
      },
      "enable(uint8,address)": {
        "details": "only policy can call this functiontimelock needs to be disabledif timelock is enable use orderTimelock function",
        "params": {
          "_address": "address",
          "_status": "STATUS"
        },
        "returns": {
          "_0": "true"
        }
      },
      "enableTimelock()": {
        "details": "only governor can call this functionset timelockEnabled to true"
      },
      "execute(uint256)": {
        "details": "only policy can call this function",
        "params": {
          "_index": "uint256"
        },
        "returns": {
          "_0": "true"
        }
      },
      "indexInRegistry(address,uint8)": {
        "returns": {
          "_0": "(bool, uint256)"
        }
      },
      "initialize()": {
        "details": "this function enable timelock and set initialized to trueonly governor can call this function"
      },
      "nullify(uint256)": {
        "details": "only governor can call this function",
        "params": {
          "_index": "uint256"
        },
        "returns": {
          "_0": "true"
        }
      },
      "orderTimelock(uint8,address)": {
        "details": "only policy can call this function",
        "params": {
          "_address": "address",
          "_status": "STATUS"
        },
        "returns": {
          "_0": "true"
        }
      },
      "payout(uint256,uint256,uint256,uint256,uint8)": {
        "params": {
          "_ctDecimals": "uint8",
          "_daoFee": "uint256 1% = 1",
          "_numWeeks": "uint256",
          "_rate": "uint256 1% = 10000, 0.0984% = 984",
          "_totalToken": "uint256"
        }
      },
      "permissionToDisableTimelock()": {
        "details": "only governor can call this functionthis function set new onChainGovernanceTimelock"
      },
      "sell(address,uint256,uint256,address)": {
        "details": "only permitted reserve tokens are acceptedonly active carbon projects are acceptedCT Treasury ERC1155 token balance needs to be more or equal than _amountToSell_buyer CT token balance needs to be more or equal than amountToPay_buyer need to allow this contract spend amountToPay CT token before execute this functionupdate CT Treasury carbonProjectTons balance",
        "params": {
          "_amountToSell": "unint256",
          "_buyer": "address",
          "_token": "address",
          "_tokenId": "unint256"
        },
        "returns": {
          "_0": "true"
        }
      },
      "setAuthority(address)": {
        "details": "Emit AuthorityUpdated event",
        "params": {
          "_newAuthority": "Address of the new Solid Dao Management smart contract"
        }
      },
      "setDAOAddress(address)": {
        "details": "only governor can call this function",
        "params": {
          "_daoAddress": "address to store the DAO Smart Contract address"
        },
        "returns": {
          "_0": "true if everything goes well"
        }
      },
      "setDAOLiquidityFee(uint256)": {
        "details": "only governor can call this function",
        "params": {
          "_daoLiquidityFee": "uint256 to store the DAO Liquidity Fee"
        },
        "returns": {
          "_0": "true if everything goes well"
        }
      },
      "simulateSwap(address,uint256,uint256)": {
        "params": {
          "_amountIn": "unint256",
          "_token": "address",
          "_tokenId": "unint256"
        },
        "returns": {
          "amountOut": "uint256 - Total minted amount of ERC20. Returns 0 if there is an error in calculation.",
          "daoAmount": "uint256 - How many ERC20 tokens DAO receives",
          "userAmount": "uint256 - How many ERC20 tokens user receives"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalPermissionOrder()": {
        "returns": {
          "_0": "uint256"
        }
      },
      "weeksInThePeriod(uint256,uint256)": {
        "details": "Calculates the number of weeks between a period",
        "params": {
          "_contractExpectedDueDate": "uint256 the carbon credit contract expected due date to be informed in seconds",
          "_initialDate": "uint256 initial date to be informed in seconds"
        }
      }
    },
    "stateVariables": {
      "CT": {
        "details": "immutable variable to store CT ERC20 token address",
        "return": "address",
        "returns": {
          "_0": "address"
        }
      },
      "DAOTreasury": {
        "details": "immutable address to store DAO contract address",
        "return": "address",
        "returns": {
          "_0": "address"
        }
      },
      "blocksNeededForOrder": {
        "details": "immutable variable set in constructor to store number of blocks that order needed to stay in queue to be executed",
        "return": "uint256",
        "returns": {
          "_0": "uint256"
        }
      },
      "carbonProjectTons": {
        "details": "mapping with token and tokenId as keys to store total amount of ERC1155 carbon project deposited in this contract",
        "return": "uint256",
        "returns": {
          "_0": "uint256"
        }
      },
      "carbonProjects": {
        "details": "mapping with token and tokenId as keys to store CarbonProjectsreturn CarbonProject"
      },
      "category": {
        "details": "variable to store the name of the category this contract manages. This is for info purposes.",
        "return": "string",
        "returns": {
          "_0": "string"
        }
      },
      "daoLiquidityFee": {
        "details": "variable to store the DAO Liquidity Fee",
        "return": "uint256",
        "returns": {
          "_0": "uint256"
        }
      },
      "initialized": {
        "details": "variable to store if smart contract is initialized",
        "return": "boolean",
        "returns": {
          "_0": "boolean"
        }
      },
      "onChainGovernanceTimelock": {
        "details": "variable to store the block number that disableTimelock function can change timelockEnabled to true",
        "return": "uint256",
        "returns": {
          "_0": "uint256"
        }
      },
      "permissionOrder": {
        "details": "array of Ordersreturn Order[]"
      },
      "permissions": {
        "details": "mapping with STATUS and address as keys to store status of permisions",
        "return": "bool",
        "returns": {
          "_0": "bool"
        }
      },
      "registry": {
        "details": "mapping with STATUS as key to store an array of addresses",
        "return": "array of addresses",
        "returns": {
          "_0": "array of addresses"
        }
      },
      "timelockEnabled": {
        "details": "variable to store if smart contract timelock is enabled",
        "return": "boolean",
        "returns": {
          "_0": "boolean"
        }
      },
      "totalReserves": {
        "details": "variable to store SCT ERC20 token address",
        "return": "uint256",
        "returns": {
          "_0": "uint256"
        }
      }
    },
    "title": "Carbon Token Treasury (CTTTreasury) Template",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "CT()": {
        "notice": "ERC-20 Carbon Token address"
      },
      "DAOTreasury()": {
        "notice": "DAO Treasury Address where the profits of the operations must be sent to"
      },
      "baseSupply()": {
        "notice": "baseSupplyview function that returns SCT total supply"
      },
      "blocksNeededForOrder()": {
        "notice": "blocksNeededForOrder"
      },
      "carbonProjectTons(address,uint256)": {
        "notice": "carbonProjectTons"
      },
      "carbonProjects(address,uint256)": {
        "notice": "carbonProjects"
      },
      "category()": {
        "notice": "category of the Carbon Project this treasury manages"
      },
      "constructor": {
        "notice": "constructor"
      },
      "createOrUpdateCarbonProject((address,uint256,uint256,uint256,uint256,bool,bool,bool))": {
        "notice": "createOrUpdateCarbonProjectfunction to create or update carbon project"
      },
      "daoLiquidityFee()": {
        "notice": "daoLiquidityFee"
      },
      "depositReserveToken(address,uint256,uint256,address)": {
        "notice": "depositReserveTokenfunction to deposit an _amount of ERC1155 carbon project token in SCT Treasury and mint the same _amount of SCT"
      },
      "disable(uint8,address)": {
        "notice": "disablefunction to disable permission"
      },
      "disableTimelock()": {
        "notice": "disableTimelockfunction to disable timelock"
      },
      "enable(uint8,address)": {
        "notice": "enablefunction to enable permission"
      },
      "enableTimelock()": {
        "notice": "enableTimelockfunction to disable timelock"
      },
      "execute(uint256)": {
        "notice": "executefunction to enable ordered permission"
      },
      "indexInRegistry(address,uint8)": {
        "notice": "indexInRegistryview function to check if registry contains address"
      },
      "initialize()": {
        "notice": "initialize"
      },
      "initialized()": {
        "notice": "initialized"
      },
      "nullify(uint256)": {
        "notice": "nullifyfunction to cancel timelocked order"
      },
      "onChainGovernanceTimelock()": {
        "notice": "onChainGovernanceTimelock"
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "onERC1155BatchReceivedvirtual function to allow contract accept ERC1155 tokens"
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "onERC1155Receivedvirtual function to allow contract accept ERC1155 tokens"
      },
      "orderTimelock(uint8,address)": {
        "notice": "orderTimelockfunction to create order for address receive permission"
      },
      "permissionOrder(uint256)": {
        "notice": "permissionOrder"
      },
      "permissionToDisableTimelock()": {
        "notice": "permissionToDisableTimelockfunction to set onChainGovernanceTimelock to disable timelock"
      },
      "permissions(uint8,address)": {
        "notice": "permissions"
      },
      "registry(uint8,uint256)": {
        "notice": "registry"
      },
      "sell(address,uint256,uint256,address)": {
        "notice": "sellfunction to sell an _amountToSell of ERC1155 carbon project to _buyer upon payment of the projectAmount price and daoAmount fees in CT Tokens"
      },
      "setAuthority(address)": {
        "notice": "Function to set and update Solid Dao Management smart contract address"
      },
      "setDAOAddress(address)": {
        "notice": "function where the Governor sets the DAO Smart Contract address"
      },
      "setDAOLiquidityFee(uint256)": {
        "notice": "function where the Governor sets the DAO liquidity fee"
      },
      "simulateDepositWeekPeriod(uint256,uint256,uint256,uint256)": {
        "notice": "informs the investor a simulated return for deposit project's tokens"
      },
      "simulateSwap(address,uint256,uint256)": {
        "notice": "simulateSwapSimulates swapping erc20 to erc1155"
      },
      "timelockEnabled()": {
        "notice": "timelockEnabled"
      },
      "totalPermissionOrder()": {
        "notice": "totalPermissionOrderview function that returns total permissionOrder entries"
      },
      "totalReserves()": {
        "notice": "totalReserves"
      }
    },
    "notice": "CT Treasury Template",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8443,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 8446,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ISolidDaoManagement)8430"
      },
      {
        "astId": 6002,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "category",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6005,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "totalReserves",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6013,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "carbonProjects",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(CarbonProject)5922_storage))"
      },
      {
        "astId": 6020,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "carbonProjectTons",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6027,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "registry",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(STATUS)5937,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 6035,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "permissions",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_enum(STATUS)5937,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 6040,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "permissionOrder",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Order)5934_storage)dyn_storage"
      },
      {
        "astId": 6046,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "timelockEnabled",
        "offset": 0,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 6049,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "initialized",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 6052,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "onChainGovernanceTimelock",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 6055,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "DAOTreasury",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 6058,
        "contract": "contracts/CTTreasury.sol:CTTreasury",
        "label": "daoLiquidityFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Order)5934_storage)dyn_storage": {
        "base": "t_struct(Order)5934_storage",
        "encoding": "dynamic_array",
        "label": "struct CTTreasury.Order[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ISolidDaoManagement)8430": {
        "encoding": "inplace",
        "label": "contract ISolidDaoManagement",
        "numberOfBytes": "20"
      },
      "t_enum(STATUS)5937": {
        "encoding": "inplace",
        "label": "enum CTTreasury.STATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(CarbonProject)5922_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct CTTreasury.CarbonProject))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(CarbonProject)5922_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_enum(STATUS)5937,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)5937",
        "label": "mapping(enum CTTreasury.STATUS => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_enum(STATUS)5937,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(STATUS)5937",
        "label": "mapping(enum CTTreasury.STATUS => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(CarbonProject)5922_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CTTreasury.CarbonProject)",
        "numberOfBytes": "32",
        "value": "t_struct(CarbonProject)5922_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(CarbonProject)5922_storage": {
        "encoding": "inplace",
        "label": "struct CTTreasury.CarbonProject",
        "members": [
          {
            "astId": 5907,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5909,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5911,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "tons",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5913,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "contractExpectedDueDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5915,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "projectDiscountRate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5917,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "isActive",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5919,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "isCertified",
            "offset": 1,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5921,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "isRedeemed",
            "offset": 2,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Order)5934_storage": {
        "encoding": "inplace",
        "label": "struct CTTreasury.Order",
        "members": [
          {
            "astId": 5925,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "managing",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(STATUS)5937"
          },
          {
            "astId": 5927,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "toPermit",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5929,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "timelockEnd",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5931,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "nullify",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 5933,
            "contract": "contracts/CTTreasury.sol:CTTreasury",
            "label": "executed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}