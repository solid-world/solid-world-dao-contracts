{
  "language": "Solidity",
  "sources": {
    "contracts/CollateralizedBasketToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\n\n/// @notice ERC-20 for working with forward commodity tokens\n/// @author Solid World DAO\ncontract CollateralizedBasketToken is ERC20Burnable, Ownable {\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\n\n    function mint(address account, uint amount) public onlyOwner {\n        _mint(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/SolidWorldManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\";\nimport \"./ForwardContractBatchToken.sol\";\nimport \"./CollateralizedBasketToken.sol\";\nimport \"./libraries/SolidMath.sol\";\nimport \"./libraries/ReactiveTimeAppreciationMath.sol\";\nimport \"./libraries/GPv2SafeERC20.sol\";\nimport \"./interfaces/manager/IWeeklyCarbonRewardsManager.sol\";\nimport \"./interfaces/manager/ISolidWorldManagerErrors.sol\";\nimport \"./libraries/DomainDataTypes.sol\";\nimport \"./CollateralizedBasketTokenDeployer.sol\";\n\ncontract SolidWorldManager is\n    Initializable,\n    OwnableUpgradeable,\n    IERC1155ReceiverUpgradeable,\n    ReentrancyGuardUpgradeable,\n    IWeeklyCarbonRewardsManager,\n    ISolidWorldManagerErrors\n{\n    /// @notice Constant used as input for decollateralization simulation for ordering batches with the same category and vintage\n    uint public constant DECOLLATERALIZATION_SIMULATION_INPUT = 1000e18;\n\n    /// @notice Mapping is used for checking if Category ID is already added\n    /// @dev CategoryId => isAdded\n    mapping(uint => bool) public categoryIds;\n\n    /// @notice Stores the state of categories\n    /// @dev CategoryId => DomainDataTypes.Category\n    mapping(uint => DomainDataTypes.Category) public categories;\n\n    /// @notice Property is used for checking if Project ID is already added\n    /// @dev ProjectId => isAdded\n    mapping(uint => bool) public projectIds;\n\n    /// @notice Property is used for checking if Batch ID is already added\n    /// @dev BatchId => isAdded\n    mapping(uint => bool) public batchCreated;\n\n    /// @notice Stores all batch ids ever created\n    uint[] public batchIds;\n\n    /// @notice Property stores info about a batch\n    /// @dev BatchId => DomainDataTypes.Batch\n    mapping(uint => DomainDataTypes.Batch) public batches;\n\n    /// @notice Mapping determines a respective CollateralizedBasketToken (ERC-20) of a category\n    /// @dev CategoryId => CollateralizedBasketToken address (ERC-20)\n    mapping(uint => CollateralizedBasketToken) public categoryToken;\n\n    /// @notice Mapping determines what projects a category has\n    /// @dev CategoryId => ProjectId[]\n    mapping(uint => uint[]) public categoryProjects;\n\n    /// @notice Mapping determines what category a project belongs to\n    /// @dev ProjectId => CategoryId\n    mapping(uint => uint) public projectCategory;\n\n    /// @notice Mapping determines what category a batch belongs to\n    /// @dev BatchId => CategoryId\n    mapping(uint => uint) public batchCategory;\n\n    /// @notice Mapping determines what batches a project has\n    /// @dev ProjectId => BatchId[]\n    mapping(uint => uint[]) public projectBatches;\n\n    /// @notice Contract that operates forward contract batch tokens (ERC-1155). Allows this contract to mint tokens.\n    ForwardContractBatchToken public forwardContractBatch;\n\n    /// @notice The account where all protocol fees are captured.\n    address public feeReceiver;\n\n    /// @notice The only account that is allowed to mint weekly carbon rewards\n    address public weeklyRewardsMinter;\n\n    /// @notice Contract that deploys new collateralized basket tokens. Allows this contract to mint tokens.\n    CollateralizedBasketTokenDeployer public collateralizedBasketTokenDeployer;\n\n    /// @notice Fee charged by DAO when collateralizing forward contract batch tokens.\n    uint16 public collateralizationFee;\n\n    /// @notice Fee charged by DAO when decollateralizing collateralized basket tokens.\n    uint16 public decollateralizationFee;\n\n    /// @notice Fee charged by DAO on the weekly carbon rewards.\n    uint16 public rewardsFee;\n\n    event BatchCollateralized(\n        uint indexed batchId,\n        uint amountIn,\n        uint amountOut,\n        address indexed batchSupplier\n    );\n    event TokensDecollateralized(\n        uint indexed batchId,\n        uint amountIn,\n        uint amountOut,\n        address indexed tokensOwner\n    );\n    event CategoryCreated(uint indexed categoryId);\n    event CategoryUpdated(\n        uint indexed categoryId,\n        uint indexed volumeCoefficient,\n        uint indexed decayPerSecond,\n        uint maxDepreciation\n    );\n    event CategoryRebalanced(\n        uint indexed categoryId,\n        uint indexed averageTA,\n        uint indexed totalCollateralized\n    );\n    event ProjectCreated(uint indexed projectId);\n    event BatchCreated(uint indexed batchId);\n    event FeeReceiverUpdated(address indexed feeReceiver);\n    event CollateralizationFeeUpdated(uint indexed collateralizationFee);\n    event DecollateralizationFeeUpdated(uint indexed decollateralizationFee);\n\n    modifier validBatch(uint batchId) {\n        if (!batchCreated[batchId]) {\n            revert InvalidBatchId(batchId);\n        }\n        _;\n    }\n\n    modifier batchUnderway(uint batchId) {\n        if (_isBatchCertified(batchId)) {\n            revert BatchCertified(batchId);\n        }\n        _;\n    }\n\n    function initialize(\n        CollateralizedBasketTokenDeployer _collateralizedBasketTokenDeployer,\n        ForwardContractBatchToken _forwardContractBatch,\n        uint16 _collateralizationFee,\n        uint16 _decollateralizationFee,\n        uint16 _rewardsFee,\n        address _feeReceiver,\n        address _weeklyRewardsMinter\n    ) public initializer {\n        __Ownable_init();\n        __ReentrancyGuard_init();\n\n        collateralizedBasketTokenDeployer = _collateralizedBasketTokenDeployer;\n        forwardContractBatch = _forwardContractBatch;\n\n        _setCollateralizationFee(_collateralizationFee);\n        _setDecollateralizationFee(_decollateralizationFee);\n        _setRewardsFee(_rewardsFee);\n        _setFeeReceiver(_feeReceiver);\n        _setWeeklyRewardsMinter(_weeklyRewardsMinter);\n    }\n\n    // todo #121: add authorization\n    function addCategory(\n        uint categoryId,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        uint24 initialTA\n    ) external {\n        if (categoryIds[categoryId]) {\n            revert CategoryAlreadyExists(categoryId);\n        }\n\n        categoryIds[categoryId] = true;\n        categoryToken[categoryId] = collateralizedBasketTokenDeployer.deploy(\n            tokenName,\n            tokenSymbol\n        );\n\n        categories[categoryId].averageTA = initialTA;\n\n        emit CategoryCreated(categoryId);\n    }\n\n    // todo #121: add authorization\n    function updateCategory(\n        uint categoryId,\n        uint volumeCoefficient,\n        uint40 decayPerSecond,\n        uint16 maxDepreciationPerYear,\n        uint24 maxDepreciation\n    ) external {\n        if (!categoryIds[categoryId]) {\n            revert InvalidCategoryId(categoryId);\n        }\n\n        if (volumeCoefficient == 0 || decayPerSecond == 0) {\n            revert InvalidInput();\n        }\n\n        DomainDataTypes.Category storage category = categories[categoryId];\n        category.lastCollateralizationMomentum = ReactiveTimeAppreciationMath.inferMomentum(\n            category,\n            volumeCoefficient,\n            maxDepreciationPerYear\n        );\n        category.volumeCoefficient = volumeCoefficient;\n        category.decayPerSecond = decayPerSecond;\n        category.maxDepreciationPerYear = maxDepreciationPerYear;\n        category.maxDepreciation = maxDepreciation;\n        category.lastCollateralizationTimestamp = uint32(block.timestamp);\n\n        emit CategoryUpdated(categoryId, volumeCoefficient, decayPerSecond, maxDepreciation);\n    }\n\n    // todo #121: add authorization\n    function addProject(uint categoryId, uint projectId) external {\n        if (!categoryIds[categoryId]) {\n            revert InvalidCategoryId(categoryId);\n        }\n\n        if (projectIds[projectId]) {\n            revert ProjectAlreadyExists(projectId);\n        }\n\n        categoryProjects[categoryId].push(projectId);\n        projectCategory[projectId] = categoryId;\n        projectIds[projectId] = true;\n\n        emit ProjectCreated(projectId);\n    }\n\n    // todo #121: add authorization\n    function addBatch(DomainDataTypes.Batch calldata batch, uint mintableAmount) external {\n        if (!projectIds[batch.projectId]) {\n            revert InvalidProjectId(batch.projectId);\n        }\n\n        if (batchCreated[batch.id]) {\n            revert BatchAlreadyExists(batch.id);\n        }\n\n        if (batch.supplier == address(0)) {\n            revert InvalidBatchSupplier();\n        }\n\n        if (batch.certificationDate <= block.timestamp) {\n            revert BatchCertificationDateInThePast(batch.certificationDate);\n        }\n\n        batchCreated[batch.id] = true;\n        batches[batch.id] = batch;\n        batchIds.push(batch.id);\n        projectBatches[batch.projectId].push(batch.id);\n        batchCategory[batch.id] = projectCategory[batch.projectId];\n        forwardContractBatch.mint(batch.supplier, batch.id, mintableAmount, \"\");\n\n        emit BatchCreated(batch.id);\n    }\n\n    // todo #121: add authorization\n    /// @inheritdoc IWeeklyCarbonRewardsManager\n    function setWeeklyRewardsMinter(address _weeklyRewardsMinter) external {\n        _setWeeklyRewardsMinter(_weeklyRewardsMinter);\n    }\n\n    /// @inheritdoc IWeeklyCarbonRewardsManager\n    function computeWeeklyCarbonRewards(address[] calldata assets, uint[] calldata _categoryIds)\n        external\n        view\n        override\n        returns (\n            address[] memory carbonRewards,\n            uint[] memory rewardAmounts,\n            uint[] memory rewardFees\n        )\n    {\n        if (assets.length != _categoryIds.length) {\n            revert InvalidInput();\n        }\n\n        carbonRewards = new address[](assets.length);\n        rewardAmounts = new uint[](assets.length);\n        rewardFees = new uint[](assets.length);\n\n        for (uint i; i < assets.length; i++) {\n            uint categoryId = _categoryIds[i];\n            if (!categoryIds[categoryId]) {\n                revert InvalidCategoryId(categoryId);\n            }\n\n            CollateralizedBasketToken rewardToken = categoryToken[categoryId];\n            (uint rewardAmount, uint rewardFee) = _computeWeeklyCategoryReward(\n                categoryId,\n                rewardToken.decimals()\n            );\n\n            carbonRewards[i] = address(rewardToken);\n            rewardAmounts[i] = rewardAmount;\n            rewardFees[i] = rewardFee;\n        }\n    }\n\n    /// @inheritdoc IWeeklyCarbonRewardsManager\n    function mintWeeklyCarbonRewards(\n        uint[] calldata _categoryIds,\n        address[] calldata carbonRewards,\n        uint[] calldata rewardAmounts,\n        uint[] calldata rewardFees,\n        address rewardsVault\n    ) external override {\n        if (\n            _categoryIds.length != carbonRewards.length ||\n            carbonRewards.length != rewardAmounts.length ||\n            rewardAmounts.length != rewardFees.length\n        ) {\n            revert InvalidInput();\n        }\n\n        if (msg.sender != weeklyRewardsMinter) {\n            revert UnauthorizedRewardMinting(msg.sender);\n        }\n\n        for (uint i; i < carbonRewards.length; i++) {\n            address carbonReward = carbonRewards[i];\n            CollateralizedBasketToken rewardToken = CollateralizedBasketToken(carbonReward);\n            uint rewardAmount = rewardAmounts[i];\n            rewardToken.mint(rewardsVault, rewardAmount);\n            emit WeeklyRewardMinted(carbonReward, rewardAmount);\n\n            rewardToken.mint(feeReceiver, rewardFees[i]);\n\n            _rebalanceCategory(_categoryIds[i]);\n        }\n    }\n\n    /// @dev Collateralizes `amountIn` of ERC1155 tokens with id `batchId` for msg.sender\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend its ERC1155 tokens with id `batchId`\n    /// @dev nonReentrant, to avoid possible reentrancy after calling safeTransferFrom\n    /// @param batchId id of the batch\n    /// @param amountIn ERC1155 tokens to collateralize\n    /// @param amountOutMin minimum output amount of ERC20 tokens for transaction to succeed\n    function collateralizeBatch(\n        uint batchId,\n        uint amountIn,\n        uint amountOutMin\n    ) external nonReentrant validBatch(batchId) batchUnderway(batchId) {\n        if (amountIn == 0) {\n            revert InvalidInput();\n        }\n\n        (uint decayingMomentum, uint reactiveTA) = ReactiveTimeAppreciationMath.computeReactiveTA(\n            categories[batchCategory[batchId]],\n            amountIn\n        );\n\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\n\n        (uint cbtUserCut, uint cbtDaoCut, ) = SolidMath.computeCollateralizationOutcome(\n            batches[batchId].certificationDate,\n            amountIn,\n            reactiveTA,\n            collateralizationFee,\n            collateralizedToken.decimals()\n        );\n\n        if (cbtUserCut < amountOutMin) {\n            revert AmountOutLessThanMinimum(cbtUserCut, amountOutMin);\n        }\n\n        _updateBatchTA(\n            batchId,\n            reactiveTA,\n            amountIn,\n            cbtUserCut + cbtDaoCut,\n            collateralizedToken.decimals()\n        );\n        _rebalanceCategory(batchCategory[batchId], reactiveTA, amountIn, decayingMomentum);\n\n        collateralizedToken.mint(msg.sender, cbtUserCut);\n        collateralizedToken.mint(feeReceiver, cbtDaoCut);\n\n        forwardContractBatch.safeTransferFrom(msg.sender, address(this), batchId, amountIn, \"\");\n\n        emit BatchCollateralized(batchId, amountIn, cbtUserCut, msg.sender);\n    }\n\n    /// @dev Decollateralizes `amountIn` of ERC20 tokens and sends `amountOut` ERC1155 tokens with id `batchId` to msg.sender\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend `amountIn` ERC20 tokens\n    /// @dev nonReentrant (_decollateralizeTokens), to avoid possible reentrancy after calling safeTransferFrom\n    /// @dev will trigger a rebalance of the Category\n    /// @param batchId id of the batch\n    /// @param amountIn ERC20 tokens to decollateralize\n    /// @param amountOutMin minimum output amount of ERC1155 tokens for transaction to succeed\n    function decollateralizeTokens(\n        uint batchId,\n        uint amountIn,\n        uint amountOutMin\n    ) external {\n        _decollateralizeTokens(batchId, amountIn, amountOutMin);\n\n        _rebalanceCategory(batchCategory[batchId]);\n    }\n\n    /// @dev Bulk-decollateralizes ERC20 tokens into multiple ERC1155 tokens with specified amounts\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend `sum(amountsIn)` ERC20 tokens\n    /// @dev nonReentrant (_decollateralizeTokens), to avoid possible reentrancy after calling safeTransferFrom\n    /// @dev _batchIds must belong to the same Category\n    /// @dev will trigger a rebalance of the Category\n    /// @param _batchIds ids of the batches\n    /// @param amountsIn ERC20 tokens to decollateralize\n    /// @param amountsOutMin minimum output amounts of ERC1155 tokens for transaction to succeed\n    function bulkDecollateralizeTokens(\n        uint[] calldata _batchIds,\n        uint[] calldata amountsIn,\n        uint[] calldata amountsOutMin\n    ) external {\n        if (_batchIds.length != amountsIn.length || _batchIds.length != amountsOutMin.length) {\n            revert InvalidInput();\n        }\n\n        for (uint i = 1; i < _batchIds.length; i++) {\n            uint currentBatchCategoryId = batchCategory[_batchIds[i]];\n            uint previousBatchCategoryId = batchCategory[_batchIds[i - 1]];\n\n            if (currentBatchCategoryId != previousBatchCategoryId) {\n                revert BatchesNotInSameCategory(currentBatchCategoryId, previousBatchCategoryId);\n            }\n        }\n\n        for (uint i; i < _batchIds.length; i++) {\n            _decollateralizeTokens(_batchIds[i], amountsIn[i], amountsOutMin[i]);\n        }\n\n        uint decollateralizedCategoryId = batchCategory[_batchIds[0]];\n        _rebalanceCategory(decollateralizedCategoryId);\n    }\n\n    /// @dev Simulates collateralization of `amountIn` ERC1155 tokens with id `batchId` for msg.sender\n    /// @param batchId id of the batch\n    /// @param amountIn ERC1155 tokens to collateralize\n    /// @return cbtUserCut ERC20 tokens to be received by msg.sender\n    /// @return cbtDaoCut ERC20 tokens to be received by feeReceiver\n    /// @return cbtForfeited ERC20 tokens forfeited for collateralizing the ERC1155 tokens\n    function simulateBatchCollateralization(uint batchId, uint amountIn)\n        external\n        view\n        validBatch(batchId)\n        batchUnderway(batchId)\n        returns (\n            uint cbtUserCut,\n            uint cbtDaoCut,\n            uint cbtForfeited\n        )\n    {\n        if (amountIn == 0) {\n            revert InvalidInput();\n        }\n\n        DomainDataTypes.Category storage category = categories[batchCategory[batchId]];\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\n\n        (, uint reactiveTA) = ReactiveTimeAppreciationMath.computeReactiveTA(category, amountIn);\n\n        (cbtUserCut, cbtDaoCut, cbtForfeited) = SolidMath.computeCollateralizationOutcome(\n            batches[batchId].certificationDate,\n            amountIn,\n            reactiveTA,\n            collateralizationFee,\n            collateralizedToken.decimals()\n        );\n    }\n\n    /// @dev Simulates decollateralization of `amountIn` ERC20 tokens for ERC1155 tokens with id `batchId`\n    /// @param batchId id of the batch\n    /// @param amountIn ERC20 tokens to decollateralize\n    /// @return amountOut ERC1155 tokens to be received by msg.sender\n    /// @return minAmountIn minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\n    /// @return minCbtDaoCut ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\n    function simulateDecollateralization(uint batchId, uint amountIn)\n        external\n        view\n        returns (\n            uint amountOut,\n            uint minAmountIn,\n            uint minCbtDaoCut\n        )\n    {\n        (amountOut, minAmountIn, minCbtDaoCut) = _simulateDecollateralization(batchId, amountIn);\n    }\n\n    /// @dev Computes relevant info for the decollateralization process involving batches\n    /// that match the specified `projectId` and `vintage`\n    /// @param projectId id of the project the batch belongs to\n    /// @param vintage vintage of the batch\n    /// @return result array of relevant info about matching batches\n    function getBatchesDecollateralizationInfo(uint projectId, uint vintage)\n        external\n        view\n        returns (DomainDataTypes.TokenDecollateralizationInfo[] memory result)\n    {\n        DomainDataTypes.TokenDecollateralizationInfo[]\n            memory allInfos = new DomainDataTypes.TokenDecollateralizationInfo[](batchIds.length);\n        uint infoCount;\n\n        for (uint i; i < batchIds.length; i++) {\n            uint batchId = batchIds[i];\n            if (batches[batchId].vintage != vintage || batches[batchId].projectId != projectId) {\n                continue;\n            }\n\n            uint availableCredits = forwardContractBatch.balanceOf(address(this), batchId);\n\n            (uint amountOut, uint minAmountIn, uint minCbtDaoCut) = _simulateDecollateralization(\n                batchId,\n                DECOLLATERALIZATION_SIMULATION_INPUT\n            );\n\n            allInfos[infoCount] = DomainDataTypes.TokenDecollateralizationInfo(\n                batchId,\n                availableCredits,\n                amountOut,\n                minAmountIn,\n                minCbtDaoCut\n            );\n            infoCount = infoCount + 1;\n        }\n\n        result = new DomainDataTypes.TokenDecollateralizationInfo[](infoCount);\n        for (uint i; i < infoCount; i++) {\n            result[i] = allInfos[i];\n        }\n    }\n\n    // todo #121: add authorization\n    function setCollateralizationFee(uint16 _collateralizationFee) external {\n        _setCollateralizationFee(_collateralizationFee);\n    }\n\n    // todo #121: add authorization\n    function setDecollateralizationFee(uint16 _decollateralizationFee) external {\n        _setDecollateralizationFee(_decollateralizationFee);\n    }\n\n    // todo #121: add authorization\n    /// @inheritdoc IWeeklyCarbonRewardsManager\n    function setRewardsFee(uint16 _rewardsFee) external {\n        _setRewardsFee(_rewardsFee);\n    }\n\n    // todo #121: add authorization\n    function setFeeReceiver(address _feeReceiver) external {\n        _setFeeReceiver(_feeReceiver);\n    }\n\n    function getProjectIdsByCategory(uint categoryId) external view returns (uint[] memory) {\n        return categoryProjects[categoryId];\n    }\n\n    function getBatchIdsByProject(uint projectId) external view returns (uint[] memory) {\n        return projectBatches[projectId];\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint,\n        uint,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint[] memory,\n        uint[] memory,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return interfaceId == 0xd9b67a26; // The ERC-165 identifier for ERC-1155\n    }\n\n    function _setWeeklyRewardsMinter(address _weeklyRewardsMinter) internal {\n        weeklyRewardsMinter = _weeklyRewardsMinter;\n\n        emit RewardsMinterUpdated(_weeklyRewardsMinter);\n    }\n\n    function _setCollateralizationFee(uint16 _collateralizationFee) internal {\n        collateralizationFee = _collateralizationFee;\n\n        emit CollateralizationFeeUpdated(_collateralizationFee);\n    }\n\n    function _setDecollateralizationFee(uint16 _decollateralizationFee) internal {\n        decollateralizationFee = _decollateralizationFee;\n\n        emit DecollateralizationFeeUpdated(_decollateralizationFee);\n    }\n\n    function _setRewardsFee(uint16 _rewardsFee) internal {\n        rewardsFee = _rewardsFee;\n\n        emit RewardsFeeUpdated(_rewardsFee);\n    }\n\n    function _setFeeReceiver(address _feeReceiver) internal {\n        feeReceiver = _feeReceiver;\n\n        emit FeeReceiverUpdated(_feeReceiver);\n    }\n\n    function _simulateDecollateralization(uint batchId, uint amountIn)\n        internal\n        view\n        validBatch(batchId)\n        returns (\n            uint amountOut,\n            uint minAmountIn,\n            uint minCbtDaoCut\n        )\n    {\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\n\n        (amountOut, , ) = SolidMath.computeDecollateralizationOutcome(\n            batches[batchId].certificationDate,\n            amountIn,\n            batches[batchId].batchTA,\n            decollateralizationFee,\n            collateralizedToken.decimals()\n        );\n\n        (minAmountIn, minCbtDaoCut) = SolidMath.computeDecollateralizationMinAmountInAndDaoCut(\n            batches[batchId].certificationDate,\n            amountOut,\n            batches[batchId].batchTA,\n            decollateralizationFee,\n            collateralizedToken.decimals()\n        );\n    }\n\n    /// @dev Computes the amount of ERC20 tokens to be rewarded over the next 7 days\n    /// @param categoryId The source category for the ERC20 rewards\n    /// @return rewardAmount carbon reward amount to mint\n    /// @return rewardFee fee amount charged by the DAO\n    function _computeWeeklyCategoryReward(uint categoryId, uint rewardDecimals)\n        internal\n        view\n        returns (uint rewardAmount, uint rewardFee)\n    {\n        uint[] storage projects = categoryProjects[categoryId];\n        for (uint i; i < projects.length; i++) {\n            uint[] storage _batches = projectBatches[projects[i]];\n            for (uint j; j < _batches.length; j++) {\n                uint batchId = _batches[j];\n                uint availableCredits = forwardContractBatch.balanceOf(address(this), batchId);\n                if (availableCredits == 0 || _isBatchCertified(batchId)) {\n                    continue;\n                }\n\n                (uint netRewardAmount, uint feeAmount) = SolidMath.computeWeeklyBatchReward(\n                    batches[batchId].certificationDate,\n                    availableCredits,\n                    batches[batchId].batchTA,\n                    rewardsFee,\n                    rewardDecimals\n                );\n                rewardAmount += netRewardAmount;\n                rewardFee += feeAmount;\n            }\n        }\n    }\n\n    function _updateBatchTA(\n        uint batchId,\n        uint reactiveTA,\n        uint toBeCollateralizedForwardCredits,\n        uint toBeMintedCBT,\n        uint cbtDecimals\n    ) internal {\n        DomainDataTypes.Batch storage batch = batches[batchId];\n        uint collateralizedForwardCredits = forwardContractBatch.balanceOf(address(this), batch.id);\n        if (collateralizedForwardCredits == 0) {\n            batch.batchTA = uint24(reactiveTA);\n            return;\n        }\n\n        (uint circulatingCBT, , ) = SolidMath.computeCollateralizationOutcome(\n            batch.certificationDate,\n            collateralizedForwardCredits,\n            batch.batchTA,\n            0, // compute without fee\n            cbtDecimals\n        );\n\n        batch.batchTA = uint24(\n            ReactiveTimeAppreciationMath.inferBatchTA(\n                circulatingCBT + toBeMintedCBT,\n                collateralizedForwardCredits + toBeCollateralizedForwardCredits,\n                batch.certificationDate,\n                cbtDecimals\n            )\n        );\n    }\n\n    function _rebalanceCategory(uint categoryId) internal {\n        uint totalQuantifiedForwardCredits;\n        uint totalCollateralizedForwardCredits;\n\n        uint[] storage projects = categoryProjects[categoryId];\n        for (uint i; i < projects.length; i++) {\n            uint projectId = projects[i];\n            uint[] storage _batches = projectBatches[projectId];\n            for (uint j; j < _batches.length; j++) {\n                uint batchId = _batches[j];\n                uint collateralizedForwardCredits = forwardContractBatch.balanceOf(\n                    address(this),\n                    batchId\n                );\n                if (collateralizedForwardCredits == 0 || _isBatchCertified(batchId)) {\n                    continue;\n                }\n\n                totalQuantifiedForwardCredits +=\n                    batches[batchId].batchTA *\n                    collateralizedForwardCredits;\n                totalCollateralizedForwardCredits += collateralizedForwardCredits;\n            }\n        }\n\n        if (totalCollateralizedForwardCredits == 0) {\n            categories[categoryId].totalCollateralized = 0;\n            emit CategoryRebalanced(categoryId, categories[categoryId].averageTA, 0);\n            return;\n        }\n\n        uint latestAverageTA = totalQuantifiedForwardCredits / totalCollateralizedForwardCredits;\n        categories[categoryId].averageTA = uint24(latestAverageTA);\n        categories[categoryId].totalCollateralized = totalCollateralizedForwardCredits;\n\n        emit CategoryRebalanced(categoryId, latestAverageTA, totalCollateralizedForwardCredits);\n    }\n\n    function _rebalanceCategory(\n        uint categoryId,\n        uint reactiveTA,\n        uint currentCollateralizedAmount,\n        uint decayingMomentum\n    ) internal {\n        DomainDataTypes.Category storage category = categories[categoryId];\n\n        uint latestAverageTA = (category.averageTA *\n            category.totalCollateralized +\n            reactiveTA *\n            currentCollateralizedAmount) /\n            (category.totalCollateralized + currentCollateralizedAmount);\n\n        category.averageTA = uint24(latestAverageTA);\n        category.totalCollateralized += currentCollateralizedAmount;\n        category.lastCollateralizationMomentum = decayingMomentum + currentCollateralizedAmount;\n        category.lastCollateralizationTimestamp = uint32(block.timestamp);\n\n        emit CategoryRebalanced(categoryId, latestAverageTA, category.totalCollateralized);\n    }\n\n    /// @dev Decollateralizes `amountIn` of ERC20 tokens and sends `amountOut` ERC1155 tokens with id `batchId` to msg.sender\n    /// @dev prior to calling, msg.sender must approve SolidWorldManager to spend `amountIn` ERC20 tokens\n    /// @dev nonReentrant, to avoid possible reentrancy after calling safeTransferFrom\n    /// @param batchId id of the batch\n    /// @param amountIn ERC20 tokens to decollateralize\n    /// @param amountOutMin minimum output amount of ERC1155 tokens for transaction to succeed\n    function _decollateralizeTokens(\n        uint batchId,\n        uint amountIn,\n        uint amountOutMin\n    ) internal nonReentrant validBatch(batchId) {\n        CollateralizedBasketToken collateralizedToken = _getCollateralizedTokenForBatchId(batchId);\n\n        (uint amountOut, uint cbtDaoCut, uint cbtToBurn) = SolidMath\n            .computeDecollateralizationOutcome(\n                batches[batchId].certificationDate,\n                amountIn,\n                batches[batchId].batchTA,\n                decollateralizationFee,\n                collateralizedToken.decimals()\n            );\n\n        if (amountOut <= 0) {\n            revert AmountOutTooLow(amountOut);\n        }\n\n        if (amountOut < amountOutMin) {\n            revert AmountOutLessThanMinimum(amountOut, amountOutMin);\n        }\n\n        collateralizedToken.burnFrom(msg.sender, cbtToBurn);\n        GPv2SafeERC20.safeTransferFrom(collateralizedToken, msg.sender, feeReceiver, cbtDaoCut);\n\n        forwardContractBatch.safeTransferFrom(address(this), msg.sender, batchId, amountOut, \"\");\n\n        emit TokensDecollateralized(batchId, amountIn, amountOut, msg.sender);\n    }\n\n    function _getCollateralizedTokenForBatchId(uint batchId)\n        internal\n        view\n        returns (CollateralizedBasketToken)\n    {\n        uint projectId = batches[batchId].projectId;\n        uint categoryId = projectCategory[projectId];\n\n        return categoryToken[categoryId];\n    }\n\n    function _isBatchCertified(uint batchId) internal view returns (bool) {\n        return batches[batchId].certificationDate <= block.timestamp;\n    }\n}\n"
    },
    "contracts/ForwardContractBatchToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @notice ERC-1155 for working with forward contract batch tokens\n/// @author Solid World DAO\ncontract ForwardContractBatchToken is ERC1155, Ownable {\n    constructor(string memory uri) ERC1155(uri) {}\n\n    /// @dev only owner\n    /// @param to address of the owner of new token\n    /// @param id id of new token\n    /// @param amount amount of new token\n    /// @param data external data\n    function mint(\n        address to,\n        uint id,\n        uint amount,\n        bytes memory data\n    ) public onlyOwner {\n        _mint(to, id, amount, data);\n    }\n\n    /// @dev only owner\n    /// @param account address of the owner of token what is burned\n    /// @param id id of token what is burned\n    /// @param amount amount of token what is burned\n    function burn(\n        address account,\n        uint id,\n        uint amount\n    ) public onlyOwner {\n        _burn(account, id, amount);\n    }\n}\n"
    },
    "contracts/libraries/SolidMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"./ABDKMath64x64.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/// @notice Solid World DAO Math Operations and Constants.\n/// @author Solid World DAO\nlibrary SolidMath {\n    /// @dev Basis points in which the `time appreciation` must be expressed\n    /// @dev 100% = 1_000_000; 1% = 10_000; 0.0984% = 984\n    uint constant TIME_APPRECIATION_BASIS_POINTS = 1_000_000;\n\n    /// @dev Basis points used to express various DAO fees\n    /// @dev 100% = 10_000; 0.01% = 1\n    uint constant FEE_BASIS_POINTS = 10_000;\n\n    error IncorrectDates(uint startDate, uint endDate);\n\n    /// @dev Computes the number of weeks between two dates\n    /// @param startDate start date expressed in seconds\n    /// @param endDate end date expressed in seconds\n    /// @return number of weeks between the two dates. Returns 0 if result is negative\n    function weeksBetween(uint startDate, uint endDate) internal pure returns (uint) {\n        if (startDate == 0 || endDate == 0) {\n            revert IncorrectDates(startDate, endDate);\n        }\n\n        if (endDate <= startDate) {\n            return 0;\n        }\n\n        return (endDate - startDate) / 1 weeks;\n    }\n\n    /// @dev Computes discount for given `timeAppreciation` and project `certificationDate`\n    /// @dev (1 - timeAppreciation) ** weeksUntilCertification\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\n    /// @param certificationDate expected date for project certification\n    /// @return discount in basis points\n    function computeTimeAppreciationDiscount(uint timeAppreciation, uint certificationDate)\n        internal\n        view\n        returns (uint)\n    {\n        uint weeksUntilCertification = weeksBetween(block.timestamp, certificationDate);\n        if (weeksUntilCertification == 0) {\n            return TIME_APPRECIATION_BASIS_POINTS;\n        }\n\n        if (weeksUntilCertification == 1) {\n            return TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\n        }\n\n        uint discountRatePoints = TIME_APPRECIATION_BASIS_POINTS - timeAppreciation;\n        int128 discountRate = ABDKMath64x64.div(discountRatePoints, TIME_APPRECIATION_BASIS_POINTS);\n        int128 totalDiscount = ABDKMath64x64.pow(discountRate, (weeksUntilCertification - 1));\n\n        return ABDKMath64x64.mulu(totalDiscount, discountRatePoints);\n    }\n\n    /// @dev Computes the amount of ERC20 tokens to be minted to the stakeholder and DAO,\n    /// @dev and the amount forfeited when collateralizing `fcbtAmount` of ERC1155 tokens\n    /// @dev cbtUserCut = erc1155 * 10e18 * (1 - fee) * (1 - timeAppreciation) ** weeksUntilCertification\n    /// @param certificationDate expected date for project certification. Must not be in the past.\n    /// @param fcbtAmount amount of ERC1155 tokens to be collateralized\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\n    /// @param collateralizationFee 0.01% = 1\n    /// @param cbtDecimals collateralized basket token number of decimals\n    /// @return amount of ERC20 tokens to be minted to the stakeholder\n    /// @return amount of ERC20 tokens to be minted to the DAO\n    /// @return amount of ERC20 tokens forfeited for collateralizing the ERC1155 tokens\n    function computeCollateralizationOutcome(\n        uint certificationDate,\n        uint fcbtAmount,\n        uint timeAppreciation,\n        uint collateralizationFee,\n        uint cbtDecimals\n    )\n        internal\n        view\n        returns (\n            uint,\n            uint,\n            uint\n        )\n    {\n        assert(certificationDate > block.timestamp);\n\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\n            timeAppreciation,\n            certificationDate\n        );\n        uint mintableCbtAmount = Math.mulDiv(\n            fcbtAmount * timeAppreciationDiscount,\n            10**cbtDecimals,\n            TIME_APPRECIATION_BASIS_POINTS\n        );\n\n        uint cbtDaoCut = Math.mulDiv(mintableCbtAmount, collateralizationFee, FEE_BASIS_POINTS);\n        uint cbtUserCut = mintableCbtAmount - cbtDaoCut;\n        uint cbtForfeited = fcbtAmount * 10**cbtDecimals - mintableCbtAmount;\n\n        return (cbtUserCut, cbtDaoCut, cbtForfeited);\n    }\n\n    /// @dev Computes the amount of ERC1155 tokens redeemable by the stakeholder, amount of ERC20 tokens\n    /// @dev charged by the DAO and to be burned when decollateralizing `cbtAmount` of ERC20 tokens\n    /// @dev erc1155 = erc20 / 10e18 * (1 - fee) / (1 - timeAppreciation) ** weeksUntilCertification\n    /// @param certificationDate expected date for project certification\n    /// @param cbtAmount amount of ERC20 tokens to be decollateralized\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\n    /// @param decollateralizationFee 0.01% = 1\n    /// @param cbtDecimals collateralized basket token number of decimals\n    /// @return amount of ERC1155 tokens redeemable by the stakeholder\n    /// @return amount of ERC20 tokens charged by the DAO\n    /// @return amount of ERC20 tokens to be burned from the stakeholder\n    function computeDecollateralizationOutcome(\n        uint certificationDate,\n        uint cbtAmount,\n        uint timeAppreciation,\n        uint decollateralizationFee,\n        uint cbtDecimals\n    )\n        internal\n        view\n        returns (\n            uint,\n            uint,\n            uint\n        )\n    {\n        uint cbtDaoCut = Math.mulDiv(cbtAmount, decollateralizationFee, FEE_BASIS_POINTS);\n        uint cbtToBurn = cbtAmount - cbtDaoCut;\n\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\n            timeAppreciation,\n            certificationDate\n        );\n\n        uint fcbtAmount = Math.mulDiv(\n            cbtToBurn,\n            TIME_APPRECIATION_BASIS_POINTS,\n            timeAppreciationDiscount\n        );\n\n        return (fcbtAmount / 10**cbtDecimals, cbtDaoCut, cbtToBurn);\n    }\n\n    /// @dev Computes the minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\n    /// @dev and the amount of ERC20 tokens charged by the DAO for decollateralizing the minimum amount of ERC20 tokens\n    /// @param certificationDate expected date for project certification\n    /// @param expectedFcbtAmount amount of ERC1155 tokens to be redeemed\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\n    /// @param decollateralizationFee 0.01% = 1\n    /// @param cbtDecimals collateralized basket token number of decimals\n    /// @return minAmountIn minimum amount of ERC20 tokens to decollateralize in order to redeem `expectedFcbtAmount`\n    /// @return minCbtDaoCut amount of ERC20 tokens charged by the DAO for decollateralizing minAmountIn ERC20 tokens\n    function computeDecollateralizationMinAmountInAndDaoCut(\n        uint certificationDate,\n        uint expectedFcbtAmount,\n        uint timeAppreciation,\n        uint decollateralizationFee,\n        uint cbtDecimals\n    ) internal view returns (uint minAmountIn, uint minCbtDaoCut) {\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\n            timeAppreciation,\n            certificationDate\n        );\n\n        uint minAmountInAfterFee = Math.mulDiv(\n            expectedFcbtAmount * timeAppreciationDiscount,\n            10**cbtDecimals,\n            TIME_APPRECIATION_BASIS_POINTS\n        );\n\n        minAmountIn = Math.mulDiv(\n            minAmountInAfterFee,\n            FEE_BASIS_POINTS,\n            FEE_BASIS_POINTS - decollateralizationFee\n        );\n\n        minCbtDaoCut = Math.mulDiv(minAmountIn, decollateralizationFee, FEE_BASIS_POINTS);\n    }\n\n    /// @dev Computes the amount of ERC20 tokens to be rewarded over the next 7 days\n    /// @dev erc1155 * 10e18 * timeApn * (1 - timeApn) ** weeks\n    /// @param certificationDate expected date for project certification\n    /// @param availableCredits amount of ERC1155 tokens backing the reward\n    /// @param timeAppreciation 1% = 10000, 0.0984% = 984\n    /// @param rewardsFee fee charged by DAO on the weekly carbon rewards\n    /// @param decimals reward token number of decimals\n    /// @return netRewardAmount ERC20 reward amount. Returns 0 if `certificationDate` is in the past\n    /// @return feeAmount fee amount charged by the DAO. Returns 0 if `certificationDate` is in the past\n    function computeWeeklyBatchReward(\n        uint certificationDate,\n        uint availableCredits,\n        uint timeAppreciation,\n        uint rewardsFee,\n        uint decimals\n    ) internal view returns (uint netRewardAmount, uint feeAmount) {\n        if (certificationDate <= block.timestamp) {\n            return (0, 0);\n        }\n\n        uint timeAppreciationDiscount = computeTimeAppreciationDiscount(\n            timeAppreciation,\n            certificationDate\n        );\n\n        uint grossRewardAmount = Math.mulDiv(\n            availableCredits * timeAppreciation * timeAppreciationDiscount,\n            10**decimals,\n            TIME_APPRECIATION_BASIS_POINTS**2\n        );\n\n        feeAmount = Math.mulDiv(grossRewardAmount, rewardsFee, FEE_BASIS_POINTS);\n        netRewardAmount = grossRewardAmount - feeAmount;\n    }\n}\n"
    },
    "contracts/libraries/ReactiveTimeAppreciationMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\nimport \"./DomainDataTypes.sol\";\nimport \"./SolidMath.sol\";\n\nlibrary ReactiveTimeAppreciationMath {\n    /// @dev Basis points in which the `decayPerSecond` must be expressed\n    uint constant DECAY_BASIS_POINTS = 100_000_000_000;\n\n    /// @dev Basis points in which the `maxDepreciationPerYear` must be expressed\n    uint constant DEPRECIATION_BASIS_POINTS = 10;\n\n    error ForwardCreditsInputAmountTooLarge(uint forwardCreditsAmount);\n\n    /// @dev Computes a time appreciation value that is reactive to market conditions\n    /// @dev The reactive time appreciation starts at averageTA - maxDepreciation and increases with momentum and input amount\n    /// @param categoryState The current state of the category to compute the time appreciation for\n    /// @param forwardCreditsAmount The size of the forward credits to be collateralized\n    /// @return decayingMomentum The current decaying momentum of the category\n    /// @return reactiveTA The time appreciation value influenced by current market conditions\n    function computeReactiveTA(\n        DomainDataTypes.Category memory categoryState,\n        uint forwardCreditsAmount\n    ) internal view returns (uint decayingMomentum, uint reactiveTA) {\n        if (categoryState.volumeCoefficient == 0) {\n            return (0, categoryState.averageTA);\n        }\n\n        decayingMomentum = computeDecayingMomentum(\n            categoryState.decayPerSecond,\n            categoryState.lastCollateralizationMomentum,\n            categoryState.lastCollateralizationTimestamp\n        );\n\n        uint volume = decayingMomentum + forwardCreditsAmount / 2;\n        uint reactiveFactorAnnually = Math.mulDiv(\n            volume,\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS,\n            categoryState.volumeCoefficient * 100\n        );\n        if (reactiveFactorAnnually >= SolidMath.TIME_APPRECIATION_BASIS_POINTS) {\n            revert ForwardCreditsInputAmountTooLarge(forwardCreditsAmount);\n        }\n\n        uint reactiveFactorWeekly = toWeeklyRate(reactiveFactorAnnually);\n        reactiveTA = categoryState.averageTA - categoryState.maxDepreciation + reactiveFactorWeekly;\n\n        if (reactiveTA >= SolidMath.TIME_APPRECIATION_BASIS_POINTS) {\n            revert ForwardCreditsInputAmountTooLarge(forwardCreditsAmount);\n        }\n    }\n\n    /// @dev Decays the `lastCollateralizationMomentum` with the `decayPerSecond` rate since the `lastCollateralizationTimestamp`\n    /// @dev e.g a momentum of 100 with a decay of 5% per day will decay to 95 after 1 day\n    /// @dev The minimum decaying momentum is 0\n    /// @param decayPerSecond The rate at which the `lastCollateralizationMomentum` decays per second\n    /// @param lastCollateralizationMomentum The last collateralization momentum\n    /// @param lastCollateralizationTimestamp The last collateralization timestamp\n    /// @return decayingMomentum The decaying momentum value\n    function computeDecayingMomentum(\n        uint decayPerSecond,\n        uint lastCollateralizationMomentum,\n        uint lastCollateralizationTimestamp\n    ) internal view returns (uint decayingMomentum) {\n        uint secondsPassedSinceLastCollateralization = block.timestamp -\n            lastCollateralizationTimestamp;\n\n        int decayMultiplier = int(DECAY_BASIS_POINTS) -\n            int(secondsPassedSinceLastCollateralization * decayPerSecond);\n        decayMultiplier = SignedMath.max(0, decayMultiplier);\n\n        decayingMomentum = Math.mulDiv(\n            lastCollateralizationMomentum,\n            uint(decayMultiplier),\n            DECAY_BASIS_POINTS\n        );\n    }\n\n    /// @dev Derives what the time appreciation should be for a batch based on ERC20 in circulation, underlying ERC1155\n    ///      amount and its certification date\n    /// @dev Computes: 1 - (circulatingCBT / totalCollateralizedBatchForwardCredits) ** (1 / weeksTillCertification)\n    /// @dev Taking form: 1 - e ** (ln(circulatingCBT / totalCollateralizedBatchForwardCredits) * (1 / weeksTillCertification))\n    /// @param circulatingCBT The circulating CBT amount minted for the batch\n    /// @param totalCollateralizedForwardCredits The total collateralized batch forward credits\n    /// @param certificationDate The batch certification date\n    /// @param cbtDecimals Collateralized basket token number of decimals\n    function inferBatchTA(\n        uint circulatingCBT,\n        uint totalCollateralizedForwardCredits,\n        uint certificationDate,\n        uint cbtDecimals\n    ) internal view returns (uint batchTA) {\n        assert(circulatingCBT != 0 && totalCollateralizedForwardCredits != 0);\n\n        uint weeksTillCertification = SolidMath.weeksBetween(block.timestamp, certificationDate);\n\n        if (weeksTillCertification == 0) {\n            return 0;\n        }\n\n        int128 weeksTillCertificationInverse = ABDKMath64x64.inv(\n            ABDKMath64x64.fromUInt(weeksTillCertification)\n        );\n        int128 aggregateDiscount = ABDKMath64x64.div(\n            circulatingCBT,\n            totalCollateralizedForwardCredits * 10**cbtDecimals\n        );\n\n        int128 aggregateDiscountLN = ABDKMath64x64.ln(aggregateDiscount);\n        int128 aggregatedWeeklyDiscount = ABDKMath64x64.exp(\n            ABDKMath64x64.mul(aggregateDiscountLN, weeksTillCertificationInverse)\n        );\n        uint aggregatedWeeklyDiscountPoints = ABDKMath64x64.mulu(\n            aggregatedWeeklyDiscount,\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\n        );\n\n        batchTA = SolidMath.TIME_APPRECIATION_BASIS_POINTS - aggregatedWeeklyDiscountPoints;\n    }\n\n    /// @dev Determines the momentum for the specified Category based on current state and the new params\n    /// @param category The category to compute the momentum for\n    /// @param newVolumeCoefficient The new volume coefficient of the category\n    /// @param newMaxDepreciationPerYear The new max depreciation per year of the category\n    function inferMomentum(\n        DomainDataTypes.Category memory category,\n        uint newVolumeCoefficient,\n        uint newMaxDepreciationPerYear\n    ) internal view returns (uint) {\n        if (category.volumeCoefficient == 0 || category.decayPerSecond == 0) {\n            return computeInitialMomentum(newVolumeCoefficient, newMaxDepreciationPerYear);\n        }\n\n        return computeAdjustedMomentum(category, newVolumeCoefficient, newMaxDepreciationPerYear);\n    }\n\n    /// @dev Computes the initial value of momentum with the specified parameters\n    /// @param volumeCoefficient The volume coefficient of the category\n    /// @param maxDepreciationPerYear how much the reactive TA can drop from the averageTA value, quantified per year\n    /// @return initialMomentum The initial momentum value\n    function computeInitialMomentum(uint volumeCoefficient, uint maxDepreciationPerYear)\n        internal\n        pure\n        returns (uint initialMomentum)\n    {\n        initialMomentum = Math.mulDiv(\n            volumeCoefficient,\n            maxDepreciationPerYear,\n            DEPRECIATION_BASIS_POINTS\n        );\n    }\n\n    /// @dev Computes the adjusted value of momentum for a category when category update event occurs\n    /// @param category The category to compute the adjusted momentum for\n    /// @param newVolumeCoefficient The new volume coefficient of the category\n    /// @param newMaxDepreciationPerYear The new max depreciation per year of the category\n    /// @return adjustedMomentum The adjusted momentum value\n    function computeAdjustedMomentum(\n        DomainDataTypes.Category memory category,\n        uint newVolumeCoefficient,\n        uint newMaxDepreciationPerYear\n    ) internal view returns (uint adjustedMomentum) {\n        adjustedMomentum = computeDecayingMomentum(\n            category.decayPerSecond,\n            category.lastCollateralizationMomentum,\n            category.lastCollateralizationTimestamp\n        );\n\n        adjustedMomentum = Math.mulDiv(\n            adjustedMomentum,\n            newVolumeCoefficient,\n            category.volumeCoefficient\n        );\n\n        int depreciationDiff = int(newMaxDepreciationPerYear) -\n            int(uint(category.maxDepreciationPerYear));\n        if (depreciationDiff > 0) {\n            adjustedMomentum += Math.mulDiv(\n                newVolumeCoefficient,\n                uint(depreciationDiff),\n                DEPRECIATION_BASIS_POINTS\n            );\n        }\n    }\n\n    /// @dev Converts a rate quantified per year to a rate quantified per week\n    /// @dev Computes: 1 - (1 - annualRate) ** (1/52.1)\n    /// @dev Taking form: 1 - e ** (ln(1 - annualRate) * (1/52.1))\n    /// @param annualRate 1% = 10000, 0.0984% = 984\n    /// @return weeklyRate the rate quantified per week\n    function toWeeklyRate(uint annualRate) internal pure returns (uint weeklyRate) {\n        uint annualDiscountPoints = SolidMath.TIME_APPRECIATION_BASIS_POINTS - annualRate;\n        int128 annualDiscount = ABDKMath64x64.div(\n            annualDiscountPoints,\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\n        );\n\n        int128 annualDiscountLN = ABDKMath64x64.ln(annualDiscount);\n        int128 weeksInYearInverse = ABDKMath64x64.inv(weeksInYear());\n        int128 weeklyDiscount = ABDKMath64x64.exp(\n            ABDKMath64x64.mul(annualDiscountLN, weeksInYearInverse)\n        );\n        uint weeklyDiscountPoints = ABDKMath64x64.mulu(\n            weeklyDiscount,\n            SolidMath.TIME_APPRECIATION_BASIS_POINTS\n        );\n\n        weeklyRate = SolidMath.TIME_APPRECIATION_BASIS_POINTS - weeklyDiscountPoints;\n    }\n\n    function weeksInYear() internal pure returns (int128) {\n        return ABDKMath64x64.div(521, 10);\n    }\n}\n"
    },
    "contracts/libraries/GPv2SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Gnosis Protocol v2 Safe ERC20 Transfer Library\n/// @author Gnosis Developers\n/// @dev Gas-efficient version of Openzeppelin's SafeERC20 contract.\nlibrary GPv2SafeERC20 {\n    /// @dev Wrapper around a call to the ERC20 function `transfer` that reverts\n    /// also when the token returns `false`.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        bytes4 selector_ = token.transfer.selector;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, selector_)\n            mstore(add(freeMemoryPointer, 4), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(freeMemoryPointer, 36), value)\n\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 68, 0, 0)) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        require(getLastTransferResult(token), \"GPv2: failed transfer\");\n    }\n\n    /// @dev Wrapper around a call to the ERC20 function `transferFrom` that\n    /// reverts also when the token returns `false`.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        bytes4 selector_ = token.transferFrom.selector;\n\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let freeMemoryPointer := mload(0x40)\n            mstore(freeMemoryPointer, selector_)\n            mstore(add(freeMemoryPointer, 4), and(from, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(freeMemoryPointer, 36), and(to, 0xffffffffffffffffffffffffffffffffffffffff))\n            mstore(add(freeMemoryPointer, 68), value)\n\n            if iszero(call(gas(), token, 0, freeMemoryPointer, 100, 0, 0)) {\n                returndatacopy(0, 0, returndatasize())\n                revert(0, returndatasize())\n            }\n        }\n\n        require(getLastTransferResult(token), \"GPv2: failed transferFrom\");\n    }\n\n    /// @dev Verifies that the last return was a successful `transfer*` call.\n    /// This is done by checking that the return data is either empty, or\n    /// is a valid ABI encoded boolean.\n    function getLastTransferResult(IERC20 token) private view returns (bool success) {\n        // NOTE: Inspecting previous return data requires assembly. Note that\n        // we write the return data to memory 0 in the case where the return\n        // data size is 32, this is OK since the first 64 bytes of memory are\n        // reserved by Solidy as a scratch space that can be used within\n        // assembly blocks.\n        // <https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html>\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            /// @dev Revert with an ABI encoded Solidity error with a message\n            /// that fits into 32-bytes.\n            ///\n            /// An ABI encoded Solidity error has the following memory layout:\n            ///\n            /// ------------+----------------------------------\n            ///  byte range | value\n            /// ------------+----------------------------------\n            ///  0x00..0x04 |        selector(\"Error(string)\")\n            ///  0x04..0x24 |      string offset (always 0x20)\n            ///  0x24..0x44 |                    string length\n            ///  0x44..0x64 | string value, padded to 32-bytes\n            function revertWithMessage(length, message) {\n                mstore(0x00, \"\\x08\\xc3\\x79\\xa0\")\n                mstore(0x04, 0x20)\n                mstore(0x24, length)\n                mstore(0x44, message)\n                revert(0x00, 0x64)\n            }\n\n            switch returndatasize()\n            // Non-standard ERC20 transfer without return.\n            case 0 {\n                // NOTE: When the return data size is 0, verify that there\n                // is code at the address. This is done in order to maintain\n                // compatibility with Solidity calling conventions.\n                // <https://docs.soliditylang.org/en/v0.7.6/control-structures.html#external-function-calls>\n                if iszero(extcodesize(token)) {\n                    revertWithMessage(20, \"GPv2: not a contract\")\n                }\n\n                success := 1\n            }\n            // Standard ERC20 transfer returning boolean success value.\n            case 32 {\n                returndatacopy(0, 0, returndatasize())\n\n                // NOTE: For ABI encoding v1, any non-zero value is accepted\n                // as `true` for a boolean. In order to stay compatible with\n                // OpenZeppelin's `SafeERC20` library which is known to work\n                // with the existing ERC20 implementation we care about,\n                // make sure we return success for any non-zero return value\n                // from the `transfer*` call.\n                success := iszero(iszero(mload(0)))\n            }\n            default {\n                revertWithMessage(31, \"GPv2: malformed transfer result\")\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/manager/IWeeklyCarbonRewardsManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title The interface for weekly carbon rewards processing\n/// @notice Computes and mints weekly carbon rewards\n/// @author Solid World DAO\ninterface IWeeklyCarbonRewardsManager {\n    event WeeklyRewardMinted(address indexed rewardToken, uint indexed rewardAmount);\n    event RewardsFeeUpdated(uint indexed rewardsFee);\n    event RewardsMinterUpdated(address indexed rewardsMinter);\n\n    /// @dev Thrown if minting weekly rewards is called by an unauthorized account\n    error UnauthorizedRewardMinting(address account);\n\n    /// @param _weeklyRewardsMinter The only account allowed to mint weekly carbon rewards\n    function setWeeklyRewardsMinter(address _weeklyRewardsMinter) external;\n\n    function weeklyRewardsMinter() external view returns (address);\n\n    /// @param _rewardsFee The new rewards fee charged on weekly rewards\n    function setRewardsFee(uint16 _rewardsFee) external;\n\n    function rewardsFee() external view returns (uint16);\n\n    /// @param assets The incentivized assets (LP tokens)\n    /// @param _categoryIds The categories to which the incentivized assets belong\n    /// @return carbonRewards List of carbon rewards getting distributed.\n    /// @return rewardAmounts List of carbon reward amounts getting distributed\n    /// @return rewardFees List of fee amounts charged by the DAO on carbon rewards\n    function computeWeeklyCarbonRewards(address[] calldata assets, uint[] calldata _categoryIds)\n        external\n        view\n        returns (\n            address[] memory carbonRewards,\n            uint[] memory rewardAmounts,\n            uint[] memory rewardFees\n        );\n\n    /// @param _categoryIds The categories to which the incentivized assets belong\n    /// @param carbonRewards List of carbon rewards to mint\n    /// @param rewardAmounts List of carbon reward amounts to mint\n    /// @param rewardFees List of fee amounts charged by the DAO on carbon rewards\n    /// @param rewardsVault Account that secures ERC20 rewards\n    function mintWeeklyCarbonRewards(\n        uint[] calldata _categoryIds,\n        address[] calldata carbonRewards,\n        uint[] calldata rewardAmounts,\n        uint[] calldata rewardFees,\n        address rewardsVault\n    ) external;\n}\n"
    },
    "contracts/interfaces/manager/ISolidWorldManagerErrors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Errors thrown by the manager contract\n/// @author Solid World DAO\ninterface ISolidWorldManagerErrors {\n    error BatchAlreadyExists(uint batchId);\n    error InvalidBatchId(uint batchId);\n    error InvalidBatchSupplier();\n    error BatchCertificationDateInThePast(uint32 dueDate);\n    error BatchesNotInSameCategory(uint batchId1, uint batchId2);\n\n    error CategoryAlreadyExists(uint categoryId);\n    error InvalidCategoryId(uint categoryId);\n\n    error ProjectAlreadyExists(uint projectId);\n    error InvalidProjectId(uint projectId);\n\n    error InvalidInput();\n\n    error AmountOutLessThanMinimum(uint amountOut, uint minAmountOut);\n    error AmountOutTooLow(uint amountOut);\n\n    error BatchCertified(uint batchId);\n}\n"
    },
    "contracts/libraries/DomainDataTypes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nlibrary DomainDataTypes {\n    /// @notice Structure that holds necessary information for minting collateralized basket tokens (ERC-20).\n    /// @param id ID of the batch in the database\n    /// @param projectId Project ID this batch belongs to\n    /// @param supplier Address who receives forward contract batch tokens (ERC-1155)\n    /// @param certificationDate When the batch is about to be delivered; affects on how many collateralized basket tokens (ERC-20) may be minted\n    /// @param vintage The year an emission reduction occurred or the offset was issued. The older the vintage, the cheaper the price per credit.\n    /// @param status Status for the batch (ex. CAN_BE_DEPOSITED | IS_ACCUMULATING | READY_FOR_DELIVERY etc.)\n    /// @param batchTA Coefficient that affects on how many collateralized basket tokens (ERC-20) may be minted / ton\n    ///                   depending on market conditions. Forward is worth less than spot.\n    struct Batch {\n        uint id;\n        uint projectId;\n        address supplier;\n        uint32 certificationDate;\n        uint16 vintage;\n        uint8 status;\n        uint24 batchTA;\n    }\n\n    /// @notice Structure that holds state of a category of forward carbon credits. Used for computing collateralization.\n    /// @param volumeCoefficient controls how much impact does erc1155 input size have on the TA being offered.\n    /// The higher, the more you have to input to raise the TA.\n    /// @param decayPerSecond controls how fast the built momentum drops over time.\n    /// The bigger, the faster the momentum drops.\n    /// @param maxDepreciationPerYear controls how much the reactive TA can drop from the averageTA value. Quantified per year.\n    /// @param maxDepreciation controls how much the reactive TA can drop from the averageTA value. Quantified per week.\n    /// @param averageTA is the average time appreciation of the category.\n    /// @param totalCollateralized is the total amount of collateralized tokens for this category.\n    /// @param lastCollateralizationTimestamp the timestamp of the last collateralization.\n    /// @param lastCollateralizationMomentum the value of the momentum at the last collateralization.\n    struct Category {\n        uint volumeCoefficient;\n        uint40 decayPerSecond;\n        uint16 maxDepreciationPerYear;\n        uint24 maxDepreciation;\n        uint24 averageTA;\n        uint totalCollateralized;\n        uint32 lastCollateralizationTimestamp;\n        uint lastCollateralizationMomentum;\n    }\n\n    /// @notice Structure that holds necessary information for decollateralizing ERC20 tokens to ERC1155 tokens with id `batchId`\n    /// @param batchId id of the batch\n    /// @param availableBatchTokens Amount of ERC1155 tokens with id `batchId` that are available to be redeemed\n    /// @param amountOut ERC1155 tokens with id `batchId` to be received by msg.sender\n    /// @param minAmountIn minimum amount of ERC20 tokens to decollateralize `amountOut` ERC1155 tokens with id `batchId`\n    /// @param minCbtDaoCut ERC20 tokens to be received by feeReceiver for decollateralizing minAmountIn ERC20 tokens\n    struct TokenDecollateralizationInfo {\n        uint batchId;\n        uint availableBatchTokens;\n        uint amountOut;\n        uint minAmountIn;\n        uint minCbtDaoCut;\n    }\n}\n"
    },
    "contracts/CollateralizedBasketTokenDeployer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"./CollateralizedBasketToken.sol\";\n\ncontract CollateralizedBasketTokenDeployer {\n    function deploy(string calldata tokenName, string calldata tokenSymbol)\n        external\n        returns (CollateralizedBasketToken token)\n    {\n        token = new CollateralizedBasketToken(tokenName, tokenSymbol);\n        token.transferOwnership(msg.sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/libraries/ABDKMath64x64.sol": {
      "content": "// SPDX-License-Identifier: BSD-4-Clause\n\n/// ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n/// Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\npragma solidity ^0.8.16;\n\n/// Smart contract library of mathematical functions operating with signed\n/// 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n/// basically a simple fraction whose numerator is signed 128-bit integer and\n/// denominator is 2^64.  As long as denominator is always the same, there is no\n/// need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n/// represented by int128 type holding only the numerator.\nlibrary ABDKMath64x64 {\n    /// Minimum value signed 64.64-bit fixed point number may have.\n    int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n\n    /// Maximum value signed 64.64-bit fixed point number may have.\n    int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n    /// Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n    /// number.  Revert on overflow.\n    /// @param x unsigned 256-bit integer number\n    /// @return signed 64.64-bit fixed point number\n    function fromUInt(uint256 x) internal pure returns (int128) {\n        unchecked {\n            require(x <= 0x7FFFFFFFFFFFFFFF);\n            return int128(int256(x << 64));\n        }\n    }\n\n    /// Convert signed 64.64 fixed point number into unsigned 64-bit integer\n    /// number rounding down.  Revert on underflow.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return unsigned 64-bit integer number\n    function toUInt(int128 x) internal pure returns (uint64) {\n        unchecked {\n            require(x >= 0);\n            return uint64(uint128(x >> 64));\n        }\n    }\n\n    /// Calculate x * y rounding down. Revert on overflow.\n    /// @param x signed 64.64-bit fixed point number\n    /// @param y signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function mul(int128 x, int128 y) internal pure returns (int128) {\n        unchecked {\n            int256 result = (int256(x) * y) >> 64;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /// Calculate x * y rounding down, where x is signed 64.64 fixed point number\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\n    /// @param x signed 64.64 fixed point number\n    /// @param y unsigned 256-bit integer number\n    /// @return unsigned 256-bit integer number\n    function mulu(int128 x, uint256 y) internal pure returns (uint256) {\n        unchecked {\n            if (y == 0) return 0;\n\n            require(x >= 0);\n\n            uint256 lo = (uint256(int256(x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n            uint256 hi = uint256(int256(x)) * (y >> 128);\n\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            hi <<= 64;\n\n            require(hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n            return hi + lo;\n        }\n    }\n\n    /// Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n    /// and y is unsigned 256-bit integer number.  Revert on overflow.\n    /// @param x signed 64.64-bit fixed point number\n    /// @param y uint256 value\n    /// @return signed 64.64-bit fixed point number\n    function pow(int128 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            bool negative = x < 0 && y & 1 == 1;\n\n            uint256 absX = uint128(x < 0 ? -x : x);\n            uint256 absResult;\n            absResult = 0x100000000000000000000000000000000;\n\n            if (absX <= 0x10000000000000000) {\n                absX <<= 63;\n                while (y != 0) {\n                    if (y & 0x1 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x2 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x4 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    if (y & 0x8 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                    }\n                    absX = (absX * absX) >> 127;\n\n                    y >>= 4;\n                }\n\n                absResult >>= 64;\n            } else {\n                uint256 absXShift = 63;\n                if (absX < 0x1000000000000000000000000) {\n                    absX <<= 32;\n                    absXShift -= 32;\n                }\n                if (absX < 0x10000000000000000000000000000) {\n                    absX <<= 16;\n                    absXShift -= 16;\n                }\n                if (absX < 0x1000000000000000000000000000000) {\n                    absX <<= 8;\n                    absXShift -= 8;\n                }\n                if (absX < 0x10000000000000000000000000000000) {\n                    absX <<= 4;\n                    absXShift -= 4;\n                }\n                if (absX < 0x40000000000000000000000000000000) {\n                    absX <<= 2;\n                    absXShift -= 2;\n                }\n                if (absX < 0x80000000000000000000000000000000) {\n                    absX <<= 1;\n                    absXShift -= 1;\n                }\n\n                uint256 resultShift = 0;\n                while (y != 0) {\n                    require(absXShift < 64);\n\n                    if (y & 0x1 != 0) {\n                        absResult = (absResult * absX) >> 127;\n                        resultShift += absXShift;\n                        if (absResult > 0x100000000000000000000000000000000) {\n                            absResult >>= 1;\n                            resultShift += 1;\n                        }\n                    }\n                    absX = (absX * absX) >> 127;\n                    absXShift <<= 1;\n                    if (absX >= 0x100000000000000000000000000000000) {\n                        absX >>= 1;\n                        absXShift += 1;\n                    }\n\n                    y >>= 1;\n                }\n\n                require(resultShift < 64);\n                absResult >>= 64 - resultShift;\n            }\n            int256 result = negative ? -int256(absResult) : int256(absResult);\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n    /// integer numbers.  Revert on overflow or when y is zero.\n    /// @param x unsigned 256-bit integer number\n    /// @param y unsigned 256-bit integer number\n    /// @return signed 64.64-bit fixed point number\n    function div(uint256 x, uint256 y) internal pure returns (int128) {\n        unchecked {\n            require(y != 0);\n            uint128 result = divu(x, y);\n            require(result <= uint128(MAX_64x64));\n            return int128(result);\n        }\n    }\n\n    /// Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n    /// integer numbers.  Revert on overflow or when y is zero.\n    /// @param x unsigned 256-bit integer number\n    /// @param y unsigned 256-bit integer number\n    /// @return unsigned 64.64-bit fixed point number\n    function divu(uint256 x, uint256 y) internal pure returns (uint128) {\n        unchecked {\n            require(y != 0);\n\n            uint256 result;\n\n            if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) result = (x << 64) / y;\n            else {\n                uint256 msb = 192;\n                uint256 xc = x >> 192;\n                if (xc >= 0x100000000) {\n                    xc >>= 32;\n                    msb += 32;\n                }\n                if (xc >= 0x10000) {\n                    xc >>= 16;\n                    msb += 16;\n                }\n                if (xc >= 0x100) {\n                    xc >>= 8;\n                    msb += 8;\n                }\n                if (xc >= 0x10) {\n                    xc >>= 4;\n                    msb += 4;\n                }\n                if (xc >= 0x4) {\n                    xc >>= 2;\n                    msb += 2;\n                }\n                if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n                result = (x << (255 - msb)) / (((y - 1) >> (msb - 191)) + 1);\n                require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 hi = result * (y >> 128);\n                uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n\n                uint256 xh = x >> 192;\n                uint256 xl = x << 64;\n\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n                lo = hi << 128;\n                if (xl < lo) xh -= 1;\n                xl -= lo; // We rely on overflow behavior here\n\n                assert(xh == hi >> 128);\n\n                result += xl / y;\n            }\n\n            require(result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n            return uint128(result);\n        }\n    }\n\n    /// Calculate natural exponent of x.  Revert on overflow.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function exp(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            return exp_2(int128((int256(x) * 0x171547652B82FE1777D0FFDA0D23A7D12) >> 128));\n        }\n    }\n\n    /// Calculate binary exponent of x.  Revert on overflow.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function exp_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x < 0x400000000000000000); // Overflow\n\n            if (x < -0x400000000000000000) return 0; // Underflow\n\n            uint256 result = 0x80000000000000000000000000000000;\n\n            if (x & 0x8000000000000000 > 0)\n                result = (result * 0x16A09E667F3BCC908B2FB1366EA957D3E) >> 128;\n            if (x & 0x4000000000000000 > 0)\n                result = (result * 0x1306FE0A31B7152DE8D5A46305C85EDEC) >> 128;\n            if (x & 0x2000000000000000 > 0)\n                result = (result * 0x1172B83C7D517ADCDF7C8C50EB14A791F) >> 128;\n            if (x & 0x1000000000000000 > 0)\n                result = (result * 0x10B5586CF9890F6298B92B71842A98363) >> 128;\n            if (x & 0x800000000000000 > 0)\n                result = (result * 0x1059B0D31585743AE7C548EB68CA417FD) >> 128;\n            if (x & 0x400000000000000 > 0)\n                result = (result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8) >> 128;\n            if (x & 0x200000000000000 > 0)\n                result = (result * 0x10163DA9FB33356D84A66AE336DCDFA3F) >> 128;\n            if (x & 0x100000000000000 > 0)\n                result = (result * 0x100B1AFA5ABCBED6129AB13EC11DC9543) >> 128;\n            if (x & 0x80000000000000 > 0)\n                result = (result * 0x10058C86DA1C09EA1FF19D294CF2F679B) >> 128;\n            if (x & 0x40000000000000 > 0)\n                result = (result * 0x1002C605E2E8CEC506D21BFC89A23A00F) >> 128;\n            if (x & 0x20000000000000 > 0)\n                result = (result * 0x100162F3904051FA128BCA9C55C31E5DF) >> 128;\n            if (x & 0x10000000000000 > 0)\n                result = (result * 0x1000B175EFFDC76BA38E31671CA939725) >> 128;\n            if (x & 0x8000000000000 > 0)\n                result = (result * 0x100058BA01FB9F96D6CACD4B180917C3D) >> 128;\n            if (x & 0x4000000000000 > 0)\n                result = (result * 0x10002C5CC37DA9491D0985C348C68E7B3) >> 128;\n            if (x & 0x2000000000000 > 0)\n                result = (result * 0x1000162E525EE054754457D5995292026) >> 128;\n            if (x & 0x1000000000000 > 0)\n                result = (result * 0x10000B17255775C040618BF4A4ADE83FC) >> 128;\n            if (x & 0x800000000000 > 0)\n                result = (result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB) >> 128;\n            if (x & 0x400000000000 > 0)\n                result = (result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9) >> 128;\n            if (x & 0x200000000000 > 0)\n                result = (result * 0x10000162E43F4F831060E02D839A9D16D) >> 128;\n            if (x & 0x100000000000 > 0)\n                result = (result * 0x100000B1721BCFC99D9F890EA06911763) >> 128;\n            if (x & 0x80000000000 > 0)\n                result = (result * 0x10000058B90CF1E6D97F9CA14DBCC1628) >> 128;\n            if (x & 0x40000000000 > 0)\n                result = (result * 0x1000002C5C863B73F016468F6BAC5CA2B) >> 128;\n            if (x & 0x20000000000 > 0)\n                result = (result * 0x100000162E430E5A18F6119E3C02282A5) >> 128;\n            if (x & 0x10000000000 > 0)\n                result = (result * 0x1000000B1721835514B86E6D96EFD1BFE) >> 128;\n            if (x & 0x8000000000 > 0)\n                result = (result * 0x100000058B90C0B48C6BE5DF846C5B2EF) >> 128;\n            if (x & 0x4000000000 > 0)\n                result = (result * 0x10000002C5C8601CC6B9E94213C72737A) >> 128;\n            if (x & 0x2000000000 > 0)\n                result = (result * 0x1000000162E42FFF037DF38AA2B219F06) >> 128;\n            if (x & 0x1000000000 > 0)\n                result = (result * 0x10000000B17217FBA9C739AA5819F44F9) >> 128;\n            if (x & 0x800000000 > 0) result = (result * 0x1000000058B90BFCDEE5ACD3C1CEDC823) >> 128;\n            if (x & 0x400000000 > 0) result = (result * 0x100000002C5C85FE31F35A6A30DA1BE50) >> 128;\n            if (x & 0x200000000 > 0) result = (result * 0x10000000162E42FF0999CE3541B9FFFCF) >> 128;\n            if (x & 0x100000000 > 0) result = (result * 0x100000000B17217F80F4EF5AADDA45554) >> 128;\n            if (x & 0x80000000 > 0) result = (result * 0x10000000058B90BFBF8479BD5A81B51AD) >> 128;\n            if (x & 0x40000000 > 0) result = (result * 0x1000000002C5C85FDF84BD62AE30A74CC) >> 128;\n            if (x & 0x20000000 > 0) result = (result * 0x100000000162E42FEFB2FED257559BDAA) >> 128;\n            if (x & 0x10000000 > 0) result = (result * 0x1000000000B17217F7D5A7716BBA4A9AE) >> 128;\n            if (x & 0x8000000 > 0) result = (result * 0x100000000058B90BFBE9DDBAC5E109CCE) >> 128;\n            if (x & 0x4000000 > 0) result = (result * 0x10000000002C5C85FDF4B15DE6F17EB0D) >> 128;\n            if (x & 0x2000000 > 0) result = (result * 0x1000000000162E42FEFA494F1478FDE05) >> 128;\n            if (x & 0x1000000 > 0) result = (result * 0x10000000000B17217F7D20CF927C8E94C) >> 128;\n            if (x & 0x800000 > 0) result = (result * 0x1000000000058B90BFBE8F71CB4E4B33D) >> 128;\n            if (x & 0x400000 > 0) result = (result * 0x100000000002C5C85FDF477B662B26945) >> 128;\n            if (x & 0x200000 > 0) result = (result * 0x10000000000162E42FEFA3AE53369388C) >> 128;\n            if (x & 0x100000 > 0) result = (result * 0x100000000000B17217F7D1D351A389D40) >> 128;\n            if (x & 0x80000 > 0) result = (result * 0x10000000000058B90BFBE8E8B2D3D4EDE) >> 128;\n            if (x & 0x40000 > 0) result = (result * 0x1000000000002C5C85FDF4741BEA6E77E) >> 128;\n            if (x & 0x20000 > 0) result = (result * 0x100000000000162E42FEFA39FE95583C2) >> 128;\n            if (x & 0x10000 > 0) result = (result * 0x1000000000000B17217F7D1CFB72B45E1) >> 128;\n            if (x & 0x8000 > 0) result = (result * 0x100000000000058B90BFBE8E7CC35C3F0) >> 128;\n            if (x & 0x4000 > 0) result = (result * 0x10000000000002C5C85FDF473E242EA38) >> 128;\n            if (x & 0x2000 > 0) result = (result * 0x1000000000000162E42FEFA39F02B772C) >> 128;\n            if (x & 0x1000 > 0) result = (result * 0x10000000000000B17217F7D1CF7D83C1A) >> 128;\n            if (x & 0x800 > 0) result = (result * 0x1000000000000058B90BFBE8E7BDCBE2E) >> 128;\n            if (x & 0x400 > 0) result = (result * 0x100000000000002C5C85FDF473DEA871F) >> 128;\n            if (x & 0x200 > 0) result = (result * 0x10000000000000162E42FEFA39EF44D91) >> 128;\n            if (x & 0x100 > 0) result = (result * 0x100000000000000B17217F7D1CF79E949) >> 128;\n            if (x & 0x80 > 0) result = (result * 0x10000000000000058B90BFBE8E7BCE544) >> 128;\n            if (x & 0x40 > 0) result = (result * 0x1000000000000002C5C85FDF473DE6ECA) >> 128;\n            if (x & 0x20 > 0) result = (result * 0x100000000000000162E42FEFA39EF366F) >> 128;\n            if (x & 0x10 > 0) result = (result * 0x1000000000000000B17217F7D1CF79AFA) >> 128;\n            if (x & 0x8 > 0) result = (result * 0x100000000000000058B90BFBE8E7BCD6D) >> 128;\n            if (x & 0x4 > 0) result = (result * 0x10000000000000002C5C85FDF473DE6B2) >> 128;\n            if (x & 0x2 > 0) result = (result * 0x1000000000000000162E42FEFA39EF358) >> 128;\n            if (x & 0x1 > 0) result = (result * 0x10000000000000000B17217F7D1CF79AB) >> 128;\n\n            result >>= uint256(int256(63 - (x >> 64)));\n            require(result <= uint256(int256(MAX_64x64)));\n\n            return int128(int256(result));\n        }\n    }\n\n    /// Calculate natural logarithm of x.  Revert if x <= 0.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function ln(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            return\n                int128(\n                    int256((uint256(int256(log_2(x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF) >> 128)\n                );\n        }\n    }\n\n    /// Calculate binary logarithm of x.  Revert if x <= 0.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function log_2(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x > 0);\n\n            int256 msb = 0;\n            int256 xc = x;\n            if (xc >= 0x10000000000000000) {\n                xc >>= 64;\n                msb += 64;\n            }\n            if (xc >= 0x100000000) {\n                xc >>= 32;\n                msb += 32;\n            }\n            if (xc >= 0x10000) {\n                xc >>= 16;\n                msb += 16;\n            }\n            if (xc >= 0x100) {\n                xc >>= 8;\n                msb += 8;\n            }\n            if (xc >= 0x10) {\n                xc >>= 4;\n                msb += 4;\n            }\n            if (xc >= 0x4) {\n                xc >>= 2;\n                msb += 2;\n            }\n            if (xc >= 0x2) msb += 1; // No need to shift xc anymore\n\n            int256 result = (msb - 64) << 64;\n            uint256 ux = uint256(int256(x)) << uint256(127 - msb);\n            for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n                ux *= ux;\n                uint256 b = ux >> 255;\n                ux >>= 127 + b;\n                result += bit * int256(b);\n            }\n\n            return int128(result);\n        }\n    }\n\n    /// Calculate 1 / x rounding towards zero.  Revert on overflow or when x is zero.\n    /// @param x signed 64.64-bit fixed point number\n    /// @return signed 64.64-bit fixed point number\n    function inv(int128 x) internal pure returns (int128) {\n        unchecked {\n            require(x != 0);\n            int256 result = int256(0x100000000000000000000000000000000) / x;\n            require(result >= MIN_64x64 && result <= MAX_64x64);\n            return int128(result);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. It the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`.\n        // We also know that `k`, the position of the most significant bit, is such that `msb(a) = 2**k`.\n        // This gives `2**k < a <= 2**(k+1)` → `2**(k/2) <= sqrt(a) < 2 ** (k/2+1)`.\n        // Using an algorithm similar to the msb conmputation, we are able to compute `result = 2**(k/2)` which is a\n        // good first aproximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1;\n        uint256 x = a;\n        if (x >> 128 > 0) {\n            x >>= 128;\n            result <<= 64;\n        }\n        if (x >> 64 > 0) {\n            x >>= 64;\n            result <<= 32;\n        }\n        if (x >> 32 > 0) {\n            x >>= 32;\n            result <<= 16;\n        }\n        if (x >> 16 > 0) {\n            x >>= 16;\n            result <<= 8;\n        }\n        if (x >> 8 > 0) {\n            x >>= 8;\n            result <<= 4;\n        }\n        if (x >> 4 > 0) {\n            x >>= 4;\n            result <<= 2;\n        }\n        if (x >> 2 > 0) {\n            result <<= 1;\n        }\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = sqrt(a);\n        if (rounding == Rounding.Up && result * result < a) {\n            result += 1;\n        }\n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/rewards/EmissionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/rewards/IEmissionManager.sol\";\nimport \"../interfaces/manager/IWeeklyCarbonRewardsManager.sol\";\nimport \"../PostConstruct.sol\";\n\n/// @title EmissionManager\n/// @author Aave\n/// @notice It manages the list of admins of reward emissions and provides functions to control reward emissions.\ncontract EmissionManager is Ownable, IEmissionManager, PostConstruct, ReentrancyGuard {\n    // reward => emissionAdmin\n    mapping(address => address) internal _emissionAdmins;\n\n    IWeeklyCarbonRewardsManager internal _carbonRewardsManager;\n    IRewardsController internal _rewardsController;\n    address internal carbonRewardAdmin;\n\n    modifier onlyEmissionAdmin(address reward) {\n        if (_emissionAdmins[reward] != msg.sender) {\n            revert NotEmissionAdmin(msg.sender, reward);\n        }\n        _;\n    }\n\n    function setup(\n        IWeeklyCarbonRewardsManager carbonRewardsManager,\n        IRewardsController controller,\n        address owner\n    ) external postConstruct {\n        _carbonRewardsManager = carbonRewardsManager;\n        _rewardsController = controller;\n        transferOwnership(owner);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config)\n        external\n        override\n    {\n        for (uint i; i < config.length; i++) {\n            if (_emissionAdmins[config[i].reward] != msg.sender) {\n                revert NotEmissionAdmin(msg.sender, config[i].reward);\n            }\n        }\n        _rewardsController.configureAssets(config);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle)\n        external\n        override\n        onlyEmissionAdmin(reward)\n    {\n        _rewardsController.setRewardOracle(reward, rewardOracle);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setDistributionEnd(\n        address asset,\n        address reward,\n        uint32 newDistributionEnd\n    ) external override onlyEmissionAdmin(reward) {\n        _rewardsController.setDistributionEnd(asset, reward, newDistributionEnd);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setEmissionPerSecond(\n        address asset,\n        address[] calldata rewards,\n        uint88[] calldata newEmissionsPerSecond\n    ) external override {\n        for (uint i; i < rewards.length; i++) {\n            if (_emissionAdmins[rewards[i]] != msg.sender) {\n                revert NotEmissionAdmin(msg.sender, rewards[i]);\n            }\n        }\n        _rewardsController.setEmissionPerSecond(asset, rewards, newEmissionsPerSecond);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function updateCarbonRewardDistribution(address[] calldata assets, uint[] calldata categoryIds)\n        external\n        override\n        nonReentrant\n    {\n        (\n            address[] memory carbonRewards,\n            uint[] memory rewardAmounts,\n            uint[] memory rewardFees\n        ) = _carbonRewardsManager.computeWeeklyCarbonRewards(assets, categoryIds);\n\n        _rewardsController.updateCarbonRewardDistribution(assets, carbonRewards, rewardAmounts);\n\n        _carbonRewardsManager.mintWeeklyCarbonRewards(\n            categoryIds,\n            carbonRewards,\n            rewardAmounts,\n            rewardFees,\n            _rewardsController.getRewardsVault()\n        );\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setClaimer(address user, address claimer) external override onlyOwner {\n        _rewardsController.setClaimer(user, claimer);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setRewardsVault(address rewardsVault) external override onlyOwner {\n        _rewardsController.setRewardsVault(rewardsVault);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setEmissionManager(address emissionManager) external override onlyOwner {\n        _rewardsController.setEmissionManager(emissionManager);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setSolidStaking(address solidStaking) external override onlyOwner {\n        _rewardsController.setSolidStaking(solidStaking);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setEmissionAdmin(address reward, address admin) external override onlyOwner {\n        address oldAdmin = _emissionAdmins[reward];\n        _emissionAdmins[reward] = admin;\n        emit EmissionAdminUpdated(reward, oldAdmin, admin);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setRewardsController(address controller) external override onlyOwner {\n        _rewardsController = IRewardsController(controller);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function setCarbonRewardsManager(address carbonRewardsManager) external override onlyOwner {\n        _carbonRewardsManager = IWeeklyCarbonRewardsManager(carbonRewardsManager);\n    }\n\n    /// @inheritdoc IEmissionManager\n    function getRewardsController() external view override returns (IRewardsController) {\n        return _rewardsController;\n    }\n\n    /// @inheritdoc IEmissionManager\n    function getEmissionAdmin(address reward) external view override returns (address) {\n        return _emissionAdmins[reward];\n    }\n\n    /// @inheritdoc IEmissionManager\n    function getCarbonRewardsManager() external view override returns (address) {\n        return address(_carbonRewardsManager);\n    }\n}\n"
    },
    "contracts/interfaces/rewards/IEmissionManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"../../libraries/RewardsDataTypes.sol\";\nimport \"./IRewardsController.sol\";\n\n/// @title IEmissionManager\n/// @author Aave\n/// @notice Defines the basic interface for the Emission Manager\ninterface IEmissionManager {\n    error NotEmissionAdmin(address sender, address reward);\n\n    /// @dev Emitted when the admin of a reward emission is updated.\n    /// @param reward The address of the rewarding token\n    /// @param oldAdmin The address of the old emission admin\n    /// @param newAdmin The address of the new emission admin\n    event EmissionAdminUpdated(\n        address indexed reward,\n        address indexed oldAdmin,\n        address indexed newAdmin\n    );\n\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\n    /// @dev Only callable by the emission admin of the given rewards\n    /// @param config The assets configuration input, the list of structs contains the following fields:\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\n    ///   uint256 totalSupply: The total supply of the asset to incentivize\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\n    ///   address asset: The asset address to incentivize\n    ///   address reward: The reward token address\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\n\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\n    /// @dev Only callable by the emission admin of the given reward\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\n    /// This check is enforced for integrators to be able to show incentives at\n    /// the current Aave UI without the need to setup an external price registry\n    /// @param reward The address of the reward to set the price aggregator\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\n\n    /// @dev Sets the end date for the distribution\n    /// @dev Only callable by the emission admin of the given reward\n    /// @param asset The asset to incentivize\n    /// @param reward The reward token that incentives the asset\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\n    function setDistributionEnd(\n        address asset,\n        address reward,\n        uint32 newDistributionEnd\n    ) external;\n\n    /// @dev Sets the emission per second of a set of reward distributions\n    /// @param asset The asset is being incentivized\n    /// @param rewards List of reward addresses are being distributed\n    /// @param newEmissionsPerSecond List of new reward emissions per second\n    function setEmissionPerSecond(\n        address asset,\n        address[] calldata rewards,\n        uint88[] calldata newEmissionsPerSecond\n    ) external;\n\n    /// @dev Computes and mints weekly carbon rewards, and instructs RewardsController how to distribute them\n    /// @param assets The incentivized assets (hypervisors)\n    /// @param _categoryIds The categories to which the incentivized assets belong\n    function updateCarbonRewardDistribution(address[] calldata assets, uint[] calldata _categoryIds)\n        external;\n\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param user The address of the user\n    /// @param claimer The address of the claimer\n    function setClaimer(address user, address claimer) external;\n\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\n    function setRewardsVault(address rewardsVault) external;\n\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\n    function setSolidStaking(address solidStaking) external;\n\n    /// @dev Updates the address of the emission manager\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param emissionManager The address of the new EmissionManager\n    function setEmissionManager(address emissionManager) external;\n\n    /// @dev Updates the admin of the reward emission\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param reward The address of the reward token\n    /// @param admin The address of the new admin of the emission\n    function setEmissionAdmin(address reward, address admin) external;\n\n    /// @dev Updates the address of the rewards controller\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param controller the address of the RewardsController contract\n    function setRewardsController(address controller) external;\n\n    /// @dev Only callable by the owner of the EmissionManager\n    /// @param carbonRewardsManager the address of the IWeeklyCarbonRewardsManager contract\n    function setCarbonRewardsManager(address carbonRewardsManager) external;\n\n    /// @dev Returns the rewards controller address\n    /// @return The address of the RewardsController contract\n    function getRewardsController() external view returns (IRewardsController);\n\n    /// @dev Returns the admin of the given reward emission\n    /// @param reward The address of the reward token\n    /// @return The address of the emission admin\n    function getEmissionAdmin(address reward) external view returns (address);\n\n    /// @return The address of the IWeeklyCarbonRewardsManager implementation contract\n    function getCarbonRewardsManager() external view returns (address);\n}\n"
    },
    "contracts/PostConstruct.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @notice Simple contract exposing a modifier used on setup functions\n/// to prevent them from being called more than once\n/// @author Solid World DAO\nabstract contract PostConstruct {\n    error AlreadyInitialized();\n\n    bool private _initialized;\n\n    modifier postConstruct() {\n        if (_initialized) {\n            revert AlreadyInitialized();\n        }\n        _initialized = true;\n        _;\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/libraries/RewardsDataTypes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"../interfaces/rewards/IEACAggregatorProxy.sol\";\n\nlibrary RewardsDataTypes {\n    struct DistributionConfig {\n        uint88 emissionPerSecond;\n        uint totalStaked;\n        uint32 distributionEnd;\n        address asset;\n        address reward;\n        IEACAggregatorProxy rewardOracle;\n    }\n\n    struct AssetStakedAmounts {\n        address asset;\n        uint userStake;\n        uint totalStaked;\n    }\n\n    struct AssetData {\n        mapping(address => RewardDistribution) rewardDistribution;\n        mapping(uint128 => address) availableRewards;\n        uint128 availableRewardsCount;\n        uint8 decimals;\n    }\n\n    struct RewardDistribution {\n        uint104 index;\n        uint88 emissionPerSecond;\n        uint32 lastUpdateTimestamp;\n        uint32 distributionEnd;\n        mapping(address => UserReward) userReward;\n    }\n\n    struct UserReward {\n        uint104 index;\n        uint128 accrued;\n    }\n}\n"
    },
    "contracts/interfaces/rewards/IRewardsController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"./IRewardsDistributor.sol\";\nimport \"../../libraries/RewardsDataTypes.sol\";\n\n/// @title IRewardsController\n/// @author Aave\n/// @notice Defines the basic interface for a Rewards Controller.\ninterface IRewardsController is IRewardsDistributor {\n    error UnauthorizedClaimer(address claimer, address user);\n    error NotSolidStaking(address sender);\n    error InvalidRewardOracle(address reward, address rewardOracle);\n\n    /// @dev Emitted when a new address is whitelisted as claimer of rewards on behalf of a user\n    /// @param user The address of the user\n    /// @param claimer The address of the claimer\n    event ClaimerSet(address indexed user, address indexed claimer);\n\n    /// @dev Emitted when rewards are claimed\n    /// @param user The address of the user rewards has been claimed on behalf of\n    /// @param reward The address of the token reward is claimed\n    /// @param to The address of the receiver of the rewards\n    /// @param claimer The address of the claimer\n    /// @param amount The amount of rewards claimed\n    event RewardsClaimed(\n        address indexed user,\n        address indexed reward,\n        address indexed to,\n        address claimer,\n        uint amount\n    );\n\n    /// @dev Emitted when the reward oracle is updated\n    /// @param reward The address of the token reward\n    /// @param rewardOracle The address of oracle\n    event RewardOracleUpdated(address indexed reward, address indexed rewardOracle);\n\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\n    event RewardsVaultUpdated(address indexed rewardsVault);\n\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\n    event SolidStakingUpdated(address indexed solidStaking);\n\n    /// @dev Whitelists an address to claim the rewards on behalf of another address\n    /// @param user The address of the user\n    /// @param claimer The address of the claimer\n    function setClaimer(address user, address claimer) external;\n\n    /// @dev Sets an Aave Oracle contract to enforce rewards with a source of value.\n    /// @notice At the moment of reward configuration, the Incentives Controller performs\n    /// a check to see if the reward asset oracle is compatible with IEACAggregator proxy.\n    /// This check is enforced for integrators to be able to show incentives at\n    /// the current Aave UI without the need to setup an external price registry\n    /// @param reward The address of the reward to set the price aggregator\n    /// @param rewardOracle The address of price aggregator that follows IEACAggregatorProxy interface\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) external;\n\n    /// @param rewardsVault The address of the account that secures ERC20 rewards.\n    function setRewardsVault(address rewardsVault) external;\n\n    /// @param solidStaking Used to fetch the total amount staked and the stake of an user for a given asset\n    function setSolidStaking(address solidStaking) external;\n\n    /// @dev Get the price aggregator oracle address\n    /// @param reward The address of the reward\n    /// @return The price oracle of the reward\n    function getRewardOracle(address reward) external view returns (address);\n\n    /// @return Account that secures ERC20 rewards.\n    function getRewardsVault() external view returns (address);\n\n    /// @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\n    /// @param user The address of the user\n    /// @return The claimer address\n    function getClaimer(address user) external view returns (address);\n\n    /// @dev Configure assets to incentivize with an emission of rewards per second until the end of distribution.\n    /// @param config The assets configuration input, the list of structs contains the following fields:\n    ///   uint104 emissionPerSecond: The emission per second following rewards unit decimals.\n    ///   uint256 totalStaked: The total amount staked of the asset\n    ///   uint40 distributionEnd: The end of the distribution of the incentives for an asset\n    ///   address asset: The asset address to incentivize\n    ///   address reward: The reward token address\n    ///   IEACAggregatorProxy rewardOracle: The Price Oracle of a reward to visualize the incentives at the UI Frontend.\n    ///                                     Must follow Chainlink Aggregator IEACAggregatorProxy interface to be compatible.\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config) external;\n\n    /// @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\n    /// @param asset The incentivized asset address\n    /// @param user The address of the user whose asset balance has changed\n    /// @param oldUserStake The amount of assets staked by the user, prior to stake change\n    /// @param oldTotalStaked The total amount staked of the asset, prior to stake change\n    function handleUserStakeChanged(\n        address asset,\n        address user,\n        uint oldUserStake,\n        uint oldTotalStaked\n    ) external;\n\n    /// @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\n    /// @param to The address that will be receiving the rewards\n    /// @return rewardsList List of addresses of the reward tokens\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardList\"\n    function claimAllRewards(address[] calldata assets, address to)\n        external\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\n\n    /// @dev Claims all rewards for a user on behalf, on all the assets of the pool, accumulating the pending rewards. The caller must\n    /// be whitelisted via \"allowClaimOnBehalf\" function by the RewardsAdmin role manager\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\n    /// @param user The address to check and claim rewards\n    /// @param to The address that will be receiving the rewards\n    /// @return rewardsList List of addresses of the reward tokens\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n    function claimAllRewardsOnBehalf(\n        address[] calldata assets,\n        address user,\n        address to\n    ) external returns (address[] memory rewardsList, uint[] memory claimedAmounts);\n\n    /// @dev Claims all reward for msg.sender, on all the assets of the pool, accumulating the pending rewards\n    /// @param assets The list of assets to check eligible distributions before claiming rewards\n    /// @return rewardsList List of addresses of the reward tokens\n    /// @return claimedAmounts List that contains the claimed amount per reward, following same order as \"rewardsList\"\n    function claimAllRewardsToSelf(address[] calldata assets)\n        external\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts);\n}\n"
    },
    "contracts/interfaces/rewards/IEACAggregatorProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.7.6 <0.9.0;\n\ninterface IEACAggregatorProxy {\n    function decimals() external view returns (uint8);\n\n    function latestAnswer() external view returns (int);\n}\n"
    },
    "contracts/interfaces/rewards/IRewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title IRewardsDistributor\n/// @author Aave\n/// @notice Defines the basic interface for a Rewards Distributor.\ninterface IRewardsDistributor {\n    error NotEmissionManager(address sender);\n    error InvalidInput();\n    error InvalidAssetDecimals(address asset);\n    error IndexOverflow(uint newIndex);\n    error DistributionNonExistent(address asset, address reward);\n\n    /// @param asset The address of the incentivized asset\n    /// @param reward The address of the reward token\n    error UpdateDistributionNotApplicable(address asset, address reward);\n\n    /// @dev Emitted when the configuration of the rewards of an asset is updated.\n    /// @param asset The address of the incentivized asset\n    /// @param reward The address of the reward token\n    /// @param oldEmission The old emissions per second value of the reward distribution\n    /// @param newEmission The new emissions per second value of the reward distribution\n    /// @param oldDistributionEnd The old end timestamp of the reward distribution\n    /// @param newDistributionEnd The new end timestamp of the reward distribution\n    /// @param assetIndex The index of the asset distribution\n    event AssetConfigUpdated(\n        address indexed asset,\n        address indexed reward,\n        uint oldEmission,\n        uint newEmission,\n        uint oldDistributionEnd,\n        uint newDistributionEnd,\n        uint assetIndex\n    );\n\n    /// @dev Emitted when rewards of an asset are accrued on behalf of a user.\n    /// @param asset The address of the incentivized asset\n    /// @param reward The address of the reward token\n    /// @param user The address of the user that rewards are accrued on behalf of\n    /// @param assetIndex The index of the asset distribution\n    /// @param userIndex The index of the asset distribution on behalf of the user\n    /// @param rewardsAccrued The amount of rewards accrued\n    event Accrued(\n        address indexed asset,\n        address indexed reward,\n        address indexed user,\n        uint assetIndex,\n        uint userIndex,\n        uint rewardsAccrued\n    );\n\n    /// @dev Emitted when the emission manager address is updated.\n    /// @param oldEmissionManager The address of the old emission manager\n    /// @param newEmissionManager The address of the new emission manager\n    event EmissionManagerUpdated(\n        address indexed oldEmissionManager,\n        address indexed newEmissionManager\n    );\n\n    /// @dev Sets the end date for the distribution\n    /// @param asset The asset to incentivize\n    /// @param reward The reward token that incentives the asset\n    /// @param newDistributionEnd The end date of the incentivization, in unix time format\n    function setDistributionEnd(\n        address asset,\n        address reward,\n        uint32 newDistributionEnd\n    ) external;\n\n    /// @dev Sets the emission per second of a set of reward distributions\n    /// @param asset The asset is being incentivized\n    /// @param rewards List of reward addresses are being distributed\n    /// @param newEmissionsPerSecond List of new reward emissions per second\n    function setEmissionPerSecond(\n        address asset,\n        address[] calldata rewards,\n        uint88[] calldata newEmissionsPerSecond\n    ) external;\n\n    /// @dev Updates weekly reward distributions\n    /// @param assets List of incentivized assets getting updated\n    /// @param rewards List of reward tokens getting updated\n    /// @param rewardAmounts List of carbon reward amounts getting distributed\n    function updateCarbonRewardDistribution(\n        address[] calldata assets,\n        address[] calldata rewards,\n        uint[] calldata rewardAmounts\n    ) external;\n\n    /// @param asset The incentivized asset\n    /// @param reward The reward token of the incentivized asset\n    /// @return true, if distribution can be updated for the asset - reward pair\n    function canUpdateCarbonRewardDistribution(address asset, address reward)\n        external\n        view\n        returns (bool);\n\n    /// @dev Gets the end date for the distribution\n    /// @param asset The incentivized asset\n    /// @param reward The reward token of the incentivized asset\n    /// @return The timestamp with the end of the distribution, in unix time format\n    function getDistributionEnd(address asset, address reward) external view returns (uint);\n\n    /// @dev Returns the index of a user on a reward distribution\n    /// @param user Address of the user\n    /// @param asset The incentivized asset\n    /// @param reward The reward token of the incentivized asset\n    /// @return The current user asset index, not including new distributions\n    function getUserIndex(\n        address user,\n        address asset,\n        address reward\n    ) external view returns (uint);\n\n    /// @dev Returns the configuration of the distribution reward for a certain asset\n    /// @param asset The incentivized asset\n    /// @param reward The reward token of the incentivized asset\n    /// @return The index of the asset distribution\n    /// @return The emission per second of the reward distribution\n    /// @return The timestamp of the last update of the index\n    /// @return The timestamp of the distribution end\n    function getRewardDistribution(address asset, address reward)\n        external\n        view\n        returns (\n            uint,\n            uint,\n            uint,\n            uint\n        );\n\n    /// @dev Returns the list of available reward token addresses of an incentivized asset\n    /// @param asset The incentivized asset\n    /// @return List of rewards addresses of the input asset\n    function getRewardsByAsset(address asset) external view returns (address[] memory);\n\n    /// @dev Returns the list of available reward addresses\n    /// @return List of rewards supported in this contract\n    function getAllRewards() external view returns (address[] memory);\n\n    /// @dev Returns the accrued rewards balance of a user, not including virtually accrued rewards since last distribution.\n    /// @param user The address of the user\n    /// @param reward The address of the reward token\n    /// @return Unclaimed rewards, not including new distributions\n    function getAccruedRewardAmountForUser(address user, address reward)\n        external\n        view\n        returns (uint);\n\n    /// @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\n    /// @param assets List of incentivized assets to check eligible distributions\n    /// @param user The address of the user\n    /// @param reward The address of the reward token\n    /// @return The rewards amount\n    function getUnclaimedRewardAmountForUserAndAssets(\n        address[] calldata assets,\n        address user,\n        address reward\n    ) external view returns (uint);\n\n    /// @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\n    /// @param assets List of incentivized assets to check eligible distributions\n    /// @param user The address of the user\n    /// @return The list of reward addresses\n    /// @return The list of unclaimed amount of rewards\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\n        external\n        view\n        returns (address[] memory, uint[] memory);\n\n    /// @dev Returns the decimals of an asset to calculate the distribution delta\n    /// @param asset The address to retrieve decimals\n    /// @return The decimals of an underlying asset\n    function getAssetDecimals(address asset) external view returns (uint8);\n\n    /// @dev Returns the address of the emission manager\n    /// @return The address of the EmissionManager\n    function getEmissionManager() external view returns (address);\n\n    /// @dev Updates the address of the emission manager\n    /// @param emissionManager The address of the new EmissionManager\n    function setEmissionManager(address emissionManager) external;\n}\n"
    },
    "contracts/SolidStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/ISolidStaking.sol\";\nimport \"./interfaces/rewards/IRewardsController.sol\";\nimport \"./PostConstruct.sol\";\nimport \"./libraries/GPv2SafeERC20.sol\";\n\ncontract SolidStaking is ISolidStaking, ReentrancyGuard, Ownable, PostConstruct {\n    using GPv2SafeERC20 for IERC20;\n\n    /// @dev All stakable lp tokens.\n    address[] public tokens;\n\n    /// @dev Mapping with added tokens.\n    mapping(address => bool) public tokenAdded;\n\n    /// @dev Mapping with the staked amount of each account for each token.\n    /// @dev token => user => amount\n    mapping(address => mapping(address => uint)) public userStake;\n\n    /// @dev Main contract used for interacting with rewards mechanism.\n    IRewardsController public rewardsController;\n\n    modifier validToken(address token) {\n        if (!tokenAdded[token]) {\n            revert InvalidTokenAddress(token);\n        }\n        _;\n    }\n\n    function setup(IRewardsController _rewardsController, address owner) external postConstruct {\n        rewardsController = _rewardsController;\n        transferOwnership(owner);\n    }\n\n    /// @inheritdoc ISolidStakingOwnerActions\n    function addToken(address token) external override onlyOwner {\n        if (tokenAdded[token]) {\n            revert TokenAlreadyAdded(token);\n        }\n\n        tokens.push(token);\n        tokenAdded[token] = true;\n\n        emit TokenAdded(token);\n    }\n\n    /// @inheritdoc ISolidStakingActions\n    function stake(address token, uint amount) external override nonReentrant validToken(token) {\n        uint oldUserStake = _balanceOf(token, msg.sender);\n        uint oldTotalStake = _totalStaked(token);\n\n        userStake[token][msg.sender] = oldUserStake + amount;\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        rewardsController.handleUserStakeChanged(token, msg.sender, oldUserStake, oldTotalStake);\n\n        emit Stake(msg.sender, token, amount);\n    }\n\n    /// @inheritdoc ISolidStakingActions\n    function withdraw(address token, uint amount) external override nonReentrant validToken(token) {\n        _withdraw(token, amount);\n    }\n\n    /// @inheritdoc ISolidStakingActions\n    function withdrawStakeAndClaimRewards(address token, uint amount)\n        external\n        override\n        nonReentrant\n        validToken(token)\n    {\n        _withdraw(token, amount);\n        _claimRewards(token);\n    }\n\n    /// @inheritdoc ISolidStakingViewActions\n    function balanceOf(address token, address account)\n        external\n        view\n        override\n        validToken(token)\n        returns (uint)\n    {\n        return _balanceOf(token, account);\n    }\n\n    /// @inheritdoc ISolidStakingViewActions\n    function totalStaked(address token) external view override validToken(token) returns (uint) {\n        return _totalStaked(token);\n    }\n\n    /// @inheritdoc ISolidStakingViewActions\n    function getTokens() external view override returns (address[] memory _tokens) {\n        _tokens = tokens;\n    }\n\n    function _balanceOf(address token, address account) internal view returns (uint) {\n        return userStake[token][account];\n    }\n\n    function _totalStaked(address token) internal view returns (uint) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    function _withdraw(address token, uint amount) internal {\n        uint oldUserStake = _balanceOf(token, msg.sender);\n        uint oldTotalStake = _totalStaked(token);\n\n        userStake[token][msg.sender] = oldUserStake - amount;\n\n        IERC20(token).safeTransfer(msg.sender, amount);\n\n        rewardsController.handleUserStakeChanged(token, msg.sender, oldUserStake, oldTotalStake);\n\n        emit Withdraw(msg.sender, token, amount);\n    }\n\n    function _claimRewards(address token) internal {\n        address[] memory assets = new address[](1);\n        assets[0] = token;\n        rewardsController.claimAllRewardsOnBehalf(assets, msg.sender, msg.sender);\n    }\n}\n"
    },
    "contracts/interfaces/ISolidStaking.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"./staking/ISolidStakingOwnerActions.sol\";\nimport \"./staking/ISolidStakingEvents.sol\";\nimport \"./staking/ISolidStakingActions.sol\";\nimport \"./staking/ISolidStakingViewActions.sol\";\nimport \"./staking/ISolidStakingErrors.sol\";\n\n/// @title The interface for the Solid World staking contract\n/// @notice The staking contract facilitates (un)staking of ERC20 tokens\n/// @author Solid World DAO\n/// @dev The interface is broken up into smaller pieces\ninterface ISolidStaking is\n    ISolidStakingActions,\n    ISolidStakingEvents,\n    ISolidStakingOwnerActions,\n    ISolidStakingViewActions,\n    ISolidStakingErrors\n{\n\n}\n"
    },
    "contracts/interfaces/staking/ISolidStakingOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Permissioned staking actions\n/// @notice Contains staking methods may only be called by the owner\n/// @author Solid World DAO\ninterface ISolidStakingOwnerActions {\n    /// @dev Adds a new token to the staking contract\n    /// @param token the token to add\n    function addToken(address token) external;\n}\n"
    },
    "contracts/interfaces/staking/ISolidStakingEvents.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Events emitted by the staking contract\n/// @notice Contains all events emitted by the staking contract\n/// @author Solid World DAO\ninterface ISolidStakingEvents {\n    /// @dev Emitted when an account stakes tokens\n    /// @param account the account that staked tokens\n    /// @param token the token that was staked\n    /// @param amount the amount of tokens that were staked\n    event Stake(address indexed account, address indexed token, uint indexed amount);\n\n    /// @dev Emitted when an account un-stakes tokens\n    /// @param account the account that withdrew tokens\n    /// @param token the token that was withdrawn\n    /// @param amount the amount of tokens that were withdrawn\n    event Withdraw(address indexed account, address indexed token, uint indexed amount);\n\n    /// @dev Emitted when a new token is added to the staking contract\n    /// @param token the token that was added\n    event TokenAdded(address indexed token);\n}\n"
    },
    "contracts/interfaces/staking/ISolidStakingActions.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Permissionless state-mutating actions\n/// @notice Contains state-mutating functions that can be called by anyone\n/// @author Solid World DAO\ninterface ISolidStakingActions {\n    /// @dev Stakes tokens for the caller into the staking contract\n    /// @param token the token to stake\n    /// @param amount the amount to stake\n    function stake(address token, uint amount) external;\n\n    /// @dev Withdraws tokens for the caller from the staking contract\n    /// @param token the token to withdraw\n    /// @param amount the amount to withdraw\n    function withdraw(address token, uint amount) external;\n\n    /// @dev Withdraws tokens for the caller from the staking contract\n    /// @dev Claims all rewards of the incentivized `token` for the caller\n    /// @param token the token to withdraw\n    /// @param amount the amount to withdraw\n    function withdrawStakeAndClaimRewards(address token, uint amount) external;\n}\n"
    },
    "contracts/interfaces/staking/ISolidStakingViewActions.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Permissionless view actions\n/// @notice Contains view functions that can be called by anyone\n/// @author Solid World DAO\ninterface ISolidStakingViewActions {\n    /// @dev Computes the amount of tokens that the `account` has staked\n    /// @param token the token to check\n    /// @param account the account to check\n    /// @return the amount of `token` tokens that the `account` has staked\n    function balanceOf(address token, address account) external view returns (uint);\n\n    /// @dev Computes the total amount of tokens that have been staked\n    /// @param token the token to check\n    /// @return the total amount of `token` tokens that have been staked\n    function totalStaked(address token) external view returns (uint);\n\n    /// @dev Returns the list of tokens that can be staked\n    /// @return the list of tokens that can be staked\n    function getTokens() external view returns (address[] memory);\n}\n"
    },
    "contracts/interfaces/staking/ISolidStakingErrors.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\n/// @title Errors thrown by the staking contract\n/// @author Solid World DAO\ninterface ISolidStakingErrors {\n    error InvalidTokenAddress(address token);\n    error TokenAlreadyAdded(address token);\n}\n"
    },
    "contracts/rewards/RewardsDistributor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../interfaces/rewards/IRewardsDistributor.sol\";\nimport \"../libraries/RewardsDataTypes.sol\";\nimport \"../interfaces/staking/ISolidStakingViewActions.sol\";\n\nabstract contract RewardsDistributor is IRewardsDistributor {\n    using SafeCast for uint;\n\n    // asset => AssetData\n    mapping(address => RewardsDataTypes.AssetData) internal _assetData;\n    // reward => enabled\n    mapping(address => bool) internal _isRewardEnabled;\n\n    address[] internal _rewardsList;\n    address[] internal _assetsList;\n    address internal _emissionManager;\n\n    /// @dev Used to fetch the total amount staked and the stake of an user for a given asset\n    ISolidStakingViewActions public solidStakingViewActions;\n\n    modifier onlyEmissionManager() {\n        if (msg.sender != _emissionManager) {\n            revert NotEmissionManager(msg.sender);\n        }\n        _;\n    }\n\n    modifier distributionExists(address asset, address reward) {\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset]\n            .rewardDistribution[reward];\n        uint decimals = _assetData[asset].decimals;\n        if (decimals == 0 || rewardDistribution.lastUpdateTimestamp == 0) {\n            revert DistributionNonExistent(asset, reward);\n        }\n        _;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getRewardDistribution(address asset, address reward)\n        public\n        view\n        override\n        returns (\n            uint,\n            uint,\n            uint,\n            uint\n        )\n    {\n        return (\n            _assetData[asset].rewardDistribution[reward].index,\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\n            _assetData[asset].rewardDistribution[reward].lastUpdateTimestamp,\n            _assetData[asset].rewardDistribution[reward].distributionEnd\n        );\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getDistributionEnd(address asset, address reward)\n        external\n        view\n        override\n        returns (uint)\n    {\n        return _assetData[asset].rewardDistribution[reward].distributionEnd;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getRewardsByAsset(address asset) external view override returns (address[] memory) {\n        uint128 rewardsCount = _assetData[asset].availableRewardsCount;\n        address[] memory rewards = new address[](rewardsCount);\n\n        for (uint128 i; i < rewardsCount; i++) {\n            rewards[i] = _assetData[asset].availableRewards[i];\n        }\n        return rewards;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getAllRewards() external view override returns (address[] memory) {\n        return _rewardsList;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getUserIndex(\n        address user,\n        address asset,\n        address reward\n    ) public view override returns (uint) {\n        return _assetData[asset].rewardDistribution[reward].userReward[user].index;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getAccruedRewardAmountForUser(address user, address reward)\n        external\n        view\n        override\n        returns (uint)\n    {\n        uint totalAccrued;\n        for (uint i; i < _assetsList.length; i++) {\n            totalAccrued += _assetData[_assetsList[i]]\n                .rewardDistribution[reward]\n                .userReward[user]\n                .accrued;\n        }\n\n        return totalAccrued;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getUnclaimedRewardAmountForUserAndAssets(\n        address[] calldata assets,\n        address user,\n        address reward\n    ) external view override returns (uint unclaimedAmount) {\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts = _getAssetStakedAmounts(\n            assets,\n            user\n        );\n\n        for (uint i; i < assetStakedAmounts.length; i++) {\n            if (assetStakedAmounts[i].userStake == 0) {\n                unclaimedAmount += _assetData[assetStakedAmounts[i].asset]\n                    .rewardDistribution[reward]\n                    .userReward[user]\n                    .accrued;\n            } else {\n                unclaimedAmount +=\n                    _computePendingRewardAmountForUser(user, reward, assetStakedAmounts[i]) +\n                    _assetData[assetStakedAmounts[i].asset]\n                        .rewardDistribution[reward]\n                        .userReward[user]\n                        .accrued;\n            }\n        }\n\n        return unclaimedAmount;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getAllUnclaimedRewardAmountsForUserAndAssets(address[] calldata assets, address user)\n        external\n        view\n        override\n        returns (address[] memory rewardsList, uint[] memory unclaimedAmounts)\n    {\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts = _getAssetStakedAmounts(\n            assets,\n            user\n        );\n        rewardsList = new address[](_rewardsList.length);\n        unclaimedAmounts = new uint[](rewardsList.length);\n\n        for (uint i; i < assetStakedAmounts.length; i++) {\n            for (uint r; r < rewardsList.length; r++) {\n                rewardsList[r] = _rewardsList[r];\n                unclaimedAmounts[r] += _assetData[assetStakedAmounts[i].asset]\n                    .rewardDistribution[rewardsList[r]]\n                    .userReward[user]\n                    .accrued;\n\n                if (assetStakedAmounts[i].userStake == 0) {\n                    continue;\n                }\n                unclaimedAmounts[r] += _computePendingRewardAmountForUser(\n                    user,\n                    rewardsList[r],\n                    assetStakedAmounts[i]\n                );\n            }\n        }\n        return (rewardsList, unclaimedAmounts);\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function setDistributionEnd(\n        address asset,\n        address reward,\n        uint32 newDistributionEnd\n    ) external override onlyEmissionManager distributionExists(asset, reward) {\n        uint oldDistributionEnd = _setDistributionEnd(asset, reward, newDistributionEnd);\n        uint index = _assetData[asset].rewardDistribution[reward].index;\n\n        emit AssetConfigUpdated(\n            asset,\n            reward,\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\n            _assetData[asset].rewardDistribution[reward].emissionPerSecond,\n            oldDistributionEnd,\n            newDistributionEnd,\n            index\n        );\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function setEmissionPerSecond(\n        address asset,\n        address[] calldata rewards,\n        uint88[] calldata newEmissionsPerSecond\n    ) external override onlyEmissionManager {\n        if (rewards.length != newEmissionsPerSecond.length) {\n            revert InvalidInput();\n        }\n\n        for (uint i; i < rewards.length; i++) {\n            (\n                uint oldEmissionPerSecond,\n                uint newIndex,\n                uint distributionEnd\n            ) = _setEmissionPerSecond(asset, rewards[i], newEmissionsPerSecond[i]);\n\n            emit AssetConfigUpdated(\n                asset,\n                rewards[i],\n                oldEmissionPerSecond,\n                newEmissionsPerSecond[i],\n                distributionEnd,\n                distributionEnd,\n                newIndex\n            );\n        }\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function updateCarbonRewardDistribution(\n        address[] calldata assets,\n        address[] calldata rewards,\n        uint[] calldata rewardAmounts\n    ) external override onlyEmissionManager {\n        if (assets.length != rewards.length || rewards.length != rewardAmounts.length) {\n            revert InvalidInput();\n        }\n\n        for (uint i; i < assets.length; i++) {\n            if (!_canUpdateCarbonRewardDistribution(assets[i], rewards[i])) {\n                revert UpdateDistributionNotApplicable(assets[i], rewards[i]);\n            }\n\n            uint32 newDistributionEnd = _computeNewCarbonRewardDistributionEnd(\n                assets[i],\n                rewards[i]\n            );\n            uint88 newEmissionsPerSecond = uint88(\n                rewardAmounts[i] / (newDistributionEnd - block.timestamp)\n            );\n\n            (uint oldEmissionPerSecond, uint newIndex, ) = _setEmissionPerSecond(\n                assets[i],\n                rewards[i],\n                newEmissionsPerSecond\n            );\n            uint oldDistributionEnd = _setDistributionEnd(\n                assets[i],\n                rewards[i],\n                newDistributionEnd\n            );\n            emit AssetConfigUpdated(\n                assets[i],\n                rewards[i],\n                oldEmissionPerSecond,\n                newEmissionsPerSecond,\n                oldDistributionEnd,\n                newDistributionEnd,\n                newIndex\n            );\n        }\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getAssetDecimals(address asset) external view returns (uint8) {\n        return _assetData[asset].decimals;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function getEmissionManager() external view returns (address) {\n        return _emissionManager;\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function setEmissionManager(address emissionManager) external onlyEmissionManager {\n        _setEmissionManager(emissionManager);\n    }\n\n    /// @inheritdoc IRewardsDistributor\n    function canUpdateCarbonRewardDistribution(address asset, address reward)\n        external\n        view\n        distributionExists(asset, reward)\n        returns (bool)\n    {\n        return _canUpdateCarbonRewardDistribution(asset, reward);\n    }\n\n    function _canUpdateCarbonRewardDistribution(address asset, address reward)\n        internal\n        view\n        returns (bool)\n    {\n        uint32 currentDistributionEnd = _assetData[asset]\n            .rewardDistribution[reward]\n            .distributionEnd;\n        uint32 nextDistributionEnd = _computeNewCarbonRewardDistributionEnd(asset, reward);\n\n        bool isInitializedDistribution = currentDistributionEnd != 0;\n        bool isBetweenDistributions = block.timestamp >= currentDistributionEnd &&\n            block.timestamp < nextDistributionEnd;\n\n        return isInitializedDistribution && isBetweenDistributions;\n    }\n\n    function _computeNewCarbonRewardDistributionEnd(address asset, address reward)\n        internal\n        view\n        returns (uint32 newDistributionEnd)\n    {\n        uint32 currentDistributionEnd = _assetData[asset]\n            .rewardDistribution[reward]\n            .distributionEnd;\n\n        newDistributionEnd = currentDistributionEnd + 1 weeks;\n    }\n\n    /// @dev Configure the _assetData for a specific emission\n    /// @param distributionConfig The array of each asset configuration\n    function _configureAssets(RewardsDataTypes.DistributionConfig[] memory distributionConfig)\n        internal\n    {\n        for (uint i; i < distributionConfig.length; i++) {\n            uint8 decimals = IERC20Metadata(distributionConfig[i].asset).decimals();\n\n            if (decimals == 0) {\n                revert InvalidAssetDecimals(distributionConfig[i].asset);\n            }\n\n            if (_assetData[distributionConfig[i].asset].decimals == 0) {\n                _assetsList.push(distributionConfig[i].asset);\n            }\n\n            _assetData[distributionConfig[i].asset].decimals = decimals;\n\n            RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[\n                distributionConfig[i].asset\n            ].rewardDistribution[distributionConfig[i].reward];\n\n            if (rewardDistribution.lastUpdateTimestamp == 0) {\n                uint128 rewardCount = _assetData[distributionConfig[i].asset].availableRewardsCount;\n                _assetData[distributionConfig[i].asset].availableRewards[\n                    rewardCount\n                ] = distributionConfig[i].reward;\n                _assetData[distributionConfig[i].asset].availableRewardsCount++;\n            }\n\n            if (_isRewardEnabled[distributionConfig[i].reward] == false) {\n                _isRewardEnabled[distributionConfig[i].reward] = true;\n                _rewardsList.push(distributionConfig[i].reward);\n            }\n\n            (uint newAssetIndex, ) = _updateRewardDistribution(\n                rewardDistribution,\n                distributionConfig[i].totalStaked,\n                10**decimals\n            );\n\n            uint88 oldEmissionsPerSecond = rewardDistribution.emissionPerSecond;\n            uint32 oldDistributionEnd = rewardDistribution.distributionEnd;\n            rewardDistribution.emissionPerSecond = distributionConfig[i].emissionPerSecond;\n            rewardDistribution.distributionEnd = distributionConfig[i].distributionEnd;\n\n            emit AssetConfigUpdated(\n                distributionConfig[i].asset,\n                distributionConfig[i].reward,\n                oldEmissionsPerSecond,\n                distributionConfig[i].emissionPerSecond,\n                oldDistributionEnd,\n                distributionConfig[i].distributionEnd,\n                newAssetIndex\n            );\n        }\n    }\n\n    /// @dev Updates rewards distribution and user rewards for all rewards configured for the specified assets\n    /// @param user The address of the user\n    /// @param assetStakedAmounts List of structs with the user stake and total staked of a set of assets\n    function _updateAllRewardDistributionsAndUserRewardsForAssets(\n        address user,\n        RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts\n    ) internal {\n        for (uint i; i < assetStakedAmounts.length; i++) {\n            _updateAllRewardDistributionsAndUserRewardsForAsset(\n                assetStakedAmounts[i].asset,\n                user,\n                assetStakedAmounts[i].userStake,\n                assetStakedAmounts[i].totalStaked\n            );\n        }\n    }\n\n    /// @dev Updates rewards distribution and user rewards for all rewards configured for the specified asset\n    /// @dev When call origin is (un)staking, `userStake` and `totalStaked` are prior to the (un)stake action\n    /// @dev When call origin is rewards claiming, `userStake` and `totalStaked` are current values\n    /// @param asset The address of the incentivized asset\n    /// @param user The user address\n    /// @param userStake The amount of assets staked by the user\n    /// @param totalStaked The total amount staked of the asset\n    function _updateAllRewardDistributionsAndUserRewardsForAsset(\n        address asset,\n        address user,\n        uint userStake,\n        uint totalStaked\n    ) internal {\n        uint assetUnit;\n        uint numAvailableRewards = _assetData[asset].availableRewardsCount;\n        unchecked {\n            assetUnit = 10**_assetData[asset].decimals;\n        }\n\n        if (numAvailableRewards == 0) {\n            return;\n        }\n        unchecked {\n            for (uint128 r; r < numAvailableRewards; r++) {\n                address reward = _assetData[asset].availableRewards[r];\n                RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset]\n                    .rewardDistribution[reward];\n\n                (uint newAssetIndex, bool rewardDistributionUpdated) = _updateRewardDistribution(\n                    rewardDistribution,\n                    totalStaked,\n                    assetUnit\n                );\n\n                (uint rewardsAccrued, bool userRewardUpdated) = _updateUserReward(\n                    rewardDistribution,\n                    user,\n                    userStake,\n                    newAssetIndex,\n                    assetUnit\n                );\n\n                if (rewardDistributionUpdated || userRewardUpdated) {\n                    emit Accrued(asset, reward, user, newAssetIndex, newAssetIndex, rewardsAccrued);\n                }\n            }\n        }\n    }\n\n    /// @dev Updates the state of the distribution for the specified reward\n    /// @param rewardDistribution Storage pointer to the distribution reward config\n    /// @param totalStaked The total amount staked of the asset\n    /// @param assetUnit One unit of asset (10**decimals)\n    /// @return The new distribution index\n    /// @return True if the index was updated, false otherwise\n    function _updateRewardDistribution(\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\n        uint totalStaked,\n        uint assetUnit\n    ) internal returns (uint, bool) {\n        (uint oldIndex, uint newIndex) = _computeNewAssetIndex(\n            rewardDistribution,\n            totalStaked,\n            assetUnit\n        );\n        bool indexUpdated;\n        if (newIndex != oldIndex) {\n            if (newIndex > type(uint104).max) {\n                revert IndexOverflow(newIndex);\n            }\n\n            indexUpdated = true;\n\n            rewardDistribution.index = uint104(newIndex);\n            rewardDistribution.lastUpdateTimestamp = block.timestamp.toUint32();\n        } else {\n            rewardDistribution.lastUpdateTimestamp = block.timestamp.toUint32();\n        }\n\n        return (newIndex, indexUpdated);\n    }\n\n    /// @dev Updates the state of the distribution for the specific user\n    /// @param rewardDistribution Storage pointer to the distribution reward config\n    /// @param user The address of the user\n    /// @param userStake The amount of assets staked by the user\n    /// @param newAssetIndex The new index of the asset distribution\n    /// @param assetUnit One unit of asset (10**decimals)\n    /// @return The rewards accrued since the last update\n    function _updateUserReward(\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\n        address user,\n        uint userStake,\n        uint newAssetIndex,\n        uint assetUnit\n    ) internal returns (uint, bool) {\n        uint userIndex = rewardDistribution.userReward[user].index;\n        uint rewardsAccrued;\n        bool dataUpdated;\n        if ((dataUpdated = userIndex != newAssetIndex)) {\n            if (newAssetIndex > type(uint104).max) {\n                revert IndexOverflow(newAssetIndex);\n            }\n\n            rewardDistribution.userReward[user].index = uint104(newAssetIndex);\n            if (userStake != 0) {\n                rewardsAccrued = _computeAccruedRewardAmount(\n                    userStake,\n                    newAssetIndex,\n                    userIndex,\n                    assetUnit\n                );\n\n                rewardDistribution.userReward[user].accrued += rewardsAccrued.toUint128();\n            }\n        }\n        return (rewardsAccrued, dataUpdated);\n    }\n\n    /// @dev Calculates the pending (not yet accrued) reward amount since the last user action\n    /// @param user The address of the user\n    /// @param reward The address of the reward token\n    /// @param assetStakedAmounts struct with the user stake and total staked of the incentivized asset\n    /// @return The pending rewards for the user since the last user action\n    function _computePendingRewardAmountForUser(\n        address user,\n        address reward,\n        RewardsDataTypes.AssetStakedAmounts memory assetStakedAmounts\n    ) internal view returns (uint) {\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[\n            assetStakedAmounts.asset\n        ].rewardDistribution[reward];\n        uint assetUnit = 10**_assetData[assetStakedAmounts.asset].decimals;\n        (, uint nextIndex) = _computeNewAssetIndex(\n            rewardDistribution,\n            assetStakedAmounts.totalStaked,\n            assetUnit\n        );\n\n        return\n            _computeAccruedRewardAmount(\n                assetStakedAmounts.userStake,\n                nextIndex,\n                rewardDistribution.userReward[user].index,\n                assetUnit\n            );\n    }\n\n    /// @dev Internal function for the calculation of user's rewards on a distribution\n    /// @param userStake The amount of assets staked by the user on a distribution\n    /// @param assetIndex Current index of the asset reward distribution\n    /// @param userIndex Index stored for the user, representing his staking moment\n    /// @param assetUnit One unit of asset (10**decimals)\n    /// @return accruedRewardAmount The accrued reward amount\n    function _computeAccruedRewardAmount(\n        uint userStake,\n        uint assetIndex,\n        uint userIndex,\n        uint assetUnit\n    ) internal pure returns (uint accruedRewardAmount) {\n        accruedRewardAmount = userStake * (assetIndex - userIndex);\n\n        assembly {\n            accruedRewardAmount := div(accruedRewardAmount, assetUnit)\n        }\n    }\n\n    /// @dev Calculates the next value of an specific distribution index, with validations\n    /// @param totalStaked The total amount staked of the asset\n    /// @param assetUnit One unit of asset (10**decimals)\n    /// @return The new index.\n    function _computeNewAssetIndex(\n        RewardsDataTypes.RewardDistribution storage rewardDistribution,\n        uint totalStaked,\n        uint assetUnit\n    ) internal view returns (uint, uint) {\n        uint oldIndex = rewardDistribution.index;\n        uint distributionEnd = rewardDistribution.distributionEnd;\n        uint emissionPerSecond = rewardDistribution.emissionPerSecond;\n        uint lastUpdateTimestamp = rewardDistribution.lastUpdateTimestamp;\n\n        if (\n            emissionPerSecond == 0 ||\n            totalStaked == 0 ||\n            lastUpdateTimestamp == block.timestamp ||\n            lastUpdateTimestamp >= distributionEnd\n        ) {\n            return (oldIndex, oldIndex);\n        }\n\n        uint currentTimestamp = block.timestamp > distributionEnd\n            ? distributionEnd\n            : block.timestamp;\n        uint timeDelta = currentTimestamp - lastUpdateTimestamp;\n        uint firstTerm = emissionPerSecond * timeDelta * assetUnit;\n        assembly {\n            firstTerm := div(firstTerm, totalStaked)\n        }\n        return (oldIndex, (firstTerm + oldIndex));\n    }\n\n    /// @dev Get user stake and total staked of all the assets specified by the assets parameter\n    /// @param assets List of assets to retrieve user stake and total staked\n    /// @param user Address of the user\n    /// @return assetStakedAmounts contains a list of structs with user stake and total staked of the given assets\n    function _getAssetStakedAmounts(address[] calldata assets, address user)\n        internal\n        view\n        virtual\n        returns (RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts);\n\n    /// @dev Updates the address of the emission manager\n    /// @param emissionManager The address of the new EmissionManager\n    function _setEmissionManager(address emissionManager) internal {\n        address previousEmissionManager = _emissionManager;\n        _emissionManager = emissionManager;\n        emit EmissionManagerUpdated(previousEmissionManager, emissionManager);\n    }\n\n    function _setEmissionPerSecond(\n        address asset,\n        address reward,\n        uint88 newEmissionsPerSecond\n    )\n        internal\n        returns (\n            uint oldEmissionPerSecond,\n            uint newIndex,\n            uint distributionEnd\n        )\n    {\n        RewardsDataTypes.AssetData storage assetConfig = _assetData[asset];\n        RewardsDataTypes.RewardDistribution storage rewardDistribution = _assetData[asset]\n            .rewardDistribution[reward];\n        uint decimals = assetConfig.decimals;\n        if (decimals == 0 || rewardDistribution.lastUpdateTimestamp == 0) {\n            revert DistributionNonExistent(asset, reward);\n        }\n\n        distributionEnd = rewardDistribution.distributionEnd;\n\n        (newIndex, ) = _updateRewardDistribution(\n            rewardDistribution,\n            solidStakingViewActions.totalStaked(asset),\n            10**decimals\n        );\n\n        oldEmissionPerSecond = rewardDistribution.emissionPerSecond;\n        rewardDistribution.emissionPerSecond = newEmissionsPerSecond;\n    }\n\n    function _setDistributionEnd(\n        address asset,\n        address reward,\n        uint32 newDistributionEnd\n    ) internal returns (uint oldDistributionEnd) {\n        oldDistributionEnd = _assetData[asset].rewardDistribution[reward].distributionEnd;\n        _assetData[asset].rewardDistribution[reward].distributionEnd = newDistributionEnd;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248) {\n        require(value >= type(int248).min && value <= type(int248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return int248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240) {\n        require(value >= type(int240).min && value <= type(int240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return int240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232) {\n        require(value >= type(int232).min && value <= type(int232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return int232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224) {\n        require(value >= type(int224).min && value <= type(int224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return int224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216) {\n        require(value >= type(int216).min && value <= type(int216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return int216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208) {\n        require(value >= type(int208).min && value <= type(int208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return int208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200) {\n        require(value >= type(int200).min && value <= type(int200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return int200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192) {\n        require(value >= type(int192).min && value <= type(int192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return int192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184) {\n        require(value >= type(int184).min && value <= type(int184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return int184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176) {\n        require(value >= type(int176).min && value <= type(int176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return int176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168) {\n        require(value >= type(int168).min && value <= type(int168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return int168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160) {\n        require(value >= type(int160).min && value <= type(int160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return int160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152) {\n        require(value >= type(int152).min && value <= type(int152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return int152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144) {\n        require(value >= type(int144).min && value <= type(int144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return int144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136) {\n        require(value >= type(int136).min && value <= type(int136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return int136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120) {\n        require(value >= type(int120).min && value <= type(int120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return int120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112) {\n        require(value >= type(int112).min && value <= type(int112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return int112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104) {\n        require(value >= type(int104).min && value <= type(int104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return int104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96) {\n        require(value >= type(int96).min && value <= type(int96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return int96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88) {\n        require(value >= type(int88).min && value <= type(int88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return int88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80) {\n        require(value >= type(int80).min && value <= type(int80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return int80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72) {\n        require(value >= type(int72).min && value <= type(int72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return int72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56) {\n        require(value >= type(int56).min && value <= type(int56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return int56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48) {\n        require(value >= type(int48).min && value <= type(int48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return int48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40) {\n        require(value >= type(int40).min && value <= type(int40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return int40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24) {\n        require(value >= type(int24).min && value <= type(int24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return int24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/rewards/RewardsController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"./RewardsDistributor.sol\";\nimport \"../interfaces/rewards/IRewardsController.sol\";\nimport \"../PostConstruct.sol\";\nimport \"../libraries/GPv2SafeERC20.sol\";\n\ncontract RewardsController is IRewardsController, RewardsDistributor, PostConstruct {\n    /// @dev user => claimer\n    mapping(address => address) internal _authorizedClaimers;\n\n    /// @dev reward => rewardOracle\n    mapping(address => IEACAggregatorProxy) internal _rewardOracle;\n\n    /// @dev Account that secures ERC20 rewards.\n    /// @dev It must approve `RewardsController` to spend the rewards it holds.\n    address internal REWARDS_VAULT;\n\n    modifier onlyAuthorizedClaimers(address claimer, address user) {\n        if (_authorizedClaimers[user] != claimer && address(solidStakingViewActions) != claimer) {\n            revert UnauthorizedClaimer(claimer, user);\n        }\n        _;\n    }\n\n    function setup(\n        ISolidStakingViewActions _solidStakingViewActions,\n        address rewardsVault,\n        address emissionManager\n    ) external postConstruct {\n        solidStakingViewActions = _solidStakingViewActions;\n        REWARDS_VAULT = rewardsVault;\n        _setEmissionManager(emissionManager);\n    }\n\n    /// @inheritdoc IRewardsController\n    function getRewardsVault() external view override returns (address) {\n        return REWARDS_VAULT;\n    }\n\n    /// @inheritdoc IRewardsController\n    function getClaimer(address user) external view override returns (address) {\n        return _authorizedClaimers[user];\n    }\n\n    /// @inheritdoc IRewardsController\n    function getRewardOracle(address reward) external view override returns (address) {\n        return address(_rewardOracle[reward]);\n    }\n\n    /// @inheritdoc IRewardsController\n    function configureAssets(RewardsDataTypes.DistributionConfig[] memory config)\n        external\n        override\n        onlyEmissionManager\n    {\n        for (uint i; i < config.length; i++) {\n            config[i].totalStaked = solidStakingViewActions.totalStaked(config[i].asset);\n            _setRewardOracle(config[i].reward, config[i].rewardOracle);\n        }\n        _configureAssets(config);\n    }\n\n    /// @inheritdoc IRewardsController\n    function setRewardOracle(address reward, IEACAggregatorProxy rewardOracle)\n        external\n        onlyEmissionManager\n    {\n        _setRewardOracle(reward, rewardOracle);\n    }\n\n    /// @inheritdoc IRewardsController\n    function setClaimer(address user, address caller) external override onlyEmissionManager {\n        _authorizedClaimers[user] = caller;\n        emit ClaimerSet(user, caller);\n    }\n\n    /// @inheritdoc IRewardsController\n    function setRewardsVault(address rewardsVault) external override onlyEmissionManager {\n        REWARDS_VAULT = rewardsVault;\n        emit RewardsVaultUpdated(rewardsVault);\n    }\n\n    function setSolidStaking(address solidStaking) external override onlyEmissionManager {\n        solidStakingViewActions = ISolidStakingViewActions(solidStaking);\n        emit SolidStakingUpdated(solidStaking);\n    }\n\n    /// @inheritdoc IRewardsController\n    function handleUserStakeChanged(\n        address asset,\n        address user,\n        uint oldUserStake,\n        uint oldTotalStaked\n    ) external override {\n        if (msg.sender != address(solidStakingViewActions)) {\n            revert NotSolidStaking(msg.sender);\n        }\n\n        _updateAllRewardDistributionsAndUserRewardsForAsset(\n            asset,\n            user,\n            oldUserStake,\n            oldTotalStaked\n        );\n    }\n\n    /// @inheritdoc IRewardsController\n    function claimAllRewards(address[] calldata assets, address to)\n        external\n        override\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\n    {\n        if (to == address(0)) {\n            revert InvalidInput();\n        }\n\n        return _claimAllRewards(assets, msg.sender, msg.sender, to);\n    }\n\n    /// @inheritdoc IRewardsController\n    function claimAllRewardsOnBehalf(\n        address[] calldata assets,\n        address user,\n        address to\n    )\n        external\n        override\n        onlyAuthorizedClaimers(msg.sender, user)\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\n    {\n        if (to == address(0) || user == address(0)) {\n            revert InvalidInput();\n        }\n\n        return _claimAllRewards(assets, msg.sender, user, to);\n    }\n\n    /// @inheritdoc IRewardsController\n    function claimAllRewardsToSelf(address[] calldata assets)\n        external\n        override\n        returns (address[] memory rewardsList, uint[] memory claimedAmounts)\n    {\n        return _claimAllRewards(assets, msg.sender, msg.sender, msg.sender);\n    }\n\n    /// @inheritdoc RewardsDistributor\n    function _getAssetStakedAmounts(address[] calldata assets, address user)\n        internal\n        view\n        override\n        returns (RewardsDataTypes.AssetStakedAmounts[] memory assetStakedAmounts)\n    {\n        assetStakedAmounts = new RewardsDataTypes.AssetStakedAmounts[](assets.length);\n        for (uint i; i < assets.length; i++) {\n            assetStakedAmounts[i].asset = assets[i];\n            assetStakedAmounts[i].userStake = solidStakingViewActions.balanceOf(assets[i], user);\n            assetStakedAmounts[i].totalStaked = solidStakingViewActions.totalStaked(assets[i]);\n        }\n        return assetStakedAmounts;\n    }\n\n    /// @dev Claims all accrued rewards for a user on behalf, for the specified asset, accumulating the pending rewards.\n    /// @param assets List of assets to check eligible distributions before claiming rewards\n    /// @param claimer Address of the claimer on behalf of user\n    /// @param user Address to check and claim rewards\n    /// @param to Address that will be receiving the rewards\n    /// @return\n    ///   rewardsList List of reward addresses\n    ///   claimedAmount List of claimed amounts, follows \"rewardsList\" items order\n    function _claimAllRewards(\n        address[] calldata assets,\n        address claimer,\n        address user,\n        address to\n    ) internal returns (address[] memory rewardsList, uint[] memory claimedAmounts) {\n        uint rewardsListLength = _rewardsList.length;\n        rewardsList = new address[](rewardsListLength);\n        claimedAmounts = new uint[](rewardsListLength);\n\n        _updateAllRewardDistributionsAndUserRewardsForAssets(\n            user,\n            _getAssetStakedAmounts(assets, user)\n        );\n\n        for (uint i; i < assets.length; i++) {\n            address asset = assets[i];\n            for (uint j; j < rewardsListLength; j++) {\n                if (rewardsList[j] == address(0)) {\n                    rewardsList[j] = _rewardsList[j];\n                }\n                uint rewardAmount = _assetData[asset]\n                    .rewardDistribution[rewardsList[j]]\n                    .userReward[user]\n                    .accrued;\n                if (rewardAmount != 0) {\n                    claimedAmounts[j] += rewardAmount;\n                    _assetData[asset]\n                        .rewardDistribution[rewardsList[j]]\n                        .userReward[user]\n                        .accrued = 0;\n                }\n            }\n        }\n        for (uint i; i < rewardsListLength; i++) {\n            _transferRewards(to, rewardsList[i], claimedAmounts[i]);\n            emit RewardsClaimed(user, rewardsList[i], to, claimer, claimedAmounts[i]);\n        }\n        return (rewardsList, claimedAmounts);\n    }\n\n    /// @dev Function to transfer rewards to the desired account\n    /// @param to Account address to send the rewards\n    /// @param reward Address of the reward token\n    /// @param amount Amount of rewards to transfer\n    function _transferRewards(\n        address to,\n        address reward,\n        uint amount\n    ) internal {\n        GPv2SafeERC20.safeTransferFrom(IERC20(reward), REWARDS_VAULT, to, amount);\n    }\n\n    /// @dev Update the Price Oracle of a reward token. The Price Oracle must follow Chainlink IEACAggregatorProxy interface.\n    /// @notice The Price Oracle of a reward is used for displaying correct data about the incentives at the UI frontend.\n    /// @param reward The address of the reward token\n    /// @param rewardOracle The address of the price oracle\n    function _setRewardOracle(address reward, IEACAggregatorProxy rewardOracle) internal {\n        if (rewardOracle.latestAnswer() <= 0) {\n            revert InvalidRewardOracle(reward, address(rewardOracle));\n        }\n\n        _rewardOracle[reward] = rewardOracle;\n        emit RewardOracleUpdated(reward, address(rewardOracle));\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/interfaces/ICollateralizedBasketToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\ninterface ICollateralizedBasketToken is IERC20Metadata {\n    function mint(address account_, uint amount_) external;\n\n    function burn(uint amount) external;\n\n    function burnFrom(address account_, uint amount_) external;\n}\n"
    },
    "contracts/mocks/MockUniswapV3Factory.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\ncontract MockUniswapV3Factory {\n    address public immutable pool;\n\n    constructor(address _pool) {\n        pool = _pool;\n    }\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address) {\n        return pool;\n    }\n}\n"
    },
    "contracts/mocks/MockUniswapV3Pool.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.16;\n\ncontract MockUniswapV3Pool {\n    function observe(uint32[] calldata)\n        external\n        pure\n        returns (\n            int56[] memory tickCumulatives,\n            uint160[] memory secondsPerLiquidityCumulativeX128s\n        )\n    {\n        tickCumulatives = new int56[](2);\n        tickCumulatives[0] = 0;\n        tickCumulatives[1] = 300;\n\n        secondsPerLiquidityCumulativeX128s = new uint160[](2);\n        secondsPerLiquidityCumulativeX128s[0] = 100;\n        secondsPerLiquidityCumulativeX128s[1] = 200;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}